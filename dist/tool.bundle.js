import require$$0$1 from 'node:crypto';

/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED$1               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN$1             = 2;

/*============================================================================*/


function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH$1    = 3;
const MAX_MATCH$1    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES$1  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS$1      = 256;
/* number of literal bytes 0..255 */

const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES$1       = 30;
/* number of distance codes */

const BL_CODES$1      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
/* maximum heap size */

const MAX_BITS$1      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES$1);
zero$1(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES$1);
zero$1(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */

  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Tracev((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) => {
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */

  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    code = (code + bl_count[bits - 1]) << 1;
    next_code[bits] = code;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) => {
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */

  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) => {
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */

  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let sx = 0;         /* running index in sym_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and sym_buf is ok: */
      //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

    } while (sx < s.sym_next);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */

  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */

  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let block_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("block-listed") bytes. */
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("allow-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init$1 = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block$1 = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  bi_windup(s);        /* align on byte boundary */
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align$1 = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */
const _tr_flush_block$1 = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->sym_next / 3));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block$1(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally$1 = (s, dist, lc) => {
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

  return (s.sym_next === s.sym_end);
};

var _tr_init_1  = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1  = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;

var trees = {
	_tr_init: _tr_init_1,
	_tr_stored_block: _tr_stored_block_1,
	_tr_flush_block: _tr_flush_block_1,
	_tr_tally: _tr_tally_1,
	_tr_align: _tr_align_1
};

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


var adler32_1 = adler32;

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


var crc32_1 = crc32;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants$2 = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_BUF_ERROR:       -5,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_UNKNOWN,
  Z_DEFLATED: Z_DEFLATED$2
} = constants$2;

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS$1 = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS      = 256;
/* number of literal bytes 0..255 */
const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES       = 30;
/* number of distance codes */
const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
const MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

const PRESET_DICT = 0x20;

const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
//#ifdef GZIP
const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
//#endif
const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
const FINISH_STATE  = 666;    /* stream complete */

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) * 2) - ((f) > 4 ? 9 : 0);
};

const zero = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};

/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */
const slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;

  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = (m >= wsize ? m - wsize : 0);
  } while (--n);
  n = wsize;
//#ifndef FASTEST
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = (m >= wsize ? m - wsize : 0);
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */
  } while (--n);
//#endif
};

/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out  += len;
  s.pending_out  += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending      -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let n, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */
const deflate_stored = (s, flush) => {

  /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

  /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */
    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    if (s.strm.avail_out < have) {         /* need room for header */
      break;
    }
      /* maximum stored block length that will fit in avail_out: */
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;  /* bytes left in window */
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;   /* limit len to the input */
    }
    if (len > have) {
      len = have;             /* limit len to the output */
    }

    /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */
    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||
                        flush === Z_NO_FLUSH$2 ||
                        len !== left + s.strm.avail_in)) {
      break;
    }

    /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */
    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);

    /* Replace the lengths in the dummy stored block with len. */
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;

    /* Write the stored block header bytes. */
    flush_pending(s.strm);

//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif

    /* Copy uncompressed bytes from the window to next_out. */
    if (left) {
      if (left > len) {
        left = len;
      }
      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }

    /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);

  /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */
  used -= s.strm.avail_in;    /* number of input bytes directly copied */
  if (used) {
    /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */
    if (used >= s.w_size) {  /* supplant the previous history */
      s.matches = 2;     /* clear hash */
      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    }
    else {
      if (s.window_size - s.strstart <= used) {
        /* Slide the window down. */
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;   /* add a pending slide_hash() */
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* If the last block was written to next_out, then done. */
  if (last) {
    return BS_FINISH_DONE;
  }

  /* If flushing and all input has been consumed, then done. */
  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&
    s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }

  /* Fill the window with any remaining input. */
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    /* Slide the window down. */
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    //zmemcpy(s->window, s->window + s->w_size, s->strstart);
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;       /* add a pending slide_hash() */
    }
    have += s.w_size;      /* more space now */
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */
  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    /* maximum stored block length that will fit in pending: */
  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block ||
     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&
     s.strm.avail_in === 0 && left <= have)) {
    len = left > have ? have : left;
    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&
         len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }

  /* We've done all we can with the available input and output. */
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};


/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED$2; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.sym_buf = 0;        /* buffer for distances and literals/lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.sym_next = 0;      /* running index in sym_buf */
  this.sym_end = 0;       /* symbol table full when sym_next reaches this */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */
const deflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
//#ifdef GZIP
                                s.status !== GZIP_STATE &&
//#endif
                                s.status !== EXTRA_STATE &&
                                s.status !== NAME_STATE &&
                                s.status !== COMMENT_STATE &&
                                s.status !== HCRC_STATE &&
                                s.status !== BUSY_STATE &&
                                s.status !== FINISH_STATE)) {
    return 1;
  }
  return 0;
};


const deflateResetKeep = (strm) => {

  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR$2);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status =
//#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE :
//#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK$3;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK$3) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$3;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR$2;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
    return err(strm, Z_STREAM_ERROR$2);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;     /* to pass state test in deflateReset() */

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->sym_buf = s->pending_buf + s->lit_bufsize;
  s.sym_buf = s.lit_bufsize;

  //s->sym_end = (s->lit_bufsize - 1) * 3;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};


/* ========================================================================= */
const deflate$2 = (strm, flush) => {

  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }

  const s = strm.state;

  if (!strm.output ||
      (strm.avail_in !== 0 && !strm.input) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
  }

  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK$3;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH$3) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* Write the header */
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    /* zlib header */
    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
    let level_flags = -1;

    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= (level_flags << 6);
    if (s.strstart !== 0) { header |= PRESET_DICT; }
    header += 31 - (header % 31);

    putShortMSB(s, header);

    /* Save the adler32 of the preset dictionary: */
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    strm.adler = 1; // adler32(0L, Z_NULL, 0);
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
//#ifdef GZIP
  if (s.status === GZIP_STATE) {
    /* gzip header */
    strm.adler = 0;  //crc32(0L, Z_NULL, 0);
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) { // s->gzhead == Z_NULL
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
    else {
      put_byte(s, (s.gzhead.text ? 1 : 0) +
                  (s.gzhead.hcrc ? 2 : 0) +
                  (!s.gzhead.extra ? 0 : 4) +
                  (!s.gzhead.name ? 0 : 8) +
                  (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 0xff);
      put_byte(s, (s.gzhead.time >> 8) & 0xff);
      put_byte(s, (s.gzhead.time >> 16) & 0xff);
      put_byte(s, (s.gzhead.time >> 24) & 0xff);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, s.gzhead.os & 0xff);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 0xff);
        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        // zmemcpy(s.pending_buf + s.pending,
        //    s.gzhead.extra + s.gzindex, copy);
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
        beg = 0;
        left -= copy;
      }
      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      // zmemcpy(s->pending_buf + s->pending,
      //     s->gzhead->extra + s->gzindex, left);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
    }
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
//#endif

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) :
                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                 s.strategy === Z_RLE ? deflate_rle(s, flush) :
                 configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK$3;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      }
      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH$1) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK$3;
      }
    }
  }

  if (flush !== Z_FINISH$3) { return Z_OK$3; }
  if (s.wrap <= 0) { return Z_STREAM_END$3; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};


const deflateEnd = (strm) => {

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }

  const status = strm.state.status;

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR$2;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$3;
};


var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/

var deflate_1$2 = {
	deflateInit: deflateInit_1,
	deflateInit2: deflateInit2_1,
	deflateReset: deflateReset_1,
	deflateResetKeep: deflateResetKeep_1,
	deflateSetHeader: deflateSetHeader_1,
	deflate: deflate_2$1,
	deflateEnd: deflateEnd_1,
	deflateSetDictionary: deflateSetDictionary_1,
	deflateInfo: deflateInfo
};

const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

var assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
var flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};

var common = {
	assign: assign,
	flattenChunks: flattenChunks
};

// String encode/decode helpers


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf = (str) => {
  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }

  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
var buf2string = (buf, max) => {
  const len = max || buf.length;

  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }

  let i, out;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

var strings$1 = {
	string2buf: string2buf,
	buf2string: buf2string,
	utf8border: utf8border
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream = ZStream;

const toString$1 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED: Z_DEFLATED$1
} = constants$2;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate$1(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  let status = deflate_1$2.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK$2) {
    throw new Error(messages[status]);
  }

  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings$1.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1$2.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate$1.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings$1.string2buf(data);
  } else if (toString$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = deflate_1$2.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END$2) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1$2.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$2;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$2) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate$1(input, options) {
  const deflator = new Deflate$1(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

  return deflator.result;
}
var deflate_2 = deflate$1;

var deflate_1$1 = {
	deflate: deflate_2};

const { deflate} = deflate_1$1;
var deflate_1 = deflate;

var UPNG = (function () {
  var _bin = {
    nextZero: function (data, p) {
      while (data[p] != 0) p++;
      return p
    },
    readUshort: function (buff, p) {
      return (buff[p] << 8) | buff[p + 1]
    },
    writeUshort: function (buff, p, n) {
      buff[p] = (n >> 8) & 255;
      buff[p + 1] = n & 255;
    },
    readUint: function (buff, p) {
      return (buff[p] * (256 * 256 * 256)) +
        ((buff[p + 1] << 16) | (buff[p + 2] << 8) | buff[p + 3])
    },
    writeUint: function (buff, p, n) {
      buff[p] = (n >> 24) & 255;
      buff[p + 1] = (n >> 16) & 255;
      buff[p + 2] = (n >> 8) & 255;
      buff[p + 3] = n & 255;
    },
    readASCII: function (buff, p, l) {
      var s = "";
      for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);
      return s
    },
    writeASCII: function (data, p, s) {
      for (var i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i);
    },
    readBytes: function (buff, p, l) {
      var arr = [];
      for (var i = 0; i < l; i++) arr.push(buff[p + i]);
      return arr
    },
    pad: function (n) {
      return n.length < 2 ? "0" + n : n
    },
    readUTF8: function (buff, p, l) {
      var s = "", ns;
      for (var i = 0; i < l; i++) s += "%" + _bin.pad(buff[p + i].toString(16));
      try {
        ns = decodeURIComponent(s);
      } catch (e) {
        return _bin.readASCII(buff, p, l)
      }
      return ns
    },
  };
  return {
    _bin: _bin,
  }
})()
;(function () {
  var _bin = UPNG._bin;
  var crcLib = {
    table: (function () {
      var tab = new Uint32Array(256);
      for (var n = 0; n < 256; n++) {
        var c = n;
        for (var k = 0; k < 8; k++) {
          if (c & 1) c = 0xedb88320 ^ (c >>> 1);
          else c = c >>> 1;
        }
        tab[n] = c;
      }
      return tab
    })(),
    update: function (c, buf, off, len) {
      for (var i = 0; i < len; i++) {
        c = crcLib.table[(c ^ buf[off + i]) & 0xff] ^ (c >>> 8);
      }
      return c
    },
    crc: function (b, o, l) {
      return crcLib.update(0xffffffff, b, o, l) ^ 0xffffffff
    },
  };
  function encodeLL(bufs, w, h, cc, ac, depth, dels, tabs) {
		var nimg = {  ctype: 0 + (cc==1 ? 0 : 2) + (ac==0 ? 0 : 4),      depth: depth,  frames: []  };
		var bipp = (cc+ac)*depth, bipl = bipp * w;
		for(var i=0; i<bufs.length; i++)
			nimg.frames.push({  rect:{x:0,y:0,width:w,height:h},img:new Uint8Array(bufs[i]), blend:0,
    dispose:1, bpp:Math.ceil(bipp/8), bpl:Math.ceil(bipl/8)  });
		compressPNG(nimg, 0);
		var out = _main(nimg, w, h);
		return out;
	}
  function _main(nimg, w, h, dels, tabs) {
    var crc = crcLib.crc,
      wUi = _bin.writeUint;
      _bin.writeUshort;
      var wAs = _bin.writeASCII;
    var offset = 8;
    var leng = 8 + (16 + 5 + 4);
    for (var j = 0; j < nimg.frames.length; j++) {
      var fr = nimg.frames[j];
      leng += fr.cimg.length + 12;
      if (j != 0) leng += 4;
    }
    leng += 12;
    var data = new Uint8Array(leng);
    var wr = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];
    for (var i = 0; i < 8; i++) data[i] = wr[i];
    wUi(data, offset, 13);
    offset += 4;
    wAs(data, offset, "IHDR");
    offset += 4;
    wUi(data, offset, w);
    offset += 4;
    wUi(data, offset, h);
    offset += 4;
    data[offset] = nimg.depth;
    offset++; // depth
    data[offset] = nimg.ctype;
    offset++; // ctype
    data[offset] = 0;
    offset++; // compress
    data[offset] = 0;
    offset++; // filter
    data[offset] = 0;
    offset++; // interlace
    wUi(data, offset, crc(data, offset - 17, 17));
    offset += 4; // crc
    var fi = 0;
    for (var j = 0; j < nimg.frames.length; j++) {
      var fr = nimg.frames[j];
      var imgd = fr.cimg, dl = imgd.length;
      wUi(data, offset, dl + (j == 0 ? 0 : 4));
      offset += 4;
      var ioff = offset;
      wAs(data, offset, (j == 0) ? "IDAT" : "fdAT");
      offset += 4;
      if (j != 0) {
        wUi(data, offset, fi++);
        offset += 4;
      }
      data.set(imgd, offset);
      offset += dl;
      wUi(data, offset, crc(data, ioff, offset - ioff));
      offset += 4; // crc
    }
    wUi(data, offset, 0);
    offset += 4;
    wAs(data, offset, "IEND");
    offset += 4;
    wUi(data, offset, crc(data, offset - 4, 4));
    offset += 4; // crc
    return data.buffer
  }
  function compressPNG(out, filter, levelZero) {
    for (var i = 0; i < out.frames.length; i++) {
      var frm = out.frames[i], nh = frm.rect.height;
      var fdata = new Uint8Array(nh * frm.bpl + nh);
      frm.cimg = _filterZero( frm.img, nh, frm.bpp, frm.bpl, fdata, filter);
    }
  }
  function _filterZero(img, h, bpp, bpl, data, filter, levelZero) {
    var fls = [], ftry = [0, 1, 2, 3, 4];
    ftry = [filter];
    var opts;
    opts = { level: 0 };
    for (var i = 0; i < ftry.length; i++) {
      for (var y = 0; y < h; y++) _filterLine(data, img, y, bpl, bpp, ftry[i]);
      fls.push(deflate_1(data, opts));
    }
    var ti, tsize = 1e9;
    for (var i = 0; i < fls.length; i++) {
      if (fls[i].length < tsize) {
        ti = i;
        tsize = fls[i].length;
      }
    }
    return fls[ti]
  }
  function _filterLine(data, img, y, bpl, bpp, type) {
    var i = y * bpl, di = i + y;
    data[di] = type;
    di++;
    data.set(new Uint8Array(img.buffer, i, bpl), di);
  }
  UPNG.encodeLL = encodeLL;
})();

var ge=ArrayBuffer,C=Uint8Array,lr=Uint16Array,he=Int16Array;var yr=Int32Array,Mr=function(n,i,t){if(C.prototype.slice)return C.prototype.slice.call(n,i,t);(i==null||i<0)&&(i=0),(t==null||t>n.length)&&(t=n.length);var e=new C(t-i);return e.set(n.subarray(i,t)),e},vr=function(n,i,t,e){if(C.prototype.fill)return C.prototype.fill.call(n,i,t,e);for((t==null||t<0)&&(t=0),(e==null||e>n.length)&&(e=n.length);t<e;++t)n[t]=i;return n},He=function(n,i,t,e){if(C.prototype.copyWithin)return C.prototype.copyWithin.call(n,i,t,e);for((t==null||t<0)&&(t=0),(e==null||e>n.length)&&(e=n.length);t<e;)n[i++]=n[t++];};var be=["invalid zstd data","window size too large (>2046MB)","invalid block type","FSE accuracy too high","match distance too far back","unexpected EOF"],R=function(n,i,t){var e=new Error(i||be[n]);if(e.code=n,Error.captureStackTrace&&Error.captureStackTrace(e,R),!t)throw e;return e},Xr=function(n,i,t){for(var e=0,o=0;e<t;++e)o|=n[i++]<<(e<<3);return o},we=function(n,i){return (n[i]|n[i+1]<<8|n[i+2]<<16|n[i+3]<<24)>>>0},We=function(n,i){var t=n[0]|n[1]<<8|n[2]<<16;if(t==3126568&&n[3]==253){var e=n[4],o=e>>5&1,_=e>>2&1,p=e&3,u=e>>6;e&8&&R(0);var y=6-o,h=p==3?4:p,L=Xr(n,y,h);y+=h;var d=u?1<<u:o,W=Xr(n,y,d)+(u==1&&256),b=W;if(!o){var q=1<<10+(n[5]>>3);b=q+(q>>3)*(n[5]&7);}b>2145386496&&R(1);var c=new C((i==1?W||b:i?0:b)+12);return c[0]=1,c[4]=4,c[8]=8,{b:y+d,y:0,l:0,d:L,w:i&&i!=1?i:c.subarray(12),e:b,o:new yr(c.buffer,0,3),u:W,c:_,m:Math.min(131072,b)}}else if((t>>4|n[3]<<20)==25481893)return we(n,4)+8;R(0);},nr=function(n){for(var i=0;1<<i<=n;++i);return i-1},cr=function(n,i,t){var e=(i<<3)+4,o=(n[i]&15)+5;o>t&&R(3);for(var _=1<<o,p=_,u=-1,y=-1,h=-1,L=_,d=new ge(512+(_<<2)),W=new he(d,0,256),b=new lr(d,0,256),q=new lr(d,512,_),c=512+(_<<1),w=new C(d,c,_),S=new C(d,c+_);u<255&&p>0;){var Z=nr(p+1),M=e>>3,O=(1<<Z+1)-1,Y=(n[M]|n[M+1]<<8|n[M+2]<<16)>>(e&7)&O,f=(1<<Z)-1,U=O-p-1,z=Y&f;if(z<U?(e+=Z,Y=z):(e+=Z+1,Y>f&&(Y-=U)),W[++u]=--Y,Y==-1?(p+=Y,w[--L]=u):p-=Y,!Y)do{var N=e>>3;y=(n[N]|n[N+1]<<8)>>(e&7)&3,e+=2,u+=y;}while(y==3)}(u>255||p)&&R(0);for(var k=0,F=(_>>1)+(_>>3)+3,J=_-1,x=0;x<=u;++x){var g=W[x];if(g<1){b[x]=-g;continue}for(h=0;h<g;++h){w[k]=x;do k=k+F&J;while(k>=L)}}for(k&&R(0),h=0;h<_;++h){var m=b[w[h]]++,V=S[h]=o-nr(m);q[h]=(m<<V)-_;}return [e+7>>3,{b:o,s:w,n:S,t:q}]},Me=function(n,i){var t=0,e=-1,o=new C(292),_=n[i],p=o.subarray(0,256),u=o.subarray(256,268),y=new lr(o.buffer,268);if(_<128){var h=cr(n,i+1,6),L=h[0],d=h[1];i+=_;var W=L<<3,b=n[i];b||R(0);for(var q=0,c=0,w=d.b,S=w,Z=(++i<<3)-8+nr(b);Z-=w,!(Z<W);){var M=Z>>3;if(q+=(n[M]|n[M+1]<<8)>>(Z&7)&(1<<w)-1,p[++e]=d.s[q],Z-=S,Z<W)break;M=Z>>3,c+=(n[M]|n[M+1]<<8)>>(Z&7)&(1<<S)-1,p[++e]=d.s[c],w=d.n[q],q=d.t[q],S=d.n[c],c=d.t[c];}++e>255&&R(0);}else {for(e=_-127;t<e;t+=2){var O=n[++i];p[t]=O>>4,p[t+1]=O&15;}++i;}var Y=0;for(t=0;t<e;++t){var f=p[t];f>11&&R(0),Y+=f&&1<<f-1;}var U=nr(Y)+1,z=1<<U,N=z-Y;for(N&N-1&&R(0),p[e++]=nr(N)+1,t=0;t<e;++t){var f=p[t];++u[p[t]=f&&U+1-f];}var k=new C(z<<1),F=k.subarray(0,z),J=k.subarray(z);for(y[U]=0,t=U;t>0;--t){var x=y[t];vr(J,t,x,y[t-1]=x+u[t]*(1<<U-t));}for(y[0]!=z&&R(0),t=0;t<e;++t){var g=p[t];if(g){var m=y[g];vr(F,t,m,y[g]=m+(1<<U-g));}}return [i,{n:J,b:U,s:F}]},Te=cr(new C([81,16,99,140,49,198,24,99,12,33,196,24,99,102,102,134,70,146,4]),0,6)[1],Ee=cr(new C([33,20,196,24,99,140,33,132,16,66,8,33,132,16,66,8,33,68,68,68,68,68,68,68,68,36,9]),0,6)[1],Ce=cr(new C([32,132,16,66,102,70,68,68,68,68,36,73,2]),0,5)[1],Kr=function(n,i){for(var t=n.length,e=new yr(t),o=0;o<t;++o)e[o]=i,i+=1<<n[o];return e},Tr=new C(new yr([0,0,0,0,16843009,50528770,134678020,202050057,269422093]).buffer,0,36),Ye=Kr(Tr,0),Er=new C(new yr([0,0,0,0,0,0,0,0,16843009,50528770,117769220,185207048,252579084,16]).buffer,0,53),Re=Kr(Er,3),pr=function(n,i,t){var e=n.length,o=i.length,_=n[e-1],p=(1<<t.b)-1,u=-t.b;_||R(0);for(var y=0,h=t.b,L=(e<<3)-8+nr(_)-h,d=-1;L>u&&d<o;){var W=L>>3,b=(n[W]|n[W+1]<<8|n[W+2]<<16)>>(L&7);y=(y<<h|b)&p,i[++d]=t.s[y],L-=h=t.n[y];}(L!=u||d+1!=o)&&R(0);},Le=function(n,i,t){var e=6,o=i.length,_=o+3>>2,p=_<<1,u=_+p;pr(n.subarray(e,e+=n[0]|n[1]<<8),i.subarray(0,_),t),pr(n.subarray(e,e+=n[2]|n[3]<<8),i.subarray(_,p),t),pr(n.subarray(e,e+=n[4]|n[5]<<8),i.subarray(p,u),t),pr(n.subarray(e),i.subarray(u),t);},qe=function(n,i,t){var e,o=i.b,_=n[o],p=_>>1&3;i.l=_&1;var u=_>>3|n[o+1]<<5|n[o+2]<<13,y=(o+=3)+u;if(p==1)return o>=n.length?void 0:(i.b=o+1,t?(vr(t,n[o],i.y,i.y+=u),t):vr(new C(u),n[o]));if(!(y>n.length)){if(p==0)return i.b=y,t?(t.set(n.subarray(o,y),i.y),i.y+=u,t):Mr(n,o,y);if(p==2){var h=n[o],L=h&3,d=h>>2&3,W=h>>4,b=0,q=0;L<2?d&1?W|=n[++o]<<4|(d&2&&n[++o]<<12):W=h>>3:(q=d,d<2?(W|=(n[++o]&63)<<4,b=n[o]>>6|n[++o]<<2):d==2?(W|=n[++o]<<4|(n[++o]&3)<<12,b=n[o]>>2|n[++o]<<6):(W|=n[++o]<<4|(n[++o]&63)<<12,b=n[o]>>6|n[++o]<<2|n[++o]<<10)),++o;var c=t?t.subarray(i.y,i.y+i.m):new C(i.m),w=c.length-W;if(L==0)c.set(n.subarray(o,o+=W),w);else if(L==1)vr(c,n[o++],w);else {var S=i.h;if(L==2){var Z=Me(n,o);b+=o-(o=Z[0]),i.h=S=Z[1];}else S||R(0);(q?Le:pr)(n.subarray(o,o+=b),c.subarray(w),S);}var M=n[o++];if(M){M==255?M=(n[o++]|n[o++]<<8)+32512:M>127&&(M=M-128<<8|n[o++]);var O=n[o++];O&3&&R(0);for(var Y=[Ee,Ce,Te],f=2;f>-1;--f){var U=O>>(f<<1)+2&3;if(U==1){var z=new C([0,0,n[o++]]);Y[f]={s:z.subarray(2,3),n:z.subarray(0,1),t:new lr(z.buffer,0,1),b:0};}else U==2?(e=cr(n,o,9-(f&1)),o=e[0],Y[f]=e[1]):U==3&&(i.t||R(0),Y[f]=i.t[f]);}var N=i.t=Y,k=N[0],F=N[1],J=N[2],x=n[y-1];x||R(0);var g=(y<<3)-8+nr(x)-J.b,m=g>>3,V=0,ir=(n[m]|n[m+1]<<8)>>(g&7)&(1<<J.b)-1;m=(g-=F.b)>>3;var tr=(n[m]|n[m+1]<<8)>>(g&7)&(1<<F.b)-1;m=(g-=k.b)>>3;var I=(n[m]|n[m+1]<<8)>>(g&7)&(1<<k.b)-1;for(++M;--M;){var j=J.s[ir],K=J.n[ir],or=k.s[I],sr=k.n[I],ar=F.s[tr],ur=F.n[tr];m=(g-=ar)>>3;var _r=1<<ar,$=_r+((n[m]|n[m+1]<<8|n[m+2]<<16|n[m+3]<<24)>>>(g&7)&_r-1);m=(g-=Er[or])>>3;var A=Re[or]+((n[m]|n[m+1]<<8|n[m+2]<<16)>>(g&7)&(1<<Er[or])-1);m=(g-=Tr[j])>>3;var D=Ye[j]+((n[m]|n[m+1]<<8|n[m+2]<<16)>>(g&7)&(1<<Tr[j])-1);if(m=(g-=K)>>3,ir=J.t[ir]+((n[m]|n[m+1]<<8)>>(g&7)&(1<<K)-1),m=(g-=sr)>>3,I=k.t[I]+((n[m]|n[m+1]<<8)>>(g&7)&(1<<sr)-1),m=(g-=ur)>>3,tr=F.t[tr]+((n[m]|n[m+1]<<8)>>(g&7)&(1<<ur)-1),$>3)i.o[2]=i.o[1],i.o[1]=i.o[0],i.o[0]=$-=3;else {var rr=$-(D!=0);rr?($=rr==3?i.o[0]-1:i.o[rr],rr>1&&(i.o[2]=i.o[1]),i.o[1]=i.o[0],i.o[0]=$):$=i.o[0];}for(var f=0;f<D;++f)c[V+f]=c[w+f];V+=D,w+=D;var er=V-$;if(er<0){var B=-er,gr=i.e+er;B>A&&(B=A);for(var f=0;f<B;++f)c[V+f]=i.w[gr+f];V+=B,A-=B,er=0;}for(var f=0;f<A;++f)c[V+f]=c[er+f];V+=A;}if(V!=w)for(;w<c.length;)c[V++]=c[w++];else V=c.length;t?i.y+=V:c=Mr(c,0,V);}else if(t){if(i.y+=W,w)for(var f=0;f<W;++f)c[f]=c[w+f];}else w&&(c=Mr(c,w));return i.b=y,c}R(2);}},Ze=function(n,i){if(n.length==1)return n[0];for(var t=new C(i),e=0,o=0;e<n.length;++e){var _=n[e];t.set(_,o),o+=_.length;}return t};function Br(n,i){for(var t=[],e=+!i,o=0,_=0;n.length;){var p=We(n,e||i);if(typeof p=="object"){for(e?(i=null,p.w.length==p.u&&(t.push(i=p.w),_+=p.u)):(t.push(i),p.e=0);!p.l;){var u=qe(n,p,i);u||R(5),i?p.e=p.y:(t.push(u),_+=u.length,He(p.w,0,u.length),p.w.set(u,p.w.length-u.length));}o=p.b+p.c*4;}else o=p;n=n.subarray(o);}return Ze(t,_)}var ke=(()=>{typeof document<"u"?document.currentScript?.src:void 0;return function(i={}){var t,e=i,o,_,p=new Promise((r,a)=>{o=r,_=a;}),u=Object.assign({},e),y="";function h(r){return y+r}var L;console.log.bind(console);var b=console.error.bind(console);Object.assign(e,u),u=null;var q=e.wasmBinary,c,w=false;var M;function k(){var r=c.buffer;e.HEAP8=new Int8Array(r),e.HEAP16=new Int16Array(r),e.HEAPU8=M=new Uint8Array(r),e.HEAPU16=new Uint16Array(r),e.HEAP32=new Int32Array(r),e.HEAPU32=new Uint32Array(r),e.HEAPF32=new Float32Array(r),e.HEAPF64=new Float64Array(r);}var F=[],J=[],x=[];function m(){hr(F);}function V(){hr(J);}function ir(){hr(x);}function tr(r){J.unshift(r);}var I=0,K=null;function or(r){I++;}function sr(r){if(I--,I==0&&(K)){var a=K;K=null,a();}}function ar(r){r="Aborted("+r+")",b(r),w=true,r+=". Build with -sASSERTIONS for more info.";var a=new WebAssembly.RuntimeError(r);throw _(a),a}var ur="data:application/octet-stream;base64,",_r=r=>r.startsWith(ur),$=r=>r.startsWith("file://");function A(){var r="zstdlib.wasm";return _r(r)?r:h(r)}var D;function rr(r){if(r==D&&q)return new Uint8Array(q);throw "both async and sync fetching of the wasm failed"}function er(r){return q?Promise.resolve().then(()=>rr(r)):L(r).then(a=>new Uint8Array(a),()=>rr(r))}function B(r,a,s){return er(r).then(v=>WebAssembly.instantiate(v,a)).then(s,v=>{b(`failed to asynchronously prepare wasm: ${v}`),ar(v);})}function gr(r,a,s,v){return !r&&typeof WebAssembly.instantiateStreaming=="function"&&!_r(a)&&!$(a)&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(H=>{var X=WebAssembly.instantiateStreaming(H,s);return X.then(v,function(P){return b(`wasm streaming compile failed: ${P}`),b("falling back to ArrayBuffer instantiation"),B(a,s,v)})}):B(a,s,v)}function ne(){return {a:ve}}function ie(){var r=ne();function a(v,H){return E=v.exports,c=E.c,k(),tr(E.d),sr(),E}or();function s(v){a(v.instance);}return D||(D=A()),gr(q,D,r,s).catch(_),{}}var hr=r=>{for(;r.length>0;)r.shift()(e);},te=(r,a,s)=>M.copyWithin(r,a,a+s),oe=()=>2147483648,Rr=(r,a)=>Math.ceil(r/a)*a,ae=r=>{var a=c.buffer,s=(r-a.byteLength+65535)/65536;try{return c.grow(s),k(),1}catch{}},_e=r=>{var a=M.length;r>>>=0;var s=oe();if(r>s)return  false;for(var v=1;v<=4;v*=2){var H=a*(1+.2/v);H=Math.min(H,r+100663296);var X=Math.min(s,Rr(Math.max(r,H),65536)),P=ae(X);if(P)return  true}return  false},Lr=typeof TextDecoder<"u"?new TextDecoder:void 0,pe=(r,a,s)=>{for(var v=a+s,H=a;r[H]&&!(H>=v);)++H;if(H-a>16&&r.buffer&&Lr)return Lr.decode(r.subarray(a,H));for(var X="";a<H;){var P=r[a++];if(!(P&128)){X+=String.fromCharCode(P);continue}var Wr=r[a++]&63;if((P&224)==192){X+=String.fromCharCode((P&31)<<6|Wr);continue}var Dr=r[a++]&63;if((P&240)==224?P=(P&15)<<12|Wr<<6|Dr:P=(P&7)<<18|Wr<<12|Dr<<6|r[a++]&63,P<65536)X+=String.fromCharCode(P);else {var Gr=P-65536;X+=String.fromCharCode(55296|Gr>>10,56320|Gr&1023);}}return X},Hr=(r,a)=>r?pe(M,r,a):"",ve={b:te,a:_e},E=ie();e._webidl_free=r=>(e._webidl_free=E.e)(r);e._webidl_malloc=r=>(e._webidl_malloc=E.f)(r);var qr=e._emscripten_bind_VoidPtr___destroy___0=r=>(qr=e._emscripten_bind_VoidPtr___destroy___0=E.g)(r),Zr=e._emscripten_bind_zstd_version_0=()=>(Zr=e._emscripten_bind_zstd_version_0=E.h)(),kr=e._emscripten_bind_zstd_malloc_1=r=>(kr=e._emscripten_bind_zstd_malloc_1=E.i)(r),Ur=e._emscripten_bind_zstd_free_1=r=>(Ur=e._emscripten_bind_zstd_free_1=E.j)(r),Vr=e._emscripten_bind_zstd_compress_5=(r,a,s,v,H)=>(Vr=e._emscripten_bind_zstd_compress_5=E.k)(r,a,s,v,H),Pr=e._emscripten_bind_zstd_decompress_4=(r,a,s,v)=>(Pr=e._emscripten_bind_zstd_decompress_4=E.l)(r,a,s,v),Sr=e._emscripten_bind_zstd_getFrameContentSize_2=(r,a)=>(Sr=e._emscripten_bind_zstd_getFrameContentSize_2=E.m)(r,a),zr=e._emscripten_bind_zstd_findFrameCompressedSize_2=(r,a)=>(zr=e._emscripten_bind_zstd_findFrameCompressedSize_2=E.n)(r,a),Jr=e._emscripten_bind_zstd_compressBound_1=r=>(Jr=e._emscripten_bind_zstd_compressBound_1=E.o)(r),xr=e._emscripten_bind_zstd_isError_1=r=>(xr=e._emscripten_bind_zstd_isError_1=E.p)(r),Nr=e._emscripten_bind_zstd_getErrorName_1=r=>(Nr=e._emscripten_bind_zstd_getErrorName_1=E.q)(r),Fr=e._emscripten_bind_zstd_minCLevel_0=()=>(Fr=e._emscripten_bind_zstd_minCLevel_0=E.r)(),Qr=e._emscripten_bind_zstd_maxCLevel_0=()=>(Qr=e._emscripten_bind_zstd_maxCLevel_0=E.s)(),Or=e._emscripten_bind_zstd_defaultCLevel_0=()=>(Or=e._emscripten_bind_zstd_defaultCLevel_0=E.t)(),Ir=e._emscripten_bind_zstd___destroy___0=r=>(Ir=e._emscripten_bind_zstd___destroy___0=E.u)(r);e.UTF8ToString=Hr;var mr;K=function r(){mr||$r(),mr||(K=r);};function $r(){if(I>0||(m(),I>0))return;function r(){mr||(mr=true,e.calledRun=true,!w&&(V(),o(e),ir()));}r();}$r();function Q(){}Q.prototype=Object.create(Q.prototype),Q.prototype.constructor=Q,Q.prototype.__class__=Q,Q.__cache__={},e.WrapperObject=Q;function br(r){return (r||Q).__cache__}e.getCache=br;function wr(r,a){var s=br(a),v=s[r];return v||(v=Object.create((a||Q).prototype),v.ptr=r,s[r]=v)}e.wrapPointer=wr;function ue(r,a){return wr(r.ptr,a)}e.castObject=ue,e.NULL=wr(0);function me(r){if(!r.__destroy__)throw "Error: Cannot destroy object. (Did you create it yourself?)";r.__destroy__(),delete br(r.__class__)[r.ptr];}e.destroy=me;function le(r,a){return r.ptr===a.ptr}e.compare=le;function ye(r){return r.ptr}e.getPointer=ye;function de(r){return r.__class__}e.getClass=de;function G(){throw "cannot construct a VoidPtr, no constructor in IDL"}G.prototype=Object.create(Q.prototype),G.prototype.constructor=G,G.prototype.__class__=G,G.__cache__={},e.VoidPtr=G,G.prototype.__destroy__=G.prototype.__destroy__=function(){var r=this.ptr;qr(r);};function l(){throw "cannot construct a zstd, no constructor in IDL"}return l.prototype=Object.create(Q.prototype),l.prototype.constructor=l,l.prototype.__class__=l,l.__cache__={},e.zstd=l,l.prototype.version=l.prototype.version=function(){return Hr(Zr())},l.prototype.malloc=l.prototype.malloc=function(r){return r&&typeof r=="object"&&(r=r.ptr),kr(r)},l.prototype.free=l.prototype.free=function(r){r&&typeof r=="object"&&(r=r.ptr),Ur(r);},l.prototype.compress=l.prototype.compress=function(r,a,s,v,H){return r&&typeof r=="object"&&(r=r.ptr),a&&typeof a=="object"&&(a=a.ptr),s&&typeof s=="object"&&(s=s.ptr),v&&typeof v=="object"&&(v=v.ptr),H&&typeof H=="object"&&(H=H.ptr),Vr(r,a,s,v,H)},l.prototype.decompress=l.prototype.decompress=function(r,a,s,v){return r&&typeof r=="object"&&(r=r.ptr),a&&typeof a=="object"&&(a=a.ptr),s&&typeof s=="object"&&(s=s.ptr),v&&typeof v=="object"&&(v=v.ptr),Pr(r,a,s,v)},l.prototype.getFrameContentSize=l.prototype.getFrameContentSize=function(r,a){return r&&typeof r=="object"&&(r=r.ptr),a&&typeof a=="object"&&(a=a.ptr),Sr(r,a)},l.prototype.findFrameCompressedSize=l.prototype.findFrameCompressedSize=function(r,a){return r&&typeof r=="object"&&(r=r.ptr),a&&typeof a=="object"&&(a=a.ptr),zr(r,a)},l.prototype.compressBound=l.prototype.compressBound=function(r){return r&&typeof r=="object"&&(r=r.ptr),Jr(r)},l.prototype.isError=l.prototype.isError=function(r){return r&&typeof r=="object"&&(r=r.ptr),xr(r)},l.prototype.getErrorName=l.prototype.getErrorName=function(r){return r&&typeof r=="object"&&(r=r.ptr),Hr(Nr(r))},l.prototype.minCLevel=l.prototype.minCLevel=function(){return Fr()},l.prototype.maxCLevel=l.prototype.maxCLevel=function(){return Qr()},l.prototype.defaultCLevel=l.prototype.defaultCLevel=function(){return Or()},l.prototype.__destroy__=l.prototype.__destroy__=function(){var r=this.ptr;Ir(r);},t=p,t}})(),jr=ke;var Ue='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~"';function Ve(n){let i=n.length,t=[],e=0,o=0,_=-1;for(let p=0;p<i;p++){let u=Ue.indexOf(n[p]);if(u!==-1)if(_<0)_=u;else {_+=u*91,e|=_<<o,o+=(_&8191)>88?13:14;do t.push(e&255),e>>=8,o-=8;while(o>7);_=-1;}}return _>-1&&t.push((e|_<<o)&255),new Uint8Array(t)}var Pe='v7#aSX_#XB5F1nR9TNyes1zXCkI[7rs~sh00_(4{%gR8xXu=/e,Pu_)8F+}nFLu7g!Jn6=GJsi+i(^cEkB``C62+8w?#EJh*SvBMA"fg*]^/JMAGADJA1EElQgnUF2(`hp^t4fW=Or.aXZCx{nA@QZNXR=QZagp0yI)`sU(m%KB4I!!Hg!R*tC%0koQ{y0SVKS*{2mNQY;hhc%(%C/HPh.VAk@YY^TukX{qsk$T0*m.N"P2;wqYpF|DrantTE~zpc6@ghqN5aL_]e:B4~Y@]}2ShC+ne4j%7X6",)/Ok,375bHp(y;*fc3cuqI&3g*&1piU+R|?,hW@q3{)zFbL8+dg*Q;U]+*8oHFTVzCvU,$,q59au4e:g_]+*4<AO?hJJA/$BT(%I(bkS.*L2y;F%[m%eK!vE$~3^YvRgkp26y;YY_T;]E+ew[VVnJ#|Ha=YZN1~./{bz*)a6nVusRkG(nFqIR?UkW.3m^pR|8ioZ`):c7=fuQ@Vz)&:d@9k(DWN_ZW|%pTR`a=q$GHx[GcOKT=T1Q;I#*Mx(0w,xneON?VT>.T7Un:&bDm#cq3B{KLC51`a=;quUoTH.~d60+#xz>7Q{:$,qw&@fYDYC.JVFnZlrz=X[e:Y*c3I{;_+]7>*`P5`GHF4T;|09Ts76>bG<;*t[&On&@LUpxD[SwNLps=jV0$T0rNb^<X+Ix&@L`u=]J2d+~8]KibbRheI4)tOXG[5gnkW}^$8u7=L[hhE[jpt=C!Ro,>uorG).&>)B,*d+i%V<J2eOW+.]xqmT=iOn+dFB{z`|1`GW#c993^%o1ep@NXmLbU+QQCYZI]#VERG]7?>W;nCjf@Qy*vh84QP:&bU0v0SAZ3+.)%5gWr0}(3LOLsDO>gB@nk$mL1l[Po{>?]XuTdCA?NsbcA(b=p|Z"`a{0qXSEf+6@v#HDAWyCYP?Tb!:[()PiOroXN]r`b4+#CMo4Xw%sF>2Gg;#V_E=c,8~i8DdkqU9~qYPSnWnDPoR}&!NXH`uDdXJKn=;e($|X=a<WMZv:9*YC>oJ/k6cE$t%R`bwO<)Gs;@V]rnPS0a`QzFHfojo~[eyB=eMs%W6b$ky0<F@NKz+:g!C0ln?,f[5B@HyZjdOA_"<mSz7]/j*%:H9pDeN7p#qxe`<BPu`@TO]v!gv(rQXvT]{_a6>xw:n!WZWR[HtLzu,QyI9Mn=OL~BnEJ!orgOr@hOrw5m_/s#d]&cTo{op/T~SE^@mut/baixgv)Fl#d~V$%Uga=eBOCagIZA(jJ~.s&`r(O2oNMv)H%Y&op)tRY<%+o?qZK.kPg;#s_fQI]oT=]FfWqo9TMDeR7PVS/{kGdhhe_%W}`)ic)W5w%lw|Ou7B<2TZ/6p`Y7OH6g=@#(1q9YvM@LWPgvE|2NoG1PxdflX<p]T62uBN:zQ>p:_"@@Z>r.q7a/9?x8,F/&;Z_;I%qnwyVw=/_@.0L"qs*e&YR59pv|/)?Sr~[)6B=E,r^j;LsOQ7R?**`,pE:t3_T8/Hl{pb5yh.lJ8Fw"G$V6?GP5uUkgKT=[l47Pkm7,JL8GI.!F2_i)e:B|3mrH.=KEwp;@iagwx:{>qr|wrN9?xDczf5^Jhb=@=KM!w7b$!!hn}T+IhD}[lH)b$){NMPhRux$ac5VX[4TlV2Fg[2|)`p[`Vhqukm}3j}.6J<T.l5n<lac"+uIs2>7x)GHr)k?GnM{E}fuJbNXv{W]WnRUgu/q%^C6%77U"%oB<="0,lX@7du9e%^nPoNS1{<mzp[;NK/{F%k78U8{RgUp|<+c>=]kw<5VdRu`[(pc@Nk^)?^K;8[w*={`?=z7>=Sk{h@`t89Y5c9;MLG9L@R_]Dk5x&>]"u>bn8%ePV;<zQr[=U4,&`!&&Ua?r:oykF>qUyRk.]`6+`^`.{$[>/TXiirVFJuQ/Y<cZz,U#//qG[NPK)6L`9zqFxrgp5^+`%:55zu~.P@AP?kZzdJ=FD#g402pPX3I%`n3&U^_VlExVEZvVg7IB@`p&iDx4^FN9^<T6rlD)UNy"ulr8Z@lc=w]knl}Y=1|wrp;zT{#;;52+tEb4e{rj#L82?:G,3,`O%[|)3^Qv2R9.=@:C[<:.hLS.Ld&@y5NP;2)%>bWl.$DtkxgCrV]X6$qgpjtRIJ>|<RL~vi_A2cdlOaYC!KSsdE.tY3V7GL0n{j((.];07?Lr9.lG.0ggVrNNT+hchV;lYXRxgk5F{!.H%CsJOmYU]^qf1/kMM+M,P+`7n9K_.d>^;Yn.TA<}1[mY;$9EJ&;]e{;vz;CFHUB>@XK5r7absgaF{/e24]y^.<`I8~hwV%F`Na?Mn^.&;5=eJ5m&P3V[w%~Tpnko~d$DT|]M^:mi<e(IS2scp&jo~;{,By4c0_P)XkJ<{3Z$[yyQUgL9%_*IMjvI*wLM+e5/VV&3MCEb(NuurmT;9xw5"B&U;5^v:jVoF$l"l2sv!WRq[grq?t[>%Gv/c8oZ)r.3L~9H>Y<0_,!E;qr|aIiW()Vq?i!l>{"Pq^}/v^g;R^CG@GPeuxX)EM##)F>w_:Fe$JWX/>c0_YY_$Ihs0IM<[0e{*HMqmz}m::ci?d9=u5,3OV=YZJrE%skn(Yh"<_mK3w&_#yMQ&Gv_%!.Me[$?q;nd;[4Syv}!Hn{L@BE``$h&J~.uv>3@`*e8.Lae_g3u*7>@/t$#dL+D}6,>%;@ZFY!M_t^NZH|Z<4xzJHLx}uK<{Rke4jw}<_L`m~@^nW6X=VYpKb7`|b1Ep%>:ZghZ_$pi]iB={6$LgoVu$S0c=+v/_sTQ7[w"A6^gKOZ>^;%p/mUEQL9;{.2Y0wG.!Y`AdN,Uc[x6,8=r/:krE={e#Fy2L"92z9pC`<`Zp=vU=d/SUsulr>(qvK2aCQv|f4HcnMWvNOKz}AoMW?skp|a{U5"1{K2%6f{7^EF24J82T7?FYb^LB8/s&:)1qx0~@z>+ljIGn=+[&Kf%%SRUQ~^EqC`dSZp~;@(:)~.1qoZ#&:fZ>2)e_x0J>>q@K4`D~[=MnPX__Ok$EKfS*;i%K7,jbfs/[vT&d1}C>4;E/z.9C0erlH43b^H*pPI"J_g_>}}d3v?v[5}OX|OY1(`yKmqV|84^qpVVhophc=3XQcxbvFJmiZ9WF~zc%svuYm?r[<H6^?Tq^cu{Y8.TxY0LL8{}=GP"E4E#>uq7,bQV%x*wP*x$nb8Z`])VM`DZKImW+0ndnv8+bC=>G/74l.VF(w=<?h>>b6[@_6vmrDU,P?%|D~ts+f6WF5o}Eup){"0`[!Xjvurptm1^S&m,Si>0ep@14XQ_YT_jG1^o_YY&Wuen_M;$o,S}<+nS<WO*E/]k<*D/_|.@f%}(wTLYCUC?%t"xy]QL>Yde"E/YLL>^cwwwF4_YsswE|exbsdzE/,TGLNTH4D!wFg]@XE(ol0}E$Dc)`KeIzFJOy2r[uH[SJ24pq?cOJ1;MeptJ&6j;FaWb^e_tT{#bg$xdum>krkpa>krOXn4,z`hAxZq5>~m:#liBq|oY(0B,i@h>=A#?a/}gx~.wz#}n?o8%?FnN^euDnz?L[=U&m$3YgJae$GH&?KS0s()}^ELL>1pv;+c`<9@u`o#DJVnHSsQ;cH,<@9@psu^0e"5tY0|~Hm=H8kj3V%q(365=#n$"Sj/Q{d11m^mOeKzewCjR>S[*p[CQeu7J91M#wp2+^x0a@Q?C!:ntO?s3}s.6=xQS=^qq&)3m?mzDRqnEYZqtJL%B)}Dug:]@2C?IC3QV*fT*TG)pECk_U@JF?cC%SJ9{xwnx)"BqsbP[JO?.C6XS]c8k=I?8C1WqKT9snnu"L?3V[*TM)qF?tya[J">?B9O^#$^wnaulK$_&6+T~(0D[n?zk=H?)CaX!O$m/a;PW"?].6fZe9t.CZiD9=r/MoUua:q.LG4Pf9*kFUoN40o.oD/M4olXKD8gj/+"O#9f5n)er,9=f/l3)FtXV[{uxP8goS#nBXNB?25GIW~*H[%$=;%$<TZl!lJ1(JQ;u[L1"HcUP%rPR9nn`n1f7/+5@#O}d38;P3Yp2.y%GZy7N0aUyvb2uGeU!7E,nGW)MH=oHe>O~J&F1y)Ff`$o=m0NGNj]0S5guG|ZyGw0Kg,a30XbDNo7#!xUAIJ6ymI:gX_CPKO?LDv7WB7J!26JR=h=Z{gOgPDv5+=wQ]fx[RU5`gQT=gQz@[9Hw)u%eMLk69%lq5/YU_kSiPOo2H>w(/M_fx_Y.ec@TJnSU&V3EJ^#L[+"S<7f:]Vf[MALF{pz8ot?+xfy"?+x!Ffe+mwCsyFPh$hy/0{8`SKx[7W8u*%8+dKdk@{dSmON90d<p2r$*$*]"K=z7W&Z|0]2ZiKk6mo^q$HFQ]/6`ycNw!ALPg}=PF1?=K)X!Q3]<TkVO96mCv<TIp^YU;Z}kD$Vf@W%5hz$2H66wVMgyfQ<ysto!t?.:e/:EjJ#L^i&3%&1g9Xrr+09Upa,=`y0#RA9>AVkKb:x}:=O8WB~1KF2r$vo,c~o5$P*mJcO}%a0BzFyYs99H6"/+n}]%lZWgR@fo[Gnws1;0ePoU@wyUp6ix`}^)iOyeA=C"=_,NE8/:egxX5BRP1MCnV[m3]Cy7+7x<PXx:p:q4SWZ.Tf04g[xF`l^SC]j|!d?S:u:3"D#O[k6<Smf;[ZE8ja5%P/GRm7o1#Fvj6f+qxJMq!q!?nq!cUj/`E~KU!5zLaiLc<~R`+0.48]O>0gUg,m09kf?*%=JoS#n,FvvsFyn5z=wQF$K]n$A6Nsl{,X,`#}@5g"(Nk`arO%2%U`2hqD#=)NBcQg;U5T^I,9z6gge:mOhzTl:!!<;&ZNv8&}K`H!#Kmw=dy);]mV2`VL2}px0o0zzXhv%rml<<T!nWiE%7/vgO})87XmI_)vp{>[xkZOO=^3jC0WklyQNu7T1D8Ugcc7aO<xm)O~z5z"Hyji?;X{,_Dar<,l8@#YaJTx;zjhm;||560ok|Z~<fhK[x!ZL:H6Af+XyiR0jp{?]vs!*Rf1cuUH[}r?#^TJaAQozDd~k}O,+oNul2.?e[C1bc:XE.<%.}E]5I0LNl<chd,V,v0^hLg+#XYvOO*7/LaO~vp5.E]j{^T*i&6}MGdOSX[KqE6C&gelBFCz|@>RBk$wT7o9w?5p)S@s)8]e+C!@/FuPmQ@,e8.~j,UD/?la=P+}ZexV5.fUDbjaLLS,*}TXkxx{nu.FJ]?"2LS2.^ckQd$DJ]TdeSrEjI_@Zn=LAE3hf50^23&P8@uhW77/fDS)D.j,TAPr$V?hx<7#O,Zq.<:XomIzzJP5ozMp{2/BPT1@6OC>g`ho9I<x`zHJIW(?LQ;mZ]5lfm7nf1|`w{K%PU1^+LFyg~h1%ZR8BDacce14,c&DDEm@>(X5b)MAL7Lv!JF<yLjt1+ag+[Zw+uFWzNhsurvhG<y,Xj=Nok@qO!Z[Vm}"F|hYt$M7LQD]V9RUK2qBxd7#K0LVE]yr?6ls?r]u)[{^#?JRtu:cyAx@UFodiHF%Y?bT])M)$^2H*GW4&JYxXFvw#F{0vi3E~wRDPO$M!b:jygjAH$ZsSNsFH:n!exx$IWg#b7&Au%qM3)dnkH5):!lR8Nak41YEr&Z/+y?#|:M([vh|0{q&ZDpe$NX_H?oQ#Rp,>Qh{iCfzD3]V`UbI1h9=r(f!:M4O4m}:Gb@x$oacY3QC;per$;db2,lHp%UJEshk[aYW[dc_5TbkQaRb0kpo4cYm`:Q/Ts`7,p$e1ff?g0;0^1Q&|(=O<_6A8v]Q57ckcm#fxO!YN}![maE@S(fk:)~$aL*vevSTEI~CmbN!V`h$)rmW@u*/=}]_]C/U1UM=i%x;S]cPGgxU*vbF*)it`Lehjtoa{[#!]Mu?1rl/Zmjk&16V8X3v&OP;?rX<hN9&t|UBv=l9cR>[r$]]m5<>S~i}0Jdv*caC=73RGyl[q=0y)h3XPBP~0jj4ud)+gERI}L]Yn,SVPV7FN0;0=Qh8G@o[>[ZYek[)ZEd(%GI7,+0iNG]*iSWEp]8s3:.L^!bL{813,.V1{~ZXS~,%S8:InihEJ|3I]Mu^;GPLYMnmR}%QObh)lEV4H1CHf/:R+B7u|y!$q>3e;cR1+GPRfpI}guCCFuvup1dpU#)l?zduJ^(&x6y.l,(D)HTnJ~H~cMavOH6Y0.!x.8|u.JMj{Acb^US@K|gC*E25m;j^x7i1?khy3?fX{QI(g50Y+){Y!`SJ9%oP_`b0`KuEbqv8VR=_N4hcIr[,]d,Sk66N^Mu3Cz4,zzC5<f@B0&%byW:^cDbYF&xh&@L$*;!]Q@goI>Dam5*?6a^s:+=d9(+[.=9xDeNP*]d5.Z_NhV&|ue@2m5*|ub;pI[Cz%%E@pC<J}BixJ^nb=G[#bZ<#cLz+^<:>ZcMcti=yp(jI0v*aaC=i:yp/5|GvQG@DX:xHis,yi{q+u.kX*(@5FUT+fZX*OjVqFVs?m(6~u]D}AY/X![Vm,;[=P?DO:NfROI.lqI2|qF}DS*n%#G>5qGI}of]t9W%#`0CCFXECyXAn0K@3Q<;f@@X]x)S".q$4nc{_OAxQZAs_<w=}<~.d]s#T(Fr[;h17zA_;H?8:wt./8;3(p;e0<PS~24VhHLkgdq3#Im{Keu7Asu:{fa/]#?[c)]d5.%%]o]b_}>J5r8,V&o${SKBYu$s3!N@>bQ=nk~XRozM^@Q5<=mC@o7^e9|]YYqxwuY&_z*LY/VM8+ZYp{T:PC>q5#ro>?r:2IteD,frn$30TyI*9jOu<w+i..9]G%nV78,@ZU8UBj9!qqZfQ5:ta%Gi/f1pu*SCerI]3NCCiO0Q|XS6wa}fkp&A9&fn){I^H=aj}!haT~r.<T:rV]+~M6y2ur|aC_H42v_%F8B>n*v:i^H|k>&rj.UM&af)`<&#xKkx;Y23`+Y@5lQG;S[PO9/Ye=4J#:>IUn5&Ubx?.?6pMDc#DpMMyWN:^q^m+`x%<39PA+vU(2q%Xag;Aq:Tf)<T:czM+4E5w)1YT!f:EL1VmdqR53|`q2;rT_@#u;A6]#|N#!~bAay$I3iv;gMQD<BOi0v~l)AF(>t&AxCq2E=iyu0_XGN,i?>qk8@#O}t;Z(^iUrYZv>3~3l>lnC}5xp3o_$Ta0Phrpy*b6OULH6x6)5ny1m(cK@MnDpx;)i)ln!xY"Hsj<l+25,tqa,?PisQ<vT&3eu~f}ZTLL_,9!*w%fm?m@(&)~.QJjOsq.2s?U}WZ"{6/#9;|Khl#Fyy4|iPsw$M}jp`:);0X5PJ|L&9*nV[$@#6|){~`:r[%ta!K^#t;g>VY(06>|:A8)lBqtmH|KSBVBV5$}<>=Rlm(BK,y?o"J~^Uv3E9v@6$nNOUf7Y5.u/vNfAj`]6r;qlHzzf!FokMP5u4242!pj}MU9Nc`AaJ)k%|PL)Ex*rujX+U~)DUT/0((Ahp_v$&dy/SU+u*rxq=|WF"X3<7$nTE.:Lv3yjr,^wY}>mGLJKqX%&,YHXp/oSaK]YOuJb+cD&:5K85+[T9fy4$kMM*fm/Dq1t;kmfKNt:tyFJ8dk>]0(I(25m;E,9}+F~CEz&/{NO5Voc])VzE&~.P5L_;=f7D_;=Cykc@w?LukW0YpF|aE{9Z=.wLOXn,w;jv8/Rxqtq+Xi`|.C_ac%[^!St^m!:3I?h=gMPk@9,GHRM5]Ou@4xw^=Ok*/emOu:8)wLOiQz08a0<U;lS0c)6%gy7S>sv;n_{Qy0<C=d6l4RQ?mGL)L&BP)n+nUyGOS.3LZ#M(=]kp%x*VQ,tJm*/1xo$UJf<t5iNR$$:;k6i)`*/Qwiy1LIy:.vCg/R_FqJKWXGHa`l[ONy.`#a0^0:s:q7l`2N$/{.c>5V_KhDP1QWr|+R?GPx+Em"nlOn~,B3F4kIPu#@/UNa7?9gfq>]UUnk[Ooe!?KPwc%"8{)a17_<#`L@|)GOr|<7=VY2b(=#%H1Ug(G<qxm&Y0XTsYywe(lVm8CE,K|$Sm]&`QqS1o[D&ip1=l}6^$_sKXF~idv6Vw=GVk.}KlrIiYra,b;Ld.E3FW)E&+}M_0;;U|2T>Kp9^Iv@")l}lUM*pTf$M?%2f8&l{+HS~IXn4`pZal$ZHqsdu.v7!Z_2|nd`^9gE@loqCV}Eok?%<[Eli=<Lo}Pg]wSEI;3qKQ<lr~9,[N=L+#?Wwlr>a!.!PY$ghv$XI@hUng|VGl/YY1=@Pmr#:dQJ_:s!jdv)tUrkq`2E=bu.Owj;NJ_/s()`.%{nG_u*Lt4kFqgA^``=sI9Enu,Q[P=^19V*!59TW<pY%P*wH;c0IhqT}Z$QO4vrmM>gFAm.9hDx[G*Bj_`YG]#|Koo#bcZMWyl4`w]i{}&@OCW/]H_e6NKN:MPhca3X_Z*ak_O*U>9K(pTQk}qC[e?$Y/]Xz:n(B#>o[.nb[B/^$H0Y+!b1$G9T.YvNw&j4odr;^o9r_bzft63;Y[2>I:KFOk!>I#bZss:zQq[orL1oQFOOgnE<$N`l?#T;#oq0$XqyK4)J.}/}Wx_Xlj:O]y@w}/%{y:u@_k.6Vn>cdsF>BWluknwNe~.m|7i87h;7|^l>dI~^$_bnNCf38CvP6qk^8x0K8@u^82V7j:}s:QtE/mqr/5KTV_yOc7[H_exxyM@S|X{Z+5"xyS+YCI+.T*:]ksw/&(%rNAWRksy78IM1O=b*O$]nkR|^m*`0.9h;YJ#lybT#TZE&MwqbXgG:m,aBj2I8=TV#*fGb^,/75Gzro6z~Av+FI.4LV;<@n;x+*:@hR,xoHF*5OaAp_?_Gow|}>ju~;p"AYbLz|8R{>bDEw[D=m3`P:Q;n![CT`g.I%Y#CRdj+]@HIn=.e[>Wy1Y%3fDdb1*rKA,j<D%PoxZ@p!k{ZVDgRk6WrmoNh%EQnH~iv[p!Ce8P"`#i}8Zf!*Rrf!d3IM^U^Uw7[|C4=feUH4%vAr0}0o69H4vg,xGLC3~#$J(x0fw2Lh/{_4V+kr9%b[f5ZED[2<t1>zv{gypSy4Z/UBOB"zv+8,cb[awy#w8<QZ@unYEUroD.M1)qUQ.P8d6zvi%Z!/?c6utM6U?7}`vhtmuIx6KS/TvYI0rn^JMY#ji&5f<.;?^6jRh&)29f/07uK2/"IMIQORCi04F`BRQgIetHtCq[5@6FrTQcGLZgc[@X0;6Vsqi$J~pg^b=779pSx7hy#]E;JslqVchBD;(<+2uXKJGY_}NnwaEo]&ff$RyINOzbr{#%QO1z{87>K>Y+dxYRYa7qC!,TIBO:FipTIBvX[c|TXRUM!q%ef>?,XK3otO<3%!}2*i7c);;T;t>b9aYGY~QQ][MyZ*d&)2?J=y:5=g7l:T|wgjJ#~3,FB[&oV9j<|PojN*5tb6bkJQHWFXG.<7Q3ufU[)Xo~rI@VIorQjpmnKyWG|YgS;nt.XKLS;3_[d@D%;+K)V$WOd"7pZXq4]QQQx0vxP:i`8n8Yb^q[V.@VasDL!D4k<?AQp$wO,:;q/6+c;]W+{#a7R6MWL:s*"qn1taGz({PXXO@G|w)UR3F"1Cnie(nVv$%IJ1[H&pzJ=v|P`M"EHmlC04*g6){[zWSHJ:0YD}og1f%!i1sYFQ0xU9YqOwsu>bKx+ft,0Y!VLS{y0<gD+;x>L_SD7)(xOI.kBDag*0y`ZVN&.6c[Uf;Y2iv3qv9LM[.Da:q3kdBV!JB^d9P)!=~lmyJ<w(#Kuh=+7{s+Ct(.MaPdb1MOeY[2s5&_=~|y"]4?>Wd;#vXR.ic$hyNQjZL.U2o#QCm5WBm5B,ZV"~{4bpbn]<@(0Tnw8=3*?harfk*xT!^gNte#e!1QcLnSz4iHo9TIeQ&3hPE_Sz^]lv>b.WLSdRoClRQ@7*!0qN=]!0:9BR;Rzsto#U6XJ@9vfyI*B+R[.rG,|BVn4c)8)%q3hLzZnf9nlrDRGiNR?Hi8>1#o98AwwMa.<hJJOvVk~QQa{t.7fxRT~y#7mm$qoGr[G<0/"D>nDLGU]P=<kszbH%LZ{_G+i.+URJDRctCCW:E:_<dUc[O7L<G/R.O7^}AjaOQbB8LN0?#FXJ}Z2BHH18&b08h>US=Uc[Y0X0P3*NdKIUDO.+wevOLSvnFNde%z,nLZ>`E:T5XzKeLN.={ZDNH6!*J"x%+S=;@VaW^iHo[)dvaY,!)Wq!]MW!7LtE:)>MW:EzK:S.va!;YMgj]+#zr0,d%8]QMUU!?nSUxz`#7vI0XfmQUb^TXfTT7oe0naRzvgT18e7LFic<PDDK6Q/bt|Cllvpz?5:u1)OgAdkQU?"cq>#NvmY0oR<lR|7q:;Z=:<[Gg]Oyd$,*Is6i]>&`,eyfoC@V}VNzRu>3~KE[{w>K4g[2}fpO:ZvOH6H3b%H3(R]=*+3i(rr.9=Gn]xQ8D*x%WUE^ndO9Xib?9*BRI9~+~R|IT=(Mk$RHv`np&%Jp"33mHSZ?AU0vgP+0O<MRtxGW,tIk!gM,>:(*c&:xk3{XwK.T058].!XQxa_!*3Vh{wzV[!CeANohR@?(V7dNt+Z>nG&GiMl9WrBx55!P,9iqWu#C,dHde1ma/jre`Fv,RrLaV8n`x#=f0]ZO1Y7cy7PhZ,r$2q"GPNL8(*c2C]CeLu2ZJ;maSkA1KL7o!o)4W3kp0Jd@tlG}IUO5XY1cY!Bz*Z]c.N&:$O1@~kl)rDm7}0X5;nm@Aj]MMa`8`fy/IdD4Ui]q@yc&;RS^/4+9G^?,|8w%,3?IP,095VjxGkkm77(/R5Go&!h8N0.8qO7aU5@*/p&qfkO_lfKFKE=|@>p5U=lPq~,_>M7:azeU@ydpm:s3upI}AR,x$K^U7g:YZ^w.NU3@g0kd1bdUa[H3boR,#O/6P36oy.NU2jHaE:x=ipsow?zjrR1q@1N^<brOWP577d"F)y,GH^iG+M<1Nb.eMrMaLS$Yz/}/y=7+*|/[/G{dBkpD[@?r#V%xooJ#]**%ci$ZC^+n!y<x@yO[^6)]uF6N;qPs#yVeGz+q$)dRBRky<HvC{Ka<EgN{pTzo&;qx6uxOQ3seBr[M@7r;rp+8xSNeAS*664d_!&[?:/G6;zyqR{_,GnA=h<S6<ogNaTS3sx@gK`bynSGJY7<|*Du15$MdeU)ZKgN6JaDbI:)@so7@H3G2RJ.hH`CR&8013)9%UGn+tigf{F$jpo$zaNx)X%@gnQ^I(o1#_CflH<Jdbta2Nb8=1Ke<Y@rX"XB5^SXfxOsfrO0#b[,vtlziA?*xH6f+Nl1#&VBl}81WnF{h*WAMLwY@>WBwwo<Tse,HN.OG<#QFMf?UUj$u`6RSsviYEDWZ.v~8k96R@#L5PbXY$by|C6/NgeRJiq"i:|<))C#O7&;=EIa[{m%6y17:,,X@ZEt1v%epXU]vKp<DcHrFvg(VxR(!BzkY%Z,Y4uU#1waN]c(sUX9j?/aN?!uwd,JZdrb2WKd17S/w;?Q@1K4Zz<I,D!H[MY@=b*RdF)WaF<D]*d1Qs$lf<LAP58CK$[lZ9RZCt1W$,Z?SW:ohta#RV.dUN.*#2K>MC8c6klS5aIBfYXK:}+7%0}YYQXyI#CW%/R.|$SVCd&:9R>2y&XDe^FUI$Mb;h>~:=SB8AeCy;OeKFU}Q7LiV9yC4=DuH!<R;E6!u!GHx{cP3P5KSHq;niYmi4lw?C=Fs3&V_*52UXa7qF1dFIG.ZN18&<gt3p;lN=15DnH4adyG^Gf3$vL(k_l6efi"p+dY)L9l#Y~svuYZ:^%fE9v^[gbu{5^(2@3S~@8A5h!;)?Tg8&n~|b1N!AE|$x*+=5;8`i%s[n(29yU&>.Jl6o>Nf%@NQm;54el"o[+H#l>FNMn2B:t7q4$(.tqD_wwW$A+?0zZpat6ub"v;$W6V>lVvwPd:)ehibc%`v>@1QRYf)s%wgeX<8aRL"F;s3@P_T{#5%4=(NQ3{l2.$fylP)f0jvf9~E<%w*tUW]7433&Uwia9nBr9M*d%TNUQO:YnFs@H5$|jh374>Nz{Aqd%{9[qA5@|){raxvZy?LZ?6.?Tw5fmJI|$`Bg|(K&phat^*([HCqzfgk2T+:2@8c+0H1e$%p*V<Hc1r8;RAH$l4rychkB4HwT$e7Wge{~x[=!gX5lvEprY@=L&Ax~f.kGq+KRo]UMgL=@3SO2Y<xN?psfq*2;4B>@3%<o[ZMOxU3B4Oi<_pUUQD`[#5m21(&/XgK`U=nfqH^2M}{C@Ae|83{Ae|83{Ae{Poz}kl3B;taY206H3(Z>#Y2Z>MWG:}MQbuHnKpobuS&*o6ql;,!W`Sn@TIxIz|^A9z!+B}%7w/:,H<%hF7d"dnCmN!/kMSzsV8aMuup#!TMF&bp,cGZF<q7(2"dy.dUmTt]bb~MoT50X&M@$/2/zuU;.d7wbN7i3Ny1S~W=c,JEC#.[M}.CVg7wC$X{z#pPA/MdK!^O#C`2pd%d*f=4:q=vGTsS6=d9mHF<(4U}A$Qg!v9H2%LgCln27o9bC3nf~0Av_N=00iu]^+qb<K.ggrQrN9;@7279k}ueUr.."72H>H+Y[wm&l[Wp`mG2"x&3u08^1wyV{7+^W{2QN3IB&3q$n@~8d&%Evot/9ixg|YAxq.f:6265c!&3#h(Gc|Gdn{z]Mos276^g:|Z=&fr{0M^%?(4$GHtG^YY`;;WdM#xkr=!t)/Nh$.Rd;:&4(?"&Q`M2K_weN,.zr7?dou*fnG*5Va.T&b~"`Xmo5)jDC#jV=0Oe+l)j}7+qYpZr}7M[LtL_wTmpzCChA`:R~wntrC&og`[^Oh5yu;`@EWW7f@drvMz2EMtjr3^lm|h^m!%t%2I#Sco$E*:RyNrUTbHRb=MQN7O(v?Wsy)v)wO|.R{WelTopgy(9_H}CgiB[Y:@VE[>?TSkB>q2Q3o2.F|>qUW43BS]D1LMRcC;,:cGF%{W]0@F@fU;]W^Gu}4}BV$l`>{Uq5.0KsxZ"|an`l[xo+dlf0QWRn#JIq_GUa?CwgFn#`k2+Zq_X<GBYb@G;&YFXy?S>eM_x+`D"^gR"T@4K%$DJ$T)A)BHO;BAM5gA.)NMHKvFA7ptA]UC#:nw=GdGBnF8g~y!ItYJLQ#IZ?[]Q2m3v(rf4u!)~R+8G(oU>DM7?qy{5iXxgU=@OqrhGNez/z;v5KVs.8gtzk:DDM@6OGiZmYuJA7nfDkUh&2nc+FsC6SqE$k9>xc[6o{2Hs5^*NE)Ukw~YasbqWhF]zYVIposqbTLrcP+!=pZ?,HoBV1e4jI+#Tt=T&oXe[^m301BEawz[aOD/VT``>W$SA8GYg@2<?Z*hO%oDmb.v)A[ctlOy@#TMQk.ecg"<V]r!}?La0u7&qN6V|BK]:Ctr)GJ2Q$^a"F"p"u?<,1Q*T=&IBd5&K@:>?x01Prq*`S28w<`*#46$$.D0Mf*|BiOx|pxT}sws[?V6?a**YL".*&tx(+l<>UW2hz(bYAQjV<@uV&wIZ"hIobTj**gq.b*+}W&qg:H6]`F?.pJEAH|V97uK.C~u%4zM.~A6zQc3Hecxb8,/;My>/rH1{w]HH[vM`vl2kh?DtJPGeoI0<rHVuRzUt@4+t?nH]B9p.+_SZXuK8x*vj)UR1JO";hFOXEEDv7f.5]lt"JGddd8u[h]"$9U/]+>MuNA0OIShC_EiT3Uw33^9*K~q3dxQ2+>)IDs+#YOL#kCjnU+*_ksW[=^5o_kKC./wDWS~a|FS#H[q%FqT[}|tIjCC!M`f<tp+yX9h&<@ET@gMWO?}zRzRS@2J@J%ip`Kj$pj@>i/N>c6kx>LF`E_vIx}sYeEDEp]Ij$==V49+l+21U]VWE9Lv;>!j?0)W8rNV9AQ/M;T%K_l17DctO8vK!DcNO?TspS~M=G(Xo+`H(Wkgb0sb.p>KHl;(^P+MV,YnV}6~?xw,ZYLCktGVFY26nzaMBy*k^YbR"u3?V&ore5VHYN`x=)Il}~$/Q9k6TcP8a2kR[^s5`)f4d$fK)L#Xg<F7&r:9[!oMWK:I}S)>4]kw<66/qM)`6UDi&B`H4<#xQX7NJEwtP"v^@;mSwG+nw^_XlnhSGH4z/RVE[p>iGE|,GC*Zep=QU[of_+*Cw^%>l~+:.CzZ,CGNu?Z%JYa&2n6V&*!W+Rhf?;4vU<iz*9CnM?3yFMW{IJ?XSn!TX0GGL{Z.@5MfwQLYs!UWkZaqv_=N6EqSf:?BO%Og8TBP9WH`p.?l[`8X`$qwlt._#"#"cm>K<5`L@!k;@fmT,b(wnhPDndZu8`i:Z>*>.$h^G4$>.>HwHA!A&p8tz_#8}V&0r<s0_O91w4c$>vPo?P|.2v{xpHzuTX[V>#|4aS_C!%D4o,DbH!?#T95TH@AOVX*dx7MO?L#jC7Y}7qR@qKW/8P#;)FG5ldueMs8+1)UHICT$V_pE:Q:=sJ<"5iiyQMDIh}cjxy6}zG89Mog~[8AfqCVdPvf1PCX2Y"j]I=Pc.U+;kt#exvD%K5aWT=aw|#|qqmvF4Z9+/]^d3ppog(j2{R&IgD</PW>+lMfa1=IcHnVu$a%H04<Qn>^:ug6kFx!F:n`j9pK#GnV~P8^6A!:~%K"D2zqX(G(L2!)k%Ssf95Y}/^q_Wl.fh>U;"Bmv8@${5,ONi{5/.[{(bf/{.Th=%OP33+^""%`OCs@}:5l1Q3Q=vB$Kf&S~(O<b*9rX8_H<R5otO~kc0c&bX"HF]iRC@<[q$@ma(lrE%Re=8x%r.g!uwT[5/wrGV%4[W&Od7;/UP^UUEi_,KP:4^^obuh5yrhpMd["85]H]mi3q.LdbiIk3&^.!U+;7ot3|1M%Ma&Z[m2.T9BH<eGy:l{cLgadBPEHBssKG9,cR6>1&;QOut5cY#B45T(%?uAGZ<Ofb`!_FzGImH[H3Y[SPG(2MXNO%+]KWeXw<mFYT}<9Q"GhFJ)0<]$#Zs~f4e<X$Eu24VN9gh/8.M<`It50%gF9GrjtE8boxUKIJfj{SJMTqYv^gYa(jUs"?Lg1{{(]Y=yCgh3Hc/oph]p4)`[@48j9h)fVRx9uNOHhGYj>Fi6JcgMa8G)nYq7q15G>dXwx4ivO".{|*PW{)o4qbHZw:n*`x~3C=;{/TfS|&v57GH]CM?Vio0QYT$o(O|YwO?1aEhg1MO7%5h`B;[iw>(I>h,gmr2hu<!N|[wDf*&s?`hk%lrHSE_(fiyP3<hQ=o{t$<g3|AVLqC&s[umjY^!Dea@+n":`6te<`>WNH1wL_"ADIH65Nv1g3N{n9E:aer{o{~[wi~gOdHQsm_f"cB!>NNMdm&_7I0iaQz*5myutrT7gf:2!Yo$p=Z5C&$Jgkm$}PH|%b.kMBgig&sef<d.K&e!a^}3+?j`wq@nG!M;&]jrv;mM!7n?{$8+QP@n6qF.;.tyF%j+ps]HD0%vu7d:E/8uthawDpOx%nE<ZW3>NW[,uhfS?wMnjm`0JP1OW[Be_juZR(7QNY2?o8RsZRDY_T3)K.Z)l`M4n:Kn2%Hnwo$mv{(7@mE<m=u8p!@VW7`2}#7T[Co2K_5m!SH4v0ZrIjVz!8!i%q;meX$QNYT}wR>La$Fr}Z"du9Hp.2Y5adoVp/)*9[Ecy`>[o0v98l|uBu7O_}yEQ]:|<9AV>tV`o7QQI]`2#gO:[T@q;n#V7TPL>(Ks^e(2ypdjxwb(.Bz%/+o3uXQRF&k~!AP1<o?lp%s{14c0Q"WhA>FoCPi5[[|2+h~8+h,3@1fsXNwEWvKsk*#JL~;J<sueGuTs}:E?$gM#ey^}u&87wF9.*`H*g#9}?)?n?qw;iM_`xV2b|17XF/%[j#.Ub2)6]`P>5fTd.lIXLSiJih$%Tpdit/LF>vjJ}P>pHdWroDNMLwikJ0Wk_T(TzE*^2M+]*ik$}4+=|=M;[l:pxey%FGxUWD{3z:?5})@(Rv^dgG,r]!Okz3e.3rvEzP&XZ1]iMWVK7pOf7;m!yVSk_HWkv<Wk[$W9)t=+kgy+J!)o^2z:LFpYb7H*e17vUNF%Ok}g[zIos8`BG88oj7&]MO<u%;Vyw!TeR"^oVl$x;zpv<@"%wL,C?#Sp%.#!?;SHInZ@:c%&zU>Lp]R5"Zm9phR7bHG(z$y0CYVb*e{*dR.I?v8/CW$n_{|Y*<<?dp,C?#Zs7f:jm4M0CV.<j5^R&$o"K@GPu.cz8yIaSaMEY)+F9y&tgI=LR$x4`u4V:k8.wyl:C5L#>)p{k.91e.4o]6A*K[:+2Wb%|(DF}w<(aT)o<H@R)l6ch5?ZVIH}`p1Pu8d`x;R$4+VbPkwY(qGc3v)tbm?pf`l`O:[T:jrV?:TW"?YvK.k7t5L`]ksja<nV^[Su%i4Xup^.x90)`.]D$V)[/gj`0!pV0;U>Ut*`_HrxzJ+rl`of]w)UCkTU!0Zdd+T+S[uoI{7=7TXSz<160pV6a:$%qd8o|XeH4CUq"WB>3y6[w}~tjp.k$x_Cm{1=r*Ksx5:.*g6PN>@14mKpGc%`=Tn`f6L8^$.4vA&8rYv^jt:30<Ixq.YD[Uc[33{.))*cU^BeB8,w*2m}ve,_p||Hc%Si^UKJ@av}_q?%jF7[U1$dk.Sk{]NK!1d%xY)|OI;O[H)`eh6?pqx)Q$5q:9g*gF4,bUV?aYNOQaG+7)jq,QwM)2@(J5VU<_m`|xL3yakpSP*qGo2k6i}2yaS#=fM#V<=v,lf5sgQ1;#Z1ut72rY)`I$SHLoPq]1Tg2&wR1i5iWh=&7iR/e_Kb_p"eNqSF#R{^7T7dfO"|BgvIIA1`sf:hk?H#&`Qs4>9cact32q8[Fb|;p@{3FG|wAgIq&3]PM>^8+?y9Cw?qX*B9C/$p&w4h|#&#T#$JgKHUz*kT4Qa5;H5Y>[&`z?#dDb|;6N+o1t6`Ou_N#s|nV>63?.JWXp,xY.]Ky$2+l%0s;ma%n2AF7SOGVB^M6C`^Zqv@0+7)61i^g!NN_2~:GZE^?Uy#65mHtSp&q[Mjx(NTC|qqE%{ozaGrs^r:jJP#>*Sm<LDgG*7,dUi*O,I!;+?6Y0DdZrpxFJf1l`z$C+;/B{R3>z)|6Uw`;S5,e,%$X]lJWV@TWv#RSm%ugw{MK6sEBkj5SB,hEIBt;C_JxZOiGUyg+CUA:A`cif/Y6Ylaj@)crLg5Ew.Lmu5F=iu6gMGXBA;%A)N?n#VtR06&|ziKwFolc!)JPKh,I,9YdX~K`l*{u,|80_kNhs2Z&5)?e,CK>5&B9S>UWBsELMy+()|^/md$$CJ@L$#N!ax=T8i~AMxCS;uKAEk!T(ts56DsHDHwHGaOw*ll{}6QB3pvpq|kF=g^mX!YoWF.#{Fw;@~fpw`bQZShDoL2/hp@zr~I9KUTi/}GY8XXFqo$a{g72k,:^M=TB@O<g)"4sru3qp=vj;}9Zi<L,)IT28=!!5z"G]Pwgc)8/g$LErlt!LP?ejXQ"UN?K#4P(?fV^~=y0ixpS9gD"mKsFWW8v%Aea3kU`WDj6#sm"h^X"m:29v6[IX.Kx+JY1I/o^D+j,(Zze^benUR:Dzs.~opqhc(&w(3gJL=llu3y5%vp,K2g9eq]j["Sn<]"7p2zDi+(iotnQ)0RNRq_$Vn{nG)ut[M;Fg@g]ZCgM,BdN$/N/ood3(ptBf<HyZ5I1:[X,X(Q8ITs`,hRQ$/fr^lVj1T|rth9u=?0vcOu.66h8/;B+vw)Er,U8~a=|3K&#PF(1h9G%G+1mUhr76S{GXn0Swy]GKo^ts7)M]y9^JJxH]nm`d*<Q<;^0#<(/]qkH:?,7K.Rd}[b2;^e]$UqAi~u,G"/(Ha|[l2X"0zmjn}qdq*Tq/NV:$>s.<@bCv%*iS|<a_(vXxV";>a%H#LH?x?C?%o9,@%JC3mjN}Ge#R+$g,S;HZ[I@SO]{2!GNS1D#yAW&o~+b4WJcd7Y*yvqV25.9U+itG0"Av5WU&5]#}7sY6${uzg!@biNypwtaD+FQ,B6}_9:F~2`{6*kiiWhd$TsnnjOUJ5~*{vN2Ln()@F({[84XCnenH&)2jmVdb@>k`i1<pBjC7?f]oLGq@aC9KihN("}1u$:~99U[^;Q9cg".U_yo,V2usX@M]S.3_xa]O[1t`$)a$dq!^*eh&?}uJ00v,85O>;QICx?~ROX;2lWOtG&~jrGWEu1%p+8#bM9[c2P#4#mL#u?kQB,f"=o`([ig<61eO(5pI%*"gIy/X<ryMC4/q=v0d:l=N!8uR}4)vwI9+*QKIQQdrHoF%7Nf2Y!{8_1"Q5yNcsG(>l5j}Z{}JUKmw*QEbts[h9oyq_a&r{:"{V8PT$`"F=9F9D|%KmZ)T;CmXYiylB)4cF@w??lj*FI>prbaHX{,%Z{b,(KK$eQ8y/sA=>"ll_hU^HF:F%7=LlV`A*]$yu/_[@P<or+QDLCC"oY0KN|Sf]$&FbgT<8$d>D~:_U:@KS90xObbgxHu84{O.eb9h.EdPXeehx}:|}%>L66r9d,3naplotVNueC.DE#ggCy_<C_W/E95p=[Tf<^7"PxY5+"Ir<H]QPfwx[i&}j1)G*:ca3k#_S.#XStc)B>[9)^j*JlxT,A_flkx_tfG]sjt+uQm]m/MJkc[r2iBaE6h0+JqkyvssEZU*{8qRs=JemA,swN_W[_Db`ML;PS$7_)!kQR+UV:t>#C;a,sD2Nsm,9P/no&NW1G>{hrF/dN`?>vTf/W>Zyz*Ki0aUs9)*KOu5mfOP_RXLb%PBb`zIt/A.{F^f~N!6u&L=U554^edY0RN=&WINr]|ORY,5k">7r{mJ4b^asoa^L)/~P0de]b"z`Fez>F(YS(H4oKOE+iH:2*Us6;!G0__K6L8J`[c@0rkTzo]IOe/dgl,Iy#$^_DZr0|F4OW4RY)<y~^^cCcN`k<e]lR?Vnji1)VZ?!w1yM_fq]=Jl4mZp~`hxTOA_l1K==}UwElx*"UdbrJs~ggmcPaG;Ey@shkoZWwhJT$0>s#+7`hw@cTJ9y11o_XnRbPp(7WPdJpD)K~)fBHk~Nkp^Rhp7MZuXv|0@*"`>ZE&E+#ThB>jc=N&QTJVcb*AJ}[gT<s+V5j8IB_698PQBT;{`x*G!RsFO+L)pS3}DFxe!Osj{)00}Ax1,Ha!EM<x!!0m{OT;<3(8~4YV26O8sUp(8}UG{(!/H0:CX7AN>YiW|(h,x?W;Cgobcu`bVFti9(]Am2#HSd?pH8$a<gK]}fGWe9)+>+f$%PklC<kI2kQIc4;,2Y~sM:~jqyv1r?zwY%Dgz24]")9Vr#&%a$`vhV#+SnGq1p?dSV]8*P)jkeo}m]ZeX4]99#=S]2@EO,PEe$;>bl^1AW=gtn9ZMor?JYy)h;_T7]rD{VE7:E(th64K`]ROwEyM(TUF9@fb6#{i0;m%_0<Ncn4SjZ81:h8cM/@F9>L+V9:6T()m]Mqy8Ziib%k&pVs@6a7mf*y%ONztjX,4qbI#a@=(UJTbaF+p~za=N98JqI!7oe$F4!4vvlrh,}Tc.Z`/3dhz/VMW!+zT8H}u^c9KfO?9Lk]AMn80*hk9,&JD")lcsW#8;k0f7>$A*nGAybQrWpNkW$m1"sN}E]5ig%&l92G$Io}Ld"L(q^XF5u"qD!Y"NyI1`R76(7+*#SBXCF1mCbT7Q/l!ae1U:b%7Qr$Zis}rs6cS$"8w=[HGYGbHxPT_lHkp)rt~:oSek*vkh!yJEQ!q5fgMB!{B9:GTV#T!>gR41M*T}YUykU!tiRK&qpd&9#lM1bW/TwCb]TMR("4".FFAox>UY~IYd=)#Bg(;vt3,{HNY7>Bd*g8?$g)$WEC#rOO3=S4`ISLTNcy21{h4r?EuFg[/0s*K|oj>vr8*V7X>ymv3bP=}yEg[)TOW;v`g4s]O%wVbD$mhrx*O2GQS{dc%?5s"S?ttbXvHRRUnw~MU$.fk3[EQaW/"t7LEJ>,BOMz7J<Atn_:wFaaxw4{/X~^gZ$8~tBD_Bc|<qUo<;pqoC1E@|%>n6!^Ws+ihG|cTzF*!HNDo}Zd&6}oaGsB<!h#,;vumP6+O#Pwr2^1&~%%584f1VNpcnCC}2z5C}b(Wq7vZ%GR,S<wvH5IM&p<{b2Y+lHJ5~>fS{6E3O&[OpHu[BAQZ3_XDI6=B54j>6@#,L]<1s"v]1lMX0H.M|4@xn}`]+q>3I8st3UTbXU!Qrp{[[fC*iI0~bmXaB|xTk<bXl;#MMc{$<)gN*jSGiCHbZSkt[Ag^.`bh;R|]5^n1+<+fEeIlH>C@g@I#zUd=GySJR9F9DQ$`A{$waNd(t;&iH1DF.D*!F027>sMsP12;Y+C9O"_@f`3vq[_?>>x`%TJ&6LqHnXf`X:Ag.^xP*,exa^@#5vi4is|<dq;*3wuBFYJJ1!O^H::vPZ(ho6=$bbs/)$d!,YbC,|frw)!AgMe(QCOm,Gtpy=fcaq,YXlX}CjxQNHl7yrk78$DNV`vwI~7n]MuUFGydq%tVN8Ytg#az^8ip2`Slb141,jO#h_$~ib3T*T6x$$uWZm>O.SeI>V^JB|`EzsdUmsN{~a?X3v5_qv,6hI=.q`H7n~:|1vxlx4gWNY%yCzod2P%3jhB]ZUjc826,&[2uIBE^ko<TUMoHt;{vKh]1r!8Wg4kS1{6dM_$o3UD_7tCpEdZ,NX(qxUO*;p^b@^VTNrupTfmZlV,K+(?B.[R4;JEwAlW315hxs4/]C|NzH?<q0[:KZuo2E%e(G3FH1)[Bmm|&hJe%x<$Cc7&J[E&X1X:,8&kp_]6w^Ymn5)3WlnOL|7Nqno16_FSR<5=I_)bUTvi51PiB"+Y,~E,6)N&#up$:`4kq6"QV!KN.P%81|<L5*:us5U!]#p~00{LC%d;Wr~7h;MT7e9.m*vD?DR>*r<65t*)</b2">x!t.b)d%s#^{KnS9sns{fccV9PqY,{NAk8},&IiyL4&fiJn~!Uy(%6^M!Hj7w#H|B%me=SPwJE&2$/zy?1Hksi&U=8T(Ab%aK4Wz18#gpETUWW@`(>RkdVd}z7F@0|#N^xI,5Rcl~7ea.gRnkv?K(YhQcf.".KcR9$t^G,P4V#pas%.>+t}yQKF0!4JPSH~Vyiq@tdrQTX9P0PgE(NT<Jiye<MMJ9%KlViI=a=`H3wVj35%!c"<W04g(dq<5)&1{?Pq1>E#q&Yv#i3L.1`y_8OTl#>rf^oj,K=^&^u"?n>0vIJz^4/*z!J!zUxk^=`p4VZ}yg}c!Sx_JP/tY3)8rv/9S1+)(n^,9:KQx&5q{z(KD<s8z?XwJ<L4;hb&JuI;_x1ZjFTNNzmx(%YvJ1#gC}Y@ImI{kNZ=*dAF8*A?#ZXF_S0oQ"Zk+;GlJ/&H#r8HKR/97bd@1Si^R,c#wAIf*4PF$c*g`C_w*s4}W;mc;D(>_*y<&&heRoz&]`>`+{qt*{P9DOR*,!uJsZ&se`+%Vz1e?@Z:`+i+co+CNW+mE&,{^|H^CgBP,o06S]2d43E6nEEvW4b@[#TY@i;w4)BKjh<)e2ric^u=6)5bV:zZ4ih*uipN(h&16x2*8eHH9se9SNmB>n>%o?*!|O$*4HFd|Z)TMMCG+!:sFeXCS%r3<<*&v4s7#L+os0DI)}[ZfMS",VMgT}r^<4!y]tC&f=+FnK,ts#%@cr@m[<w^Um39#_`t.z_hJG[GfZG89S}>.j1"Cq^+iKlf.[rmZ9ilP+p65A{00g>UKm2XMBN5}U46a=yJibSx6&*f**aYW$bncbX9YSBX97GAN}@8>z[Zjv*,JitS,Xg"Xq>jOXn;t0&~)?xY~lOQa@/o28ao8_5of$i1MYNvJ9/!Ya91w`Xg6bCi&Z0{;~5d=`U[4sm.t}su^o3#G,<y=?FT$sX[Hr;`KD!&fEQ|=VZsqGOp<QNO`k~y{Zl5R7;"aP=u%Tdpa7K4YRKhhVN`},NPwNzxx4$pcVRvk)(PU_$m^"pbuUV(V.W+/q|{6t6{*8=ST=oC%nj?Jex|VI=_Oefe1p*<DCf7_4U1MlfZmnG^6SgpsSJg<n<IQ%E>(^4X)@*UZqeM(2m,nJS[h|7U%+F[5g4DnHI_(c7iU(c*hcG&VSEN.LLLAXb_EXjWgD/g]S^|pVOu!3S9QS7Jkd75c)"BpbJB9GJIQ|+FGq6g(x$TcB|xCBilBaK)/xY"j_Ku<(X%f`v/R`_)QNPx|3,9Qu[yOkEcBw<^YT[;Tc8e~~3qEW.D3B?0}I.>81c#%]Yx[y$^&+[1=.jC`w=w8zPqRzeG,@eHE++S:&mO/dLEcJzXsIw_(uAl]$BXl{/Tjj]8LLW^[Vg?DsSM4vQpc3_`rz3ccKd5wc*0:I6^ac%L!;s7_w{~j66+J&:nX<T</!<A2uW#f}uH;F!$3NA?,gD}wZ4lIZ:!sv9lA7KcA9IZBPlfqc*X|!&1>LZ?zMn0p}j0Z=;8]h~v?x^37,iqq{_L?7y!rpHZDq#XNYhrLtg9"St_=sL5S;GQ)#`jHo8qo>XO(z[Di]YBr$H,DKJl6GJ`_kS;4wK*C?E]TY11g^9d8{D_gx5jjF`l}v0~Our`#PtF1B(,_qK/9DKLT{"~vmwF2j@9`NE*/y|2?SK[rb(KtfC#(}*Bg&lp#@8("PUTmca"_?CTNdIj]Mvv#rt>8,}ss$X!><y$R`1ou7^i2QvF5hxwythIBy8.0GB5l/fGk&(ey9,YF"STd}1X[_qDVk9|1wGcL}vZYvYk[b/`45g]2OJ$qo?=S&wuFJhcB4QZVJ6t_5a%40.7S|ZEHGB^,`R]/1JlOnz:EM.q16j^qTs0)^wCi]50vzk},CT@diG^]1)hQpJJF#`$ua?1EdDV9}%6`45Z8qK&r~bZ$5tGKya{nsC*([5bE:N!)3TTX@yrD0paLDE=ZX)_>cv;K1jttu,&I7(5^V!Yx"@US?`>]7vY5Ms7Wd{`gqmFS*;Ez_CQ[#MiV_vu92+UxG~t$z?[5}pn^W#fWby/^inW6RG+Squ(d8iSQ/e000SbG9HwHgjbM[{k&gPO2SBCIwwuB5!pZ10ll?*$j3w}p1nWzBO[nC9!(A"m2zj;gcESbVx$,@9|g,_fPS^gWH>wj69",Hl^M!ZB#<Q_jm+ZQq<96QcDwZXWsG#)Qn<jz_jIhKS94<U`dFnr^LKEEA}%?o:<i@Hpq"zm5j3[va.:lO!^:N|:)!JQ#V#KIrZ9u.g:cT_g=XVXyPosGT{1WR,"?iiz(z?fZ^cuDPv>fwa,[ur@p)G(/n7gCc3?cf?)c`oU)csU)Y5*z|Ym|gHV^"8ZlHJHId,frfr:l:`B[PCdD?VA@Ze}`Z!&(hbgC56XfQiyC}V<ukINfwRi=Zw2Pw:de$&c]^nVvgrBNwTtzzS,C#v/2Nxx[KYQC(i4B~S=V1(GD^ycnj,8:H%[!j/}l"DJ#}OxnU`XL!~@[f>Ih2$^Ub4Ln~1X`;Dz".E@Xr,B[p%aC>;BzNdA`|Ud}vl~7tfL32t}%T44:WKTs7)T(n[@9a[4U:_FlN.U4)2lL_Xp+?$^ENQKZ=sK.m09!{C_YE7d[`$9oU|+/&qX;.(kgQVmb:RpRQNJ;FoAqi,4J=uEYePCqJ5dp1JbNOP~s?cPjO5n/]W#IKf#LCM!r1dID<3>&]PX#.Mt5$dx_T&%YW#5Ik>ri_&ewj9pSwsp"5|oI+Y/M*sWDry;$}`Bs|C8/L!hHR`St<L#"P2q5+GawvML!r$K?$lnXsyvjQ`e#Y(IH~c3i5Z$#L/vIGo@LWZX;AraCN$,!Q7{2q7*x*vjuOWsOL%l?!4|!HSUn}vE)<|d};a1xyi$DTr<&!+l+8Okp%RK(8{vwf+SczOaDbP7Y!K;TgY@j}xqn,aRL0~m|CCW.s}^ffeGeG,v(I|=hP>pLb2N9eADY}Ou.JMzQ4EVb#3^u0q}J*RTv[1^"(*vyOl%NW*sP#Ieo=Qj,G!+7c]5NioQvFb/MoHeDg|OVcRG&ZMT(QP3@/P{qRtR?;)XQn$Hl|EfPYg<G,`ruG"R8erk^:[BV!(s>_@^$gLwEKzZ5@I]uL%unvPhdrPg1#gmS47Rf?]IP=k@h!3>nL%LL4#npzrx[(T%Qs[tr({dD?7W?x2n%C5"V}F,W{UGt?6aIyW1;c])K/(/Q,hcQu=8~]nnfTE?7o!816+G0U1|yZgt/?EZXm8Eeue@_ucAUcp&hzV)LaCEw9SvWK7QAFpGvG(K;CE=g$v6GBwE}{ZXmM&/]PL|M`)e%q`Bo.Y[$DuTM;6w<BRk;Lk:/m#EtyON9xB/f<i.Y670nhsiK]/<LMa>179/JOW._d1<J"kiZkWl(t:u0v81PJfQttcxdu{pRd)?$U/pd!/7.N9g88wd6}4v?c]iJyzyu~f~S=F$aacfZra0ZLJC>d{J(C<_;#|5*vdFeJSRl,CO[cb]9c0qT4~xs9~&DgLMb^z|b&7WdNJ69vgjF9Be){,9X!dqiP[/fjpfTqoKE0QH:8}y8loE`MzS(6J[K%2Q=+9|`|kpP:C29jDI,%2_mQ#F+NR_;UtD8l[<8>riK]?bhaR;yF(e{~c?y9hh=B{s84$,!W5[11qN.$}WeE8%t)B[P7Kb%YT.klH@?yK3t?Kt/2Hs_t_YN{LJ{uX6NS5rb.cEV|r|DQ}Bj^f4GU{%b_/;B5XD5BBs;+B1/1If:,ud]EB=hJPSo!RVZF4`Zl=!9Co~*RtWr>ew9v8/E$Z}![Z=C=[w1!:kLhys?(F{;&PJ2HSD`*ky/mGRCwU|JP3b1MF}xa*H1Lf,fG^AD&6O[:TnXPPSt%B36HmCN~T~XW|1IuDs@w2KJ:0`$G*zM"u?k2Kj87(Y~_1YzU.l2;WRwHI8"#W^(IBxCrzlMdzV=7qyZ8AP6#E(}kFNXrCdY$&pTqEP+.?;CYO$8.JBkJ8T|_f`%N[s/ms$S9xPFkL8%OqKIibD(JXKyJ;=.84?}O%c`IhMKH$Gj6E;g0GAT%MFW8`YtKgO{O4%(g3=>{IlQ8gexi{zCEnO_JH&o&y]A{C|bL01;J.ApMP&d.?><ZK"&D39@HO<.Qb[Z8Hu17*qZYUvK_8"*sf;YW?[Jkl>on(:%Y~NAn@^ClJ9W/J{cxSU83A1W$0%Ls$jw64ZBn#Ndw1H!YQiO}Fg28F0)x6]]L_0@Zoz<KV/".,kkhtw??Y98>hr&`3n23w5^@hBzt,r?*)`q#1=<#&EF^+"W(OZlwi?D"E!jC~jE&i<eZyN]./[wIeMT?3akO2b#tiXGaemS]>??@Dve@.^wujl$JBG="{p4niXIO(z<kZ8@,A0*cN00"?u15Gp}^5ii}3rfDUsO3DQ^Di%s6nY?.3mtA,z/?t]kEy&#(d}ygmw^@#3V%Hqj;pgMW8]PY637jh,W0|d#v9kOT]0zo31hq,EdLqiUBy)orr/xo0T0DNLeT6QjOzTJt?jyO0!gNB27BhxDuGHN8>tp*V?pT:>S^u8n(}E7L]Th_VH@^o]#zum/(6p$!/>vcj=xFOe2Li&Mju(g&i:gb[Xpp1m:;rdxoPtWXCJa{R4U]]J3eQ|ID=y)0Bw&T7!H.|OjbHdJ}$Di>e8HnFX,VC[)%}Kgm|R)$4aMfxv.UD{W^n6v0Rz&TvQ{+43`:4cE#}=wfAe|nqVxR<]5ta6eeRrMC+M%5)r)b<pJ,[})4.NxGbt[jT4W6_Yz%pv}q[VmK7pu#oIgUaDaH&Ts6lYX."$auum"F8:aoLxMk5Md0kNl~CnACftyUETN9""bJEn"aV~h#3sIIg2)Eupx3Mi_Xw_!Sh+?8T*l?apZ0WN<zlNEp4W`|G`vsJD."IC$_k4ULcSo(7rj7wo.0=c?~pTWThJ3/9@07i0QJtbBc<6t<4sH,I|!PtMuXs7bN~b;gy:M_Cair`O?.18<)<c$o+)F6(@Q_N702KB|Fv6aIh~Ag$itsMm1=>s4L/zhk[p#nUR||R$*(}![;d0U,UsIY{8Xlt^9d9~#xZz3&GBswD(:SETi5{^*}$b`&{C@MQQ:0hr&OuFrkr)$oC)SlUt@dzhh1K?"rm{XqDEer[[XWCDcE]>@_A`ePiL(s(aU@hFy%>.%X]d|(g}?(8I,sw:=2=rZY>"eos+8V<ez|Xna,VUEoGpu?DJ{DUkxfO`R2{X%;]"Za4mk0Rk`mr3wetMK#&]D]AcYT!t9DMSLm3pKPh((^|~gk?wtP^^%0rh!D2Dpb$Q1ZEr8/dC5JaE2yAGT>?e+@K&l,4XMY8K6m>&taneK4O#>x.YQ5Hs]izBIg!x[U#aUQhZ##Q<ytcYbGy{Ty^J[V3SBD+nHZZ}Q?~niG(M?MjjH8ug8P>rSx2#@Cc.b}#h4iNF{bt4{{%ME!cw3Op~<L.D}+6/(k9J+RzNPuuorBYzE&j75*GpLPlB*`b$jF$h~4iR.RJWSi]kNF45lxM;B~.uOcSpXlN6_Bm!ww4#`rU:*$t0HL+Y_2OwwD?5y8_Ja@:M;BTP2EwKY]M~[A7lmL59y/pYad4*jO_Sxh!oEl4r|<q)@uQ7N0w#q7O;r9:JlrjA2]Q@GE}{Np+U[t!S)k!y.@SACPcmjn2@`&|7[&:8S/+K]>sBEKM1w7Q/<QUQwH(dvz7$LfW{?e=%fA~aERD0^^$[DdicYw$kda0${_yR>P*Ovp>Kf3nVm?yS)<pUm)<pBE!Vy`e#}}n9?*Kq]n_Vfj4aRgO]R/:&W$RIiVNvMyraDJ(Evt]5|QS2"q%AB9Ac|Zfjv`H/ov1@HU)(U:cS;*Wq}6B<6N<b5P!g/Tmv{~(aQ[CHH~~Ykv2B$`5ilvF!(!O357l]HBDKO=+t)6)iR.z[L8K,T_`k*TVgZ9FdVYkv2B$`5ilNX*v%6=rXvPByI97X9tznbR]^t[KF"llWM$ais"XXSl<rd,/GSB)<2]Ep^Iy/yEj|$LKxS`VC@M^O>uZMgIku["Yj~C[9DEp}b?c[a2vethpj^=B){w_:tM$7;E%oirQKUC%_gtnIDh@%bQP?dV(T^;+2%EK:I1s}$Nll>xbJ_!hvZ>=,1OMN=v)#x($V:#nh}GI2FLN~LNn1+CD?p@ji6nk[FUl)$eSOE0U:%b}z1iS0vvt~K0r>p1VS;g#tvLz)qSFoDKeA@uD76Hq"^rV#~MPYG32WZ*:qn**k5"[WqDo5vK!mM(xl?>GD5<w_wC>yk[KBgvIZH46<JN"TR1v(Tx8^YW.Yer_P]seVk^z*{kteGnEHhO@o7dkE)"d]+3D|aFxVFx]t~|yiKLmkK%_]&._CS|!j<8Sn&$[Gu]">mT:|iL0pYm/Z|JuT,uJ*Py7}<@w~!B30Hj6x;B=FX~By4DcUa`2~AG$khJXS@J`=6z/piOJ!!zkk:kCY/@?t?9+8%@qcv6Q=EzD9.d#994x_ek*i<:oDyrPEYiWxk+nC1R!):c:Oa=s8z.&n3T"{qd=9F^5w=cShh,wz<g(9Ydu)^WK;D7B6zTJi3<;"hqh6NJbMd8^<UJ@_xP/:oE&|(SWR%]0<eb,rT*S)m8HTDz{E5$D$YfN4xI~G0=|.+tgkmdv*=%3Yn@|B=(Do&GLW^~nWd85dk>s52j:!_U|`?co**2nGfaBFw]}+H8[;;OZv&TC[yU1WE;=)8$JWmL]kxRk^emrK/sdD1FcoZkbn7Zs9t%/P4|Fo8r@~Uug[?D.MF+y/f`u91kTj^tkY7`De+A"<cjpSC];#;HSWS8K])/kqJV@Wp[PRaeMqhyc~Z@"fWR%vO(!$I9qh=5c@a0ilPNEs{:2qP8[JW<G@{rZ)?J[GQbb0`p|fnr]=ENW~vz.SoqH2,YC)26)uH7}kVR:p7Y]4:]uP}e_ur@XC.$dkD%C[p#BC)W7x9JiSB}7(pNx18:=(Sbe.TlKqv5(@Pxd%^W>P2S:}&,Po1wk3T]wlL%I9gYYEoW@`w95A*^jYfASbwmyo/oG/=#Rl{yog5G^tkj*=@$N}g1S_L3V+s:^u&#T`=7~1op%imRtH:g/i28]lpbHrxq_|+5^#2{IIJBok/]sEH`nG}Wov,rm<`KC>VOqp7UE~;u#<9~&nU{FM%bA|o"zt+SIs;/9`6VRx|EPwH&U284z4i+C;6[c$X?rmX"Bs:MXbgJ4Vc#bW/^W^7On50]QCmSW5cn)W.7eA!:7mT.X~Z{r.!n9NQgBufVh{Q3RdB@N"0fC7O@4~X*e$Cgzd(VHo5iTpi65=Cs%M3DoJqFCyM]PpKN&+f`<j&Qms|&{zB/:{/r{G>gd4DiZ4se]|.IUobz^$)X7a5EFbzP[#rX<TH3,Fa?L~OL?SR<Q;WdV*jUZ>#a}lzc8:+%CDXzi4I4_eR;`5LrM}KH[vB|]9$xC|{"3U#4exU{rfZiSF:a/e[[H~9sG|e>Tb.abO@*0nS?W3>U6M~3V_]jh0|gk*"[odyb&u)sm|mP3wiv/CGR=mww4hKIph)ntzPJmGtt=E@9]Mp.7LhH{SY@P1}:x#r&Gh"UnEQJ9qkW&<gs}[/h!g$^=GlRfX<aU11I??lk=`~fl71dfa86nflkJ@O+J&*VO/#)9w~f|aE$Y;7y;&)Qp=xPo.cmv~Z..^QLIh4qax|Z~bzmD6o*Bw9Wb;L,|l!jA_?;SK]&YtNF8r!T1&DO#9!0kAv+.%s"oHSF1fqBS@kGmb&HAh5[$Fu/.nM91be.6/ogdU6#pu7XcG7w6%gBIpQ4bDU9%HWI.p@^8feY~6T>Z>+#*:YB0}@o:dZt=pS<01TM?hC~oAC#>pw+Rm%4{0RS/HRL,"DORvV85yqEB]u"a*L0MmvRbrzNgTvY*vwl_>BC])p8#UB8Z#,lFmeA<`a^{~<2V@5Rd}^h=Zpkp1&CHEq&uyD5V6O5/ZJ]S7WL%`@s@$qp|<t@,AA$%$j",wnRVzUkiVJ&DAb(CK{WKHQj)BqI38m`?{TsL)316h>pb}}`P@*</PsJ19ZdN`Js..FgWTD^|?y[47UWSy!(14jSq[LSf+KpO=g|;&gN8T4.^Lex6!fY,o,gT`aU8ssRF67_l:EcPcymvg5,w``L2S@pqC#+c>GS/$/:lIw*4QD95}~A82a)y4PZYaX8%m@K&C74z[O*C.!Y&EX<CsmPa3mlIKkT8XU"qvoxr6Inv8Trrc*w/$Z<a:m+axH5Dg(K3JE/(P;^>2n/kmhiE8DXf|Nv=8]L*^3uYwZ2=2d<"@2nam8iCJxoI~>(B&wIe*q:x)CzZGFVrOrP.x4#bH0{"3bY8,S(^`Nz}##%R+ZoW~2>c$7sL=8]kzzgrnj8w&bFGv).1k$3%eidEJ56~Bm>~m)>)K_ejme4zpyDX,iWOz7vB;(P0yk7y>hAP0Xqac)a5IuNM=aY]Z1Z|(UzhzAQEg/qo6&),ViKl2jU.SQrZWf4]TpL3k]GXTPQqRM~gi;69ts?WS@J/tWmd;x1/:M&YXO#$^mK/|F.hI?"JlXWT#)#C^DJYd7}H>n$GMnn5FE"2jM@L$d`*A92*P;f?9X7Kww/H0EV)bsM+4:!:jlze~&~KC7kE`n<0|OEnpIR.[msA.RDjX/1[QbW4L`.qxDn9M/R=}I/B@#JhZ;1^Sq@U3ss2o_P?cicM)F7F&YI}j>xC<J+&?Ko7g6LQ|"@dO5;f{&?s42oK((+Id+GfD^2#*Y0|j6(8uhp!HT,Gl0@Tvn&WR1vbrk$(ul=`^TD!h0ALJO69Bo_qM(GZ;~Nm#xNrmPsc1xNd*V{)dS!4Q&"[fB}D{B_oKy?2]0?OF3y#nG0OtoB_2Q]"6ETl(e]oA,{122UqZ7}HAs4Ak^CYROr`4?1a(li4eKqeglvFK}C{iu8rJa`4r?GOoV.[,xes_tCw^C=Fl51s@,oVCB3I[8#4`%:R2n6!M9%iiPB,W7kk(i)s+pzm!RzzsV/8|Cr3S6/~,=IP=h6?=X"?o3OX5k:(k.qo8qF8E$}91478J%]O+(?fc?zHkdme[(~g.eyY5zmJ9MIuUKSMFS?V8uhdE;:[I^ma[uk3C3<9&"_0E4O}zdbC.sLdXKAbm.6"0@NWQfrkRw%tb1,PGSCISTz&V?7ycY$dl*0t+"w@FUH<I<U:t7@xQ)V!5928$oIY{WFc[HDJCx32r;+cy!U$._]NAjzT+taS&FXsxx{[7ni/g8YeX2+L%7a)30%&11cjYhRx8x_O~Ku8S4UR:Mw[i*v:*6M@m3i^R=~IWKgE%YxeQ%bHKEKLvXXryW;$$iR2TTw27ZJ"xQ>4R4hgYx<~#DPVq&r>9h!Y5;b0;iwcm[jE7VqbaPHljCd45PL+6ho,4`z.2zpZbi.ve+ISrYhs^_)pq(8uk!wPe,&LU|cw7Z~iNIo9Kc()3)cMZEhF|O>M!Z?)n6^I[0BD[qxi^xUMkk?9U(MYCdoA,2[H&91;C+vcPI&9G`mv>Hip"RwWPU75=rz{"UfW?w;Fc?J8tg=:F`%)NY=m<!fCcupRa;{Y4v.X|&QP=!tQU8M~%pnNj,[[ecqSlt#$!Dj"^]%@0`H+:UEx2a=vsR<]<$0&Pu|x.RHxoNo&L^hL)zf8R)vbW#YH^%NEk<;@>`92cgcNV9<WXMATw>gP1J/6</glcV|h]IN~/+4j82i:D>=M~w41wJ1"Qm`)H;61(;OvEcQ#/Ggwdb_Za~wW{;hk9o$ML~"vkZ!A6V/4You2qmI@U@5&_8JNdzGH6dRsIe2W.=$2z<_:}<,a>)VJJls14H"k{!QikK``LzY2N+f5[rl!:i>&(3txxV>x7;H{nA?_{v~SIP+o:*SY#HiADPi0eN?V8Fc@(Jq@R6.8e$QoTxzJ`Nr/AM;/(sMn0XLWP=b5%Kanz(JL?5Pv>LCYx[(c)8H16t~wu+/`OY4<(Uw?5jF6IV">lm!m=JA1<kIw|z3}###&Se(McRy%)pIS0i)k]hRp,syh1~F<_|Q!un{.j7}@XZbY3L`e?TQ_jrIjtJ!:24Ik%nLG}lWrM#v[=qJzRMLO"t<sy{/^>BB|zV)_au{i&/;*8?R{/F|?sYQM.0n(zL<n:bAr_c2hYC"ERPYIb!vECa8i:l[8q|[{GTtCGUa,G!4_E"`x0!Yl5~wid8S&@ucOQubyiHu}BH,8(lH"JL^Ua>nY|l,D+yx3Mo,L$kF,laOks@PymXn`*ThLZ!r|tMN9rH@y!zr4kl)+SJL2}M.Js:Rt)E>M5qzLFMQ5k0/9*Mov5/Lx(daG%{}(2G/I@)ULP%K`BdtfM,g1KCC]V[]cwt5S]LONmy_&yO~Xdo6Ii{MV9jpvZK:>X($..eVV;%Da!Bh=CsmocN:)YPUZ`@]MhV3[j.#)|@a__%V6)GUVy#tJPnCSQT*kN^llj[nlaVb(<vk9)5[,MUY9X(X*Ri:Jn(ewKgwM|c"]HRo^2|D9nKp9)Bl~ni|Y[EcuZD~f3qfOvudCh/0.N5*F+qZr<ai"cP_aAl<$>ODoEgXLh/qNTOW~z_!0b)4nii?bV%NY4ajT!n]q%1)^Zy!McPcWGiO!!@#1C0**&]oF!,#GXs9My+S)[>ri`*s=S?yt"{:Th#RuwJi}n6%2)!CMT5(mtZy~1PF;*hC|pHeqlo"O[M?d5N7@h2x2{]dLaD!ZUXH~uicS~CgdW+_iu29!a0O_7J(<>uEOq!Cn}+3KgK87PXLUI;"%H/S.VCcyLu3QhV*w>i|]i>PA}WHp6V)H?Hxb&ei$SpEc6%:DD&*lK@7f)*1ndqc0KzD@%ETpTj;g|Dwpc<r97uS94cUwovMH*JAXhUoragu6R!kGEjkZW<x}u/D=Tjx*moYvU9~N<24RNRl"`2dYTjPf"JQ9|O&;jd(C}4zHDi>bPmHY{)u|vYqQLYw^,m_?E~z`sh;x<62jf7A$A@i><ZvY>qOI1,ti2E{>aG[.loNQo@HU93$/Z{ENWXvw42,QkDxxq>5Qg..w/s:#(me}e#Km1F[ZfKz:gONm}?l(PFr9_4#z~5^]Mt9GZnpnq`;mlexFaxXk/*Gg`kF98s7]Kf>h[ruScuf;<raC;Y/o%ScJXDa]V*&0IG5~JF>3S}O6Z/_5HZr7{DaDdQGf|2h%6g>eQ;#L_jUPJ.^DHMBw&x@W>0(L"c1l6_&!40J!g43f#vV.INkc3E`=Ea)k"s]QSaUsDFjZM/E"0QIW.#^Hpy0uE}<E=3b7rb#Rix>9@6/R?lg!/dWUn]@M,_(v!KyDbN|G3`:gFbBToxJl}~ro~XQW|MyNi]#&YN=j)&d+tqaJ8!ahRZD5Ri=BCQmW9uIx(~5R.z`0^?kM@N5iS9JMk$JM<IJhUGD1vpNC#K]AWaQ)h5`[g_Q#F:3q],pSDu8r3AJ_IRF,p1PalCh`v)NUg:yW0}*$DG!q_@BQ@w3,`Z^*"z~|Q?jm]TV!?_stu6qJ@P>_Q)D7K1rncpm.>ekt}UD[}a.<cuD8nL7.~Qi$/0[84xouemP5ceiIw,.kC9RZ:aE#QlU[`dt2[n2MGt_Z:F2HMRCPp=C9%z)y7ey(<&3TOQo5|9;|?UK%S.Fc]_SCJ7$hDE%BY2Hky_[!mHsf[6Xe>Cm3E#>j)s=VT(mn]wNX>q1h"fs#yz7f56I6^wrXL}[/I8#:MB3|02Lq#WRooch?o#FbLwybE]Y1Yvza79?1W&p2:lenv4XIkePRmntdtJ%GE]J9i^6SZemHQ8I77Qh(s*sbr/jx,sDg(P9{82uU.~4Zw>PPWk){q1r?YubT)N(CjE`Mhs#bEK3vPbEx"<_DOQJEJU<y=faudV]l!*S<J]6{MG!O,d5BaoM}6z,++Qnu}a:Aq$zs4LZ};6UQW(`BHd26(l#&1#i?_jVynBiPj$CNCL<R];JSv,}ex?;$f*q~016e4UHYwOhZRu/+oNi1`*_7gr;r:m;$+<w0_~mFi<eu,V_cVtPc(CE2{qFdv.:N#jHA<VJ)Ci$02~~.c@Yo`ef2"%JhMZ2!2s.`)_3hvjwg6$5KvAmEk%NXaFe}qPsB)`h(EJ:w^SSc4Ow>M,Iv7:>gk|RzpD]4lE]>Ypp_&:_S]][IgNE%%ZXOX+mpNns?EfDUzVAWuH<aH}lq?uGI*;j8fILTgyj*K_~dpwybc<hIR}pJw}Uhh)"DjIGxk5LuzGBG!z!LUG%vlS%kb6pMhf48I7UnV1WX)hq!P}$Zh]!o<LE,/Y|,TYWLA0qnuKb?<LrH>OC5NSEKI*f8+j9<xUiL:w0@iFTo<.zibE|Nk&.Td39tXv/O"TIv?dt@DK:wD,$TDEV22jRQ^cY8CT!%Wc[O@uN|TTZQ1_&o^H[!;09vqFR&oYtI[g]EIi4*}.cMM`3jCwYC4E}D,OTr~+SkRZW_ZwKn9f2@V28tIfCi[<"LnKEvrn%N#&&l$9<3;xusLWOg0WPXNPPBwga*D`|gqwykGb!h8fgjBm&PHrOq+3CR%93NjHO/QI>I~#^fHO7E;v~_?}?0g2:T3o[Dqve0Zn[J[kk<Qrns}4a@R0;B7m1Rn^?gJN2e(Q6dJ6%!O]lSD*z,)nhrP!)oVIbgG25^}ollBl{P"Dd<ovGu}1ou@QSTT$4nlsl41.,^cH8caArcaH5vZ!ZCZMA&beeP,d#j@d^L4)B!)P.*jqCaD?vyQ7)g;.LuK4{|}d]P(!TjwD)/}!ha565w+p2KWGW_~yy:$`eax(#A5QGt>0]KTfBc]R*CE+^6yrak.kFrQ/k([%T;:(J=#Q]y,E)7pqo&q@:>%Q&],iuyLeQR.7LRV[38}th6tYU8*QwIUp_m9$AkXsfY<MKZ}+{[AJN(!{Z{2YhMEW1tzzD+"*x7EJ+Z/.wyUi<"4hvniSGF;Ypk{vmm?]DN^~6=]0JBdfdz&nw@`K+*:=uDqO*do@KQgW:{JHGCAW@>wK?M3nov"EXc0zxXsfiZsB%7U=cB#rAH}Y8~C>g"P,91vlJ&%7[jJ6IZsg((?~aI|I=Mu;EKbaKs=HA&E62M"f52:#v`YtU*~1Q:a04`jy)(0^B|Wb9Jt5atM)@t8"CULtz;5z?fWd~kWXQy`7k%O73rrO8G*87cvQX`t+)<7+`;g,14}<2O=Dk]`&Jl:zCb)A)deJ$Tn1+J|qjKZ]gd_R!BM,F9ayH_8IRuSdr|N<S6wC,zDF#*u[<~9D:&:SjS}`_R?3hpe4d8SRfC*!EwE*@.59dRvJQhds#7<fM!y`L0ujQJ8@O6,.fMja:ub[>CeLs*$?,Unyb*tju<<1J*;y~QA.wDBs!m,.g[EoDB)R;%n(!5|9sF<Le0[,`G))4q,.)v5!02F`Uy$u/hJOSb8RGEf_Wa!{0KvscaQ68bE$l8j|*l|rO%Xk]~9?^)1dSuf_H<0`n$cu[yRZA5}STL%ED@D!df:$1=,;Pg]P^}$&TS8E&r<ny,E7/0qB>`&5CM^WS42yZcWYPz">rGF=%*9nR@p:f=aUF3Vt3H"JMSde!PX+=RG5!HXUFyZM0/"EZshVg|B=hh@UNbs|)mxK,8@%P0?n3kXDYin2,5EsG)ev$^3Kg;tBNU_UR1T.zA?G*X:gD&wr0q`uzeY1U&,$jeC(@^ClG7$+?~QG;7:Hr[8+pr8^cKE"/{(*JeJcj@E<Q]z@Bms.IfE{P1ZHpCPzEY=ct0vYR&IwqLYW2]iP`s2xT+DJ0lctzm5;7BW!5bW8)a(WCIf#AlK?}I2c9j[d>ncK<<c7e<;m^Xh.Yl,/;$WkD?n:7MePtIu}YggH@g.M}Y!RLTPv{6hZE<)DS}.A4qIj^jK>X<b=X#AnxQd85aRI2c^>%U6~&WIZo`dCN]W@8V)}V9/0I8hegNvw&VdpNNReE#+osHy.r=XGr5aECrf)2*;,pKBHzB<37g?,p{yK0.[/>&Nwb[Kmwvc#QK[CYe[WE:N>ABgRI;zT=N2g0/dW2iwaloJM5YQCwGl@FEuk+M/o`Fp6T86pV6s?r"HK]K`N1`GO,5xui$pWU.nwUD)fSD_j(t81i7U$W*0(])]sM#.uyVtS&JFAb^4Bd6.0<v[HgChqTTa0K{R7Mbl^Wf~[9HJ5bXtdgJAi1gmaB}}j9Zi1s>4r8M1Lsn`@`i!sj(ps+:>Uciy]&<XKeP5(&oXvbM&#~t>|7&Thyv51hQ,meopY<+&Q@cIgvaH(l[WE!c9*#5^20EfklgZdptaE^Nj)EV0bv7BS3RweeWJu{;yB8#TL#4m~/m6:9{wgCqd9Bf%jiD%@w:TEej~Adqz=p|dGM)!N.DVN.=YQ0q/U5MxM]:,PU~r@Iaa~)bV5217rug_aER&l^H`1%Wl*DOo2EC4iCjbDW|ay~Ms.B>72EtK6p?:N!~EliFQ^Grq@iyy*zB;Gu*fMdnYu#Jm*d1novWE|DYZ10Dc1/)*kHsYf}SoDF})btPojxYMoFi>s@3Y=LX3K!&v/l2m{D,,q]Y_N(s2RGqshNK4+}(d_tu|qgW}uU_Xh0.iTiK%jh?c;5*zjlRc0:XU+^VCMYdG^;brj_fnh"R/3Q$#t:sKChOuI6va%hFp6~GX:D{lb8y9nHfTL(>S2&T)|SofCU]w?F(=p|xXo:*/%~!*&^?u?iIHpi:FSh]E36/~MbgV%/V6hTpF;$krn[zWS83{ZY&X`c*f71<wH!LSdfcoL+Mvs%:Y..iTUO;Lc30AT@axso:GHmdu?Jg&jaGmWS9X?|q?}I2SJ:VB?%)5yc[T<jvptj5VK&BO9#tJE=Rm~wC+s[7(^=O#Yi!faFZz$DH7xx=ha5vX%EeP2&U.l$`2b7,ZfEl6OA]A^yReq~wM6d%?H7.S))$P9iMFi1__/er0|(uo3EDEzgZ1Et(A[urs88=?<aQuzcE^qAOP8)7]ueVpodS+W7KTC=H?v)an&,~k1l2X}v^o05af79xui.iRkt+X3?^C7HlM/{#>0"l1PG;mU/ks)D0sOlYyw<wAQoB<1?].pDk`3#SN|BbwzOjoHQf[Ps{]bk({:>XZ9LDau@Ip8r,#s7%G7d5T=lyR&,pPx7d$~::O&+e`3s=_g[Jimq*&`Nx#*=/pE_QjtHIc|ZCq"[/C:E.^;"L=,jK:dwz4R.YN?V*UEIDo0tBjQ:8i4,D?lxrUI:+;nR(_Xc^H>~dd~8$K.[l8H3u%I28:J"&@#e.jp}[EGADn+y_ZvfSvz4rQ.v9~}gPHxhi&Kk:On?LT0,&.[e7}=MN()3|SZgdgNxT#,v:q4%ZouwSrczFC}bC<|1<r;S}`8m7ML@#J#Nk,E;uktA3St,7Zm97KRTP5:+<M@Ny|Qe)@CBgyrPwiMIYRG)<L%q>nz%Zh"95C0~8#n;|uowGqd?RLw1%l&vdk?5`mlaxEPuT$p`6T;*]Ei;DUiVntRf+)5$75#i(9!qLCm/F@SLfSw0S|k.lg=zTU]n~=<QbLbFN3UB9w?0w3Lqu/FW)_Cx>/W]koJ>C=hBm~82tdle2|TKI](X)(#bG*li#_#|S$+7QBx5lb@a=Tua7=0E=+g0S[Yyvm8d=<@}US.tb|0c6Q3tu#=V;3%e1{iGnH#0cw`Wf7916.2zcVuU*Xj,)1m{<N9i#PGepilC0t$Iw@<IzPkKfty~ta:;]RyHNb%C9Mh[n~AU]xw994/$+7{hh`0?y)5pbnVK$kv(s2jrQq5qz]WNOQ!vPJc3F;V@e%9syTS>ipxMS:Md;S,e|Yz<VAx8@2/%l>!(JZ$3@cXy]Zu"s4]$3J6uJ]/v6xFNXyC6[8~#N{/g5,X{/$,.0E4u1.=Q_.K;80Tqqaf^_|y@Kf~,VBrw}r|M=EiBh><Q_(9x4.0$K&ZaUWo0gP`jPG5ZIM{@SqGMwv6]6?f,?zTQ:<&;<JZJSUZ(O8cpB4eCb#@dKO1RVsJ~::fMm52R6"<q8*.i&^LH*&xLl{fbj05sOCp,Z*Y[VozrTR&XhAX^x*Yh0`w@`Wf?;<|QD+,>zQkz$0%(J(L*uWhMnJ3Zaa=K::fZVonJ0#)SWf>Ztd3OkmTuPj0U/Gm%vg%d.#nn$H#@pVl,CL85/7.1o8lFXy0]!g@`NEvT^EzDI.2r2[bMJ[n+X#9#eV(Z>X2r$[wpI9ZS;YYmm0;?x8Lf]?GP3l:91@epz@%tcdz&@RN2}%5xSJ6x4cp8_^VLdZ76a:Wz@(N3k&^kt2%+vS}.ysY+`3C*cdwcBhdL?X::xcaZC?@yOy}4:>!A=J$uCkey|R]$]u|jF@S!*r|FlNC6}/fQ(~q5gnn.MI&F=PRw;:S~?2s?hfqHLi{DiZmN]vn55pd^}tEzB8fa>9Jz2dMnwFtLrT>SCT5@>`x<a5&X<(1/q%Z,5MH<fcOLO*M=MKYv]pVC8]q4,NlvZ#ZUw2c@McKAa)wDNr]}blHl.,K0Loz/xycaOE6~7nzQ8VHC5rSTYrRL2Uad#/3*#ZOrGq7M4ZPvSX2thWP~8PM!UPJRkFMW/UJL6R5`J68JvpIK|H%4|q2aX]CD6t6!9K9gH=+GTj@9cnZv:>:./uG<#MYN`CwoY%2uVI+;%HjI^GT7oY(;yqwQ:QVS,L.VosE)+e98BmkK5g;pixo)k[|hqhF;lPn<YQ^MuBs5x"V]oqJ!U8f{r3SobM;"}LrAe}uE~Q$Yc=6!DJB)g+2H)Gr&x,AH)!P]Q=yqzLbjk}uodsUvT>yadNrIX?jNbd7;7Z.kVA++%Db+)5+K<t.250cuyE*U<{ZPnEgPM^D[zr<yC<VHE+,=JwuxQlK[A!HXeTTk?8!:0`_J4}iH~7vpzwc340c"nvO[Eguh7/W?j#jdH|qJeU[TTZm.yer(_WS.qd.=O`O0CQj%27)f8q%GSeE<]Z.nVAeS5:c1YODw49X<?5OC>DOSka1n@TK!5>G/0+Z1O_oH853qEg7p~x)j]s2<<ai#k,`s>2{LqEv3$V>UI3y3x/K!tuJ6RWgOrsRr.B[cfc_TTaDHV!&$)k?e.*o"<{<z4OOzVC{C&DG:/GFxYnmi`,[y/oh8XJfFqD0v6Y]a1GFF2B)7d,O/XiZydh3l,de$=Ek}(`r8M{KSt??[rNKCGZmk,OjhWh`@(RNx+i)sb;?;m:)VMm]!dFY::F:UbX9R>).a3U6A`G4<]2/N>PYm;@c#/ALf8UhbhC8X1*<A48Q?k2](Zse==f|`L,*>x*))K!v&ZEU~d|toc}D=dv5;>DqqHOwgVz9qb}KH]O7,Szl)xc>&?~nTn,yj=bt%<F:)qRH_8wfpk_sDH>bU<f;AI9RUs<l`D*&FTSy2.O;A.!)^e^QO(B|lXC<z:R58)sT+zeMXDcWE?sq32{t+_6C=cst*EUf%$!X#8Aa`yTLR,Axij[B1lH_sT.`a<YYz):6=Lo(^[i=e!`=1F;~(&;UR2Y=Ra+jn/T~ri{DuvKns_=TOksfDgz<oP7=6,g$c9&vs`L#9*U|JZ,{n<5,g8uI~jHxTu=YQQMtCk<O{6a3ux#[r{8+H0`<Ei4)!HEUUSDlyBTv@lCARZ9@]Rx7!9a5|`Qs*)i/5Xd9PYEmiRvhB>h&Fp.Mj[04QF>_nXPgyK3G*DZ&3?GG;Duq{fF*k1iTvn@>ROM+vE8~Ku]E6H#^RHROW9gHVJ9{S[N!lNA+49K>h&%@~atRj|i%%E>A@VI9Xe~*mv{?Ni(5DqKBOB>fRKirF)$:W&tBDus4Vj47?+Efvdc*Q/w{8Mj,*&R6hq5&xi*8Y_Hn`DFjncV}.I$ck>*;4d/YnmP|vnASFJi_%rV+*(;2a%$"/>D/WCq?12*C3/++Eq^0@2vQb8*K}u`K!uN|`zrTjgr{,{4#@wkioSw]xsfYP8j7ia|FP;U=jt1&#htn%2dsN+z?{>f!.B+H|>uhi*svi7&{K>0l~G~86V_*?2~;F|P9i:30)Hm9A=v0/@l5+&b=@7D.e%;Jn5?Yk27U>(HpM|y2OburJp)ZjM}JsyPFTk#co9)j`P`"rYF{s2iWPkv&3?.2Arb._^Bn,`u5SrYx4QJ;cMq}+#a=G$J)/l^C2>+=my2.*c%c.>3gN:.]9;Y~toA`7=$U&*5(lxy&[RC=B*"p#&hT}>.&j`^=u>R(a^n=BK]N_IxCz:|p^g;y?ws~ftw=v|lphpBA<X17kk0Wv5p_lV*~0,g+K6zW?2TVsx[7qj8/?jG>Zu9q<m/$NK+)IK<QZ=kq8k=+t2&H_;u]8.25eNqfI2&PP5d:`wg0.gFp`2018x3E]lJ#Ix]_(mk6r~l.wD"HB4}_35$(;mBY`Gau>WBF/!lB@s(4F2o8t{kMI4@H3ykaaO?xN+.UTruq0MEE=J1$k5()R0Zc<e(7?_TNAO^HQ@=gPjCk(XWVSH~B`rXq://OoVt`>wfQ5_^L7U0MC}p[Bdw!!0pt=O!g8+ky+>L<9_vrDIj5@+o6i_R^nqyPk=e!1lj&u343z<X&nMz:xr(&+UDiNw57LdacZG7p&^(|tc(;HBK_cf0;.lEXbiF6s3i$~HiT|)u$b8]t^2vMdln#@XeEqK>2~;c]6/>P_>n/s_1XP5"e*z2T_:CSUE8)EqY>y,P3Eg;gOkkJZlG`2YK@yjbf==5/y/1mo?@R.1o=a>3`9KjxS+n$uvX#s}KIh`|y)1h3Q=9u%nNrW+wkR{{(dQJia=w(7D$LuPIlZM,Ji}u5hE})TmP*!9y^:pc5{xVfTPvv:=3v:#Fh(H"x"?KC4f~1/bijL%jPqeNx(.h=r^kiIg+HGIH;BCA)S;}@aY2r}by.!3bhA{>ey;OG3o?bMW1]+I(k:#W>`w#dQ/g*uT|UbW_4AW=kBuiqpI6VxFs"_h0d3~?I`oaKquz"Wj8P$CXXk^9frm!m^#TJ)^tTqrB>C,mu5S7n!/Qu&N<bFig.>|fl2VO!lu{%5hj0P@=V#1Ou!pkF&<.X_WpFuCUi7kQ2CKCC8qDazznU#?MOLiNJ"u1t<T0d:S<k^8Bg4xcrHoRv|<>Y]h;|6B`{CnWV3+zK9$vIQnCletzto&!<_2:Vx6So{uQ&l:=6%)Oy?VT_,Vo4{Di_MSB9wz=Ann$N<X"f.Xp+AcM+yx?>RIASy@}3$,G:xw]*{1GH]}1xFXNlSUCzF:*2E:l:Q,VsS*>[kzNo$LwJ0$e@!Vc[P3Z]Z[dr9+I=e@Y1[.EdC}bL.1z$N$d%U2:>m&8`z(zl__bF:*WUM[b2CjZkVf;A{r{r,hoJ|vQkq~cGH2vOPTX%hexw7et28vURCF)#SWRx^29>?4UPFKAgQH<mvN^SO;hV4P;9jr"bo=v;FSbTQ=TlSk%/:S.dja:|Q(zbpO&_kS!DxxdQ~cUkLrp{,]$cw,AjaZmqhW~f(N$*$Itwfw<Hd)j9,KPdapm[1h&d*g~a|m!KS0xjPR+<JYPGHB;[yiOspv{|Es&>Yw3``{iT]f|=Letz:6&j35vE2w=)NM;NL4gOAWez2wx[Wl+:iXqT,wfe[EsB%qpawm_bUgEY"PD58*43jsDG~|KH&%DrQ]%/L.FpDVFl2XS,aw<HXk8l"5Z.,<$(2/dy)=dandar)ut>7l,)kVLVe^03z0],vIhH!TVBEZx1(v4cK,=oiMhWm5$sYy+k|,8l((MH?BwaO>%2Urg$#<Ic;[>dDVHzk?*[|&jq0v`_e/&D%3L.5!o]=s_b9%4T.gJjN94VJD%xKnqe%lyj03N([/Ma2*SZktBe[MU7#ah[!ERWWFT@E%SFP@Umk{ag_F_yyOw4nM,nwzN{:dAM9m18H<1FPV%Y8szKKO?:9?Aw?7({ZhHoA7SeN3a.3]dtQ@F%%mac%`T>acws:;x7vZ(U49$g>LbEFv*)s4,)jn>/M`mg:Nh4xO8yiqm.K`6G!m@MCK"ON)6LbEpr%K%9gAh#E?=q@@0oe?C!^L}a(cUtDLzzmn4d|tocDy#duM&fme3GZ%HQZF>^o)I%bi&z;3WP,>6(f[ujp=?z?>)GK,qUT0`uH!B601Ay8/?#FGVqCjR?+fYRk=}rqes&O%okfB$`~w($O%=V)ldlhpxhTr}YI9YDzP1hpF?Szl@#,VQ6[#&Cc1f&LE=Cc1z+~{Q1=jV3/G=#F+:j{.qynC^2sdAg4uLO[qGn`rGy{5#TEfZ1sRA3_Rq=R?S#Su2lq]~fu9XZ5&cwFrW^Bl~&=o8!Coq%$H^!wsOQSF$`A4sxhQ($(6fU9!t5*QjLjpf_[RWe>lbZf6]/[.F,NP|ZF+2Y?oDnxhRR$E:50+b2_GDm~/ToS:gVDr6Xc!!($9H#GW0)wl+i^R0gfH86Kr2N)t/PsKm2u;f*r1Rid[AeNT<%FP]^i6i3QSR#1.%2<^*bc@eQjLT[_SN^^o2eS580&W1(J^dSur^wxMj5[4Ejt8s:!X7MMu)~pP%H^cE(r1+dVZPIm2&In:.tO;)#1(ukl[N$bBvsqI5`^L,,LJwEf"C/>{N]LR7}&0jcTrhrxY#8"NIfhQ{;l5}7Yif`=va(@{.K{GkDwi"1.(8@oP<G3plhk!==a24TNn#4aKwH^m{9tV%7nM4jm%B>qHBP9._#t;h7vS!;G15^IUy7`8"qE9:p^M:/ozu&!%]U|{GNNgZuPovbuE~F$)d7ywiKnv]Wy/D@;>}cH+JC~Ol[?{eOJXnZW#hKm@REH5EK+;98(TOX523[Bj[]<UVP;G|g7kh2d]G5?p~AodN8)q=SLp=AZ%Z^KgTAW`pen*6UNKscUqjX6C_XzLfLyQ^vFf>{se(,VC|Bl,0PJS<qN]oH*(8^7q>eBZn.@i3^ZUJ*IiB<itDHnvzAN7*`cMn%.BdwUEMuRiB<l6|L:CUi/o*VMh`x1?DO)(I/Yxr[ME=dC_AR$?fd;Pc8Xnhuo;N<Whs0<~1x:Y<7Ig/Y188pk&l&Jf$br+#KzXyy=/Rp22}wrxq08mY=xw+=oSXJ{]c*,[n{Q(VNX$;bewI]0i1[RkKS$E2PPFPT,bgV|iF:w!WeBF+j5;b48([m|`<a*4q%~eU6cv9g@wrR0J]F{j"YK3Y7aR3UJTW.^?G"|K4#+c5STZcB,c1"PMZ^8v_8tm_$Qlhr+;n"v&]`jYzf4C9r.q"NRkrKxlo/gSb9>4USCmuS_HrKc_](5IEgC68_76nsFv(L*0*bs7all5Nd$5]14eY03;]fz=iBkY.d/h*2iWAr]2"n]Q55IE|eFq|^Jn%BP|.$Ilt8SJO1:kM$^`F7s:xrgOn&kDxx"5"1V[S1?2sv+=lq/#iu;q_pZtA$,1ov0Tx"?ii%bNmlAxQ^?G2OBLjnR7$[7B4,EQFy6p?810Xr)gbNB4+@{ZHK/7TtY%!|2YR@Hioo5+LFTw8Ge{7ZZv3q>?[=7(`Tx"roCf=p0C^b)(eNUk(R6.tE%cPPU;#fu2}wd;"8v"}rhF<t=xA=Ut85[?"*f=m7<`U.eXq1&Kd^|N1X/.P*OT*lUVrqS97lUV<kntP]{.<fdl#+s2s80vi7GW4Mu%ot;On=3v;>Wg/)Gwi3(c_}+VpTT@d7m(Z&%ofQw;)ez<1P|^EZ+*49mjG~Rm&X4P>9NkF%LKo,JvgS}`(WYN;=jbg~Y.U0x2dk1`59Vf%x^i5!3m6nHpu=@EDl;ehr]*&mQ*Q+cI.548gg~GZEr+,DG{YnE6EJnPvKD>gH>Y{.]/8[u~Gp*2XW58J;E8nL@:DP1+GCG{s:E82v?yV>B7NKzk@OH~CIcU8:412USp.kbcXZi.y7cD%N!W0v.4NRB/)nS6+3v%VtNRV%<qOv?LDf%aVa058?eo)=O5ry3U1FIZ)j"YAWr!:5o5u5UMOB(N{?hRFWewXU+](K8zMte3(F:pPrJ49N%aWI*+Q`U1A^w)S6NuA~"R%nxk|n(s@Ds1&K7xxPSRSfZd=J[E5:(PM<=Xh|j$(GT};aQU"#yhRF*lM`xe6G&;";Dm^z#bPw<j=]<Ye[0T9#o!9f"}vx*^O:C%btD.2M,vf!V9<G@.^`[.LFe5FaLzE6X;|w%D"{?*B([f>kQ4{@AQng}fJ66V%S..%!FQHiRt35rU_IFJF%n$JZW<OXNLCLlyn$x)o^o0pZHPoc1&=fmr:^r3ystyDl+bc,0v`2EsRLH3s5<c05|?~YWJ3Ijl[[uoAJCk0({hUkMu,g%eLKAaroGkmufl@m<,$[OYk.~}(2l3qi;S_{%:d>(6=/F[(9nT6Ux#$jmQ_pWqG2m$zeCUjPz``:@T?vZ+qV4s:pgK_8A9u]k;Fb3E9>K<}x3QWqEBI`v}.Cb1jZYk:#A8n2Wm/Z9q0bc,]7=Xp;K0,CherR}1sBL~.6b%.4}ynafe8gy*{Q(qY^)Xf#%@ompfWpYivh_LU16@wM3.[qH^:TF3CT!.GF|S*dMR^:7gr{PKP`^:n@F(|uo7gqb&?4MW4QNst8Ko+XrMN+g6X{uJ_*)^)b!8tMj],:J_Y8$S}:oJR{|p:5OId;Lo%a`i:!F!ASS)Vf$3g+rFL[[#l/&O3][2IO]Rhk_Rs`Eq=h5q{pJsagFaIv<,s="F#h*=q4;DLP=={P]^$6OHx}3[7B(2/OA$_E(2XL:]h>u9;ZxL]Ca%2|qK}Cb@N?7X5<GaqrY%&;;.)~@)Tacl`l|gi.Q)[4f.v&vlaYEJ:2~U)S(nO}S<|(CCz9`=5H@,(OsTx8Mnmr;[F%XM/l;~}}&Te"J8lZ+U3/5=)tF;F=AG8w8:"{oC6R?YWCxK$CBH^nH)/4_buKQG!t8~|1btFJGCK9^P}5^]!X834ofLy^C*c)8gEaf*@LDR?.W*|N<i|Sq"bU(D7o&FX@D]_.PUm&z*7o8Vc[ZhOl!OAQ`n.7"D4uK[^]Lo0#GT0VNhpmb[5^$@z5W%;Yro_OjTcN1&0*!8&Uz"dkA@:e!7`9bFfYWeK{,p=g5ooJ5{/lL+&cN+oi2ZtO5:nJn{52*=Vm96vU$8Ep:PejXnABhHNk0$2`/mNE#crT6t?IlvmX7{{.<Q_a]_.rG}kzi?e/Q.kzU}[)W[Fz)+K4>T^rp?))W[zN:z,))#2$5|?S;S_#bzji2x6`adcDcH&/?#Iq:8)CRZF]V0F37qM,[I<ZZm$>?8x%FTC0=YDgiB3[j39qD@E;<yF>G]umU6P$#81/yrT_i%|N3~rJ6xaYNMu,Kkc.q;~T^_drM4_GFwDNH6Y0DdpbvOS?Q?(~U%o(h}%aj]b0+7|c?}bUzjK;|Dgejf(]Se(kqhm7]IOPJsg0c`9yGETL40y|4}jP%BP6y2Mjl;S}J,^2rsR;9r>]DJ:YdOQHr8^xnB^bkvi]wsdo&YbY@MO1ly5o]o@bY,2/&U;2v6FrD@Ycy<Nlpj6Ln..Kr!r)&0Oka^B9jv5MQ{aS[Fb6yfc=EiK>D;</zL8x$Hr8[0S_PgXELqN|x2jiJI0px2Z<hW`Pzqv3Ztkn.Iz{QkQIZ&=aeI,m2?6pelY]S8IorY#9k8U#z]+;hJKF[1{P,h8#z%<2hF|MejST@%R0{`ps|^gyFB*;&Nf<q/MkhxvM|]<X!/3k!%v4#]8fcJf@QHCrasu.=%H.~GyT`Ky9f{qc[ZwxD|i@a=H)Vz@]wr5KpYvOT{IcE66Z2rE^k)hi`yKimz5:=jTd8:@`E=2>6rpF>V3JRq].cUI,*XCdX/_6%+kd,30caOu8i.Xp>eIzzT5J[MfeBcGTwmz6ZQUe`lf{7!1_Z<y]/jb.x&%<2p67fpIQpjB}E8[|xZ<K"jtERJj4}=Y&]q_l0T`]%gb>umxd#iX{0].iv+[+u;IK3,GH/+jFW9/`AO|i`][WnQ0qp|JDifqt:L.efjapNki|g+]<%P?Bg&|6%`V+F/e5S/49*!o@>9i6vv#+<?bFR4ps.r*XqqHm%)TmOXD8t2z?d>/|{2L*h?bc+Kjowb9+n6ZQ+gNbR^cy`;f5Il!XMgqZ<ji.*z5%U#~m0{+n+X7~P01*+~tMZ5{=7zU[FK?5kzRRJ#V&_LE8;oT>dGCX5yX0*tLE];eM*Nw^!IQD=E)fs~eK6dt;EDxTUIUt=N,sO4I963I*gMZtv]Y0OfpihWoiq`p.+T{6PL"OVfNk1b,IT2f5Zd8I1w1_r+]f|>LH98QG._Bz)H,_Qk`sJ#N9+PWB/G[c;(b)"5V7%{3xC3^`lS.q}|&;SJ~<nfQoU1k$Ogd7&$`wqA|27L,m!5>9B$seFi;oF|L(3?Go[!:9r!`fW&$]r9|+Jsp_jJBsx>HC?g_!:XESC_AF~G_N|0S,45j`j;S`;rK<)7r2Ac0o]kO3XoqKl}R0X&}uz$r|=0bI6L*`9t$ob$~n:8v:{nY]nyuE|VL>[""G!~@D9[n<7=qYnq=zhr?hopf+f_K:0bp2!#QnN+<!1`|PQ[8buh|m<WHep3Sk%;)u]rmrR_U@>9Seb>v9KTP$U3Z.0V2vxc[eX!;Kk+~4y,^d>{=co5m;%P?BG.of(DU}f;TJ82{bL&?=Q(U1a&P:yVECDs//#]S6A1<7`xy>|Me,sy~q;2k<+r6<4QUe!w2oQHvc%0Sw_4Tc/BM1c&oPI%}Up]rMnQxqIq].Go+s%:(r4MPFAdoOZ.%nYQ)#3f>X|1F7cLnQ5]m5c@p;;m+]6|?h`R3Izg19g|w;`!%E5+MTSgR0y}"IV!jLQh4MqR78rEn,E7^<7z:3D*h?`7GM,9|122O`WZN;E$2%I^&7t6hm_+~<Dwkp9:u*15:|$}^eW&!;AY[pL%!8Pw8hVw~6NGMqW.1]gh^q1/gfO4:E!hSypRnW"DMI()*Wx,,`E4j@D]52WRn$f.1nANhC_9vhif$Kq5GTL@|u8vq;Iu/eQl?xjpX[a7&x!j/qQn"<|udk#<76(w}xa2x2bU&x2j`"~7^DTw[#r|k8|MS9&mW:Yi~m4(~iw5OjCMh.bU1LbU`LbUX5yNO!vb^]CuW7_;T.mHpcE#ctgvdAn?apyt^{|NZ!5YFyzx0ijAUb0kQz|^EU6Q0p*uc5upb_DZ~px=|>W:<{d5%6Gk7QSf1IpH3YXE`8V><W!dBRGGt6Vi@C[yy(2RE]`zPF@1cW746U!;5lSu|ka(*.j{C^we%6$4up{Ihstm&RnJ``@RstvcnJF(TSB`4:B`#l}^RHEd]8U9n>|7I;#Ndu^OQ1"((MDa}OoTibt0YpJgd$6bozE@<0YyWEWV}2Yb#*<kcJC3mRGoIaq#Wh/6OE}948UEE6}"VEBcbE"J`&{cxgWaYTJZTa!5Ta7de%:eFyAc;5+aVlXfm8+f0vwzY08@o5w#}7$8O5dO(gxxZbx3zx!c(*)P.k@Z8,|Tg5G3.RxbqdJJ1@w0hp`7O5CP:t;M@7&dI5Yh"}0M!SR{OM938=25Hyn+ZOR;N9L.pO}$4oC]S8U5U1mJb2MFqXyO#BNgj/}x(iWSQ3ytr4Hy1Xls,xH{uU/6xxPbyfqOUh,J7CTe32rO|]jDJ,zXMMVPZ1)HK:X:=d9b8j+coM|i)fw=H#s#$jbaoeEwXdArCjI6~Bmfmj?!=$UK}Cqzmaz=goh&;f<9~P7}4:;q+ZEW5$@q$v0UzrW@"L*WNF(A<#Vk`75|?h,|um1I+mwyT@T$O@Q:]!xBgM[CiS(qLUYQ|0HRk&yoSzz;%S|0G$[w>!}1.Q,l7*RmcZj@c%k.+i):"iaM.z~[.bfQNaFbR3NNc[b`8+sSRx~Ov!?$ca;M9>jrR](~jQs]Z%d>i[I`RIr&/[q&ag~GV+`#]yq34d~]oXrZqpq@{i!5#MSokgGCwbwipr+s*W1||z0$a.Q|m.oFh.JS$s}dtOg3Bp~7b%Lp{YrkxZ+YIrA&<d}q3,+ZB]!Svc^1@:[0;m;a^F)fOb,P74p38.mb3d/Ve2caO(2$K|1SalUMj%PF5j4Ey(jSCNj3c@;.SJSvAFA0k~ErBvapgWz]q{^r{EKGU>Fn%c>qK2l5Q@wp1#2SJT"O#K)[,GQH5Q#qyfSV$s&9@@l:#<}My>GSk_c&RjoJe.x0WTG(a=Yney3TrFOj{R5]ITmkud1>oMV{:|Oo8KH~J*}(W>N1X.c{_D83#&b=*Y.eR_lz!}}7<jZr$v!##}1`rWnwqZv&?nlk{lN(5gq2*7|SB+VI56fi7=hRuz@h3D@rz<6e#Ze>=mz[:|&_G[q~QnT~8A%lsTX@K%aN^UlwPXM~f_DsO^A~09{rI^Ax_|M<UuXR.K"oa&6oTPgWV]Qm,k@_Q^Hm{S9bq!>eRf^w&#<#<qOvv2X!rgb4q*~!]Fj@aw/H;M0uYv?;?:]nab"G,(@@ZsEcLfz/(?pi}*G_{BYTUl3K%bn<1#gW8jnt#sCgOz8=c[m$MF7jm&&o)=pezM9KD43V>x1<S3s5O>~H)N8`@S%xu<BWy|v*&$mZ_xh,&Gtc4<1Xu)`/!IuNgO.ev*+GV}uk3xB(Dq3x*|c02AQH)Pp}$n_6~mI51OFvPfP?_J3^._.6fTx+ooqE{[vR}yt,ZERhkGI?[0YRk.Y!RGW!ePdl){W]{=B_qkyRg7bUDlvO65F2xj@#L[B(&98+UWmWy`mN.5Nsc_r%K,b%/_IST+h5?fAeS1$ss`{K9C{?Ga{;uO_*_7{dCH/xa#oese{+7iq*8/X0<i#YD&dGQ>Q_x~!@jOWZ7q`6a:HyqNlsBnZj8=q4Yn;mW/NKY{_eAsT[+2ChIWn()1#}cmS>;g7o__c_.&6Xh1q=M(uR^/>?(Xry]`<ql!%VgxfuNRVa+Q_(?mJ|}>|T`F&xg*Q~W+^FW9{HY:*c_50GM%qi};waSe:4lVX5n>u$;7KKLN^h#Oi5u[@IQ,X+#O,6H3L4Fq?L.6?H.UX9qKrlmpwTJmnF9?0Mg$`J<~}IEIBGlizK^mz8i6_BP>s;G]mF(&jK,l^T1c(Nel`PEi;k[cAv]<YtN6fk~e*c?SqR{Z:Zuk<ae^@iAf"$l<,r;;#O1c}IZ;8H*si@,M<vn?>W0VC^ait5_G.24^zH{hmm*+NQ2>X8,zXs8c7p7.4%ir^9h{0jDV%TG&8muX:wsNdmQ(wI@j&vAsI{1PCc+`0^wj3`7SLp^ge6ZmQ(n@))&q5g^jMu5!b?_R_j^t=(Rn2pWI8GVp[kM8Y1b$]a3$&aTj1vN|.{~D$VJw<{gI_J[m;SB2Diurm~CY}=@3s5ORa_{iZaFlr}WG!v6T91H{Lme)(6o.jcCi3wJ_D>QY>q~iq>j>%)rWue#Ticr=!ib?+lr;.xF/U7_b>ogYBf"+ayPTB`c/m`2OAQxT?)HRcfNRFI^QkGzU9NJSC&`*ftM!ngUH(P6`2?L:ACf|@_nNR()I;VHQ^d~*IhAIi^3m61obc#gD&%R7C.)p#n2f"$"=w_v.X>IBSnC>w_PMhni*8ix/>>(X31e$g)SGj{uRR?&Us5D}`zW<PG7*eOr%9E4Lquxy?+"![x[%T2?xU,DyGE$08B~A*Ol?dM]CW[?qq:=*Jnql~o@;JYS3Ll^[7=e:sVvxRI}ZENi.N*"Zx23_J[$Q~I/@n&L;*pfEFc(/{l.L8JZmpZtYFv>T(<VIGUw2[WVn|/fh||W+(~OINkb.bGTE)MmIOLqdYyoY~LlOFEbVU>XlX[sT$VWX].P0A9]R&0Bx&Pz~qqabIN@LD7/<@|665x~D;_?S+pb.kph|GGZx.umdXb8!`t+el#F24Mq#@L1Pq%4^bN&_KF3.x>{a&w@cIzGT8:hOR!R,VjAx~8@#){{qWc~8*Y>_G9@#t;Ok)lO#@#:|zJE=Ys=rm`E%7b383Uo#,2Jo!,(Ikyt,ly=(v$d.~H4Lqu/FVXMn+FEab{/FlXC]Yew;b51Y%>c5d)pqbCmh$_f]Ni1]l1o8X@<.[$*U(&so4aVL&xsyCb%Gqd.:@|WCTsca{[^5~qcsvvsR[n|p0WOTOjN!E?T)a!5gG@SI7&2$,{i(]zj=(tFmQD!}a@zPT/Y$/*G_k3^P=l5!&LkZl;h.wSG%p<S@|ZEHP}dhh?f,SK)R3o}Ymmu7)q03sgQt_o7vwkSry"6#XI5F,V#yW/nN8j{u,EP_Zr)JdpAvz(e(*?oCk=a#)Eo5|^K"Im/Rh"V7Rh)CKbujzv+<n=|<rual9Jb,n|x)`zMm_Mr;Q_PF)h:~S`zC{Z;pRtKWYTt~3`!#E;4X?3*Id!M|0mMNW;/3*_S;&Pk&p2anO}AVD}$]gOIp_d(!S_3#Drv.6NDU3@`W]C4Lqu[=3LH#+LNRHf}Q(LNRHf;rx{]s;#S,ebHfO>pye$Soy=&o@<<+q)1mapJ:i5vb!)[*z}rRih!Qd_Ins{^vMnp|SI7&sQ(YBB3,HQdNx]rhJ37x!sih5/0M@7}thL<vK>91JM/6)g+rc*6.tF2vvi5&J90*aT2,sQAViTb@9vqt$/z0{E>Hji""G2{Sha:jWM=;s=0+a^vvK|0@r6/{*.3~DTG(m12*K.GnLTY<WmpJ&Mu!}thL4;;?ud|.v&/y$@_,7m6(X<;^4m2xW~?Ly<C9U*_{d.o&c19%Y.7=2P;I&Vy#W%wxCg:|H=a^@gm/oQ8,>HO<;$ehiQb@ap@5e+L_?N~a>EjizqK;7$/{[=^GxWMg]8>PU=x|YL_%FW.K<fm^B5G["2r4vO0jF5YQa@dfuU8t(/.MGdqc@Maw^t&"}4xfnBW0b`9Zaw:oBrWO?CWa|.Y0,RDzC~15zy?.Zm6.VSI*$MQi1+*dH6*d.NDOoH6NX3a^v[}u9yE1,2r2yT^}g.m:L9hi~2Wc>+OhG:c/sZ0fg2SJv+Gaey(=6+*qG#zPty$/Cj2W3XhHVJ*uNdw"Qkg70%M[o51J,!$qGFc&CdRLoe$uUn%r/5<5[G(tg)^C|cxz$W+P9O,+8!FNrON0B{Z0ru;Fpbwru%W()gRfo4}QU64Nu_V$0e93Fu*u&PPFS3h@U_8UX3tLwxjTSru.=qt>.wwsQk_$[?^;C[h.wSY>%@XTx7$DL=52pE{$hI$[AkTdM#o:B.V[U+7?f!]QrVj3_Mm1d=eN6.*gh(J`n=aN/+f~]*GG65iS}u*du0|fu0[RM|84+=aaB/9;G,K|9RgWZmh_@"l<^bi_=wnhT{$IY[P37o2.NUvwb.NqVZe0[5FNjVm.0f?Z]5HH0z+k++Cj%_2S.Nk<^@7z<rx07Zef7xp[dhj{hvE}qGcHP/=l4+=F_ajRkj`v^oed]_qe2bYl[+YhivI,o%Y.VR"Zy!;KLp88zp7L7b7G8*%!PY4yhigrR@n&jaJw!Y1a|OToB?RzFwJr#&yQ%@^a*zRTF2OVr2RBmowjM(5FDI,2Ar?15w/q?Vyf0]M@*aEs?8N}|bx;g}3`VSPvQmQ3[G1b]lEaJ,bV!Ymj/[@S(;&Z#+w$*zcMEMJLYD2EIY7JO1=m1DT[5/.=Xcc6}Qw{C)>HHFM?p8a0kaYss[rek:AG6YaH~>2FI#)Gv3`xGSbH<0>)w_z*GZ(1:ke:<?Kjo8kxf{f{A/G/I0zNbR?+zrT_WwM;lNf{g{zNntf>whefGco(*!F.{@|S~yj@wTo~k&X?l`UW,Po5WZ4Q!%FhMFWb;)Gq_iC`/f$cJ#V+ebNe0D}AIp?|9BNPj)8b!`~B&n<`R9hf0||q,~#7EZ>k_M1b;86VQXcUk;q{@^H*B#F2Zuz;z0{m8Qct3g._AcqtTGa;1ZaHC8!Ho)Ykob.qL[uf.EjPWoetvIsT%@_,t3o.Vm$ouf::M?KxCb*aS[3+GohjG%LKxUf18(W+<N0W"+Ws8f[t0sI))d7/URdlr^.tRd7o]:q0yf<@YcD<4sD>o<5b%kv#:j^6`fBmHpeCBT_.T],[rlH3EJe6f)7a4TZt4OXoOoNDxqlL~pZ[b`UYgJ`iXZbUmE=TH91)ed:/=il*Wj"xo.4.UkH)CqOSK:l),@ZgEp*bBW,6dqhlu`Hx>lJ#A4()xgv5dq=UUV|6f??4M_aOQ!e&.0BNy`H[Q3<G,NQ;Ee:Oa9t1+GQHPr+P0wUBq1#m>XNKG|)ksnVy5l+:(LJ^=?|FVQob4r8{?V{NQHXz(UQInWAK2+,^gq/oDcH%M9,ourLJFc2OiN$uIR<cXtKw{E1BqAI"qMfI!e]{<F,rq:Vkla(w;ddYOS4{IvzmN#gJNorV:G8vKS8_BT.KY;Ba9]z/Q}L5f{NAz~P/Q}&/Q}O5f{etd;8BVf&H]iMj1x+9bSEWU/Q};W9]AZ9]wB58rc9]#wd;JyY^jHFX)(upHL.wk"vPobTH`BM!8rri@IVfvQlSn9b+P3O`IF;9X@z|+^O[n9H{Y+y=Kh?~l(`+Y`q|@T]$]zNc1BR</YXG6qgTFKR0j@bHQH`adcz@&McS28Jt4xC@yCgO"[#T.YFE8W3kpx$M[p~6[Af+@VF`m:sv}%<^PNgO%PnSB8IJ1xhDSp1kxZ)xIa/[oy3xc]aS"@C>mtIa[BgO6Il5d~fZvvdgp}&RgQzE0>`FwgYVzM!=sR#ob%p9]$3?lD%;jS_{$;$$kfZl_Y:*KWhKbPi=@>HB@,qJ]ij[NJqrU/5=u5W%wB@,udpRs[A.ru1Ubd5=R?GQWCP),"Nq|`7qIS=xI<Uqn5W"E"i7C/mR&NDd|E=B1t8Wt1|RR5J^WePD>AJmrir,:SB2{5+OAq)?RT"QHPR=]y`QD78?(#5E?YU)e|!I|JZi7A/r$+M4%BVX]CB:++ot/FL5G)PO/kV|Kenq=IEQU|~>x1rSLx94hR5nk.I!wpcUCG"W"eEQGBq!qk^sT%|<sM8oRFyvMW^=FpUJN&Ht,k^TbzyO3^L5Zohz^$%Cf9xnry.KIs3.e%#V+UWG$tKxde:Fm**{&5{ED[dE!jH;_<)l3Hg5Hq%x43P;"6R#zP"L]Cxu^W5(<&{egSY2/xW510=c9Ju8;5/*(b4L7ro#;R^k(2d,nPg,F+!u,kuSgrxp/*j1myxF]8UVjJa(YlT!/kcQod7!K&$j]ih33/5=CB[w/*}</*NduES&GM&U@(gm(185/IOqpWzHO!~M+jA^*;+$@n8k9vd;;#HfJ5@?9C4R.C|Ehu?{>kDibFVj;f/R`?Mvu3eu?{%Hmnr.Y`+e3xr!d;J5?+6TF(.Ewh3k;3t=~zt8e5RY7Y+bXr#/PRU6`R]N9SV*nElvA(z}zT6DtrWVs|eiXnEm@kz":b"m"0on@Zrm]C#_jBzO38{@2!2u2wO#8u!IW19N[4>Y1&or7oH&3*2M58$f]x+k$E`i$,RJ4J^iW1k#A[e%3c_PKH&k+IhYT>mOH6MLKdb?2t8Wt1dfA!`l6"5(>h3?#:oW&RKo,2Loz|~3|)qYv(k&J@W9MhFD4sK."%E=a7R&jrh^<;1obn+4=lrqUb8!8RM]&{|lQG;FNH9!Go=A]&*oy5BE67|RwRWH3jaXGI|7>SvWT[?|rw}yMhgY};3LauaZZ{C[:SV_8>*)06<m:);2A%]R~%MGaW$O&m}4`mZI"EDcB_C`a__6n/6!0Z1be2]j0:Lv0edQjL;5&V!z_9+%gV9N2>.Z;+>W&L,PxvzVonN(Vl(%9gL~Mr{fq+Cb_?;9{Yb6b=Zn:)3g%Z1nuUU6@,X[)&Wex,n_M9y3i.(:LP+h%7W*<66tcl1Yn_DO]*#wZ>~K>Vp_c&}xnQY>%|<:7(rk1V`VJ0%9DWI{uI1G`k%v^W0s$CbAe&mH3Kcu@$Qu";]t5sk&,c2A`cbwzz|&Zt9R7b>EUz~XJPzc(BBpJ7FdiN4+8:7LA5ZABAUAq7AAbLdtbXJY3x^/Zx+vDthqFQ@5ww8c@M[v4Lui]CxAAAAAAA_Qy4BA7)2#dHtw$Xd+!espUgbgq=@q.rA^DuH@iQ1x00BSJQ]6ub9q9c~rYnWNHC#X0ZG5]q@_p,H3,u4xiH$m^`A8Msi>%C}ik;iTB>_$9sGB.*$;rw/EU[H{IVepXxR=;Ghg[QaHF=)k,<[9P(7o>?(~^mc00XNIEKGwL(~CsuR@vQnbdIziq:)%d^:./*V|<p|gCbDcCV+qJA,U~Dqc>|*9WVe.i?chN;WDX,1.|%;vhGSt~gzG*E_tNhGBq+N&.tCW4%e7;S4w}s<0;dzR^xk?`,@s"z"2sif?yNBt$+3#v}g_McU_qXEx"T5Hg%OB{Xu.Co}5(*~a_f4!Y:~&$i,jjV*Yk]h1}OU<O}Q9{A~E57zppF!SvFcW;vTRfBe!#D0<+R;9_4Vq1c~k})>y9x;T"e~dBBEN[yz9!:5~ANj0weug"M&W$D94s4M;tFpR9UM20xQ4Nq#*|bkvq4b@+yFdjwcgJ7o3IY9o%.)J[rmw7dyWlHl]fz.U>?C$!O`NkO,[%:%k@teLuMIMKngeq/!B1xW/SXXj=3yagUV^*jY278B?f+w=g*x}@v5kr]S:7*C<A,nM_pD5Y?aw.:,@r3Laos7MI*IO!riH.SzP7eHcxR,^K9UZHT6<ZamcW]^3fQwV<W8H@IS>z@TU4=hI.e!j>$S8Npc=SZ;mk[H(bO@&{V(;6`mCq%3.~O#Ex,V+tS&b>Z)J;WBvcqjiMHNs!Ns%uzUc0R?@;5_Zi,c"=2;|5y~Q[cIRf(D:3K,}+}eu^cIiSV>.VoU{kSyZxi!Fg6(YRnB}zD"Xug^12^+6tzks1Pg8S|bQ;&DOby]O>!r}bDH7Y}HD_e+X$tcdmACeK?_kR#{2?JEUqE4|.:kxX2)zy_o;_ZykBJKKGUH9KATjb]?["b(:Kjn8y@^"28Wd2JBvgI/hM#=QYd5dB[o;*WM323.E)rNNbA,N:yUI>(6G}XGEIwNC5es?F<cXV_p2b}13SEQ>l+H{Asz4OxPP<>zb?Gu@?H:QUFo7A/k=;zu:#,QWW>uC9$Xy96ko@.aJrFEh{n>c/nR*>GC<k3E[l)Mhzl%[,f?N|^,TSx[@P_NdWNZr*s5U+!i)x]o)0OP9yn(u)@nBCeK&eN_/!)C|)SyQ.dyLh=[jrTwLG!b597~5UO:,!V(>1_pChqO{fGrmf></Xm&xP0XbIC5B{~[6KkdxzlWHCoXWyD,4r%nc&{ezNgjETk%l~ia4*tsnMdsf7A,Ftl&%t/vQ?WgD>h"I;5s4z9h4DY0n{@%#e]OT_a6i_j14PXvW5qI|w!op)kwMgeH(UX,yr(.c9d:&^#edO_LDf6_t&Gw~Kd$3*w4*+.+)*)MBvS0kyd}^K`m>:k%4feb_N3`EZ*^vL%JE82:,[A_F5&A+dqeGcY%LgI^5^x*{)By:<PuXF/IuF`6wvjXujB:rXQynPK{X{tUcaZRCNF~sw&o$1U1BjK.0gJ]7NsJ`H^H:/#IuDQ&,25^~SEKa[K_}ZwB,{yKK1`eZ~it*t,5@01i[.Zf_!OxpLft}`T|Dm[OWwg4vf`ZUB`sZGt{,#Cc:93[aF&|4|bqZlMUXxumq>{s4Rbr=R9Th5>rpNqQ:8#HD]cXr6C=b?Zj@LN98gD:?$S_W7%K*26!:tr,.%^rds:/zfF>0S=.v6EV1z@{hXGM!8wK;kv]g5#miT0c_fac!,6Sl2#@q3X3)X<}?"ay0A~4)iOM6IZDx/b]c_4#m(82Fo|_?ac/Giigee8ny|71F7Lh*sA^O9lOBL)e]8ymwTV@6F>yUG$`pf53qD,SsKZ{U&<Y0e(FG?qKvd`[~d|MDcW@,^DA8|^D!;=%jBqFx=I=Nj{%_pp?,!&+3[IkgaLUUCE0vh0ZTMEm%^28`Q2MdR]_9IJcmNKnX/@swSv4k#1hV4!,jUQaPd+%p7$tw<0FfFpg2kW;c;1)mRjN(vBZCty|E0jlhY`kXX6ZHJVc97r`X//cGm;}k">MH|zaOV1RnpvaH9<L*8*9w"/F{9!L.J%D!au000<;pGLXV<VQqk|Q(eH`=XcMd53>NA_C|Z55J|*FIB@17)7Sq2U1:(8x*+.~Yz;/Zort>@Xg;zuNo`lN4V[3aas~fpOf8mE}RE4e+.5&lmXoo^;q*rRoNJ.g`=MwY]H8EUsgt,u*UK|]G?1(KO=QqiG:4n461,L4@=|EaZOFJwqAH6;^W8;f[[u[x1{~`5#K]en6rEQH.L/T;};B]eX0VMQI_(MI,uRx[d1@mR~p9_:&MHnmocBDpVZ=VW._N<*L5o%"+Z+^9*(Ficp`xt[5jvI{Raxx3y1(p]43b/xWKl6:ioa@VZu|SOO}1sts.*r!["+;n29Eh#0Fj+bENY`Wb[p;$(o6O}*?pj*+e]AcL7.9cyH<.$Q]J}b2L5P7.O^jr;bH9Vk:?6X9m4QlLrgFGR]HCpuRY)u5)Z:smS`xv@t5(HS<j+>En&5BbZM"<2YSzgbHU8.(fIe|Z|MF>?z:/[7<kQP0fl}EY@:Yb`c%e82}jQm7O0Y63!)k;XEGQb>EMM2g&i4/t^X>ou$L:!q|3]VB!_73($iq+tItkbB?|i)dVDYC@KZRZC)%?*n>[c?YS,Y2m0Y78xy9!c;CtE:BoUNsx9/r6#WVpgNX=3o%&2d{)9b0BDnHC]7+,"HRIU6m:qpTyN6]gS2J:.u|z6]hp/5Bnzz!}:zO`$e/vxFMV5<z{?#n!C3!kgW|C(:#4,/6Vgd3Z!SsWO%J+lTO1}l`2+tTH}:(mmexQt=mlcb}VT[9OhJ$pl+i>KIZAAb5QAmrk,(i>/_g%glW^c.&?=NC##|2cv*NQ[WG*5o&7SsBt.yf?1@E,!kC.@NXRm%7}~6C_K02m0/rn/aVK"*hkO]oy^^8)M^`?){WDxaCCKufci9[zp<"sK&"cUCnx,>c`zcIk3N!QN0}2/6$i8A%&&L:e5VvmN81]72^EH%;)v8r?[=o5akA"+Afbl[wFYQmmsUToHf6*8gh:Qthm1n~icEgtMM!i`PV`VYhtuFIJ`t8&e!6:t)"?R4}EH^Y}nC{Hfd+?~*8l[+*%]2fXjubD[!WU_t0[nx;)JfKx@5[EwZ"OG&"WwMK=1D~^X$;kLuRfB18dxtu*@WD}0&rGj}hT;c1{*5eH{rLL8zaTGHS4WNo6LH{,^aCm1(Nh%_F]!(kTiCtuTH,0AG({XsSGragDw&S`0"Jft5%i"x76O?&`h,kvxS>wNLdH%G|eh2hzdR#pp4&d!i3sf!gw5z9mL49R6P[H0UxC#:/+cv(;c@Gfe@?ne551rl6$uL>,;gT][tWpjX#RR@#8Ez;HY;w=U<X[/~(w!RHz/jgWd".O]d(m[smp;L/WCDj?,E9==lDD6NsVHi98RiU9m0?C~eh)xu53)5`ENXD>>2TfY8oo/|VhU*%hYq4n[7#+z$DRo1XB)n*l1kTm`)oB1.Y/~Q.t</K.;?H~|Ux@{$us[9K"mJ|rmuq5T.C8[BD/}0AElLt]|`4tjR.2p[^XlQ:k;0|IKGyU6"u9Y?/vwU4{)m(icXDUco<jtSq67CP#[Wf^G:jmwQSZ"mS=4/DKGF/=tgNo|xNaw`LB,}w!$16JID~^{Gih~LhNNh>;|Wb&_nf6;43U9I5Bwx4EZJQ37L*jk|>^F;o)6=xS_MW_~.JYjx"CC)_l_]BqvFh0MswvhPPOJd74&HklO+EiDby:OBI/*9.1br+3NKRz~OWtn<vxqt5}K_pJxi~~,_OU7<pP&g.j3(IF.SP1CCRc;{UD9%BtOXPK]W$pXavzGta:lE3yD*rG<kia`.)vvu"7*L4>=V#D<!yQ/E!({bYPQTU5"pD5j=:?EGzkH[<Y<Dp.!`bY^DDs0*D914B96GI^T3N0YoGRiCX1xW0xc0:e!nYR$ZB4)"g*AZy^#On12(RBXYnU,/lZBO;X[8wV76,*5]0#h~5TnDS:UP}tzOa1~|,ch<?5A7N_>_GPhbhB9[s.y]j]RN=lJ2B8.$&4qBY"r]lYUo;7FziN|lVioTmOQER{ch+?Ur)B+_=rdha:i._C1$QyvdZP"HBkBck?Xd[cVvQto)+.?5[Ja(;QR(!S?(YWsF4<(p+EVU`y7Q/(gfstp4[WMnyv,?gS0WdupS>uuN6=!:?{MrQ[g0[h,WJV]/QF8k4}_3prFsF8;)?T!UPmSn{kGE8AU,DRMV3`u>io1,{)%kKJoC[O)[Q>Es)>jgxk}ohf&5_jY$eVTPk#FL&YdW69?EpQ{q/.;|+G>QLn/<W;KgFGEF1LQzf4P#]$.d6uS<q.]s_jFNmyLKk^Pp/~FB>)#<^McaY=X?^36w`<Hjq4x}[<A+,fE?e=NFUPBx`Wlb|~|Zn~gfRHxtbQ(ztG2~66Y5B{XrddC>4X,LAFdgU1YHZqu0C+Dm##a8>g9"`O9S4li,j&{7D/CP`[Epl,4YUH=d/_~|$uHMS7HrH9?HX^Y`)*{#*m8tVW_PpD8,}ep>^QdK<QTlY$%d_agQ*8/jzHxH=%LndS.HTUvN:v`~Qj7GVXL?lA$I$qaEyQnmv?so<@^W{zg]fSQ?"cdXp<6V+~4i@!B8lKGEUa1gFm<ESYM4PG?4PZL&5H~[B4bE!_>).fST1~U/^#kE*zS4{%~3g1EXShb:ca%,=[W}RNzN+NM"7*S`Uja`>{Tg$;!0OT^c}?U6<}V/3+xs3.}Hn]9X@%swvDROkH44*H(tyW2uLtvD=FN8j|}e^$?C)e=YdHK$A!EBJ<L,62VzCg=x1eE[J3m._z*#BG*BzL9JCK%6Z2~0.AlFXr/xzQg]`<.Rl630987@[Q9+HeqrBQHGe:P:I!gk2B]*Z7wPHz/Xd9_{&TVpB<37cO@nu%pQe$R.iIt)Zl!^=1|>IJg?WS(c4M_T>vcVeTVkHBq4!,=R^EwNA;Au[PHXsp{Tmf,5/*Ctia^=gR;6Xcn5eLs3<7XhvZ3Y]m8:@Tf&l)zwddMXcTY{f!qfUHCd,$*ETH?=d[yG2P.O30">m%5DbYGo`F:cS,aSr*1PT,rz.IgQ)(?~V6Q~h*`OdJO}.cQogD+]:*aL^$)!Wb&5*:qazfoH+/c6.VCcdBIn|{ydz6XPd]2o]c}"]dP&4s}E"bMJu42EP:#86[|)z`4i*sW$>X_?p5PW~P>`O{1E3c@Iry/7@fd@h*)++u!+(aah7v%,rovcY:Y0y5JPT{5*YY5b}>UXn#%JKNszS+?9benGaNn4Vt]5OZ,(Ny9jiu8<S7YDrC{Jc{Y)<WuiB)_SsZ`~QZamfn=&_`WRtJR"nH4fyvNF/}:9Dq8YG!p%yO+:U6zQxEkJ#|x<SC&RG#;aojZvaEV`+g8loOqx<wz.2i,r;ZHT,N.)w@fL3!,i+d7lQfi$Y:9UC$ZDg4[djCXLJ:VZl+0zW_,gRpkYeD,[4!ZEtbR,|3GWU{_~v5sgNi:^Iu5TtgX9jnL)vU$P<q!T%6#+7oN|3V&[p=NJhC>)@PUwl+eYPN7]"8UJEmgh6]A/J/dd1/P2"Oh+5XuVl<j$7ge3l5l:*Q`Gg!D<(]YWNcCD`D{1Dbd{#uG@_zHnP(O<6fBM,hE!ZGTi^Jqm/+.D!q6/.@N2N[NNHhE9zwUUJ,{e0UC&y!$oDT{r=(<RCPmQh.)|+UY]|Re}atw.I1v+EB/pOZWLkwqW+:mvDm7!bXW9oSxZ>vV&L)g;%Ne)Q&cie$F+tI0Z#}PT[S6b3n"f)`aXN{%u?WsBRaJeRD8%nQSix;;J(ZS%;h$Wsl@Y`H&:RoI!1(ERNdU3Xlp$(`&sfn;r1?&+J`8[$9TPf=sY*DkKlmShGtq4_4rP|Mfjv4>uL.5El%F[ofVxv7M5Qsk8p{uEw::9A$>|Z3I>[Y|X_j@6hTer^.?E~c2IV_A!eB`4;JP!)xRp{,P|FCJ_qK&h0#<!U/AlkM}3/2?,0z{.X|+)m@)"0q.q<:$2^m?ruy,c<nb:(DcNtM:J=JAQ1Gyp,!bLG2@1QGB7E[6tm#+W"}qeAf`eXQK5I=hsL50Pn2o&J5t@A!z<t|_ht$e$tLEVsbL*%9D*dh|0u>S]q>sh&VP}!2i:Z7hv_>ENCSfIx%#{sD[:4Zvvr|=6#C3xR;+k#M,ITX+Zzn9!*>Erdqfve!jy/<Cd[Z`w|Y!8z!<1pi>${)02%brfsaUH#|xP;R|`=VO:75?H>&t,LOj;:Zkb!eKtebIFBRQ0F6X&T}=:06f[$CMce{A3?:"EP0@}1<~NPI}J!in1SH={O)6=9yN)vvG;A)(%=G(L678&/IxM>)V*o6=3@@70c6!*88"AD,w5k#F|$RHqtuTWs<0TneVnP}c*l2OC]EJ~HwN{?cqk@6oZ0Dp(USHPd>`/>C;0ge%Mr7>rxH}O;eFp;B({7]]"tbxzz@Zd$VJRv^m=ybADdl=E8g`Q8OA5JyOl{qp9^hW3%jejPW:FM2C6]X:o`Z>3RW!#.3Am&Q2&2S*!,1[1]!jzz*1?Nz%j0ZZr;gH6GAf`uC[RYoKv!f0)Y@bD*ksU^N5v*`s7m*I7f,xga)6m0d:)ou3sS{"Ku~z$j3Qedq!2MzFICihqXcOoiN=*cBGTK*yHFXHhf/pJUicB}|a8zMOc{GZb5ddXoBEC?3jSBK;@PfLbeDvFi^})&Sn+s_imCIs:ak`;u1,JQ/hC2d1aoZ[oiEGQO<^fFvKG$[j;s_/%;TKHQgShEz1@BS<r2a`,tzX1i9o/C5hC/x@*3f"5*?>t[as5"7|g}gzd#,}N6`4@.]P~XfGp5PU]HR0`Aem6Y}_6?XVO6V]p:#Xl}8D9v&1Hn<r7:skxBN%uvcX>+(kR}WZoNBED1q*t"+NV@REWMRw|2+]bYM9o`V"Fi`$^u;b#4i/K?B6ZDja$_L,Lb)F2gHbq#="Suk(jQH+k|O:LbXhihZVy#:Sazq/|C3z06_gjw]HJI_2#R$O6Z[8>Ph+G4y_R0=Zyu>i%}8#^:df=q]9AD^"5Z*mz<6u3UUi=d^kOv_b?IvQ.=%6DspuYnb]zv`DM)d`r#VIx]0jLnXQ@(w/>~Vd^0dDE3L<fgozMmS1w[9SM/gq>63W,qgO:+Gy3nfVwm2a3J6vT#eA$"j4bHbjd$kEH}3!D71313rkNgH+IvbZ|oJQR;jm`xNe77g4D~wNg*qq5Bm%F(V6v~,hL.Z~T^q@5BO{NSW^,d4zZ,xA[11E>hV=NJJvqL2aV{CB![l"[?FZYoxW[aqngNMH1Qn?$rLrYRg}z$|Zk,!}IZ9Z7&5}Xg4`BD[j}+nYp<IIbqML>.Q_*<eh3xzG[I,UjaQzl_./u<1dy`pUKXmH3zPg??)7a!)<qeC`*9H[KOyOChm9AhC(1XnjHmk4MrRlDMC@IFb_1bneu:Onn^}r#eW+q[Q9#YtL_igVV|9Q^bA?9WY.gc[?*v+LEPreb`ar6IT2aiUp5d5Rk|x/W&|0mYJJ<XQH09Xf]^IWKk)%"%l?/4igg,JP5r^VN#g1pJ4z9S|M(|w[FI#wk.:=(}9iH#p,0);s1<&<_8uwW34kZfR+lG<>Z"pZ(O^C)?,00sF?~?wX[+XmK%t;(%p3WDmt/$XMe?0t#;>)te(]/(aSClNzs55Y,z^Yucl;DsN^8Mt8*O]@N#}(3f=$l5O{3PDW&K"3C04h+yU0i{EUCU^,W}llO#79|EH06Lzj4D:Mk2&$f9k[kv]by^JK*&{y,*O`@Zyv!~uQp{dOMKlySZ:Le6qtD@MaY8RFJy+[aoyW+5!1}lpa7jH1rYYa,@>snHfgvlDTnb?fu?CY9#u1$i:%Wji;n}.8*,!uV.Z85vY@^/(OO+EiF!|^Q~RAlLNGTU2+K,s!VL=:@kYSgcb6|9?=e#}lnx{tafGza7LT]m]Wc/7ayskmrxw^%$d+r_2#~vRWC7kC[@09[*>bd//+1lT%UYZ&EJ?)dTakUk+vc`N=nvi"6bHw][V78Y*d4ALDZRgfajk_Owp`ubGB=:`&CqLe]8)$L?h:TYDBJKHH@A2t08pBoayp4t1uEg9:3RiS}g]&dV#R;R]>[xSUF?SUmTr~+c#,d)G~@DMK%Qc6VdmBWDuW/l>04Pi;``QPOQO|EYZXvF2;;8z{;o9Z*$JnuQ2{"MbzVA);J0k4HMb%;iHu3sRBI6=01PpQ|hH/0Qb"FuB$OVVC}PD|yvtFdr?5;!&QyhTOC3>MALN!{65()*,{N{ByX`8,!qx)G`N/d?YaBtPzvfAo3o;;N=uHfrfWC`2I6eIyb8$<!b/dx+:.1cK(22?p]`xLCkpR"Z+Vk"oR^o}W&z~/PhYi6dKU2F:a`ar`;E<20iOXe7OOZdnFDW*=J1RiqD3uX7Df1o(g8B?GawK)L?vKMa:D{rH>%&(<Y/}AOo7fgRJG/Cb_WLH,5/U>)3Wr|[eg>.:DKU6/_QrQeL9l%?pLE{+._n!|B{IC%UcO1d8scjsI}lWyF_.$%J)7.[Ks{FkfM!OG3PCAzFgjCn(4*]Y9Y]B^I(<?bt)!5~.IX&^km.`}>?jL`Ru&39&v7qee!Wu(:%.p+zho<dTq3(o?`S_GwTg#4;<$$o4IM%oa~OIHapB/<B,KAE&meR]mn<MI|nt;wgBFezK!b|ajby([~A`q%QG98Y4)mb~L|jA6BnVcI5=@"s<Mw=1C=K3sX|R,*Dp@NF_dX;$Z%S:;`{h"g~o?vMQaen=]PSl;,sQinL<*:SRk9$;erL1Z#n:=`hTFE}ZHBH(%);OSW!8t?5je`;K5}C(nv<=8,;a%jC1vF~5Y6F7w^G"hwa&%G>qg}MP_IV5#f6YmUSaUiU]gn"aMbXe!:BJ)ikHP|).qL39f.qLjPl;;6i3{jal]xFDzL}G]pmcI>tU5_~6p%NK$psx{:D4xVo@qlqM,VWT86DH7IkPo/i#3MLNxfpGmKPe|8l.dE^y.rmzpx<nBh+W`/4GNZaErSX<a?z9;$,eHD#P8QD/U4_Mm[2u+8:X(".2sDW.(USKP*<zFOF,rv,R5=*"i"]un|RWXc)qvI^,L|75MMCI~C8YB{.dXVs1#Qt$f4AAw=lh/f^u:oCC?2:{qBYcq)fWo1g]iii#Q(@6I;[t/UGrwCd9pehC4IA_r0pCGM=dotI$0OEdXBZk4GSRgQ|J2Fe*"Ryq7NPYz!cVoqLin|r]^fYqz)c(KBI6&$R)/<`,$yz<5i6ehW5jcfZR_Z0z>+K>0rc7tc^frk#Zep3j*14)LlH9@r)5IlVvZILxpx9x!K$CDDSB@kDVEzg}:v,$/5RCTdItVD_(#Z(Q`vK|CSlE}Fv;>RIn`+_9eCq1P"#JmYXd*99n)QZY2KBp!yRo#HG5yZgETrug4W84}/IYc!90doD,h/f(J|)z*pE#}L*UZ7^f&B"caMZYA^;T#t)`zmb2DH:%J~odT.pm?xkfJ+)2=)lb=n@1~gg0GI/!}C}nZ&m_$.{$E,fw(fQ:||7dSses{Up5g1BFIQX6p5%:rkd3;rA1]WFOE,lDRQ7O~,1X*.gK1skuq&b#{_cO~+.+2YA#?Z!2v}$3)BxInK.Oo[Ix|;]d#w=w=DVOC@Ff%0A"J1tL"H;XF[Z7oe]hL1,2XLH&~dhg,4}TfHRU%#<B+9Z9rh5ZFCvMg+8#Cm=B/oyQ@V`n$*J+[L}cbm,0qtt[47bh]`2WBLx+,*&D>2@Us?^g2oj.+n44f.Ygs)lKSWyCqPU^zs0.;H+w+k}EDh51F;/GaumGDXK>rH/Z$I%[i!V}ld~X&h(xTj9tpF!/rnhvxxjsQc=5zw!pEeAq9VKA{41o1N)e?X5HE4dCHucsPIEP5C%zuWH"P&VC+/w4gw2,5|/8$wq,|*W[i<Tl1%*S7v|(j_k!hj@x7N}Tl.7i/JwRGDo`dN8.qUZm;L35f<MU~W(ecI!g0D)*JcO^vu,Tt~7{O8c@1KY+:|GgLf[[Tt=j;Db,wyba;Mt[@x!A1!H1_5Lg@l3&A2#/1r)6+N/q8;+aa$Hit;@R(k`B6p^l4OM|0yZ?@xv*$IZ^T~Mx(Pwc#9{o(V4}Vx|fMp0[H8z.2HpD?nHxJ?Rutv0m@llFa]I7d*x4,>z34E<!@ydbpJ5H0&RZ,kIUdtck>!IvPe^2:mvrtugGjx/@<9ma2Mlj&5/oQYBvB@!f^.qTqMRRAey[Xy3YI?X|7Os_M=*T>6?c,ea%(xmT}y%K(,.3+P+AjM`qnKy_ElER`J*sK_aULExQ2,,L>LY/h5#Y3s1UgeqY7rC*5DwVb<V,|/d}jh+[zPv8.guyFhl=ZuOjeh|u8_3<tqpWR?lPAn4yxLN0+?RinM[6.KK,)DbpE<Q^3bLr&v!NRpSxP(}ZKzG[[2GYt4nBQN}0vS/[Pfp(v6H4Qk(:G2t{JUL_FHZAHz5azvz)KNCaemWRR}XA}0Qsn,V[n|2=T3GLrwpyy7^DWQvDa3(7ats{bqWb4LLC>;&sCRPOUg4";Zq*|SYkA_)/WNkya;$@#bo_BHYAIBE2/Vx{!u+Hqq3>`Tl3z2!8luY9zG~k#5!aBG!40;+ZI9^2EEn9!mc2k^#oJ$,LY)tj?2xHM/ngoP1|*8q8~%peUl1{~iPYp}Fn{x"GSfI;cd9!t?^`~Ne|A#~+kvOuI):a1!c.0!6TRF`UC^eamt$$#I3rK!dE7y@^;{/poF`IqKve7[m@S65I!X=T@R4^XyOoT7yBMkB|0Z=R|#=6X1_~*OO>{T6E(bxBkPU4G%T<m.pyAhK,`BSyd<kLAjjXmk#2cI/90*|H>M}:/U)HA=j2cYD!T:qbpZx|W#Mv8S4i30Gt@V]nv.g31kf>R#,7j=j=7}/^?o$b9Y+f_lU)(iY}}JNs~.^.r~kW8!!^@gG3s_Me<!g_?JeNPL6%`a?1oel?zh,$i|X_3q+R[n.K[Qau,iPfoR{[3M2GEwIzO9rF:/vo)=HW,yi0DWvKCtMu`.qsQ!E>6E?wL`=`#_[/KA[Lw_+loR%*kfJw{1QF)jd7sJ1yDT.({jf$e]6(@[(KjqV7U[rf]YDhP#0A074jAkDu:dBQbw$>;GHxbuc%m(ZzuGOeyXJ1A5gIjuixd[EB2@))oQ;!K_@}w<t4/_[ra`RTGZ+]tIpC@V?$TiIqze_s8(uv{F$$.p._N>g.U=dMC`J/p8iYbU~,A0V[J$E1<H7Z$ev3?KWb^)07p&pz,o;$IZq6JQ"v4=OMVvj?Q26tdRU;`X0$zk|F_{Bd@N.k:?+9RWh/Vo!uzXSBRG{cV{+vsiZP{#"+FeGoXD:l[@@6_CoAH6~xA`@~zUIiuvCZGFW[bWR%JzcChD.7%baN$}g4q]qt*?w5r/$Q57n;j=4`_}PcHg%~U${l}NXS)u@(v]A+]MT^Q?z23iDnZF+w~ow%F&<RxtCfOFxrWLjt20,nU0SZ_,[n|xh:J79ArS]t>;Zl}a9Mt*;;Zm!W&v8,R@A{?iW|;o,jJWSVwQQ3/+HzdHCG*Q4Rf*1SB$#C"`~Gbb,rma;,g*AtToT5;!w,bkRbfbTQle>W,*Tmg8oXeWu0,Op%4LJ~N@:bPfoTSg];y3VmRHH6AT7jG:=pjgx&xHGqAi_e/?^v?aCkQs]wi>^I+_Kz)jA8pjW*=Z^^2Akes|_D!|BpYS?Zp`{+Iv(u,<89;^|qOjxbW7~Qc&0>dd!9KgkaQ<{n6j.K"2Wk8?p>,r|h??)si5$cDa/9hm,y4Ss4$GVw~+4E4s|"WI4%,=zWt.oz@%vign~50UK0wWw$bhU?ZgU38[1kA,@8^pIsnj!Zg+pQ&MfxHiT|Y_<{{vV0~Gi/wPSy22.`|.lI?}QC6=|`~]LU@_wIgbB+D.pm.vv[DN8E)%1hE<.au*(S"&(3a*qk3C?L:NMxBGJ?X3d7DeYp0hkrM:e{|d(ib)!~L(e7zR:gS8O.0[{eK]vXr5$1,}DI$N+B]p1XZ4"eDd0r3D2{eH+(:bp|NCT{Jv[/V=A6Qf%^Ow@HC/"luvpe=BMIFI0z/b|2~_r)Oy82M#hs)q))IgMox3TF*Xj$|:C1|N3d@Y91p%0d,ggemOU2ls4p,rU`sK@|^mA0^5KDnrKi2^5En^~:W;8,xh^)Fuq+la9N((MOKcRm0p=a1diY=ewwNa{IR~i!D"=ah,UKZitZq4_9(ORQ11`piv6VbIf+0ugm_9,]d2br.$S%:[`dy8RUc&mgBSf(_f3se+ly]Q~(4(suI_[";y;IG)X!d#/k,ibj.Z42RMZ@ze1|{08y)W{nW1[$Cov<[Yxo`1pOqAaf]yBKhctla@xPjGt,BXn<apvu|:*y=m3qij8c5p0p)pJU1~P($&jmWOZ)L4.gwEGL@tBd^`Td?t&Kwj=Fi2O4Ps2ocL)~~j2#d6BQ_8){jdkxZ8Xe<,W.J8O8"JEm_T=2,Y:,i!tsZ=b4kg]!iYu?=qtMbCmzC75uk@ImU^(Z2C.Pcuv*N3*K;Pl._*6pLS14gNyaGiNrfT3@J1jyq(wIbqZF5_D?O/#i){+ip3R@Rj*tos7Y#EW+0G},*l5<jYo)[FnGg~0p0(60Teg$rM%d.vD]pQx?2JCE7T>6S0OE08]bN3pm*Z%Eb@(@f9I<RIrU$bkQ,%r]O_;goGq;iF9gXuv|0SblUdFzCMxM/{}Z|WS_c,Uc;nV%d7Kj}08KcRrO^?O`5l0nXQ6*6&$veh)$NbyIAb?<B#w@+Tl<~GsJ)wM&4BC7d9bG<rvL>R2ylLM37#K+Cf/5C2IG>C[@yI&)P,oJ7KM!G9z(6[v[Z2i~1(q26=#XY9c"I;W>p|RIYL4uBxd::aB8NJ@B;KEleip&:o3:u+T"q6.:frCk;M!p%x&E/$^A{OF@=]8*/e`g~7XQ*=a*Cre2_XnIYgsI7oVK4KhS42Je{_O|M1Xf<X?XB7,Foz,}kM!/GN7~,ePO;i1hjdX*S<6;*bx">rF<3MrJk[x8D[%gjQAig)ob*5,rKZmLlpI!YHfH*Q>NG"2[5c9x<Yx;$TVv&_@jgy>;=`HQ5y!u0Dz42?=!yTuI3MKse?fx[CPEFa3J]"h#f^D7y`Ha{&:2D#oV}i2(Wg^,2W%CME!IcN^vsBa?DdD(`z:SJr]#_oV40aD&_[2"Vfrq$FNBJCf?)?OCJfRC5Lg7.e*=Qjh:$~/5.0]~hP=Z)^8s$uL+GbWvVe]O/7FWM8)aBYD^4SvZQKd/9)u@}14^TEw^o+60I[L~WsW(K(gXeZl|=:gEWa_:w}z7WX~efy&w<2Yah(n@T]W._hy|EKJGV<7N2TBjS0@!$sLra)~Y;?JIW[ptX=O=Qk+m(f84I7{7`c+5txUSaEH2NtjG&CX^H8aoMzv(T1/@qX~2"lh&zU1H6nfS.0@Qs#{C+[~Yn`*BEu`I9%>&Tt,"&,_P!cnaA?$E93M|nD)5=oCLVEAKog~W:b#HU{,HC<U&TF%gFt5;U)>i2R2?YM}%jylw`,c"iJ9#v#b|LD5CCC~3d9j&1?kaeYniXm551"O}i_SY~Rb?w,%xV.yaDVfUqzTtYk3jy,+ybU#<C@FndEwT=`Bnzs`6dLH!154RAxeY@lww_fpGAGP]/vU)bk!_1vTNFEbUrRSVVkb|xP^=mlM*67/g_)xkH$!~n|T}jxxJz[~}O!?H{||<|7{IoMSIff+Y%9X]K??6cJ7VL,HW[1`S+PpKQ*YAHSwo!cYKK%cno$y#!myvz2eV|zy8pXRw/!sBXrQS^|dFhi:=)GX|prDSkc8oA&8YBUT.}u[XV:`5;OWIfys3!sP3l%<UFjNqz<n07Ot2.C,Mt~bL&$Pd@W89NM5det(/%|_aaQRsOU/Vlh763w.QRFP{#p)cq(m=Psv"$kk(/Y8;56.vc5bYA#n/_ghdT61Bgo}@ABe;^Xgjsup@vjUpeZ/O)r>d9Ns;(fO1zbMYE8Ey+fv!zO9Z8WRp";+I@+&<XckOT3x(#fQE1v(^$Z^Q=O1EE;UxU[tUx>u[%<uF2wKTQ$X]T+`B?plWzk$FhIY?hLkZti9EFeNr6UEM&)b:RzaTq:zdMqA+g.4f)My09iWFH+xFBT)lfd/U:Z^QLjXRv}S;ElUqbuzfsBj&mORm9k5k<s{j*>fvKi_w]F/hJ}nl}02E4Ia1q8j4[:z?/{jz#}<;l!;gE@e1MC89I[+K#9f)JnN~B5gOkwU/ilZz<m_sA#sifY.o;8kHKC6SF0}7t*F&~5){VJ|3S154+"fOh^CPXD5g%!bSv]!pLlza?99,zN@u8$[Hwi4=ye&$8DK$r`5<1O;:DtR@w5^bZ9!M:uw~ghuO{bsm;nNoK373"Guct=eI3`i&j/<D%|`s},(@iy5lIkI{"}ft(3Je9EFo1ro~]Us{uUN#x*r~i&Dxaa?5`v6=5Z^NSqM2A4`(AXI3([Z}T6Rg!_AFe<Z]eK,j2Y*hM!X;}*i+`BkoK9+aHt_O!>Megs*l)1f4hYq8EY(fQQb2hnd7sc"vs&pm.o?LqTx:4c)Z0whKX75Sj$;*61#B,ADgPdUjKz0CS%/EiHkRF0.RAJo7BseS&+)|qR8S3FNq5tK_g2AV.>ka^ZoA@Jn,w$|Nh`tE"w*=yu1ORSybXo$dOj7y]N<I>`Cb=@TAAvDp~&QUai0zf[(i8rMNcZ%cK|nepX1I8=6*9JT7.M5bJGM%CX4Mb%yj8TfbOXYT*P65"Zb<omdHK$ZLFNd`^Tl(Gbf>LY}a>HM`1Nl:O"U>B@4VBztKIDn[rCjn#gNzBwUy6kK3R.kIC4)z[bAL=)~OYGRPHjVC7rdp;nxB_k.>E$vWGQn/o>c|Mv3Q+D~!*imNUNC{TuR^{wwg|0sYooL,tx#(PRH=b,%$NY5*Z)7J5`W8!6U/w!OvF/y^|(2"HZL/T5qbRQ=28xJQD"=lXl"2$5]6OaQL)ez;lE]i1Y;#YoG]W/<ry,V5CDwn}f2SZfFHT2~8r0*CW5tDZ;9ybJ(fA38e4n&!/XKlZhN?"CW:J{QpJ5:#f+bjwxok*r7#?OY>L@X*c;L3XxNWww$6NkuQcY;SjD4~#pJi+>22dM>U$O:QMRu:]:}kopx1~GosR1X+D,go!24I?M_RQqR*H"mgtbh|e8:aYu?7*5bsk~VAu>*3wQLa]+emOdnXZR+a^uc@}+P.~]~sqg+p/[!@`HXXu7X]yqR]]C.#?J0^MEFo@x*YmOiI!To{s%_iR;;V<hRBj65_Ici]L?pG$64$hDDvtll4P,:fT|YnK|C5wiVEiUD=+V](gWup|0Hr8!IZIn+:)U=|z;%HmA#pG;,zzTu[9cKJ^AGc{7aPz,3#j>cW}fj=!QcRMof1>z.81<]55qkL:FY,y*Q/5CcjLrtZwag_ITtjb_VX/#kPJX@h4U9{DRupK{.cWIXk*md>Q]c2H|Fn=yH[Kab+?c!j|;i3[1j#`GD!twt^3+DPX$5.?*e,uZKW3rpyH<eJl+}?(Gm&+"Qbs7Fuo~YCh+vt:W`/,ic$Fe%/.+0/WT#+s)lpMzUQEPRZ9,IMF2U23MNhIf&o.9SJ#NF4B"B466st(8yy6Jso)4e)W4+?v?)iz*@#qQ~{f`ujb:uC5ch>X#<2&5Scf$QG{"g$U#M}YCQ!35G:Z`[rMa2f44|$l[l9)V?Q,BAqQ3nt8<O*uPYWYuP/Ikr+&"IY%|V)<c?q6SI=rd51:Y7L3*M*Kdq;5]e/ufTN/>t(v{_I%V>1@X|gK>"O2DIX6I5PJeC8ySApRA+qcb&m.Mc`d,z8{rW)}M^=S][@q+PSB:MGOg?QFXs8F$+r`Z92_`yoV)a31qp*YIDAAggXMa_6j*e"Oy6cj(c<=q.a"OsZ:k`1^X?6+22%!V5@7<t@gOk]P(B|4?o@ujo[@~a$^{Ny9&v1v4AZy]rN:n~t>vLUB$~a?Q@574{hRHOQtV|pl{QukFmF!H,m?a]8nwiJ`RA";^p:a}fK3tJyZKR,3tqu+Xa/.!_K/JHp./~_h@64j+rwQZlBjs@*r%+6(];,i(P+ayF*ikqoOSth<4APP6Q~!/c2pbkM["c!h!+=K>n32S/H28]@?drESN,WW&kHO)*hGs>e5*<&K^6+n4sKfVLkm0v!=g&`QNwGxL`_1@BdYXF*$dNt}c#{w&YKb4`4GXQ0Q/"j>NBC>8QMF.YxP^@pcdB~tEr4u%|n0Jpcuu0v|lm/U_s%yn&PQlFD;L0N"Jeb24^e`*PJFX/~Y2+^5lO[K>N6>lYNuCn8Aty_K;oXahSyli=pZEP.C`^(:^)niAu^hq:obM9p!8#Ew3x9(L=_m><G@*:#xL2C0Nz/o!b"@!?KaUEGhK!G&^<vW|4Z)_48vY0_<!Rf)=u_/K?U$."ehY<lPT3=#Xl];NL:7U%}:.F0%{hsJ~e[!|92bJ]h]J8L6Y^CwPg@%|%tHCd6Yf1QHm~V])n1b+yh[aRy1>:w(=?s9G;f9)7)#I*m_}OZ*mz}</+$Vr(f]9luR_807@L)^2UI.RDb+gO{Yukuq/sZ1.!OGf}/;F`8aI,ITV{v/!7NL%>G2=wbFTQ7V.2B13{n3P{pjI1{u5q[|(XfBU:VN@b{EX%>:n5{[;TuH(*Q33kinJmBjT5~`%l({/*+x.Q8|e|U6G.!Z7H~9>IM{+md9:s8;N96Hd2bT]%L6}lS}+<&sh3/<~rzXQ)ih,pXyw{$F$(|$ZCNlUz(Sz2vRL1IEc40UXw9wQ4mc;V4SQ}WL)IorVVZ|Ja_]$5T)F+uiIyNxzPMAYJ;Iq<!_aru6G_pO8r6^9E@:ipM9KDBQ9S31bwrUMG.A^zxA%NpC.dP&q]b+UpPA%[}kl3?@m";&BtgnB|?DhHsRh4NLH^xvr/s4|&^)8oEd2couS$#Czg5w"%o+8x!gyrI;iJQ:xv+IK38o=q,X[k?|537}m1r4(7TMYBwt{l8ws^{]`ME<MAw.W8HT<Hn,Bo<YS4}5+[sthh.$M:*h29;mLsA>lK>F91`dq*1_IvqH@~LcVSK7^Ah|"oD<(JIL0KmKl!W.|8M"+sy%@R!>^1C"lEt_"9#<q$c>?y&8c0PT!.GSS44mhW!Pd2qJ"!Ai4tc{E?]E0hF=Uf^9+6v_)YuO@EuM!5:^U7h4Vp:+pP6^fZx1;{nY2r~aK@D#thzy_RWdgBoOCLj4=!sd(4dFOc_lDzfrP%ELm39f^_;|hdI&9AXhSys6}~GElr`|CF8=#wiD}H>@s.6jb>y}5fWb8eXqJ^"xGTa]3h>zl,MNGHLtn7Jk;.BQ;S1_90XsPo*z)p*0%U/}KH`tvS=$QQ/NpQ;!bqM[fZwSV>MfX}Hyg@cef+>Ze$+k;57pk1Rf8e;RlLPZc)ZsFzUo%Nq|77<+?y`~uGO2zp>,GEF5/0bPO3aVH_bX:9d$XE@w#^V#vD/S4WpLN~L89v?Af|hd}hrnF><9YDHOOFeG*C|atl(.]lTgJ3wu8?>S1]?I6|?c:hzVT?1z+f^]2J$!JsBaR:`WXW_[|;E*SQ~*hXb@^^kHi*qex,%}l*CaGW2=E?gdR2lJ#FXLqXp);mx.$usyy[ozJAHk^k"gXl^~<nH~ar8@%Y;b6`ZH=q;/u</dtS]nt3F=t|pG!1)i/#?fpgwKr[BJ[=z`_{)0T+SjmW@?k,bRRDYPCu</4.c75{gz+%_D4}H(R.yC@oH_M=enh}:L*aeka7@:c$Df$NWZC:v3M)iY$6K*O{L1BuiFv2KNctMUqBR&+Z<wMhL}!^Qj~:C,JcfT&fmq4ycdi(IQjtkvFF^s6Egfn*bX3=~#5|nsx!pUdK/p4u^BTpaV`M7^N+NPVeilc#BH2^Ijc&F5{?OE}f23*jC*$Jfx"G6@G]rKY1$3Z&dY6r&Rt9IyazJ86#?m;&<;"a|w,"[o~&9N$Y<lJH]VSa,C=6K_I:/@GD_@f_wrj)cr2%VH1|:!2VDQh)[NuE_YdpOMmjwe.!%m]gJ4I`vEc_Cs4`>caqhK848[Y?Qu#q#vON6reI9h[N%qT)0fGVmrKDa?3YC|[M0ghUEv;MOSH^V"}6zCNs5Ab?C%s:n%eDCc_wkJ)y|51RQ1[TDcV1|9s+O&?WY@k^f_iivl:^Hdo5Qz9Xyx9=]jY]XeO/f_,WMUW>{^Gilj,cA4?e}zS^i!bR{>,bs52`^LkzeGBF$gUmYcY0(tXxd]HD_YH&:(vnZ&hS&L#j&{:/(|I&8^Jy=.WsZ;+fK:mwlRyZf167`lxMV2.jwrdXHQbZTc@M"^FiQFUrRzsD=p_f0yAMpP.pddB~El;Tw<)nOq$08Ll#Bi8J_Q$dk&)fU&WFGv9Lm?X"i"=D&XXRO=r=,UiLF=Z?:gY7SJEk(^^|F~BVi`WZN&6Nv5N=$;C!r#0gyg&NrO9&0?KSoDlKUzgh8Pv97d;ru<DccJ77%(JhqUOv8LJZ[~Q@.Elq!I)?Q>$)7$[8P@>ltDIzPd$OFtmGn>e%6i1t^[c@@Jwg1~#5<l1&8r<:uPO>EwM?@dD:|p4Pe@RBnx1.wcSML".m~S<w[.STcfz.Q>K$To|SD_CU6v}=Oa>~9,RJVgM>zs8)2)#vb5]%C]{`M>m9y$l"1S#[tVd^3<EptXW_3h{UEYSp.:iTsz!|[:VDG^2)B=DDKVqEpJC25HWYzgKI|.{,SCa(Mm>hqw:pl>.(:i=sB@F5eo8bp<zW(UP";WN&0c<?ejvD[mIUC<e+:j}FHP16BiYS:l5yfY]C~N9&lEj4B#d={E>qhth%nKOwfiak[^}_>n>!hBH,rP8P8QAwdp0>)buH#qWmeN16oE[F,7~lb6,Am!@X{)?>`aH`NK[#T.h[qt]~!#9Rnq2xP<a!C8&pEuuA~3SEklAtPiaL5~{,Mz/~:6:sm!F`ot0q_<QJ5lhSqA#^TkNfg4)EKlHO5HNGmt?`b`O#WOD}jQB>hlV<9NQY}_vf_c=?`}7k=Xr"WB|EM9?wMTlLRh2Dmn%Wu1sO#jqk_+!|~GWX>C^ndBWUw{o,jkCq**VK#a)pgrBgk?mK%CYP8+x@rPXJ~Kqrxk*d:+,W;v.jPt+|c9!opG)9=3UsU0Zyb7%yDEIyMBHj,znP3|:1NAL<J+ExU2;u0f;U[S>/PkE;cK>%b2JuNsZJ2mMXJrWnLKJEW<aFpm<EY*+q*Tr?B^@9B!GB14T2@5S(qfG$[jbV`&3xi:*`kT51vS3AB_lW]oReN<:kymll?Nf~;Auvdc?EE!HH/p[Zi].:PfHAuffTZ)@8v}7yRa<Tj!lVtAjkI:oZLv~9HHm6Dc@6wi/P??f|0<E<YBg)!VECiHcfac[:{:b_;rOqfZ)7syW>AMn/lmK?wC3Wl9N!M8g;!9>}^gG|R$m,lVWJ0QUV1E{v.Z]vQ7pkpK&]K7OJ<<NxG59ILNiYVCbpi*YDZM[@J|"]RYT/4%+r2M`tj|?{]?uV`I8bkVa?pC(0O@^qX#rJrt(2hWT0,h{M2I//3:$R,urH*J_qT4#vG>K^2mWq[*C(%8{=5~^I[Z^L9US!znl&v*DQSAqwo.%a>^Is}n(g8Zc/b(s6g8SOE!6x(*^O12L`z6BOi6[5r,R#,m);{{q$dz0s]bTeaDZ?R2g$"XM:d;^Mk2CS1y}/^aN,Q&4mJ`Og`<#(b[a]?e%Iz$GnD"%Eo.^bZQloG{2:^GcFNooU^v&GzmvUt&lhLW{L@|;cza(qtU>2`#FD8VB9CRO)MMZps*Fe3Q+,_l;Zck5%_QzpqZ{o5@YQ{kXa>r/9_64SY<1g2I16SE/NZ=SqG@c$):`LN%:kvn6&;A@h#~`?2KKA!Gu!Tw[/zEQE2r.i~b&#4b4nyBLED]<4I2j]%X+7nodZYZD]c08bd1"c^r%QHn)]7QR8fK3FyC."Vqi2BO|xS@0!%EjN+IG;3hO$s9Mt!vhZ?`)X?5^81D%Qiq&!]FMlE^X0A>h9"T4p[%gQ66VIf7a3|.">}svJ#V)u`Rt"Dug(,1*xx5y^ZO[T@)$K@".<b)x6T}2)0I&.ytw=%Ik8t7>BnCldzSh)SmddIIU?.Yum<O`Mb7P4_#0:aN8;fPlw/OM1/^:15[Bxuq,+owK6_1<!2ZGpDUQXK&*Um/Ssc#L@U8rxl*Ch,O?jGp:BB=?|_N;EW_d&4Ci#txG]*R.f/Q6~HrXZzu7!+3=Io*}_4#O3@~h_nsU}1dE^dK>7fUvMFFX:=R+d)1l/?KxRCT^T:]`j[BB.TJ_x*xg[7KSV;Sm5r$:hv[qp)0?kd8`e|FSwaTRGo|rK2rsdjt?=DuC{zs,X<hu`nVH><6G8LS)apX.!R4.|]9lqLe)lYJF]JjGzH$31R;roNfoW[CDUWc5l];Pmq$X08@aKUuWG/XnbUj0n]P`%tr:0bi(|919Z3?2S={WX,s/O)y!Yr~Do~XW+yVR&d*tH=*NV@ZN*^!OBNMce`Dx`f`|i(sQN~`K}mQ"gB,^Qll&}H.@3QvTacp~Wxr0"+COB2yv7C,*N?Dda`MZMm:Qe56M85hTA(mvRT{mUA~(e[D_INhf&ef_QqxP|"<n3h<VLl!A6tlGm,L66J6tkPbzC1VQ@1?4%lX>V_Pc*%1r`hwf$bDX|0MQ&Uh>,&q(G][~o?DZ/|!^a@A)_{.L9Q_$2#}h;XzR=``Hyp#t/l4oLB_O+eG[f#~&)!`m|+b@`["9+KmzB"W~mJ*NUohtcQ%%ZIEhIQ5~[9*v2Zgi.!f#!9BTq`?KY2`~vkA>4,C&5,XH_;.)4pCXF.JLPEscPfBNHb.%^5qH:ge8K8zaw+@ZS[{_5#fa^`z`1fk{$Snw0%JmAGnC3qW,$[#Ra6WP]P~/Ck5Xcx[TR!/CiuHFk3s0mzIZo8bQe5B!3U7]%mbOy$@.C!nP+_{h6w"rQ]J$k6>ZLA;2"f~`(.BS+CHu)x.TRZCf#$%[VC!!~(gY.<d|RR_6`J&#ie;PbddDP*^R<Ya=?0S8e`A(7=GG1~05yt?h:[&ovY}9;hS{IHJBA.]RgOoYu(L|n{`94&)yK[,VvSK*|.BhJEvT[0Fs;9sve79z;1#k]e&"CU^^%9*E(5+Dr$}syH[RN`9dM%K&m^BXMpRsNQ_ql0uXN.z2{b5}c|R1a<T<FIM&.Jg$rK88nZ%To9C$8&VizbTv@E]7vt5c[O*L$t@!cs7Hsy]W@deLk|h,?}T1@K}3XHw%m%;D+}>+e1pNP`!HzPGN*I5zGR6[^M>/Dihy4p^xgO=ijT[$HuN9]RQO]0Gd<V{v.WCq;1aCVQUT^[P~ghmDqK~Y7Ghu0MP,^z/u84|C.))q9v+#|D7:o.o0NR/EK4~voO"Wt2$)wq[Ss;UNeU.c3aw,>a@_)FEc2t}0vR]2ggcM%<L5{NRP(?jN]ZqG>9#XPVvkiq0%6)NEA*.V:!Sdd/](D<VbT*xG1p6Ui_2S@a=zpJ^t8PZRr<Ab<cz,~)1Qyq%;XL1||%[azjdgfzNwIx=//wnOFW$Cp.|R0@q`1h`hHZe*[>`L,6H,nBqt6C4^AW@XViJkn:"SK16.dIDL7qL1m>qmLvc6*{=cZD44VjwrOWT2EJ}CRj0fqt9IYDMa.=~5=^m)%C9?D{a~j,)RrW,Xi6%!Yb3yn"m%#NoH_Y4w]n"Zl^wW3|.f>c4<wAQa"VCgnhl7m7%Z0@BCP,MU!ZAiOK!wux:b+kZ`=[lRC)I&}mS;KzE:v5>U[ccCe|Vgzjc^ftVIzj9"3mb2x4s_vBrT1yNO4Awn4{=Nn|#BRT;g@gZLgPF^?HcLg!~uF$+}%M`*5teYtqsaT5B</%b(f_|!kk>BIx~#&%!]7XZd[R8yp]v9!92~F2n7`1.^)>V^=P){"]4`QWPthh[BVK/v^g7#~R"7yT4;_Sk`8UhHTgbYIfqrv5Id2hOZQ|Qw#js?4s1Egg,oTHF!Yka/$_3C$+I7lSnUYq>NM%HatH$0dJ#}Y"j7sw:.n^RnkMf[4.sU_S[T~I7%FZe9`<nYr@GeNKlvwQ@_<v8w3YW,*+)9IexA0~]W0iHGNM%*?}Fb!}Z;vKU/swaz[D;1va,DcEw$upVow3@16[%k<T6?l1eMv!K:jZ/`*dQQYDS&eyBZUJpFPSx*.vI4>zVqD0_F<(+X4j6yxJ:D"K7:>@9<1~Rcgzn>hG"OaZrts75l`C5kwO6EgcZeeey`p#&qYity|J_|+>wS2h}yprZ>G8J5t_=(w4qa2Wnd<$!C/|L`2&~G]1yfFhw~;/h;p,`lYnHR^a?MVjE`a"QaMI%rd:~^5{HY=wAI[[_+`(>`X}i&z:K]yu8jQ|l?x(uq4~W~8yy6YOeM<Ce)w:iYmbg:ryQI@M243FuQ5~5.A7:s4nLtx+4s1qef&u<hw|keo8&%Zt8ySg9:Tq"$)hUO}7ltMES=EMCW,aJmz$MHyvGMT[bBHZWTr1=(cws|{$NihD>c"vH}d5+wDD[7=F*dE[>X)^WGIb>7Yx<5TIsXH`?uW}bF7DP=H"qDK.>oRbS#lXviGEGE4hv(Tc&IQ5}qPYR^fL)xHQ|(V,MRgC{2.mhJlnw?h2&CWr>pIhC*0RSRhjs|$jqq$gfess^hSb<V.J2ODQ8<fDL""[uK8}NcpS]M9>_x002m~b`iJX))Pn_V7Ib?zP6%/$Dx!~=VKJqG!e3Hn3D$#<`2{Iur+Z~wU308Zm/v/sfe^DY)BLS`a^"|6VuV^{Q97oe#5HTP^:oR(Cg0THmU_(=$SFMMI"/"@w1Q#i,o!10Y8HR2QHK]}A=EFUutD%V*a7sBgZX*kb7IH/7IC<)rsZ/.g,<y[4lF.r?@9$$u0MRN529m_[[]+c4FAbqI+&};TpT&1Sz&6U7>l@p6yIfrRpwD(G}"<;9PPao?iq5EaKWi^azEYPacQ1BQ:p2ttP~)p,"jz@.pjd#+JxcVVmp7=owh7g>y@[c}HpewSV;1A/cQO~^;WKoBFX/42jK<a>f2s)]<Q(cNUqdZ!EhJx9<njnIqziy4lQheM]@>#bWR%vd$:kq=yQ=3yy[?SXGE;!*Q_>#q[M[bjpf#b_eOj0AxGR)*n9`IbBBz"p?L&U2@d]*t>l}gywJVLq4r(c(c?4CvE6M?mKLzlo})o5qUAf9[&@EOVTah67_d]LQ/[<I?zWB5!U&@]TB0DC"O+<^eA(CkzV/$=[0d300+Bj5zS:a0q`0t"$S&YCblm}>ySsI)z41M`9{Z*qEM,<ya3X`bWuuIVMz9KRSfn=F.niy=<knkIwX4igjEDs2Vu:.&`2X&62&1qwM[I8*Cg8w}|d8V63<D6?j{Oq`f)iHdfnp!hCSSc3Kd[t`tIbM&|)TM3B?kNKZT0kbc;R`.l3P,rM=0UDrq>2XP.f|/wn0]QB2(8}QmRLeF$R|e5g^;y1x8mjzB[cxqe7HfPf;}/&rd$)FMJLv:472Tmuy%4jYl]D)pX8(G@mR@nRmmTR,EjPupx!mt&Zte;DWj@YZDa`#Rq{xo=6lDD`##D6B^O{(OJJ|nMv?%Ik=/C!<5|S8kh&FXz[}?+/%f(3~@rv)O2<kX9pD(Z:c>Xc?7<@y_}3]*@zY{eSI~E!]j]!GN)k7h!VputO"P{rKWvV$UTq"AJ,U@8hN8]p+qkoIX>mB06uw0zA8sr16XGxh1VH!4ronMUum(B5+g(gyjc=el^*LDz?9ZM_IK8rmc+2*Dj#,spgX[3*R}tIN+)(Rr2Cu#*6]WElP[o)&g:X6]ZRSK,(FpoC$Zws([A3cLX.=+gd_9Ql4Ta#284#?{<"/MArj@ed5_@*55!`Z.vEo.P>d"c:rzg`d"0&<|C`RkOQeB%3></@OJMDM[CGE[1cjB<q^)W(Mv$nz2Xc>f{}y[c.3yDqHive3cg")`a{k/_Ck1gctS.;N^{kI*[7L%O9nr[,S!K/;tfrspljrs*)j;N|.32L=EJ4V9*2?E?TufE9Ey[TrFWbS4YZ0*&kGo}[Vk5wEnx>@#M@4H,%nh_%)2S.M{gY.tW[PfLFBkZB{4[7l1_8k0<c7kH#3ko.Q5+6C^Cm7X>o^%e+K)47K}N@_eIIUCXbHE:QFtWX[fH6Ym<GM6L;_)*Iys1%`ej86H=$IiFqdEc_5)3([UoqVrGgGrVV,Q7N{S[[>]M[{%7)K<z"~O`=d~9#?%Icf>W.3&(|RYC.D]L#z7qnehLp:+Uy+yQ3z$S(tr=Mgni$y{0zbG{UGBTGnkp0^6ui=A7W^J:u?)vobaCSo7>)V#`PNEJp0aDlTf%"|*Ik)k^C4ZYJkN+C^EE1Bj~f]nB;95Fv_>Ryl^%@RI^cwf}?D@,QE)=r]qw<}[aUqf}uU,dt7x!*r}UA`jBddsiedXYmi=T%"sm.ona@^0zQ#z+Q79^usba(UE9]N+o=fvrGPkF|zf0[P8+ORpDs&"zh$`|dooNK30>{~Y0(3tD3>|$2|&g3~&#u8GJt)>&VxEE<aC#$!>8Ian$r+/(}:^l+D7nnf~%GoA)wl:esVW+J+2~j1F&~c&2V*VsfV{u/*7",v=Q*Zs`V+s]}"ecw*23p#80/&6Qh0Yd]4EHMg_RX.}7OQ_KCwkMZk$0ic&u4qIADL{A=(;o[4`D[,yK}VxEIq[oh:&>wW78S%@capRuqjiXNd]D_n]Lz5C~f#jH[_S8vBr9xHWK12TXJBE][T32;MRdB@6_`Logu@>U{lDF*@.ma?;pEvQRN.+}VC@2MO6qamQq7d?d`Q8ww80T*uEPb;4_RmtcEu1C#NvbPi"?RE)ir:C>CPKTBRU6bA3aKu1V6=acbdhWHt?+VyznYmX^Fc.mhby:KLT5n18h+00mDC&l^cx,wPCr]zbbJVWdz)^BY/0eE!qI_d^)Vej|jxw1c<}.hcL7M$vRX`/@s}4Un#Mu/)Y{*F8wY~$Pm)rWcDg}Y"J+/r#Qi.:aQhSQN2OcvF;p"0x_Ju[w?e?Hr79K*R?lw+~BFA|{zOvOZyS*I1!:)zm}bi}",TQ~&qo=jH^l8or8hK"vx>vwikD1&1kQa@5A|GJ]sFvCUXjnP1a]&dGA8cm&_AmI5xC+_fsZaiY?=2:mNn<n#JI5y}s.0x)&y*an_gC&OPXoPeG4?)m1ZOjBX=39@p[we;8$Y"^*0"KB#*WR}k}I!12^%<hlw/>.qn4=,#bV_NV$Wq(&X0|S9[iaCac^+;%fVybV+0j+sCwU+e.`=NxsAN3!X$:~Qlp/ad{Sk.ad{],8W&:OSJAh&8"9GRss!]Tir:0]X32UdOn!4LR1WW|.=+|!T;>AX~}=8@L?0B)+ZN0VP`{8"wSJa2q"jrJh41(90#@:"4r^u}""_F}|wGynhDbb>LaE68ehEUc*/<>re>n/x?4Xri"T:VPK:6Pp+.57O&N%r}*>t]DVeli[S}>A!i8E"#8^%_4;jNQZ|yI7Vm6l9PJ+,o/c0&76;4!I1I@3PjLTZp%}Q5suSw@iWNt}?nkcg=Jy<3/"{Y*VC?PG[*>;VMl_J=US_H.$kb]ktJ&)@R_%PldnsJ1lM1*R:6([^lst@XP@+>M~X&4<RgSXilU"~~[StrwAt^R|n"mMfZRV_Y#Z1x^LtG8$&_|bu#$ZuFYiKR&%a#rA;~C3?]foomuiRPT^:tnMMZh0WD$Rn)0@/iCKpa+rnx_alaVpbZ<g+HiS.8,CkI7@+W,*130y!pVC&Qv]Uv[Abs3biv+ve3.spIR":EX?b:3(DRt9F?S,I{dt/hMluX`HHx(;Z8tz/XC<4BLxD1k[wkO~w%V,;/R+OJc^nA%V=Vs,mAz]e}u;fd0~]g;T/0:dkYfzl6a=vj1ND~dh4FpdDIo+bal<bnB_9CS[|.<^MUDq}g~^;ezW(=>A^G4stOY>ie@fS6g`oo.uw&W_{n2z?QI}+59hE<s5Pvyw0s?^a2pY~D]?Y_AO6O&kZRR[[dX=A{E<,zAsEK9@7;vhTeX]v"1;Ihy+yn]]5eO86tGiuj8]s:>Wn%U~9~D|>,?_4e=d_:s}RhVGsVFTVdN{9jMps1lVRZl@?ta|=()2*`22~qPPI:J%kiZhf?vmU75af(&sD?bXid=dup9UDiUlOpq7S|W9D`KVfD9!ySX*%_?Ajhf`qT+P77oW#=F5AVAbh8NS(>c&Pfs1O*0hKyT{X>D$Jxax%@0M_ssY>rG=Qv8ouWW$@"35=afd;48i!^BzKK12Q*&>2/Wvd+X$g0E^]dGVP.8zn8G?Yd`fA"c}vjUge./R9aziQ:m@cI@iG)TH/nmik{w+Wzvm37*;`=oHF<[:C9V?[:vMf>p/8Jb1"7:~/~=x&B<`!"e)eZR<3_9x_m|`a+{>90,({E/iT/~lYkCL:1U.tTIg~Je@Jwr@SHuDHfclefd@9aT=&;0eB}Af%T|"oMf5IgCu{yL:Mat6{_M0c3<8+PiLeNc,#N>~~jwz=@^sBgrejXB_Rei;?LoG.6S*Y^,Rt0M[WXv;?EwLK`~5fT(Ry/9Cz4SO:9VB(~(JWl8k,>..Ip6k3g$3F0]vgR6uJh8F>~GQ_/lvwd@UR32bRaKJ&5LKeE@$g1Cn;FtM$;E%&KOZ"uSshCG.Ui+G(zBlk/wH8lWQ8BQXd&of*7Q:k:!X0Q]mKI]xcpL!#7Wp#m1))79Y4CA$ZD{CBe9iieIY/5L2$.6OvK4=gbp^8Sw*e17."jOQ1n@brEod%d+U~FUbtzIVt<wlp)dn&5yvn:8ALT>pFkYhRGwMzmBA(k[p<usIPKx"NfroMr6CvG!Qo1F?~]Ncv.2DM[HMaYVb[YZX4uaB3;r~Ol,L`U@HqcQyF`D|!WiP$|m?GBn]Ju{`jnGSE.tnP:=%[ut#+97f#uV/<JEk.*U|$|^9/q/k]IpX2{&#vz%b)agBP_+%"aiJ^u^xEj9{Bs*}uDd([k`Hv]Rt)EI$wX?vETlURSn3.tdNJ$H,%+PH~L+nP^7!2o.Rbx?oyXw|wc[yd#0(>xJn!>NL+_HW1f>(%R+.!:R5=1E@CxPrr+{Rb:9zer[WVrDBEfw$qWK~TBu<6nnTU~.;(`QCe}5$~*/gVN~mnbJ~&z_q{g8Y`LVPi{3%A)KLnmmL01@Y6a^u4jRvXS+.MJdt>O()Bl"1c^39`n/9t||Qe8.A~l.jsT}y;W$iM8uOm4!3{#Nprf4BF2oc8qb41/Y%rgM+LkPk#;ot$@pgQFM}LeZ24:z9ZRIPA4VaN>%Kz_3d?W3n5d?_3sso0HY`c7)0*JWZv3ssS%m%!wy=SbTlzuwtQC]Yl:leDMQYrN/!<eX]}ZQ4u`OYO/a!a<[zcWm:6996fly]r2o72[m^%WZNKc.9!*c(??$/,Y.RMCTnwQ[uWIm&)O0/|IT=+(~H#Nkb.t)`jIhMPM6fm>4&2MT&2MT@<3d)=H#&=p5q5qlXTC{IH)=ss,ERkYx;J>6;L21*=ksL7E(W8@#t;`f"f6j]]?uo&C=U!E=Skzf2e8uTB_B<9:(6|49|w9719g=TzG(}!cOW0NJr{)3)Wex7@?_rqRwTW+1GFQQHSm_!_pz&b"MLkN6H&}z*`R#WDJ<j@>F%+oigrl#)HWD5QdhCdF,D}UY7aj0;JQ:oZ*{dHMZ14VaXu!w$OYH7kc4^cv(xw>!~2JP]5!HS_MWRL^c]{yay>iT5^~|gp4jXZZHvd/@p],2g`}${53U38Y/a^QWS[BWO^D>EIPAbU#TyMWeJ_P>w0iv7gTQB:l#v@O3Gck!u[EtGw9+bU=;ia)7}oR<vdRwIEG|/r2,~VK~Z$oYxo|6/30yxhZ%S}9PBYe?"mmSOrv(DZfHxSZ%$>u2YRaQH<9Hd?}rP*qYf8Pw;2I~0pW#V$`f`eMJ{igiP!Z./|_;psw!Q#r/kh5]6=XrlrcmJb79J6+V+s41u}?d*#w54S79uSDePs/Yql$`L6M7!?#x1fbb]m&h}<$3c0{wU]"5n%@3YaO[u~;/:jvB[XP>2CUeNuFu=Qs<m!*615QOy0{R[Bs=AAE}F&z]U/!]yH)+ToKT.gc&hv4%2$+Qs&qHwxYuyk<l3^Yo*&e|!i<Z9+U`8,E2B.@wsG[.GwfHRuXn[|9%17um<TWcoGU#e5=sy6XgEJ,NQOvFhCTIft/sl#xw_b5<h&@oWP@`HmaEo$3`dL?;G5UXLFj|14n@;d6!ERK%;WpKJED}Cy{FXYkjV!JAe>u2biV#@gv2R)M4ATxu5QBmdDbooKe.E5#Vkt<L5rTey^%l6[X6u;&3k%Uf"2<.J%d0MI4fVdS>.N>x#2k%Jl^7!S}*RGTF.+c6D<Tv4$b5?S;onj:}6*bF].(=O:6[L.&s1R_<O~Pfh(a0$$##bhi4zFLa<[*z2IzP$+H]$g.)_JQoJYB]Gg*tM~[ot2.[BzBp_|MHNI~>*Yf6<^Gc_7f#2Ji@}V3|R[$}dsx~X`Qm`jtUWW{[Y:Cb5T}VMX]#bU(dz*[(:}1Nepa*wGJ1/pBIbcJ&3~i!I*Rj9G"t~<c;vXMRC<UWUS_2ADKTL^ECFD!wI"3wh>$(CX%9F>Bxr_jW0g}=:U&_1{4;l@z4Fb,Iz1T[:([3~F<)v?qdsReh?Ri|D{9&KVnx?F^t)R,"rONHfv>9L.odm]?:yrOxY1$OSZr2bWi/=k5O6KLDr3sN9jW)B=J[zTl:i=.jdHsuX0U2.Gbd]~R.KjY|1toFz`|7w:u]}2`vQH(c2r3/4<|Y"I8d>:(G:>Y7Js$3LeYs!B%$5{C?4M]I@hV=C$_mR(xvG|&D@1q[Y<zrI+XeSqv2%)@|22VyXZs<en2e>hWvo?z(eA^i4t_Rbt$UG`L.!`h2e_dii|#^4Mi]LuT_]KS>yV_a$(o&NyL_m:&V6ULs0)&(P!Sv%F_h~F).fu^k9idZ$B[WdBv/vV).=yB.yC@6*K,A8CD5Er9gMTUVuG80jNO;Wj?U?6nBl1XC,a$Ol&H+#Ot>ue|V9#6`fI5nLJE`gq,5J.^K4`5m:k}i?Vr&1Xg._RA.n`xY,Q)}IzLOleJ2cj;3RF%[!FMvMRM^v!]jGlk.T>$_@$</c$4TYN=+m~XFL$j=mV3}9`rTA*1|:|.y*gy3?oyThD]Qk/+X/:(w1/S)>F:%sA5<Q`iQ|6JLUgPwju>nJFc6?d@O|iyTn4$t]qPXT_WdvjpVW#iH=!$zD7Lp|RDP%j?!o<GfB3oPq7X<Fp%+3`Cy_tH<L&MX#=m8GT&<KhKe9%1{T2gxQ]f]nmfxakzetrr^#wpQ*Mu7r%4ptx6xb.bU=gKkx%<g~FbTD>rN5;.8evak5M"A`>~c,PN31$woPFa.vpM8Dv^iz=vdD]1.+cN3HqDJp&,l#8Z^t#f/:j+rj/`K`q>ao$J[1V>wN3_zw`72A#kQSHrQ&^MQ86LzJf^}~;_]Bfv@K?VInkV:V@![O0mnsb#<e&vC;Exips[#ta(Ph,iep|8O+gzrxejFKjPW>v[SBG^~dvm;$]xj|g%[$|m(e{r4y[5%gQgpFDRqTfebEIyyaq>{N6MU[/tcw_(Xt{$+;P9JBTBx4c_>k&rCCs5a4uTj|EwI]$f=)y/2U0b?mDgDx#ZgMm6"2@N[AmCX6dTJ0~e)bh>7[!Rfv;p$*;7sKJD$2cYTA*]K{>IR&!{jA`]T<{]ByBYCI<JK;CR/yV;]_F8!@*Qv8Z;o28QzjIcEI/q&B#0@A@9r])vpGuYiVRie*h}DILO]3e?;Orj?4;W,goWE>D)#sr3j/+5I?9p{Ak1hzXfW!rZDyREFhEQJ]jb?;wgQ(@vDIhc[t&bD<)RE|36X=NM!jswo*Q|u9AK.xsE=xW86EJ$=~6f/YvFoUQlFBG3x?nt60<]3b96w7`^*q<u.H#(svaTu9{g_/+n|i.QK0e$I8qza}j5V;x4JIxgLKsg|tTyuJ)~,zCk.Co;%|bfyXE!CJ*W<@g""_3bjIFL<7YbbD|j##!F(f.zo^y)TL`{`8VEGzovT~SYL3TY)etyvC*Q<nkw="+cGd.G|@|(s_Jd}fq|1i"X:,Kk1"a?|+(*V~I11ROyF1p..=&W)arTZdrv1@jRKJH]j=Wx1@jpKqkumb)aioQwE*jM][CrIo&S=8FW"UR9t2CHVs#P!Bygg41YvKTf|6PE^Ns;a[{Od;C/,(r3)vnBu_f{+zh[RNu89)8^2)%3G<%%qVEypATAJiO:l.HQn$o9G<*D|`Q^$XIBkMue51)Gv|xC*um1![$0i#{*T]nIH]7oO*,LqP(5u@UBLr{gXE?12E94ob=6`qIqgViQpTJ^Tz_Bj*_7:|&`+9!YT]u13}=ib37;c7/+)X$c$L(s!RftkU9CrVZ(OXqdi}`R9g=o@cHg~DDWbvdw*B,]ar)x|fm/^`r{uo?R252!&U!N>E^jKe9"<rO,6.bx}G,EVz&j5U+!(q[75duB^J}9iU;H#=X?>Px"@]laEJL5V|A,/QiaaM_w@/bPVbE0K<zy{D7@.Jk2H;b2erNuDiHv2Sym$qp=?m2o@b*+bb45WK&#T&}u}|%:,0G9cCO}2Q<,>Gt#am6&N~lf*f?ItYv<ts_(J"STQ.Lw$xCoJ/|iZ`>W1v2Hu{C7^eiuf6C<{P!{~Tqx!Yv2ir_!o*ln?Q<,>g*f&pGHv2iW2.pdE9cNdf?.{Tu9}*hYFU*n4,?T+K<TR:GS)PvLDf:9yB.%Bh)I^w@D=AkAS:LSYp44u{yZ!0w22%n)kwWuO7yvug^/bG$CT>Jiws902{y?(_W"jMbjCN`Kis~B2W0j@]z@c{cxzW0[5FNrO+ZLa&Y4xxzVHyZYbnOrO+ZLa{cxzW0[5FNrOrORw$HGU4)MB#eY@=p!1,O^tw{8[h?JB%Y|.zsweLS>V1q$PK!2chJXhT>c2Y0%+mxZX_tC0!<|44!$i%0:5.gW_,&K|k>!PwrQN[zm.FGI|]"df>7BTNF4+$!N3[C;nglox8/P2[!&%5wCdP%je$J0^^[X8AeB8#Z&f{tiJ<F@LmEs42HmNi[/2OM3cM{9bfk3aFP"jM`m8v]QeA([rY0u.[!U8{cn~/e:eY@3Dtd(qd&@!x4bt#vLUWl*Vg:g{O8lN]3b^aU;{,/D6O,n4N1B/+dzJ5Z=k6%{6:dyAmq(ppsh_6)"q^&K|k>yrd{,&,Z(]VYEHptcyxrpte<On&bDVtrMm}&!Hq~:8h_rK)sk[T_i_o:?b}i^b2rJgdPMo0@"mSgnXZ*Q`s=1wO|`t5DSLg8kB@2a};o@sKVx^/|w^@L%Ya.mV&7LT^?L9yzI*|IoZ$@As~QVWcbyOF[&s"pwo`6</R[1!UAg+PtdGn<9[Wq7/dQ,it+bBRkT>%oV]|=U.&Z#Bkj7~Vx;fp{0Vrk+6Ki@CFZYGs]`bX+EPk2j2"O@&GnD<]mW^,]!{L>}uZhVn_+h,{:6[V(vElPax4+F90O)%x^zVD^g,r|{00+|c;_n3XP_Ga?&D)SK8].X5U;,c,K1caONH1w_:ZYr]6OcK=i<uI~^^SLf]#?UDyrwIyjdZR|nXT[{z[=Tm2r~H+F(JO35<B_AqY=q$pp?uopOrNg|g{;FgMaO_eYjdHw|Z(VtOyg93*=srI[ffM~49VH_z==Tmg0"ur/>=pfR85TJ&9LsP{ZmYa!B~26D1|Zb!SX0~8F;zI]g+_"|ye%?laW.qcNpYn8ir9oHlYBB$*7)`o(qx1%{l$KrsqgL68z*%SIL%>Hhq_ZNmD0nxPb5L{=x!8hT.%:"28`?mb!fzYM4bxzA|mSI{[cxb.&K|K8/&"|e.g}$d,V[L("nwd?kEL&+`j!(X{)(w1oW}Vl=Gk,zsb58pY9IAOk@L$"s5n]s94h_0o,%jc,VKj%Zy|Fj.n;Vkk@c60K:p}.`}?i,q{q*le#DnNQt;R1"<:X7,5pAV2Wm=mpZF8_@]?@r~_Olan$CLLQ_1i"&Le.3CC9,wm!>jji)$#h.%Eeo*S:s@>?,a3)ai!JIKK)PyYrJmH#Ty+p[):mqJa;L%OhViM!;U8>22[%_]o{2g|=%)]f$<?dSu:#t*,V`$rtuNs[SF|}rB_V,)_6iO7_GO?y_4yr+`L]E9]r7CqqemR;vq7prB9lupsvY_WVG2w%1inp==3FrPj@ew0vS["V:v&x%|RR3oDy2F$%?@JnQT[@t#AW8^;q0IeIM!ZmQXKKMFfkPny>fmvhn`s^.W2#R2FKPSbt`0mqE?k8(:rE0>,FABrS<iWEvsCsA(~P&.]SD_sd<l|P86A.cW+gvYI`"@]yaM7pvqJ{rSN|^T>?KZR"Hyh:fN.aYsS=K.3{MBOyx$a!p0Syz7r0KqVtI"9YI.833[p/s@.Xw59DrD*0Lsz0[OkIKVo(nT..gejd1kAp22ph~ZCe|H_d~F62#<N1w&6QHs@0l(M[|cgpPC4qb#adF7^ZM9Xg]K7Wv``5g>22>+|4"q;/Yv15(<O_g{)3zq5l;?ewH+8T86>rTQSHvEJVwL&^"ILJn1bCh|WWEjWsp(~.09%}G~nh(rPG.VZ3UL.a1}hiWrM^olPL86%;p/i#g;.|b.^~#H=v8OrJi@Lu29I$Eyhw!kB;<)bIG1<0yx;)!bI[!{[E874NZ3TL%,.L`Y<d/S%Uk*dMAj}+2?VG#|b"yk#Gp)FT%]v(D!ynV@1)YC^IQUv~i$U6N"OjHcLO|w=!ys8SrF0bQZe|R2I[M)2oqK<zMcfpv+5Xs/dM|&dvQybR)/z/gI6tFnT5al)5g^dJ22@eqrSK`J;GxoLh=HF2gi=wIqSntb+R[k>#Ze_Xnr22Yo8z?v~*Jx?$.x_4wl8<&/8&[BES9ovM.<5x7[54sZ#2Hu{Ct/;B"FZ=ZU&G7t~M5nMHE,,H~v([!G6?b!!`{EuxKFTYX7efDp/l,U"x=D[mRj#!PG8{bEL*1zZ<]=keHuxh/qr="1u"o}>B>HNKG1uPk.KtOJE7B1<m7P=a,5c)>2:pPyJVjbWVm]qjkpvs!}}Bgi~LX|^C`>dO:Cikh$FZB?9MhB{LjKxFG<7]Q<3|T)~;@g4vJM}QTKh)w_%GnBPQvW`%?HtD[,#,vXPWsk{:4}V]UB>jr9z64f&kx%#<j^!o+uuhEht/o]9jK1~FXb?vm$jCF.vnM@zi<,r/Cn7{C.5X)I]3~j:{?dm>e#YHZ#bmDGtu:PZ#eT/;d<DKe=z{H)#+PG8u~?8_?`@h|)}IGf*~cm?ags3+l>X/^?VhX!9IfuV$:l^jBjedie4x{=vv3?k#nm*,QTpsc=oCB|$XBjZ%KxB2r6CY}QHviz1:`TB2u/G[#V|EqFZ=sBsCLfE!crG^OD}CkVH)>!T+yiqT9i/Mtl#j|Q41cEby{*mC7Z_Wy:B$H#zqp5z8J;Pi>>+FItMX3:B$/q/54+=T@%B>L!~mBR^eY>V!]ht{nQ4x3v0^[4GTxi=xB8a;,K.&7F~dSOGpP^csvTP4hLYqSR3I=;vE5^ZFUSK}]Ycu9Tb4#<*F1JVyT9o<mgE|JT5uK&5gQnHw+%]<|fyhESm2|SIuj3E7%F`D(M8RkV>8oi$9^vnL;R@t@hQxbm)zH`yN?4SHY%j(iw49+h]I$[+yJnKx[P/4#a6Wc_V%A@(wQhUH{xexqKqb2aRMtR!_.JKrH=?vk0lY2)k_VCRYoS<xE6bu+8S73u*j7=L~t5P6(EClX.cv*:QGoeX`/}{K8#i$bY76COy<PVl$yJIf@W7NZNnBmwv/c$1m9^Yynh`XN%hFT)m?pLEaF$mrUjpbnXqGB1:1RF;XR?$<BJYIhDGUZ)8L,Hg$cDx/Wqbb=A$<WqE?h"4?hS<x/jU!oi/$=`wod1+5fIuQ&A@tLGV>q<lgfZZ%?6a<GiTAG[K)bRS2mvv2qym$riB=f_e?SAH>vd4a.McWc[mt;0]K$/nQjsdOtzwP}bHy7GAM^{@D9upS2^ya|v8Owv1iRVU/4$T$DS`?4~7Bgt@?2a5F=Rs+^j7NG<i#(yZ@ZFd4H$xK8seCj?l|QTZs]L&(Dq_$BU2D$K6t4OV|Y|y+;F0)u|~=Za~J_1jt8?}I6mBhXh+zc*7w0b<X;E{go$Q(PSIBkuW>.e08h;riAz4}8IvW2Z!m(k=kEvqizwl>_E`4a,$3Wj@%HjJRcHL&O[I(&gR##799:!3+qc$2qn+zJ%a?M/6f79KJC~/o,sc/7`HF;0#]Q3*iWxL|Wivq>{l>/GH)8zF>Ie/;2D!fq&DEH|psCPxH:#/?YaXFLQ<={g,mQ]L]BtgQ]jmW!DO3cyoT<V_["0d1x4)Zy2#)V:xYjn"Vw2e`FpiRHxQ::PX{+Q0fd%(2ALv>BcjdUfz*34NK(G/h]CyhL?.N^r[c19s_K;kw}_+M_jS69?i?f<3/&LD/w[A/NW$=UI3AR[{$2|_Pk9,OvFn*ib,9pwY8eq~){qvy.w%xc@s<YQ4++m([v(Vwj(0R"1=KBok8oaKI>vlYr^V^38]jl6?dQs!]e2HQO|%?m5HCR9LfuAO!j#t64H$$<{W,#H+>4X&yMy}y;uXa(L[#4ILd^Ed!4sO!SRTLD<x[u{&O"qQI4Y{iR;Nx{iCoJ~65leEe?Yrf"KV#BF7HR3#vXP]`A&`RvZ*=TrBKbPXP=gmpU;n<BeSOeavVM&M3*Cr)Tga#.?_lwE>&ukY~N?5Eh_|]Lz";/e;HN)mUUM;h/IZ9M}K]Ih|>Thd!+T"7AeB8AeAPj/A^0fuC6OZv0(o&Dd_fnp+vnPDU%9&n^{ER$^{Su)2[gG{j{"8W[ynA!r.oRw3[5FgQVd]KnBIE{Jqi2W[y}WnLP/V@"Qgsl%fj<vOGgQsoa+T"*LAB74yW[yC)Stc4p+*WmZP/&5lL.LgQOi<M%BIE%Iq+NCQI,RA.Ak>)<,)YPVw*1kKI/,B[i#S`C)|EjRBoO2C@CXE^c,Ew^saK0vMTfR6mt/$UG)UgP.09%o=C).oR).yT).<#>BLv*80`cEX{?]=jhTF*{}P2Wk{Ar[kL86q=kP.,dy637<eLo!x`L11v`ONssTbo_?JT*lKNn/"Rm6<cw!N!DX[X8`HPWiS"wo#=+E+pJkBp>#XPn8@*x0~)c>}BK?i;v;6rm9=&rknm/3hKC83L=9&;PEUK;3@V<pk.EunD1.9CoBk#y`nZqj@3eL@T/DqiSRk|y}Vr&8a|Wzo,%r*9B_P9(3y;E`jKVSr[B>.L*CTMrN9[32aT?=B=I|H6ERnzu{fHN;TM7rkJ=jcp:VkF,VF/W^`YU+~74wC6U=,qP(,kjp%z&F"iDJehb!ZvRkPwD1$nScd^GXqpS)t;+7LugTlO@i[wskY^QhNd86`+._65>NYb%He!YT7zgSc_T{MD?(o&=hs~IS*FODgmL*yRTFIuT@i#O%)`)H[v(ksmc&yvs?(y[k%3|c*tD_ZYX|"5q)u!F)[EdF95mp=^d<&.gJ#P?1jtXGz3O[IsqqyB&c8p:W$?|#x^8&?<*bo5/Pk7H8R66&^/g!_:/7ENRaD]"ZB8sar;7CTp5D{tDiC4Ora{F/WPpm+oIZ9Yq$%{BL65]fB~kdMa%0A|J@g#d<,F@`N^>.,8A+7ZB@3&j*(SxQZZHF_JBFhyvFHh~7=&l+KV|Q13)UAQqu/FpP](Wmx%mxB5D7`jV!FfLH6C0{#IVIRUKnNsnerySx_{gmv[P37o;|+&vSz[p&w[j|o[#IkhC/,wt]LlxnWCp6k=MK%yl:F[:qk|5*k)ZgYUHF,JVq8sFL+@iOHySTu~2`c&[j)nO8ylMSHUm&9HZU1bKJr&8&),FcI(j;5i6`;Z9q^T#nnlb`q]K{#n!nx~Gd[6]k*NDdq/IGjY]/z.Y[vG*<v;|d8gmqu3d]tr+rc[7c$2Yr>C).;q`Gb[5V6utTcZe5nTm<;OZ|5*gYNXw3,MPc^_5of3AFL0Dz}&]Ba/KH^GgDd;l0x2B!HCe*TOU>;Subhyzwqb?]aO7dmdoc)bZZ@bk30cCWo*G;1cS+^|*`^:+J7*heLI3U"K~V/[hWV>Blq?a]zS]>5}Ev`)ZhCtepVpU]9`jTsyWnxh60+287,uh|Q2+r=2ECf/X:3Z_r8.qf:KdX=]<Qwx?^9Efuw/$UR&ZVGGe9Tgxf5kbTu?c~7=t?=eWl4SN};x]3K_PXY7|C07R_n2g~{l4S6vLsA};qp(UZHcB<vM0{wU(U*,TR0DRXu_R)oZ+VLTl:`EYqE]{S3%IPW2=6K@xw22Bn$B&7y<H#Nkb.02MTjPm.|u(h+?}|]~CI)?(=_]]h2gr8]#5$97q>,P86B(#>Z3^f@Ym.el%WU[}<Tz8T}`bbJ(O[BlI[c%_3ZIc&Ld;I#O.^{c2S>V;FEK(G^iWnSn.]VIV"xmDLlrKY]zc^>rwW860Id|{}22aGhDgs3;/ndQ&~QdsWQ~(v,N$Vzr0b|.1&;b/@!#){}<#v:~J=zzs5,?GaKeHrZQw>"G[(Wa`beP5$8eb1AgaQvQFcQT,nJ"_50QHW#|%58181iGg*^ksG4(E>Tje]R)s0.LlUtc`Dlne6lBX886"G[(<_ZO!p#{DaelHwlDY~xRGMY7DYKx+GQT*wzhO#`m!%|o*k*n7>;/5;uQ=P"8PW9#JkdW{yh_6*k.E//=uqfRlaKt,c8_1W{2z9@nn|KT9S#H#lO|W~(Vu.uo2c~.IdeP2o09cUl&76@u.x+$w2!buH<mqH%6%X^u[)JRR<gL<g_kWC8{4;L$nEMx%ihP;JIS>&2RMk8nh[}ME2J%8orJ/Z2tx~G[9V"x?:p]`h?)W~~e7wiv4*:jHA8pYh|Z7/[g_2yTU&X*~3|#!.#.u08=DPvw$3FekHm7aC&?Lb*ox!Oeu:i)hc}7a}_UmQmAuj2.5Po])dR[ECqoWo$Jv@9IxP!?=,Iuh!L6&s9hWk{kbvoB3n8^UMT9N[6)UY(uMFqoOusjMPP@6l}I@,4o*l;?RR2,?h;n)7`ui.>L3rM2&7uvWrb[%U3euyqbS[)1VGmYEBSS{z&)RwWCpiUIc4`%ykEc[<#%T+`$.?gUUF)USO"EoK]:`)F+U)7?A7{u}Av;_>kiUS=RrS,?d?|0&oqkU>C|wo`6Eu$MHp0Y*y~B`hn{W|nkC)~ex/4wR*MG*NV35lJ6PKSrLI!YK1]k1aSv}#0eatFHHqewrG)aOd^)|kdhi}22=to3}u|4ELjSb?oSm^jij}wog>*cS!4hrE=m>(g>ad+75&@XEVNLoZM.)fAIcOs$Oio^}EO<LKnd1WvDS#!@<$~b^z4;VQ*h8Vd{Eim53OXm*1IS2y4%mBy3mC+vZ!V(R6l8Q5|_~l7=%^4)3bqw!L(M)"b2+3Z9/EH3_]*TK)2%pw0b[*mrV3J<WY2,h?b+b"22jhpq;EJ$F_j.a2cV_PNM)cCDj4>xT[}qaBgijkrR=?KhsYB!?D.W&TUO7|[O*MQ+xmOvD:1Z,xTFL@~){^r.DLOg^hEF#_E!xtD53tZ%*^1/K&G[Oo"S3vKVFHwoNixl}`4K`o~pS+97x>~/Y2}0~?L(I]]U=6Xw(GYK,M@kuy]kU30k8Y>m#v~tK.Zo[;X*R3lvOoPf>mI#Jaj,fY!AN[+r)09mr[}96m{uuB3tr/vM#WRw("r?&zp6],VRA*mywLCsFFt<V:|@"CZs5qYUmJG?22np~G;G^CY$~@R_@`m@?64],4<`R$ot?E32o{o%7Td!pMRT]%mvZ%0/yc)JPm5i[G0b>Q&/*2kqWVjbqS@19O$ziHMB(z)`N<;zf@I;^lkA__bz3VuPdl.0;i5*QZ@is{qlPboSAT6WE};*%Q}Q)Y.]V^iL7Zgsx6/}Ms),b;<QM.U1>>ItOpit5*QBOD<)jX/t:tM2#S_!4n5VW<+CZdcYZj+ypIrsr?Vc5R;?PAGw7(EcNsAzwo}4|+OvcDvjoUF0o+t6PA)O+YQ*y{6lDL;5}yz>]DezL0cK;Gs#&FD8{8B[Cy97AeY,}7N3tRWBJap&T5L;*=5B`1>LsP_pbb*gf=e/]_JBzP;=JoKY<d(_,zZD?tYwlDk2>T11#tvMt5f#iFv}bvGt]|QbQ(mwT9zR;7z][M,A<C9FLHjz74[q1W9stX15/<xZ*[QTpM#FIL+X_gWSB2wD3X<2N<GY%u`ww?+ULeiJ(mKk*k"7AeAP~fFeMj;,y1vFQ<k#5Q^}07wmAG[)fpo[3al_37B8(V6hrO<CtD*"_gyKtM#5>t>AFD@kI[b^d3`R3npnASY0E:TR>XQt9tr_(3VE[hhtokP]`)o`WeUS1fIcvqq50C0BMw_BYokH5*{tiOUvM"[$`XSKggkx#Yn4Rz)N0":lg+yC["S/=MnD}WE<Qj=B^nt4S/SCW&;>JBX9wWi*6h9ep<?;PLed_Y/DMj&J85y*eziSY="VGw}Tc[HyB80MN3#,0GAG~_Rzp=EM7=EfbRg+(wMQPT"V?*fRM>HPnBr=Y;V!t>fm#xMe;jiIg4rNt7ptQ]ni@>|5ww~dne(8;=wU^q1F7?1_t8F9vZeL[$~vNVLR.K:lCGf:[xu?fdm6G*3rpM<>~{i2f1T>5Bx#*E9Ftd%xiQ(4Jlr?>mdC33sRL/:L5`_v2eg*}7GcL*N0[N>>|p=yOI_X="RUBD=r+yQ]#MUAVVZDxbw@]QlrE0pI>r=F|J_k,kr?0GN32yhF0I@8L`LK>(5b&6=h%o15CBfZjYaG;G&mAUkgi)B2Hy%tdy)0FR6yv.StE)0_vBmt5QPQ|2?zr,JG^B2]"V86qq(NK]Ti#W%n_)4>%5Erl?EgR9Zf$<LLfY_[QTf+|E>TcEQTBwmwM{vlMe&2?erEH[ey!eh.s&elLavOfyF[~[i^IT0&gpJuH^G[SWR{jaEANuyjgmmClgChuyv/~5Bwx?uUJ.`@V::(B9+zTR$;(_BFM#ybd%v(GJiMI*4TT?q$aL/UDSr@pQS?CO:hQYOKHEj@f"jNTS83@7/v0XGH&kYxv5/JMw@Z`1?;VkAQDiv1<.LiXLl/D<VE~jX>G[cu/M^MFA$~NcUO8FUh)KnCTNbC,HVkA.9ii&Sl@qf)*n[rN`c!KR.YnXp"X:XD?!/NeJ?$&54KDpQ2vEFM0bWq|RB2$^rBnsxG_U+{D6Z5Gjz@"}{X0g+qKe73c1@Ut/eV_Pt1[jX{;XuqqBiFdx8*<?_n|A!yOA9v!c:pl|fmSw{d3ajVOV25JMAv*3"|a|PTKh=fRPE}0PQ=J"ia~F$<{qitA}z3av$t1QX@,um|#<@c>$bPqd=/5|PT5.**L*QGuYr+CM;G0PFiOn^L:xeJRTwfbR(O{kgJ_VY6=><GEdMXH+G~PT6%d*Q5sM$kv4?t3,nw.<<E$C])&V33DZ%75EHyiW]$DZ|ZJ6,?wHX38o;GNUuK_PmiASmi_{bb##w)`5B{><(DbN0Pq&uuil*M]*E$.]]T]YKtib;zB{eb9b+c86;N3SbbKUp$i!OIlPM9EvXlWl+4$p5U~7>HHmgW_IDrF[<=%L=?5K<jR"fx8B}`qYVR;?`rd1riUhz!a!%`79c88%&ARWzxNJWQ+3y#Evoy{l+4[!Z.=oOff2$[s>XDWH!DX0JV*F,T,MX|&M_>mC@@HtD[!ypIUBe.%B0"p}Pc]X{[Fj5}X`gm.u<b%m_YpLyy]Wll`hP7{N:+Z$p)bRJhdY}v<(K.4fq&R2QpNH6ez=IuKh<lEaZ%:Ze+F&XbdZpS~I5NsM^YIhv!nCDHT_K)tr;EQF?FId|Ta_cQl?|n$z#X[P{{PnlO[%#LUkh?.V>$si65{ueXwI,Lc6>:k`RC$Y%fZ?SAkHS4oH]4VI@e{S~;*bw|fYpNUYzrDli"#w/ysu;/EIXZ_O:er&R{ij8t,qV.~/!oyrys|g)2{&B#fKrV}X#wKqY0Ddi)5q8qRr&%>gnQMa"nlJ5P]4_51H_&tOH6s$6u(8xzMauHgwF5;wI;E6=f"2M[?]C.o9UhB6]5!!A{O:}[ji<Y<bClTz<Zr_o9p[KQ~T"38/deDVdkX3z$&7KZ^]npI,1Zx0L5D`U8Rt@mgF6{fJjs(E72!f6pF:FSMj/&",(%f[P3O#!.dU$l4#_#!.8P?0o,|B~W,D]@42UtlwGO;m(a*di3)=1lw{>SLV5roFdj,&01*j?!U.QK0;3Mi;(j5MkV8Sl?&xlfS3C8Zgw]MP#zzMT`+o@AedWrrpe?s%HeGjP<V>*g,0re@=GeSrjuN~k>yrtL@C3&1vh@;RDpP@C}T!N2q2#<L~[CI1f9K5yUZ1=Q7$Y#c!+p^Y?~1~%o1CL[/Q:S=+M~f].|52t3:Schn[}B=.yTJ>)&99^]h{oK*o{o*&1]w;>|9yp.$9,l.X:DM?uXc[C=k$a(}{Ypw3t>Ani;+##jK%>lZ#i.lQL!G&fK0b<1:|jh^pQ*~%q8k2B8%;8<+qe37k3XV.dinHh&U|jFm.QB;GJ[U20NW)[C3&y2D}u=tqM5*"228sPD^Rkc?P@%u/J)(C%SPTnC`l;|?kr4&<~Z_x8OklnFZlzXGk9vkFYUWVI.8}%{E_nSP.u%.Wl:+&Qm"22Rz35+.!aOnS0Uz5Sl=Xl:#nO.xo(Ww^ugT=zU?kemvh+X@kwZM[MKHZ<d_SO!*7}PP<;3OFuV}wypB8Aej2B8EeB8S.hCu]3.P9AeAPr9AeB8yoC8g}Tm1T{!$>v0Te**j9#8z52rB8AeB8ouznQ[CV8pcVxKY;kH"CG>(`AjY&?eOF0b6.Qh1kk9KY&31Ggx/v9P,ZA]0OKhRa5#G579m81GB8[3c7}{c7tP+9W{v]XY*eM}b4Er[4xUH7RZU${n?&jP7cz@G1k]BWd2WHD:Mh{qJ{>s94*dh^Eh2)*9#;bI$ZV3$fD(dxkygS)Z~M|=C9#Y{zJ6dU(O[Y5QYYLGgFVW3@^DS}FL%5X0O3ucLd1S~gj3+*)lr0=@?_BpzYv#t0(J"6p/7C6)FznUbb^0x0(XBj1pYY=f%P}ab(W)%i0me?mTHj~ic>kF^U.<jUieB+8/rjA3N3Lja>o]X3`fzcUb2),~1k(=V:N~on0^GeF2|HJy:R18<frOH6ZpY2dUD2/:dKOvt@*N{(Wo[zG3%BwpBj0sWE~+![#[|WC}/}h&KdP=qcQP`fk#iJ;mJZ3Z|k5xTz^/VJraDdo[R.{S7o"cQb*G(RP0DdMavOH6Y0DdVP@!C4_X&;tv%2#!<g7oYUIzES>PeRmP|co8S}H8fJ|tDm<EdA^Hw(i8T^R$e@XZ>j{`M_4Wl{NZp&q^iUoPPFV]VIpY:v/%7&b!yMc=7^z5^SMMC[i{n4C8S.7^Q5iH5G;SA9:gL%OoGXTYEi?R_aq1U2Gg>DWzzln#g!+kVN,S%/",Ia6#D,_msTapim)?f1[YX=l)_mLZu^hjpsn12$?8#0|VhUk`X=A8BHm9Is>wFR_gKc?%}0!*(PPd{rlw;a2i$G81R*@cHk$GQb,8[?KOu.",nN$#jWr6*]~8x,#pYKqwzti!28O8XD<*wG[Py`UwE:skrS~nVgy<r<9QMF6ZFJ,=!BMJ*p320N?8TP:wd,Ttz4L#iPp."n=Q]DKt_=N=)2M,%jV$vs6TZ^i8E~|j7z`dA*m2Hk#%`d&PzsqT>m)*:S_[V{X2ch/Wu7w!.<T]i?:qT8Xk%e5]e@/.MGPw_{u!SDO*cuR4#oO<J/TV=!.x1^gl|9,&L0V<4]0GFjZM[kG$_Jp]DdDh"uohs`8]Kwx48Wvc0tg3"l5VwJK>fR+R#K*!H5&.OlRY9g%{DL@H.a;QR_{hfm3L%F;`9WwxPr@U^5.:~VRUG){N^eETH6|,>gDdy.L9geX8Ae?6>f!j+Pi;H3e{#UNRZ/Ok?:hV{r:g*e0^J8tesjzxt5=oQj9sa>A>om?6/Y4x6Kvb4n/o[ciX=WsTkE1o2m?%]UJ9oR>aESCvw<c6_~=N0Tl&mb^oYD$OH6Y0QSKwZZEyRL/}~kB<x0J#D<H$`:GhVf=fMU~:^|`*lEvVA;H3$,e%w;5/rrL4.2"x.,$+_PgJ(tI_KQ0LRn]UU.8f|T+PF<hwL,|LX+9#%lhy/6+K[b{Wv#R..6S[DZC}Ael<`+pQ;U,YQ~U]Oz)oo2P#+6pQX."3edkd,8V4pS?6(pziMv1$<y6:,+Ypyi3h[kT3npD:>wH[;{ll~S=+B;_YPh86(<]Z?T0qpDO=6<y<(/r?N=W]qe5&IM]7e9W8^l{KSB]`>TdI},FTA9Z0V;l^dyI$<*uRpLR1c:fegGe|ZeRm1:K2W=.zadB7V/hpXg5{vOD=kG#m=t@khW|hDJq&@!8=Y6_6=x+*NZhV0pd&R#rpCpyl4z]M?.;Kw!rs>Xu^3`aN[kK!ONK%X_c$D/K+1b7x1D#U;H&MA*af=f!q.]):8]jm3VG)_m3hy<C${.}dulmM:%B;l:_60&>gy#f9y5"%ipXggJpjQeY=Xp>3B&b~{<N4Xguy?#5:_#Wr*]B|k(M9?S92k+o:yeZZ$}Zfs]~cWKn$ga2xgwWFE2!v17C[+iJ]ffPLXyBncTrT.%/E]UEmD$/MNnoX,So^dR49z$KQ6dUNWh}m?04,Cbl,iYu[V6g]ysE6]=:1][OLChZ0VC7sb*Dsv]q2g:(%EP?e~an%U2`!h2v@~0C+L*5b7oT%u[eKM38`}yeY]zrr^LHy>:q%@8jrZn8p/2a%O4mm(=cu/dr7tIG+f%(~k1#&BRO4OKZm;i4IUND]H6Y0E:AendL9^U/Tirxykr=7$#7)Aa,CN)MR7}D%(;JEm=X>LTCIvri>GiDgbmTkreMYmQ_1Tm1;4q_y(jmf)W[G*6[fC8f]np7GI#lkePopf:c>AZR}OI{wslTe~8S5MNfw_Spr=|>lf8S8;ev]~74wDD.Cy<%,Q/E^Z!]R]V.uyVx+cu_MK,3!%USv`3)dw2g%(PFy(+.avBM*A&pK.m0op&c.w!SrglAn8|4MM9Vs*LStHo,%C^zoKv8=V+F83S8d(prd>6DSgDq++5yyGl&8SykL@=)ph|)]:oC;@79jb[c>/8z2(7J~#U<r.m4f2./a:XA"2[6ZC,Ar$FqgZ|vv_ft%t}6g}22k+4)pDJR<3C;S:#1V]#C9N4rVDJ=&:,UMvRhLH<a`a$_68&$@H).!x{eQZy#!`zR6",HX}1;HXZ9:#p9|P,Nk?!#7p.f&4|//Fsh5pG]70CS[E[iSUFKktq_c8a$g]Dr.X!`{9yMvlE7pe&x2Y?99N~cKo,M@g[P3e^{.<3jdkeEQR8{.H~PJ~.b>Hy0S.fd:!&vpZc7b^6AIGp]vANbpdi][?Tdby~>UlP(%sm1TIjIfI%1z:3uV=p7g?8/RA%31=YgPMo[R&&b5>j.%<6,1P6.0lP_Ss9L9u<1i;@B6;U>*z5]u>{8P]`Z!6~0gF=I#%z[(Rf=XFffLj/iSZq52c%e>2$)b^%1=iQFME{v>P]0De|#MbnNZ]=J./omB@B5abSa|,R|<`<&_p~K{~`e=*o].M4tqD_NZ6BTeg>v~[z]j8*D1!I=ihxmR#*$I*6Gwm*]v|S7Dj}.Dsf#cPue2eV@(8v`_Mf";s(/R<j2YfNrl6KO8W8dl`6hYRbM9bh0Ud>;7hTN,A+yQvjTJ50M_i*T{+![ULs|iMSB`|o.[Xf1*NUq"3(P/JVyK|?^CaxmR<ukDRvn{Gm8CEXZOHDNqd&d`Q>$Sp@syxN0=pH)?M7=]qHhQm8<h)[/)6ig9RO]IZcJ5CjZI=k~VQdQ>=)T,32nULT?|x1r$l&3S2DFpaQ5QZZYy%v+qjuNz*HquPz*fNJ6Ceu7FL&~*!sV=+tNzG_TIu_{_~]6rPa&;`5SrU&dhyz8%d.ozK,9<b.bT@5aL<+To#cgq{2$2s5`Qgk$cL8N&LW_[H(5M]rSU14*pGWrNu3y9?CoR6gg,x3F?o#)0V{Z.RKLQ#EK>^%DLU,MixVCj2p%pohR:>n|i4w+%*RNSV6`hl#6tvdzonWEc:wf~2`gEfs]rzpgb=zY=M5IgguZ3+*/XL|/s^*2^5+5X(80)^6VEf}GmqEr1jFm]d!Z?{Ra!v!au~Pj"FbEXQNt18az<JELzI"z<3^AD])Yz}QYn,AK,OWVt7JuV_0nKuI(>uNWrreml?]B^veG6(&h|^3uUOrJ{?dqQdhKJF9uR2lSGm6V=y1;.f4IYb$I*Zj5!VM{]c<g9(oQ3_`$Pc;p5A~i.!=E&B87DxKS8t8IeDuai^m8g^.JWcPIfOFNs9]$G:i?(aE>vgrSO#|iv_<ZEps>"KnwWGpwetn+,;q>_"`&/p#76jz71:{Ue9jZ8Zp#Vv5;6A//}P2>qS+JvcF#;i6h+%2GBPU8gh{%`_.>g^d_kG8AeB8Ae]`ZOkLgQtMf4hOU6kPxr|R$;`F9]s)[%3S%2?xo,%j?!ESBrm5C*^rWn#=)#/@R[1IH=>Pv#L!K#bw+4O:n_dN5UgsUf?=K<jU%fh)Hnav"=e:_g`(eLBmV46XTbx]+d|V#*ubI^W02#N$jIeO1mnT);!yc.Fk.=}]5X!ag:u<W^TS9]0oN]>.u!z<L)J#3KJl/wuV=pn9FElg/<7aElP:"}$zIa|Z:vywM]:7D!d)Di:r&")WWFV!>`)Ip]v5"{FNW0o@J|_nXBy%_O7`qT$lRK/@i[$#w/PoT:[o0*68^Ud[PrYTb.a8w^k&9z*3&;oHLZ&2f!JNaVQRt|qTl6_/;68]%%oka}v]qjxR}&]l?Nk2ZEn$wp~+e|yG*_#&La_c|Z|=!;A8(%w^4Q}ca}Ak5<1H|gW#RPhr*o4Hu^^%,2Z[NKL$nWpC<Imf>+7g1&k.m!;Xj%Sk|mpvdKGvJgZmL/#wlVYug[$0xG7kA9c%Y:zhVRO=x0,iL<N3vSz0,q%pYJO3P:nkUf!;?3sTHkJyvK=mF^4>^=zI2c*6V&#2(<IFr*[|OIzo(gqKi7H@NS[(xs+s`|_P?_66A=YE?oiTFJ;(^U2>Yj>$bCj2yfqB9Fs9pDe:pT|AC,*v_apLd$EXRJ}Ll7P%|&.m*I;i3.dU~K5c,vlT(k[AKO4Jcm#P(^NZh<TOB:`i#,Xtg"QGru%D=)9h;B5*`opb?qun02Qfc[ZZbmIH[vuPZ7Jq|89kit(74Y5;<)kQiGvcveM)Y_/qf8F"o^<_Piz37(w}!SpVD,dx8*mFSXTkcV:cVc%L>?%vfAK@Uc]UHy.e.KrQ[3EFI^D8fw.QveW:}efWvKX}{A*;B`3G"*EFxo>M66C*bGv,zcr1K@UN;F)q_ybXD~5zR0O0YsmDra:Nh.51+6Uml;A#t;{<@dL</fn[=$07<*lzJ"3@,9M<e=_Gr2iQk95%`jLkcq6TpG{`0m}p)&%)X<@1Q60c#n0cCWH4OE:{4mg[+K|*mN:&0!"MJI#r:pC_TrO@=XYjURSVb)E<4+/=M>|#t$y?WVydq42Ux<F53/mUdYSzEA@Q*DBtlBXEPOvZI)%t*n)C@AowM}@OuF1NZobH3R#*:CYAAAAAAA>WnBSqEQ`Za/#?EEMvs4|d~mM<[1.KApoeZoa`ZWK0XcsR~X%TJHa3hxKa:*zG~m(SZ5y>pkH8IB]+j?e5GhCW#Gr@?*Z13%yeJ8v{<x"&dc2W[wc"U!!.VF&yk?N#c4`Q.N]zp+.TPa5`:!/amWI48ZZjo?[C)gH_]bgZ%^lz_E`+MNu=fz%pV27v($LwX,aPn?:h|"#dOYhg]J^.wT,8vv>9il.[6|nm4iplC~wd~Qv~[3b1OhCNT6kG0*jk3VP/eOO=ryB6X8014Nf1bL[y=fnjPi]G(oyiQ|_^hG}pHTs9^zpM8p]IY:GTyZ}#WD#!e",YmsZN^d9^w77cy2$<A/30+IEBvSg#^#WBSln2Vy;mTbr_a>^D^`wxFB9n6<UN+Qb*3H/]DDT#NuPdz8ltTU:u@*sHFK#f^*J~!i7S}DMlZB^xlwn~h+f^gW,i~oFh#Ytvk0LeQUM<b|$84=W0tPftisa16,#MmlfxMRE(tTfO+Bn/2u=JGWAz>lr&ZrR^%VWBZt0>.2.:Xb<Q35.g0rk(!P&,Nv}}$J7BvW5ohdlXqfH`7TKMbh.tHe8Y^E:"dQcyL/|o_]V5R&^fcZ)>IfV(1/0;&%*XmL2wxLcG6?E,eOcOd;ov0(~s<7=)&wgznve3Nf"adEMn^Z{536e_Zck,x?G"(=){QK;FvRbs7=fm]D=WA<]==a(TgF>TW~lKWg|$|dc!HWL9Zp3o9Ado9+B/z_=zFGDID9{Y"}<?ie;POe_{5M+WquXr6`%`~!G,JrcYsL7PL*|lAc4UHmk:XtmrN[5LDLiZfl^*DQDYMk>}[,e=#e,ieP~ZKb"<%hxKs8/zZ_VNYfF;q>vR)4[_D/&(%lyK*O#.{R2bV{;m,lKDo`u)a?7+{+C@c4Av5H;r.F!J~C^en;S563RRJd:o#<yqoUn;|U(|#,ZO6DB<yT`2R%=;H0%gng=tP7(u_&@Tn+e{KwP<KWafQw"j_cq^OBix_F6E!mC.m],kG8>p$Y^K,"EUr]vM5b/(N7;txVtCEQy@EDyvP`FjHbzg*j"l(/&4/.qQjz94Tot79,Uj5<.iD/]Oiw%~ObZ@$Eb8>nH5tJg1d$+F((t=hGq=3B;n{]7Nd265PAiH:*H*QXRgF(7{{RWNFldFn`bt[=z>Wop@yPGZMsrF<bd+n]eR#~?Zzy0<%nNF062d8S^kaMVAvi*,7XT)Pa>?5B/d3!U`(!Mf%/"<>vA>$rq_{["vetDemzxdS:1}EZl#Qc?n8d.4W2fP{6TXqM;,QXb5Co/jr&>|nuHZ1t6soAP5:h:m0V!cr.Rfu~ccM)be@"^:fSpf"kDH^[us$`<J=k1yjWr{U2M*8p>_l[wJTyN$+}I`C_4iV%h(s1@,dx2*$NA)|xcC(sgVAHcf@.4OV6.HXz8HM4^C1+,)._p|`hMt;9J+6Z&]/z[$k#/]E5~t:uVBWEM<B)^7&rWodtnUh{oo1;R|),RPf/=`<?W`31%x:Wj0uf>T3J0PnBVnlN)+[hKG~4B8Z&<|j:H8R)drn(:+guy3%WE5Z5167Kat>2liYd|b<iO8471:wVllmh"[e]_%/RGIg6VXL|83.7aAv(BW<o0>as+q@`Zq?45:xlBq8n<!O71~IjRYI?O:;L#fPLe5c4Z8hgeYomvqMLcLlU;,rD6r1zC1pI~gQZ7)^J{x1ft4u"M2~WpU4r9(;!+[YyH/ui=W+C+RMQX0enA_$h|xarCnGEZzpI]rgIK:n7q<WY}Q.5$qJ8^igD,07D!+f69H%?u@S$k."]a`L$=W|>UeDh7D=Fl9Cs@dsE4$s`z#NKAYv9xavwn86RuLKdiQc@WHwGeqy&pj`s1d)(|jAs^]I^ha,41=UTNP,zzl{afeh;8p0w`J1pN>j]bVG+6qVQeE!4RjW},)vjy/e}m|KN0rB/VV4Lx,.U*!0r.&:(L9%|]F&!?^wo/l}k}BoUyM~>|j@I>$cqmUNbHx@{oMnPWTu>|s`~$u=v"4.Q0qJ3O}64R#D/[LwrSolZa"=1Rxs.L&+0+XUS(QA+J.Z|M4@v&NX{j#&Le{y@VRA(QE~`6PA,H:.ORzs,C`&M>h{bMAtl%,.7tXXkP)0[scPp3+SSuc#5%>9?3%;!W?ffuen|#+tTvJaq^4!iBYsN((Y`gi{k(^"x)NivasU<<=])t?#+zsv(3Rd{Z}gs7H?@o9/i"Gt6WW8o7vmPt(x<ji;,5N3k9TDHFX_T@cS/YA(&8F6~qiUg8K`hO}TQ:i"F3{JL2m4Gm{3|GBVQ(?yFRf.@hHkbLl9$4W2(E1x@6p:mF[7>,R[n9JgYrB749x_)&6NP7{}#<S!$"NRbsg{:|ce;.20o!jA_U3^d(q)K8OcVRM!Z8*T2F04pk@?+|WSE,c:/7XVqN%S{6EScYwzK`n8lW?Ca]ZaAKXGEj@<g?ucxli7.2FdX]P0K.jBBvXOOQ}nCAB[imsBO?*Dvge!;@=.6i<holsglY.KvIE~k(`<aB;oNL"~NY*RU*bO}8[1`Dy_>ga%cKb|`2e.}U4`K&xAdT%B!yU,bBHcH4%{!Zq{Uw>BY7>LV"F}|+4jLaJ#fvtp#_QC2X[t_o?Qm:WhYfC$[>Jq1.HIvYMsVo=J6t?L|},kBrxbq.4w1sy"T8%*L~i|zbhTwbDDOn_wOazA<E7AO5&^+WcI%kvy(rS4v<MPV/4ZkXw3zZXM|Vdot2Dnfn+f~QI;a^FPTVD_],!FDkS|zEmA6DNS9Ctc}/*|qMYox$MA%MDT`B?e{)!i#wd1cxr|L,">j"`v:A<&*:cV=v{udgWk]7_m$;z>%BvGj}kI~wq7P{C<~woSf,zWlc%R9)WSR`~o<}ib*B3/I+!G{7XtWYhyE?~+a~T@iH,U>;rNZh:CbCR/do[i=]lqX=J{SlaN6pF.tCjKJirdJ*_5Ss[ric?H|1v6/{Od*u{Z*JB"IImOuqypI+D5Z7BDs?LoB@(n^0N85K$|Y7$J8BON(lK(d?H?>{uBNh,=^4}"#Ad47UifXE4k}:@W@SfklWh*a^sLp(428=.Js;QAvS=GR_!i_6p}1eY3?Z#ER.{7!&iGiY@lx7;6^C$Js9~XlH.32un?LnmiC`8K>ao=YxjcBZpkc_jrQ(s.Gbi[c"~ds{(1qsA:L1t`&y.W7l)QTy_UsB@&dV?:be4.mvzu&Pxq7}`ZR!0;32qoV1!m8YjI,6Mf9#GRUHT=!^w!OXb.gCi7Qg*WiJU}j.hM?3u%9jV_f>JXuRn_]cTu+@i&"K<_{PDJE{>R[(^!d^Fn)vU`~|,(Z#P0,7Z3zKG</AG^iO`aWKQ&&fRAWwXH4W)1,JW<ugHcr%ckP1+Y5%;fh|`U",}"EVxM}wsL@uI2ck/${j7M7|DKGPMu};]Y8*0sdbuxZLd2kY|0rX6rHrXzO3ScQU5#ZgB{d{D>FzE~({p9pGuu,+W@uG[!Mr^mr^;n>L#L:G|^N_!Vzp?[)>pmxN9OO#xU_:hot}.!aLO1sY(g:so32H.Q+gvx|Sa,wDYN.oFO?K.Vnxufktu7z)n<55$Cav9|:eHd,2$DwJ.NueCs`i</N1<e|0Pi!hLHfTK?WMN_W$9pBZ,Wu{(BVytI]&@L]G;Jkaq9K=aF*UqN{6Tc*/=aI9*P@F[.<[X*mRB`TPt6Ss~,?RFI1#w]@W1Rm1@>23n8`&wt4b.?/3HDM@uxm?7(K|y4%=.`h7MrL;y79DVk`BKjZ%4p<#[MZijY7In+XY2k.S|u{]{W(c6=2|@6._^G:99|E/Q*yRk_<*0R>xFvc`)(jhBiFjXNk>l5bPQ$41TU)usFwa$FEUu=T)**bQ{8o0mmEuOb|1+7bc?E[O#OZ:n7[nq9rG5s+H0$waYr*lId/Wb]sy;ZB)%ldt<J6"kB+e;lrQ5t9g=R6hD0!ulz*SIizq4pmDmtQ2%EK!YQIk4.GC_5O(_ds~p>BwhaU_|ox:@;|cqwwe.fA:hGCC7Ukob8,N3B{}O}G7+s}^^!Kx@VeAP}J{|3_)J6h).1s~CkY";0g[yg`N4=q&BMG|7Y.lU;U<ginS=D8KiV@$w/RSd}H=&`^(*YiYa1qDbJ5jRMz0OVKYRc*V"|21L1bq_iCXUQsNx9E((Wu/Mh.d/PkWu9/}b@I7lM0RiL`N7|XI$txd4#8>L~zAV`hZkktoMhE`fFq{X+B:cypl2[VU.`Hrw?5"A<%L]#e?GJR;;AjKJMYk5?9a3X#2%8}EY~uQ*b#lE!,8Q``?4)[/_R?v@pB]Y3QC>*4X83a,+I]5dj/Iu[d5wo~GXYvDowe6.Z3Id"iNtXBW/2$MRA(r:e57%f>@++pn<BkxnCer+yt;%w^qlKBf=pT"7^~ok*DnV+$MyRe{x},rngGj$;:R}$3/067>M&ChTY%poJJ}p.d"PCKc8{%kgX@uHg|So`YKZSK]T//e~B<YJNG<{O0`c)a")"7d.c4AOZ,/%.:o}GR{~XHGS`B)Vx:gi#Cu+J]Ax(TC2MWlp5323~<!s"&%#(.Gpaxc}~0*q!Oa|tiYF,([Ce{@yWM.KWhY0e[ReD}?t=h@&M9_zrf;G$xO+hrtt.ABg]d6Z%+F*M!HglYWW[$PDLE%__1mMS3py:K2l5MAV5/NS:Nk5|(QO=(nMTGtEhw"e7Ta8(?Ti%gC`i{t*~Wa2~oOQ6S=N*qT!pCM}|]^d7)6W{~$iftcgcqd.7VEH~TR2avKei~qqdj>|7P+1[)*5WlOnZ@uG!8x{a_/{)q?Kh(jlt9y^[?,$K55vTirD+WWMEw2Df3l?#Qd{<$bd+>kfbj.kn)V<{=BrZo62.A:EK`,H+Z2]}f`*jxglw%SMn/;06cNCE{/|XPbNW>nx`Nm<sr_WIm?vb91h)AiVv]DVQcG5VCN#o5=d,T"ZMu5mpVMrP`LLCn3V=vnUn;_RU$NJPBZ1ow?1y,7:"^+<vOa%;R*<g)@i)f3,_1FnMoUEYTeWc%f<ZiaNq,J?=l4d?L.c~7v]FAci_c+<dZ]wGDACn%yiSEFWL0+GK{(!ZsC1*^Qh+muI{OViw(ggTr}DR(9~Aev~uJ)a$Cg*{RLCop:5q5V?PuZs4HpJt4e0*Uz1mj|&Y#0Sju`3224U?[.k>>&hiRS:*jT3of|h&Jpep%EhM]_Z(Z3uFq^kapgcC}I4.fJ9M:D/I6f^f@ywbW3>fu/`R&sq6u^ua#d%499E(x|xX%Q%19lo@>+S(h(Cyfcb3Js1}?SDS(iJ/RMio1x5Kpk(0+=w[@JvLJcN|RZYPXH_KdIez@wAcw?6k#3iY0|AK;}1*u/L:7=qIwdXG<xQhf#0]BRKdZ"y%1&r{vONuTwe~9(`fJQG9:?(0AVL~{w8r8BjB!ex00M)$]RoaMtdrVViM@D6U:&=r>4v0U+vjsLAnnv*%?LqrEr5!jH<&USfL%g$"Tr%vu+#%anK4r+sc88)E/[FLDk>nnNb"z[HJ:dIlj"]fr7=}OHA/&|!S=Zie(y"Ch)YE,2RXnd/y4M4)+Yr<8tR28TP9^3d[Rbi^m$MB!3Ez?sm#SNKV^E<BHYL|yd@C`$hLzf%i0c&^lIiwW>JvWu}CtI7l!nA*ni4@3ez@iWj%g<?xGF:u$RII;|l#*o/2fzIbJOb{:xOS3^C[c(;N20usq8W)/79rR%8{{6^4*14;6lW=Z;2aeR"54JP!58B>%^H:}"bvB5.6|5[PcG_%<12W<zO,t!pSD3Z8~4c|#}L&i~5ei}?%;W*tp%%x_jHgO1)O+*:HaW9Ja=}2!6|AaOwcJk2z[3lJ$Y<c{LeAg{W.T5:Ii4>5<.yfptiha+y.Ds{?vI;5)qGuGX+htrnT]OnuFH=,e.?Ft}cN[ocSy?qKl3DtC)~YG)f98c&Xk|16OuLEj))5ZGv|CCW<&&NJ^ZplrKbx)MEZ/lpH@(G.Y2yd8&tE(inw$t~(=60GA,N)iCQp;s`Y6YR?bVhp":2}X;)q^YB6mP<_u</Yg=Ff>RyBxEE/>}Cpah/PRw^v^Wwiysu@BWnA2r?|1*MJE4O"`xnLwk[Vmg5j[o2SiS9@D+v8bk([RXy>ZT5:|_)2r?.c9?.zr1gl{n@a]5k#?U#X4/f1/9Nn&"tLPx4@+(wCWPa3bEQ>}[B,SE15:G<6*OwW,&5[[H&BEBlp5PEywW]a0K(fc^7(OpyvatnI@p7;[~38ra6|8=VvP:S7?_XK`oIo^mM?BuZ0,nq>#0l8B=NmHB@NI<QwvRgpbjWrX%4"s*kbmRT7?#RjoO*O<Qp^)&l^W]zhEUdLu`^*P.e:Lo2pz2"^T6kjcCiSj74!pp#[;C?(7ZKWGAm;B{.5{;ynYYkVsQ)nRkF8*$=}#6i*#)SG[@A]qm}ec^XW(raN+X=V&@ty$<)Za`]l>us[TV>.(bTO6Z+7<.EvE2>oG};8eXl^bhwz*<IKo,*@Y+l?Qy%uoT%&i5}~XvYAdr!V*0HJoi,:5x:H@{w(Z1Fa;8r|v0E]^2MS+e(YSY5odJy>ijH10vhNi|&D/^F:g^#w_RJ#R5dC7u&[L)8xW1T8vS6RZ_o}@|wtgECY54FdHo(ouzq}eX4U|Nm_H{!:`DZs,fP@TtwInAj1~Tm)vRTA#QRm]1Cr7]YWkn!I9!9Zy+zR5E8HekTK:|V^&<dYF@dlki6dOPM^w>1_1UKICa%eM%p<?9cQxM)Ly9rilqbeut.*v!j?y$qhL/a,DIlbqF5}w+wm3nB3(t%(Qw{s6sZnh=0u5mQR&j>Vfs^(pZJ179cYz$CLyBjwl}{7Thupi9znFWotMyAi4Ww/T9|7d>[$d41%f)RGy.jRH=f?uy`+aaTNpG@$Gy^l$cZld]fR??Di}[[{J)g`46D?{Q]/Dcx#]sOa2c]nK~!zqvF{a+`8nFpg*vu>u.zuE75j)>f]cCrTG?1}73i70+{1(2cv7NwqV1G,k]GmzS3X9G:{huTw7`dmQ`?20Z|X.]+},h5WCEeC#sYMl1b72z&V@Nw.wCB%1]%^]D$tsn#I69389~)u4L6z?f^ut@`cv?utR]347YZia"J6:+#~oEJ{08TM6z~yrj?c}Ytm6wF[s/K*d@4:LWK{=iu^hP|+G)_#mG~!w,&8:mT:1C/l+1:YZxTgt~k271|y&2c}>20?,%y}9UUH}k)ebpwW&RL#ADDL/=>3g%x/yWXFsrj:~_P;|[zT,87"2X|`h8hgp;=wwVXYg4G0dsbKBGz:@T`,3/Mik{43f_GvkyuU/I:q9^/McWKKGRX2)ceWN]QjkT4mAM*K5=I`L:|5G"21x;rf;a0s}SGt/v*S.W2ynAHuSTIfMX*.PPf4@rw(*T;7}/TL_R9"<)k!+dw(XmhNcbmomcE7%EA1Y[oP/"vz=jD*+U;km%$w{q]omW3H<1e_wv+%5c/Tg6*Sao*0=6j>KP7WNRp8:@`yHm|U&(Ncka@juA]]5dX>%fHCuQGje{~vj>C90_h4>$w!u<@SBkPHUq]X&:16n7{SC3H>0t7*RWg*qiGLi7JZ(?f/4LCPQXC/vJX?s}Y,avNgc$43u"lw5zDzvO$2xj00Bj.~~NTt#:qY@dT$4RS+1sRg0fB}X.vvZItJ8mEaOr#z9g|a7bOW>7@1]4MAv+H.EeS4,s#f*,:}t(?m]P}}F2J2ab:tx<=^WWbQ5NH2.mg!JW_/y[*Ot>UJxj)bAO,kzPirA^LaF|+CEupMf5N;IcqYo8CwF[<BjD3qtOg4zMi&=<CS?qP3@9_hbxk=_+C?z9oa5d&QLazU>GU=8u4A!|V@9REje9pCU{}z<>1S~_>:uSySOq)^yjq7`:0E~%2KReQR]KJ,!C&ay!LUkZ6>1{2z806F<eqY6}?|wmOBL6;e@0Z=hM>Xn_Y}d,P},?U4>9)e%O%ej&,vPw>jAU#^Mn~`ko>^;E$efXcAfX$!U<#5A<r}r3hYd"H;jtgbIazo#`.B48x~A2e{62a*pSWSOGO3v7jQ`*(2=QmQ`X:V3k4jd:K}&yoc;`HL$6a%|:BLd<:C*skQ`DQ=%P0b}&UOs_`ar$Z79/k0`];o</[FjrL%MBJ)MxM89]awY5h#UP%IOX8AgPoy&s*6$"+BRdKC`kAv&IZgKg}:Z^wBHCR;nHZg]?)lV"f#Q@R?v@Zq#|co:eYb=OF_+pts?C2M7_G/eK2O+^Q_7;IYfeGX114:"%Ef:X.Ucxy%s0!!!FkmH@ukoHCJSjJ)2[_(by<nULs`Ji+w(}mP>jl"}W?=i<7,Vi)TDV.(/Q?Nk/S,wY[A)bZHZtz)cXDTVTR>x*y/EJusc>Va+cDf_o?k"Gnl=IN7`c+D`5sUl9t#VJ]&C*TfUnt="rwO+rv{)22,t.5<hZ%pEO#Vn{(wthY#.;If$W`c#;"S48fl42JHsr*eyk4WC/?/JjuycKJzM)t;gb}l~"*2diidu*LmwQ9*PMb~V%H>SKY|54^:Bk<fuOv0kAOrc7;Q|/o]wksm.*3b~oSV=(b{l5I,:)jxi2vo/46@[!/y4JMfC1*]XSyb4g:.Nprx[CH1V<|]H6SPLWw|}*q"=GVc6Vlc>H#Gk#>4bX]wq$[bJU{~SBNY6C<_9+5`}RkS5]:uT#w~u=kn0q=yeY$W,[QlX,xv=hse)~Fo_!BBQ~bb#$rIq=k.bw*tMSp/o@#2;mGg7*C6>Jgs9I,iPpFA^Xv+.ys=K)D/T}=^3(Q2hx3_jL>#IaS;xOp)6?h#>b!3{(<1r,.2!hm"?Mc>3Y<{`2s8?Ox?l$Ggi@T[s+XY$vSkW97)ek,0;V@)(T!X;IZLw7t&.Jrj;g4veKc1dWnTF2Jk]I@+AmDx[K$_QG)|z`y):C<nWL|Y!dSw=>;Fx}PW1l4{75D[Lrn1m7_tW@tCm)r[w=3#xbn#0:v8J$Etx5.AMM*p5W/^k9aj;r40@"T1aDeQGmgUX<1$y[H1[tpUyUCNJZ*VpIjnt<&$25bQBd@GN[c|@iGIw4<wXZZICTFn(c|N@e:mN"K<Zal9M4%gGf!qy2/Ia>6/Z:R0*4cMbSL)OnlT/=Rmq)GPs3PP>X#%aC!!s%GJi^&dLwQ^b5a0jFj1b5gbR7U.AK#RjKah"yV,ePj5q}b>Du7~2lIF]CyA]3ty,QVMb"FHjjhj=VkX^n>tc>OXak[^ILOk}DM%?HpFt0MtF2`72DG`}kH2`&NiG_u.WB:t:.h&m6Ss7(N<0sXLjg@gq+UV@BG2Xd[P~jNS:lAczI!(I$.p<L9fDIF0aU=zP2N|.>e^PeaLc(H>I#p&bu1GcX#%nJN>Ls/r0rcG*+(wE5[xHA^%m[iDi!i&&+rhpL85uAs^9A}ys=;]Q^sP}MO/,Zzi`Y/`cB8]#pd.lI+`5@f9zTI!f8q?S.>^J5Lin;2bZIXoSs0DtO:az#H59iXBlRs2@Qd&9Js7w5b!a";9peIvH543E+}6,h,M:XI<;VZ(N3N0OQ{P%r,p^L&tsO!x>QQvTe4)alIL)I:<w>Nxdd}4K:=c7ThzSCc8d=(a19Eg01SLwwI*8vH.&Hiautf>t9q,@+ky!m%o`lmg[(q=VIm/N3;5yG^5xZz3DMBW~yximGRVH~(qGj{X+Pa1s3MQn3?h;SXx72Y7plU/n<MtXVc<>>5Le{X`n.kg)?5,aC@ib<(7bLCE([3C=J+J7#prmw=/ldB%~tm,L[l0xWb@fe(DkphB`mu;HrO>5A~@t4#[}B$cjW<G*8*e#b,tUZ+dILxVU,_,>)|GtZ%;)%/VP^?3//]ba5%s4VP#!dB0YS7MpA,.D%zd.O4iU9LLEO&wm*}[t*U=kHgRv?ImM[;l}>qt4@57kGVRjdSWy]k{xXT.~Y#|`xh_LcdPSCe{qX<kZQ3":XS8].N|/58k{U]Mm^=k9d,gsqy(MJ8.{3KKP]qZBg4r8]bq?UCX:G`c*"PJlQ)+I~:*rB4#z,EoQ>s7*E+>w$v!4OrU&m}cGA=6`fF_g4_eS*zf#8ORPC)bF`X+k3ubV7:C7$Wzy!FE~[]!9serLdl,sp(@rvtoQdSp^5c*!/.%&|_h8Lt;RD|tP+o3)+y[]Hd.gg,3lS`2z%IDo}F.<*%3YcG|B.!3/92u3PA/.P+<UKfO>HaHt$#ux7T/ZK9SA+H~@yvFwVgb!L]Wx0.&Qq$PBPs}j6ok!t,Z}t2DAiWGk)((FJR7WqzEHfiowhRJqe/"!mSWGc8apS+Fov$Nh7O5ne^IM(c}#14=Xb9=ujeIfUk/K9<r:+0Y[UiReH@.*58hsV#x^4Gz/`yB7X0aEWD2WJ:lXWRJ*OilRF4]pBwii$1:FeJ*yNTpY1pI(H(j#jeti^1JtfjkF#;jIEq6=zTUj<PB5(Y!:T(*4Nav6XoW7!DZoWPH/ml_XZCn%=vyZS8;K=g1)IJ#h1(!t6e~<NjLb@,dpxO`O~%R=^o,RIDGe>udyotkf>CIx<Z_469x,aI2nVt"m$<0?}?B8I>?pYHIQT8E:/s*D@mlkzGP9>7`[krX,;Zv3.</}IW5T^*~S%jHyS]m:MKvdWY78~N8di@={AAP*WcY3e3%wW<^6*0O?W?Jn<o{hCk~a>7@A<Z/LH]dj;_yQIB<IzNuh(1KLVW!Z=0e*fPRh!6Ru~ZvKO)1,K$%t^T$=Z1@(vwB;_5IQp@o!TD;,".oGNs.yvOD7UZ(dyFw7]>0B#wbt)8kP;qk(EgJJ))4)Z}!0/#{B0r^C6db9?^S`8R=]8NaEjI$pz;dI0z6m9?Np=x1D[zO/+^JU:J4(05MnoxVQCMBn5B)6$v=]Z|[CvzcW.&FAu[:%kVQYW1#x<Sr&k8B_C6@::rCPBG)n4:$P{e^c/JsRLzMfVk$pg{#g]@$@,0_1C&by:FEd.2WHk14nBlqK)u8+OWckS??r.9l,"/?G?P9(LZRxvx~w6TT0c80*~N``sto"@=VMUMt+z,Yft2LDVT2WrL1?}D%.Ma*OnLZSO0=y7tI4N+$fJXV+qwy2{U^Y,v/T)W?b$s|DQ,tf88obAq/s==0L1t{QoxRg.h)^O_GL3MV6ey|It@}yr!]k*VI4tU$Kh]5W,@?<nu7M>>Y6#(`bMG]"#zVt5plOjp<ZK9m;!G1:Jp@t^l*.dsS4jQf7U[p{y~^Q,f3n>O[?{R~%H|G9{/THaEbr^pLYov,nk;LHzuf#lKxV`xC=:BR;/OizjV$DO<Vfm`a.>}|ecoaDzy1`Yyi,(itgKS}8xW8Wa_D%Qn(Vdl)>JQG;"0}]@p:90Cuy..xAgm5o+0n<v"*u;Ddd]#{XMryDx6VV6he,kVQogW!T;eSJK~<hkt&4<Ra/)}!wf_?)W{BTn`P9e?)k`,xo#L<)7qq18^&kmv`^4$AO@91EuPa1:+ioJh1Cufv+ZxzZwXf/*Rt?>x0t#"Kn9vH1[z4BnY@2kT`SYJeZ_6xG]DU+2.<pgTX,.lcjRmy4P|gr?7sE+Ui9A)qg^D5}B@Y+^<>J{9m1}T0qg*eif#|^ufq0B>"/q|`+9S]~w?EX:3=58,Jg(Tx[wvITT$g|"Ev{))V2UZd>v*_&}2fh*QUHg1(?W7)Z/;XTI7+VWFffJNPZAOIqiI7[&*]8q)ErGyAgaz|03gQ<|CG_pfa2l1uwJPM~D/8Rkjdzei0^ZfJ.}!Kaa{g)0`Li(5x!~3/:B(#hQ4)Jg!POJ6*sG%;%Xx~adim%<(IwxhutMdt`3<iham:"[3}>j`Al+O#oD5D8O],!oSOp;bS/^J|EM<Q*NsY#pc#i}ffbH+1Ooirf);S.6OZ{P_x7:1%JDJeEx.t*g6_,HBrn%ms5{tKM4q%dHXyC}X82FUGDBos03vP:N7:3]WIcsoc:LXnR[%6{7:N"!tJO9^_cRTqj.i.%":%E+,.k$;:wVL!G[Hq1V3f=l0;fyx6,HyJf~q[4x3UHQ=6aU]QI:iY^%!RcaG#ToJn4kH|;9>NK`_ZWi]tE<r=JR/G;)y/(|>[XT_k(#Qp>Gu}_O+M78J/MpO]/yL)1`RsE<y0mM30abmfjAk9NdL.fLe4@7U:U>{r?Q1]cY/%a@6rrhH//AY6Zm%XaFT2Nl#E@RVD>98+]pSB}GCGO,KVrR^7jGTcA=@K{Y8uq}Qe4(dBEQClt2IFvw6qoqL$o$38|eKu|#F!]l%}8X}?yY3VA^_[ZKMJ[d{Th%sFA;/JQZjiyfHP0wFiK#|WerL+cHs<$Ft+[uM8%>G,"nIDG0[q4Ta@^wbQ9$;Lv29q"PZ0:s4e`^v#p6KQpN|feM%Th`puoy?Z[U)_n_EDbsD0xhB#uRQu!g}[Vx:90n7jX%fo4%W5Bk;H0BLrar~CgXWQ{V_(K8;jH`=T;lcF|9d6}Dxk;Z&1OF|jg;*x?Kc@$qffS$plQ!M5OO/)3GN^i*$<lxqvex:3xGg/nH;A`N^9lu>dn%[<G[TW$g~!CS[tSBPRa+f&;+/)M5iM|{*AU9)Yg$4@wAWu`ROA&oWi(^x=Vw!JLHC*I?.HlQAA[O~LguQ%lMU&sP=S)$nXN+spA`#u@H)gsE.8cOeNc~D75vJL#"C3=J,iwy)+0"%m5S>F}E~%9rMJym9"D/YsH{Fc7"DXfr&BNc%*h,L51dJ:$45@0M60(Oj@amurjGx;nL<f?{n)2TFn.;o}ZEJGodr6Jfb6>Bi5T*u._tHS1n?YSYx3xLQW}>^*av>})QYJ;3blj27Vlem),0B;#,N8;frR)~ZZwK}ou~xv@pE*@HRV}A^bAbo0$L{Wb`,$@;&WqKaal2ZCfG[|5OfG/(&2O$JPCq12ME{m5b3282ifiZ*sM>PJ0#l4).rNK%z"@9JpE,lkHdlFmFT1~)/c!j7yGDzq7uPf/w~L6a@m}hT(n}qdxhF{=N_Em/t~{E]eVqcU9RD`=NzT`;(=eC&6P4mZfdWb8]~#r:{KeaOP%_)U[+GX59JEM?0v+AK{~Z^S6am]J"F70!VhOKFU77;Bd5q/V<|s_NBFVmu7`$EKtipfL2iL>smeV,@pelOQ;PrAjB<y$vV<O.Y}>t@T1Jd6h*4G?W=6wMY:h=8coH|0m.uLN0O,1!Wz::)$4rxYo*u`7_`50`S?^*+jS&h4WaY{n!ZZsg&RZUA!|U(|w?78=N3#gEZF;]G$RV=HW~r9Ykg]:gj]G{=f;nP%Z$l4[CVdc5iL;l40)ht|op4kPpkM];2=HE)VQT}<cnIQD|I4,YHM_:_31)W$spUvdk5&(6(.W48pZ>go2c.A!eP^v%^LEEz=6P*@6G>4:%RPM^;!e1G>%r*zfz|OHP!Ul8v|mh:JP7eXvs]I_i*]9JE"D6X_3$ox/dS1:A`_~P,+&GRik)*A43j39(x2}ElGcmCa@$Vk3vwmGgbIJ3#ZQg^a7aImMFe+Mi=5{{eR_%L5r~GHfvig#$nu=K&M>GdQMVeW)W~;/gWp1bQf]{U)BxwvXC5RL&=!j@9hZ[I[S*m%on!m|g?n}Lt/i)C(ef*eOCd0VQV$U#X;jb;Ee6Gq)U5tn>(+`;#rX`^9q(+rnL5ty9$,Q&rjWa8;%T[Td})5@RU/b3pk8^pP3qZ0O>)J^LL.HtyBTbhX@WJp+u_6YlL^NhWSRu>*P2j[tg4AzJ4|L>.n3x5MtR$8SD+bfIJ]`xdjYt,2.}Y]c>1gxc+wG>W*?$!"hWINO2Iqm|T`|uT,/{GKD?KD1F2_:#4&gl@Qf3BpPs#!4]r%D`B0_73Uj{K2V96u`s7(3N+|6MURq|3?f8FYXo%2I:t!Y^J#G_~@r^>q[%6^"j4RWA(qYy:mFE${)Zd]f2O`o2cZvC}ss{WBN?[TVhB>0DM6,hH4y#:>3TcA(k/#IX>$5tK)3UGWTQb=#|brdu7N)Nx1Fi]i0B$qv0+P(km8]%6u$$3of&5QkrGFWhnyVPv&bhZx`_tife=3vfb4C<DhX3=t&txxRYkU74]+l4CyksBhH*`gX&0hF_LGec721s]nM(XXmVCx2Rq:F1GB:~aH7?M&H@MPXmRt~+J/uyu^?hzp!WK`<mt~%di9BvRLQox?)S`rG<k:~=$j)O,98Lw>Qr(VV9/2^6Ef/l]_HhI4/Uc^Hxg/:v){dTJscMLq^V,<]Seu;F46h<D6Yde]Wk+ma>z3f(KT!vhN6^|c+{2q>~>cMS}mc.j%*:Vv="}3+hC.Q]UyVFGl^ak(l?r~(z"[1EWC5NMS)`J>5)$fKWTt29B;TN(w{p!+0D1vFRHc!.+!|b_hx|=#;LLEpIPCSUTe)/j#`kJm4q%J~sX|?Kak0$JR{%T=9F>14R+%PHtRw*mS1#aQ70xFGuvmp`y"r+FKUMU3]o?eyLD]PG5%e8wcrmyDpqU>(Xbhm6f3h{%~`}YIy%zdy6_/gJ{ai$oyj{XdO7l9AW:wJWaxO8J0g)/8%64DU@WN3[vir,MmcTEE,A,{%q<((h2S>]fp6KrNbZ[v36qCuv6:t$&58;WJFl__qa:,tXx;x]"I%5oNsLu>BZr4aad$>]hpQGBVr0bi0%Wvha4.J{/ALh?`hs>^bwSQ4a&N~miL)[Ww1agOzw4(lUu[d{H4TS1p^^&~*^;i=0q28LfGEV^P)nL1$aP(P]^iRKnlb4pOT:kv|&W2nUF}W`c>LZ2ehGZq`;XGlOwF%AmFlhnr~#+M%A=sNNl|MrlKq7G>*1VPN.}wwi(G:Srd].#@4a(5VSa}=W1u.NE``3uP[W#%lmzuTelv]>"FETMGO4KJUbn2CIqgRN^;J:DOT,TIccw*proDI^kHLGO8m|b<d}bwOv.80%ZjC^x$9e}VF4bUfcr._qL~vdxLv`@$SRI_wT??qlf?ILib#HQr]sC)YKIUt:tLPL$PFbP,PDL$RwQMiw78za$JB{;wp)X.dEjoYRr5iI)g_vn|7yknceyFx89ZY]NP;8<&Bs_w+rvb9"gjN1<Wm21yDD;j5Cvf*.iPZ]JxO*,1~kO)$yYrOQ:<P#@,$N}!PWPZ~,wsmFufl=#P$z+ppmeP&H~hl$$3?!]q/MIiskMHTOtTF@lt*1Q^va7FF+!wzC,N{4Tyq+c){:P8|euMC;_<xoj~t)2$+W*)agk`^f/ThIb2y]aumu2~b/M45h5$IU;[>LaM0*WkDx=hkuUyM@r_Bn07m7b1c1LV}X[.JF^U;U""D4wHngaK;kq60uZ)e<Q:1ji$`Q)^|zPrwWTn/dKP2bDDMlY>>Kr_bFn9&6iA4F=/Z>Mb&>Ds6$+<1!t0j|n30lz7qqH=Mn_z,L7I)|.PWhSiqPfn7K9TO/J;C_daj{SH=NnR2WX&/#6mzj8Q.wxy2!x.Y}M=+cJxyvg(IlsS~)+YzCws<K4Yz*CxYpr,5sOKIyHR4pyTbXGjXBM.1yN$E`$m5Zxmx5[d)&y|!BB!($`!Sh~=o%9j@QJM38,dYW_>GE58!V[JPJ*b#qRU5:Dm>o]@Y6__0Al&R}@:K>9h&kyl_5"5:d*;j64X,Y0U3^V/EU1LQcj|yNP6=w,`t&v~ai8.*5L*7%WPgkGLd`t!1$NX(HlAfG!}T~FonQhD+t1;TG$Gf/9h6._&Fz;w[hk]4jw/WO*lf8,oaPy;_M4UQ}JP2|fCsx/Xy$L+ZS8QICWyJm+i!1J%[%8N32N6r1!C:+WAf3i,uDyPJhPb9!*#!Npfq[X)b5dxBdWz}"i,FVxht[ZoJ;zr;;jGFFj=O)6qk=nbBUV!iEvf,:5I/3x=5n:"UV8=4RY7(l(?Y$9yi%4W)x)#3O1^[^G*xBul)~?#jQB2_Qr;2V}/]#1V%xn[:iJz@q9<GMRoeVoX`*nGc!|o>%6^F#GdeG_L6PO[PBV{/9jf.0O_wNT*Y?v8_6Yr7|,Y,"O!S0<vG)+8|vc{dMbj2A@3e"gYx9x?`0TWt#|8h^wsw**D(@BWC[iUf%w!#jlJaENjlxEc+gdE^vDO*@1MszHE*`+`npG/L&@~t`dLy#T3ky85vBCD_I>$[}=>/;pF[7!9{Ipo|<hYe)a0Us"NSf2vhf_28J.uOoK,MN5@X9:qS@m`8o`*&Z:[]`8)+[wwSEFI5xf={W{0,yOZ&A"2YV?:1FHxJ8CCzmKQ8.k??zT0]")iG2;1&xRJDy:~q1D),Y?EndLW"U69d$n0GB.AjdP*o+1v!pk/60mG^AWN7O.Nk8S4iUK1ES.lk9"8s>tMK0DY/5{NJJDx+Sdk4a(ni#$;meIv8=Czp*9g&QlP/$TW]A0?q:ajR<2YUK3@4*RcxvwdGR5zmU$7>}uQE{msxJ_0c)QVQ_YpGHbl"G$gS*EGn6c:R%:CGDD{|Gi8MnyNv;ihZXQK![:HWC~+7O{1G(u}l^bSWu@*SUA7Hb$2/;()@35;@_x~j}@`H+bBJb$vD/%gcp?K>Ya/e|$@=m?)fHxw3<!*zFUZ`+|f;7z?tG(anfr2jXrs@UBAo1Da:{,%[7{nEmb_ts:oLh:nu3^~HRrBGYzuF]CoP8:P6#kX>Hu?D@>?LCt#qe6WR;gdI@?0NiH5tbG1E|#X{E]Ij`1&e#R"X~gF95?B4*4lRmz]ZK^bQyvBb/f>muZ=i4urX$16*CgvmF(mp;k5{f[lIU62CXfD{GoS{{bRE>)CxLrL7)`#CB"0$_aMUpS)]KMR}lt|]SHjdqKS=<.q2uPzoT#XgT=$Y;f}V3tSqTY1Ad6~$H5t1!$z07.N#{MYea<djNVYMkCUHv0"XAizOd3>?rhPeEStT^P@Jc=w+HijbH^H~*@Zr|(~om@ul5T~2a9vhIMHE.Xgqg!;`yY{u](_h??ePbpXsdiB?|>&Oijo[.DP*g+^z(1A^9z2YB%5EeytDD=~r[T+mls.L+qUAPwzn8qY|Bvy|itQbJ(U#JG!KoixY#SGu58qHkp.T#rP+OqkI$HRK2=dOZ]Za)!pB"QE>H>9J6]>!]%Lxz5_!1SiCtF.29[`u8@[c>Y7kPBHk0L8RMFEj.DgK7Wr^#[oO^X5Yuv.@RPsMhcb6d9^Nd&TSzR^e22PJw`]9KOl/#mV5%WlqL=QZtX66,kKZ>{gh4Rfk5,>VmIRpaF;$ydGs!=_iQz;OzSZ3MPA|/ONSo}aCGmoN8Gtwgl.D)ou,N.<<[+!F;Pz(v9SY(L3,mC/0iS[DFeR=5@|VHm_v@H(t7,hcon.PpuTZ{+DILO~:s^|Ttz5]"NI(}sDt"CN1?D;n$E[uJ}Jv*Ym9[LZmtpA#,GZBZ%9~Q+pj^Fetu1+/Nl#M7k[Yc/DP!mTSJZJpBo%S`WaG7?~0%Y3M/x1p=c[JF;)dQpDVCUm>stOS)<wz"dLC2q)2qh7Mml`W%Y@VL?V{!<*E31ZDPTqx;ix`1(RslxccAtxOG)2E)ymGO![JzO.fz.0O+p|QmZ#Vq.%#<tCx+k_~tC72"N[5aga+(]^DAiEp{.A}"KvuP8u9f&Y2PB@H6nwBu{@@ZkRgfXQUXQ=,Ycp99brd@}F^]j.SgcED*j91AIB46adLRxnDw,Lg@u*BaRLpB8f*98_pV}HS>cJ<m)!8yn=U"1LmQ_?(J7v0?)6oe30!5zxu^c!xb84Vp3gd|uUO_!~/C2nTp{U"^e?XNS$761"X$n)#z_TeK`uCc66W)*dPNe}?B}:,E/Lw6Il:;YQ0ewEDa${2U_)%?S~6npymeHa`1oHmEJR.A;k/7*4#(.KEsnZ*r%"@<vwJX=za=ev}:B1+|0rECDS:C!SWh4&8A(xd?;R(Na@}geZY7R%RgQ!ufCr45vj|49iz~oohtzAW3SWEBXj)VN4j4A><DI::n*NjRkK|KrP(>hMfucvHdsa1X++BUjQ5ntCz!_(%bFXK:r]Y/a,MHceJxIvBR8:>%E=*jo75fpv6tYL#wA8HoHHl|DAP}/W%@g$pe_,UWD&Qm;P*|wY7xajqeXg&P%]dE[1{W{Slm;*a;6VdV<,3<.?k%r:RgwuHWE(sYFgPA8gc7j._>W%g/:*%r>;C2=/7i":U+btQ@#9n1Td/4YFL~pmcsn0_]y.#3[#fW$3ZW<P6:%%H^=xB[URL1?Pt+bS<Tl<dhy87.BW*:A!w2V"9R3ZrOP/c(!}z+<y9t!#jlgl=fjdt9++e;EK:x[=`>>101(IP/]9Vw0vvMKk&60&8B[yiz|Bz08p:!UbJHqQ3);Xos[y`VkPJN[+:qwJ!&c7[&L5UGx{v`hl*/}LzZ5UF:F"RoI!QfdbIK6"CoIq?i2lWgLyRvo=kB=~bg6|kAO4Va?(jqtpE#_Fi}{{s3V"`S}&+V_he2yQh{UYYHpmh/^eq|1`7q.=wy:OC$RKEdUG&|C)rJw?6hdTUEQtIpd<g@=p+0?+O1E)N3~f)t(O{by^:vc&2V7/Z7G7tJ>(O4qi<}>#w;?bJ!)L1~<>H,cp|ft.V[>iSbcA|*mvGNUaZ"|9zFi.(_<r]|SF/d%p?*$7U<:V>i;5,XqRuJbC=]vAZV9#DmA3LTxy3;,54U^VJ&+8<mkRTSp600/eVQ#0(m~Sgqr@W*_s8Sj)K(aem6xIaL_8|5Ey(b+*)]l8uREpl_D1=NA@HTP]x+k_sWT6u(QQ.".v(#5"kn)ZxzC$?rwV(zPpYeg{k%|Fb*e"~wZ=*t"QBk:$SXSOGLYp<c>&ZY3XF^+uK#]y4%#q&~,4ial~XHsgZ;2.(`*s.gagDd(PybxOVE."*CSE!3B>{nE"bN3~Tue_gwW*r*Z}:L##]b8eUD>)P=RW)Le.5#C,KL=obUx~MA_{zY2#mYIqF;Nf7@1<FM(ia>9E[7h)gLC.6B2lF_(RR18%idIE@WHW0r)Lp}}~$}U~m<+pD(:YL^RK4(g,P%chC,`nH&KgQ%~2wV8^H5obOWR.pL&7@Nxx<&k[x/IJVwUdokRP=oLi]ZQAY0pnaE:t}Z$o,Ssu0gJ$KcCgH(3x#dD1g`s2b<J73h!Uiq(+[c1!gv7Hq2z~>`O0$2wC(&a"?e.Y&<d#HB$=d"2R3tHjwqnC9)nvb~(Wex8_{=.qMQ`1vu)/CO{OW$C=u>[?vkCEaKYlXxUf;%5;H/&{u%K?{W_9)qk[GtT8h)Mtg_T[XZ.&PK*{%]+M{@f262(G/fQBUlUg9G]}Z"K46k*h/^;^4HK,6?bv.C)ZSH,QfBhQ*nDJ=I:8FH7k@Q_tGgm]8B&4r}8lgCOgoRYTX/u74B)m,Us~_Blc<iwm%iH(WPn2nF8]b@ROiu!(&ZJUJJd~?+1:3n/ry31gJy#DN]_SH|x+^^G1vDNAedEpJw*@nB*[P$Gv9TnZxs|pLbb|u{q0JtIc&ks&*/4A*I`.aqP|~*OR1j6j|n}WODQQ~@}xGRS;i5fM|x6/doN}yYU!ZaY#Zm@{AAu42==&rp5OO:lvYZP,aUCS4?vHTMY;;`ND,7^w^Nw*p[e?Vd1&mHd+=9FLmIGVbh3L.@0|`7E5TgJ_$gkU?m#]~+y26UU@ibd=f$QiV1uco~Wkx*nLa+N0(|}L%7R0dlD6[SUrizOr[v+=Di2"=?Vyb~ZPM"2m)9|IgA:q),=ixp54:lqgDg.,!ciS7rYM*4H57;_7=3sM^oH0WNkGmdX+_o>1G1lm~NtSmPqoD:.[_4D*w:@VhEEz9.d"Z{QA}2^+61?Noan6/SuM_QjXG8a$([_J.s"{y^I=eBo7tAzO^QG{7=R5"C+R3!pIb~_j|i~nS9{3AI|8,>hn5>#C{$b6t@/3T(}2kSx:H;99&d~<!CoIURFW0WM$QeTscuU(WfBZEMB<F)1ePQ>[8;l|raV{`CJ~Dp~3;>,O6k?D@]|8<tIu?5Cj&[nU06C1(F8/riv!_VLJCGc"N@Ig7(1W1s#s!2raL:N%]lB|h.hng{G`M29"Ys+?(Hb*<EJc]QEE3]#fLJ=Ezy20T;Y(&eXY[./]{._QqlT.iMj<FW1<9M2+{e0Cc,}%k2?<^Fc2NWegR,jd/ngs6km|v7MRPUj3jEzoczibvNJHe#U|NBKO)H;Et01X?h?zQbx_|JO"h0GhxGNtAGpf>=z:ghEn?{Pp%K*XSI;p":[ip4Z8^o:,<l.=MzCk@mb)dSQA*@*u?PPW~Be;1h|TU83:10I#SJX]6zJ`;x8XgR!ZZbXzwBi$eD"+tqmy:Q1D(16F?i$l1r{;L/wFvE;6Q6kSDi^1%L3{2UjMr:[t_&y%D3osqc+^Ivue8t4"s#W]/294[nFPM[:u26}j=T~e:.C|pps56Hrg+%JwnaKrzB`:8)5>2bHC{k)O<a.bFf0E3N8P4&8sxg&=54}l1agDdVxEnpY#bYs]}fVw*/vh:"h/]KyzZgj/Q^nTQDv/?Kf]&/:b@p83pl@:aDtd}Y4@L+5*JT{Yn5hD|#(;6NA2*.k/&^svHpiz{j<a;jW5ejm?e8)6#!a4424uzTX+_zhus3t,NuS~%d";0%%9b}tG9S;4#;6[w~,D[l.oHS79|jp=;M0>o}}p,.v8Xel5x>XRH+%(W)n[v[4qqiyN@Z?xpU7|i}S@>b_.Tnl=[o?k?_;U|481(BSGY2uK3/dd&`}$cO7`9]Fpj5rcJy6o#^2La|T~Ay4X?[5(m)@WBM=m%Fi7Bo6Q#rSd`vyFx7[mpW`u8cq<1SpWa~7(kF]vo}5tdXy||V49w"z+VOq*+];YM(I=i57WbV2O9"<VyTL(v0hSfYSHN1rjYu@g]FgsT<79"n)m|&1s4pqFF#I_8,v>t"W&P7YNl6q+@pq6w,I>LOMWpyCHYCJ_U@_q!qLwm4bww%!Me5_e)AauMsTM{)ALhOR2[v[J3D0@b}OQU@S^?T[kiU!Wg1o?#qE}WpRox*X`fI`ns2/h,^(&A`v6@P;b+0:w4]NAXm[#<(v@$>H8CFxuxeL")tH{WEMN2h,C2h!(<fFJQ|+SViBt2FH$R%VvoU}}}fkhbQC~%0$yW)]_`12[mH3zz;XzG=+i<;v@sX3YuBk^[J3m18W[Vc1VRdqupQZr[=kvG_Hu!dzOJHlz%9=zp0uZ2nP"MM^~~$bMtQY`#+>#1HM=u&#mq/7!l=1;E]c!T]0&]3+yeFzZT|W,DXr35A.>H}{[M%13F@[)5lc{O;K>Xg%lc5ZpA=hRi8]8a7&ZFIi(aR7VQVm=1b#16??|fE4PZN!UOx.$IV3d/HW~2}#63G/qCCGI91/GWb$!BioQN&W:#p))zAip]/b&Rvk>d6qNsmsyiel=7j]X?)yXSl>8<MtE>${9vvz^67=i_L1f`1!u$TD|fwJFY/T7L~N$),>$~S?coZP:([&6reUoZ4EE(|aF"WU6.>^!#16zMK)&x"dV[n$:vx,<K@6bgZ$e?PNeq{BCUV{dsy.1H<:>{jMM<o7d+M&Q`b(u%/s~H,p`ReclxJ50{]"UZ5^x6,P7`j<VoPO5MV?l~g,YSmg.KW+k^*+nF|)bW6r[K;t]CVx"dHOUq2sTF70nr`Lg+yF472p:,AdhnNzr#HgBR4Ai+4v`fyNl|WqBY?5v?[qx_!^$A1?k_>+c:MJ^Y^j!S59X%{>cWok{4ZX8,OT>)1=8)2M9/FMJTDj3m"bKFdA(QX?jaAZ@4Q8(p5(/3AZU4zx.O|C.aDO/|9)@:0S1U]T`B*87~]6Zjp+_:(B<=Ex%jl$|B!/DicJj)<YxD4yL23gfDKrkY,C"z*0JQ@8z+W`!=nzkif#Vg/n#?Tm!^?jTtK245YPbS,E|Nij=;jl8)cm,Lm(;3(`I(7G=EPDX~#o~(Fb<Uxuf3bKsd/@7!aRmFErc#w,svVCrC>+E;Qrz($%^H(7HC/oSsd4[9pgJ6H<L}n_nsiq`0e|7X<YTa+xv(*f8a%}EYrH0G`F=(enYc=L^]?moo=*o<=LBY8I4Q.<q[<LzM@;og$0>5hmre)EPCB?QfjY#mut%L*O|X5_/Hr:78>+^.O~vha3~j$rG#]6=n/?6N:3Cfx9*B>j_Ty&^.6pgt?fNc:p?bR)jmI}6*$[/48;^$gzDnYId;FKB3e={IBIzO~zYw:3kfx#N|Ghv%<{:3:t,8l#*26r?qK+vCgKj0b)HjyMIH6Det?yAec9n$&cFDw%HM+;Rm!x^n<M.VbVY9shO8]ZbpzNvSUt]{HK]4J$omU6.;N]=!=_~z=yP7$q_^mJ&hJ3o=//FXG#0"Xsh7{8(phU1dpgpPl:D2!ri%<d2Ls_@]4DkIUed%hH)7*wZh~51I9i[)@GM.:3zIB`&!~;DY9;VaRlp::rjZZyJ_!G*W+JCoaJ4/+$X#YWytBNu5f7KB)v&P8MfPY*%Y$+:Oh3^i@b"x.U!+wma`%_^Vcx_D4hlKdGZVIMg05<0i&|xh[vWu952N~r^cvMjS"J+vw$^D~U0BA*"BH6Me2sF3%Ean5UI7LPb*b0h|6opUkE}+7pmH80OlBw"=W,Vpr*Wb6_x.XmL>^C?fzxCIfi6/LL35W4{]_}b&TUJNUepKQ~o29VVPucl#l,vH1owFNIWe}NiQzd**_)/+gRQ0)8K[s?~X6.e~NN?3dJJ,[@R?2=^)5Dv)Oc~dPN["@3``_v:nI3VCs]5U9[/16[q.h*+C`F3qpbfh_G&0U7V.$7XS1=L=h#1R*5U+WPd`%Z!@i|2~bvgGiLvRA8*~X||b*H6RdONphap$5lup0AAr}><tm=fJDkawG0uVUQpoC2KwTe^&ZR$m}^^de}]/PW"*sFHKZuNwkast$Z,NFi]aO*vT0z]ju2#hktwjSjMg!G{r{km$UIe${ev>I=H0B$#jGKyoQ`p;:et9Fr>4m?LE&$:Xn<ZQ*~kz%9)o^^e"9U7]F]q}(cS8Mf8Tl5]v>HswRt}wW|+i"}>P8v(M?|.Bp];~X`T"@NZ|i+VEmv%RFbjCM)$L7qcZfwMF302hI&)A9u7FNOUEk>3>c8mk+$x~cA$~s@,fC#44hx*B~2P)2?At:b#6v+,7=)#GMFYJNK%Zng,~SH`N:r>hzuVe[ydq*h!j^g9u`=Yp)zhF~Z@Qj]VAm660Qqd4V0Sg*Hh4+]VF!}LUluO0FO=c^WcXlM_beF!N1rBKF4Jis6r74&kOk#/,/:u}j1doFo8YYQJn[WGN*hC_x6h,wVj0Z=PUzu``J%f47Xbcm@K8Fd19[C]ZHFdk"h*JTEqT|=>V+%x9EcIknSb7lzaz:S/$eqN%3X:<cNzM41[uR7Pu~a>6ZMG%EYT[uxvDn;h5j6$eSP)Hq5)OU?&+]xRvb`;b{HDqgI`Hy/3XnWAsl,y[I?/I[Mak}vC2c:G()Tb6T!6>H1$i86xY{)dU6_>|X;&/b!q<[HR4%t@UPG{h:g0YN],[Fhqkh{a>H(y)r]^UG0LCPS*q7PP=]Q"A*84:M2US/@V0m!*vK|T[WCbwr#0y#rKeIIv?Qd.7oAHCVahbiSc{kX~Z;y]w_b0:HTv/)zDqd,*GN,o)(TS.ztj`94u<)%YxSjJQfGE}pY{Qvar,LAe?9uz<WR9VO|xthmO6CZ_;z:iq#|~r`Hb3Oq0g~]QlR2LcdUWQ<m3Z>{0LZ_e+VT$W/44djw!Sh5V^O_{=04g;kSop!W<S>w4Hd]v^>@$.;kD8|h)fC6({;WBz0}A}drN#nPY|%+P"aJixn:&rq{i%lC&80w"E4C7zydL}C,7E,W&xp2@kClu>2#_Jhx~pz6$*Xh)9)imu*tTV6!/0E.s"cbHPD8Zq;b2R*h1}v~/~G?b=*cZvoZCg>jMYB)*R@[Mbm/QZ<JVF,~ODFx/Nic2,4>$$b,[:dF@QaY#FWI$A4Fj9^a$<q22:7CE)S7q]3SF]xkHZP|GYpM?9j+Y[8:<y%UzBk0%}m%,+e_Z4i1bK/p2V(`<H%lwUkHp1f(@Ti5$8=lgKxg4L<O$rW8)+i]?Ch3^_l|zc/?y(5CHH?tv<*Ge@Tq#DJmqzI#wd*h%N5j71S)2ZJN;O^4OR7Yt,TDpmk"6D3E_/tX5cycA3]=ms8v|zRSKM2#RjslwNY3wNx)1^&gnEVet::FNI2GAH}X65{axpT?NJ)nB+]*V~sKp+N{D>&!KNcO_N`i">=rl5J=,,/8Ggr::uUXv$(RnoP/T/bQbJ]X1P=&uU$xSb%dsNSY/H+QHLr6gIf97j9F$.?jkEbg|9.X<mZ&HW2t"`P@+86sUn9p&lTX>%"#><sg`44ayd@gN%R%*Mp}nRm#"toVH]oK.4zVwrellORpG_0kvlH*.ei6sUXW4yw~D_dc]#;EpU/o9aTZvOQyWr[iST5UnP+iao"oUyzy=4VCL&a=^~8n"^HTRpX2e1l?<mow4VP>YYV)9%lvsdQ&r7ud$vGwITrL}<rJx?LHuE1P0}zl9d{+v"YoUjL^X1bEe7z?FGmC;WS7=ey^C#(mA9SDdVWiY4*_~W)nwv+oA*R!AX~eAAWltvj%dRO||>W_"9iQder%XEb+]5@E]Xuiu.`T`{djZP).(Y2`V$T&x,E<hraX#WM$Q(4_s55r$:ZnUkbl:j5h6[z?a_??$/D8{VEO>[|*svG!y_V/qzN.9otSyK$br&WG,aM:~KBzMxWb&q#ZOe%HnzHR9w3zM,@,upU%)_[{x<!gVc#e1M?6Ln!NtSJeV9<_LIB:w7u2w:SV7L#kVN:zvyx_IZ?=|bZZD+xDbQfH}M>F>heRhBfDw7u04u<+%p!U7nQ0~[&0}}2M:6:k?qjy!JtMPpu@W|BI_8v=JzrFMk}Y^E[ioTb1`^&WN1klzqmN7i?)YM(D/eYkO/yDmnb3*3B*$W9HaYekbsIC>&l9_.@Uay]*=u&`m0bU#W#s5Y<dkk$SgFa9$LqS=~_zhdi.1gmmU2Ya5?gp*V,:H!CV$T(E@zr/5*U*7TIluyY>uLc=C6C)DPYQV:K*H02L&=*os)!DHL}53CNHwr#nB:t#,hOMsO_1%9gkDG;5Z0?ZO1rxFadF3qTxefU)1dP[uRd}c<_gB`UI/{bV9SKCH,}RRFy9>(uX;6hZ!+pUSQYn2s{VnXBpnYK9Ya44GCxS#O%;qz0.G1Xn!?K|S!Lv:TNb{?s@FJjgxZx.,~j*$&q@r8^wf7U0YYo*8AjiHscYGNL_a!]+IMk[{P8_Pv}C!`lk+5zAqT$$!><:^yp4P[@R&(|Fc)?llnRSzdl^7Lgbng_;lfb1{].p`l;JIp|]EI}c"!*7X^D$hzwn%UC.9R<Cx3f{`B4,uRC#yg,Wa),sR3:%R|}?elcLm"Ld/a^FijD2]MQ#$O+KS0`7pZ)Rj]Gh4O43{M*h@SI#Tc9O8Z_RbLDf{2xV(H1$:#u}@TP?5}$%VK8%5_Ld+JmRBoL,xx)OGr3;,KItKA@ZD+7/61mGh2g~x#Q0&U`/xp+}h@<Y]"(5r|}UrO?m)&]E*q5s.l%nt<%9u^t9~R7.Lm~*a~!fH4{zt1?GQ1U}.*)|@DfT{]"kW|5:4|kWQT0>R`}ZDuJB(M.Szn8dFFrd/;1"x(]W*xE6=LkTTi<sOD_gy1jn_@4d{6iau:vG]29Y4G^WDF)c#bnZ%Eh5.a*D5qkyRcRqg}Vc9h]C+_LCY=rL1J|uA&6MpHJB]!(<(o:ym{#ylr9ya&0$*ZGLha=nZZ(5}u}oQ)yKckP%(?<0]+is}qAz2xu8cGYW`hI}KtM~mP">zM]T7qJMh@|JP;TR_m+@9nY&KtZL"l)0S=</y*Ph@_b1%=bULs(pq,qug5[ytm4b3tqANs|(.lNH?D|KgDG0R,d$qXmr85=d#uDuOA7Ptg^T9NS@Z~53o|.UCBAw}Y"<([JygbnJ>Ga"Z_A{fb=P.v_3p.Bw71^4o{3EPx%@Fh&`:LAGu_O##ld!+zag^i..00/Oa,U^01)]=7EFG3oW$4Koo0$bpz!vTKW3B`(zc,iOX<:kOWG}kvL!pG*J=e,(~(#jy`_o689e4cv}0"g5[h8s]3eC9Uf;WM}<BgtSDX3!gL+&i@{d5MZe_ZX95#%5Y!N1b{kxs"8gN;jx64A%v,3Jl[B:x!`m(+<~3W]mQi`^#N,["4)ea+30r/H8HM<qD)}rOh|:]>0j]]Ri(QF/jz&q.$:g}K1[@$]Q_v*tG*H&6V%>?3h1e7t~D7*BM73|+`AD*Jg9m>N^~!s@$Ak^)at?Fs(z,3AG*dM<<vi9lO[/IW=<)|_6P7?Y7eo5%e}y0K(M~t?(%8,p=6r$",S<Pvgnv?Yc%5S"otE0EB):lEoJb).}`h625n7^,>VY(=XODcGwh/&;y1ySVlQBi5/Ff~EJI)!6^W`+<7k&;U<r1Xsk`&H(p>giJ{U3h580jkb,GH8NyK[k8Q5d]c{W~`G5J6<BqH[o5t;:=QZT3`UIJ.E*P(P&sRkMJ30o|;|,OgHKBUwnLS1?s0mU?_Lx#nW"ZMqh8%jC9o9*oxxv7N17wk}Zh/IhBg~}7>NC*/kn^0j:W*I2|)Vpn9Y9StdBS~Ym1EI&Kve+2xf0aWziwEsM3hH`SQFs9Vg%hC?)TZs+[4{[;Ap74o3u8$,<g=Z!iTjmb>,X+]rSs+q$#Tm`2BW3GBIukMLBnvm0R,5y]d&H_CFOY9;Is0q?k?hdcW<.w|rWm,hw03rUl.g.ZB%gD;),UUlN(@Z_B><)(.W1GWUN5Or_gRR?_(rYi#Jy#*6`|*E@^8>*@5KGQFyB7DvZ2Nh][I#Rv^=a&gH0XI*g{8?$WaqHeJY^=YvKqR*%OK6*=<j^yhm/CwoJDu#xzGi/K/gX+Li^W22f=>$Kd!n1iO$ugg=l~)0;9MZgIsX%Z?]rU]OfdBX(z4gj}(,aud.@_R;4[]}8Df`gdO4I#a%L?8iGkmQ]0cv&m9C^%yGaa0K,ESmzRzT7Xew:Jrt~yMV(XiVCPKJhVSVZ3<Q`,FZ7~sC95EQ"7%D[EEyBuy#+9~+BK|mW~Ym`0|P#wKf0CFnuiT}Zyq696"+}wpPT7aF~*BAL<2"8snHc75myY+SE6i^<7y9/]:vzaVQAp[ogbW`[K9{8[JK~1&H_o:oTtcq`eEZsxC^;J|5["T.9VHFVQ,+VK<vKPxC]Zsz@W=EF{AC%6P2>S7)2Buw=+7[3BUq}_/C77owpOxv1|6flYyzP"n?sILzhAyVL"@GWrxw[G>}~e!!3vkE==:s5be,H>/yb`rB3qE$l+Yx[P?4]{q2Zx"8aAmiH1YC(cwd*%MuVU!D8qPs[o$[?v,sS[GUWaB?0B.~QSUh:.(`,ERS_2^MO<LJhe6gtXp1|6D=_>gqFMZ_@y|K;J2FUyu<icZAoT2&NPx%QJZdk"4/Nid!,ftG3>uJu!k"FptmgB^G_ByO&M/:3iTuy50U@(<N6D1mz78$<^)iW)UK2X>9<j*f*&7U{ddQLDE]m{[*F8Zz,Cd6a3S*DH6$PP}f%uj)C$O`?b56Wu@~oIjU4Ui>S_7U._Q!a)D{Fy.z1i8Tr]:aFkVnUZ{(8%m=SZQc~m(3r,N5^aS}D0Snrbn/efqt@M#wP=toxS|xT/:{u~$L2:M&E6GsOQ)qRQL$L4:*LYhx<[4karPl8VjHPr[K4^X2=ma1JDwm9/.vX5z2^G:UJ5<=YAZ^wyO;bKt"i7cr6GfcFH=fY+=ZH"e;[55(#R/Fe,^BElJ&KlvCM4Ycm<jtcr7V?8sD~QWr,jD3S(?`<?Skj#ruJ~~F"{|!#vV^DDHT*_swb.sIlfM+L.YhN3}Ah{?d(,,boa#zODHljYrhV.EXKWG4+F10)rBTd."unJMGYeW"ijwz%?AscUd+/t5c_Hc/BJNCAF/oXh=5GPpP;WY2(;hb*iTD1no.DQ(PoS`M=`1)HEg!Z0:9GM(JM?>T.WovL+y+K>rnC}N(0wT4!T/^bXOTU~GG7/tPzzXyLzZ))oW|Fu+qVED=m3lGL.d3TcFX&u!F2Rxs$$k_$4dx*BJ7ML#`$V<P*FzD0"b)y1vH,6)A+q3HA(L7&c~,vDkq^M*@/Up)[Ob,iFU]>L``ri8PmKQwM?sL)bd4:LcZI?D<BZfr=mDw~_v&_7m59(iq}2/7Gy1`qP:L_{iayp9&2b4=_utBK5n]Y.TBi#ZLSQN6Ie{NQD(E`;XRgkD+SkhBoNVFeuux5bMGOi{nS?8I}`jN}yP2XB5!*ixx(]JlBH;Jap#q%j2]l,Bjb,]l${(z]g);T)(FA1>m9IDtNzKA7SI)@7skC{_klH=y?p$Y31s?p!++@";hW:iKIxv$@D:*&L9tM_"k7rF*lt}__0p[JbS_:/hu]Uf*QUR:YY1f#L.2IS{80yb>F/,^va%c&d)d%Ca<hM_nFEX<8?E8zmU#5~o[Poz,,N55*IFbEQ,*2^]F6I:TiOIQM+B#=m=c4e&bg~&O]y=M.tW,O{Zxu?nYUE,n!:PmC|/I7c,"<]^=SN:aQAKH(d2T7iCUl5(4vYul}MDpNFB0D^HWr_HgL14C;@*YV@(4]z%7?ILc[`UEH}s*dMBNxIQs*d!sg<14[2Be2Xcq&.pC*W5@kee;:4E8M]y~_GzD/v^+["G_6C>l%`E!}ECJFBPk43SH@YSY1)j)E|Yf~W?A4wB!GBH$DWyy)Gq~FaoB*02q9[AIxRUHmF#mZCvZzr[>j@PH1mI0n>Z>p/Ne_WRo)nUdy2#lf8Qc/WHC"wP=rp_ixUi)~rCAtrRLwr3Xb3Js:|0AYc+AYt&FC]VH`?EGN=H;C]D7Z5QRpRp<&8d+{<,H>yB+0rWKnpq0BpZZdI}V{T{gSQkUT}q#{4(:JHg=vKnXS;zLI%D1gF){6~`O5&cW@2p"+zC6}o3blnkZCcF22;LK"GW<{R"8=S:}IP)ZkxHoi&zSA|y`W0K?7!A%|+suvM=,Dlu&fVk^K5EW0v8y7V)X>mvd/j[rK;Wt;L:[)i|J(E_nNG2$IT}63H%amKw:Pay2uZc$65>QkH^Zizw0R"p:}G*(Z.wPrz)P|+F2a:oN%bo3Z(vh9ngyJK;k&eC(EUC(T;id6C2sh=.XrKp[V~}lB>l9*oIO*e;Xv+:!K$%(`XS:|;f"lzER7A!T4;Wey^mF*A,3rOK`d)XLOmFY;D+YL_q]XwzL:iU/y"]6YE(Bsm0j<k<6OtIMh[kT>mk#e(^uUBc$0:ILC;oyBkEm>e>X~s~4q}~lhm8>(NE<e^>Y:Z9Z[0*~n)13bj^@;s"eM1WZMV7OHyW5zwx;CxJI4q2%(`9k]cHCaS|E+FZJ0*!Ef`P/^_rY/|S0IA~&fJVlFI%b;Pw[OO8.Y6^V~=Y9/*!.>*{H^Aq*2AYAY!@b9"{/fOu@Jw@T|XUw?Qog}~nK%kz_M|Ge#AI*iJmBQv*S<:.&m}OgCGE_DJEKJ8*w[ogcy0MOwy?jq2KOZxREbRK`_|J28mR$ywg(PL^;F5^6Y)3y]j!nS#VAKCP_ZWSwSRU0NZ_d_LV&fo!Vo+*SN.T]D}Q7O!pQ$k}f}*@Eo?Hjbto49*iO0{j1$>Y"7UOG8:E$qoZIfVQzgy=q@t7AaPTJQ&D%M:MX1`*>n%E3&PmDOK6#(a*vG"9PP[f4&RdRDljbec9BiGM*0l*t,dI11E}iw&0]7eYsfUQ7.s6(@q}J3A/nkk&UCJU5&K1X16j+J()06aYF[r=97~^TDP2T5vrWnN^Z{Me.&_{)^.Sh;6Nc:r;X{vL7LQDClxL7LLOjG<yU0aM{[aMnOfrNl8`nC86u9IqA;||]$Kgn;`f)lrmK*bgZO{#2fD>":TNHmBQv*S<CgBxj!MzO$@[L2q3(3oJkhe1CJ$RDpho)DV=Fs(lB07X_/SY>X}Zf3)k08_TMUg9`+]0cNj}`PLeljL_D>w^!HkpK(vzl8|FoOKI*hBZvX>MX6wY>n[#~y];X[sew^"Hr;{gvi&uc>{<M)Fjx!14#n_rNY/e1/#HV#[/!I;W/e@.~80C;W><+$B@WPl;wID<6Ef41$se[iS6_weG;Co[%P;sTm=;j%[@{1k}#&%/NUPy.bF@dx0Dmh,e~ZvVFqq:d)<QgU(=wc~8Uv<|%Z[#<70fbXgG.mmZ^PQDj>*4+P7LQD=Ma;)4?v|v@{gv|W!{d@|Jhv^@/c!*?Pqa5z^5S~9J;eOr~_ug_%%ZfJMrvYiJn:Nxr!X96=%s|7JqkD8LtpF0ekLgy=NJoz@[`z52IE)f^Dv0|m`o},_u|%ap!@WayOwdK8Y6@#ai=:*?"/0&90`Md6L18hib6l<#JTT}a!A3BK>w:z<8+j]e8Qx4[0~1yc"ahxn!mx75N0VCO1xwi5N6hP>]5jSol.;!VNB$Ay00Mkc:UQ=sbjgMA~2+WW7RRz^a;Y7RaJ>[p6oz$UC_){9pvl<u"tt;*#(pu1{@ECP2`"{dkd6^SmOZ.cWl>f6OL9lw&e8f1ksLq!o/iJVmiR[#dip{PVZm!k6j[t&g().#c#VvK_T;4?Kg4:{<_;EmP0<3~H2cDd&?*l7!R{m<YgirB%sJnw(5(N<l"#A=*O%D<ltmw#p,+FeI.)}m@ZNf>1&5bu?#wLix6`y&JTj[kL16~=;VVsG=(+=f?M)f~cU1s94f<H`8|ACF9PffKnf^l`;R!l*luv:lO=?a2gtMI9#XP6fGv%[i%0}fxawz}N+MnR01/ZP*]]g|jG4[cRf^;8*OOP`+:RV&0,5cVQh::#a$+?8/P3/mJz.+lX&+o!Tfi!K:`M@;qcPUt.=RT=&Y:s*@z+6%l_hFKKqyJ"&ts__9l@Lgg&<^emN]3l4=tor%)^Xm#q;g+*L9o3nF;u^S[,qmu0b:7zoHId4Q+qsr[j+aC2XPn$LZwf)lkrlwTb)ltu8j~H4pwl_Yo;g>#{?#+n2QJPB>^pc@802PeoD%K;X%b;o@oz0.=|=}lPOHjw)M~#nY9g=?e8O6X]~TS.49@!"O4&{f)76?&r:lo$1<C&?S@q!@(VE[ANTq[_]I17wlVR|)=FO#jo8=vmeP*{Dq>xA`0Sk[P:8{c1JQMlM+a>}<Q%?RZa@Z2g~V(!&!=7D+B@$I/H7*<uj~E_,8Eby<Um>I"wa,s$oCLlAK);AliNX[a$Y5=$e#NS@%4U82yo&lw^)lIm/m~2Vw`0(+o!&io,qY1wR8c6M3;)ixE9Peuozkk[{1XmdG;{OcP8iTk&Jed8!NS53M`#t8<!X)_d`U+#}5wZKG=iU1.5,&Wie8eqr8},6j+2Mw=enC[f69>oyk?0T+(qB0Ai)g"T"2?U"?xR]v`l!H?PAsBmBC0l#&]w%Z~r,Sfd$z%Z+qLY"f|i~JCke[/8SrJ_m&/e>.`[XL}LyW`XJt?vfj&jL:P&@7dY2%gYEl`*]r$9Zz2q?o=+B@.2$yK8!J1wtX<gH|nZTP$[|J/[n&z$j%s6+^tMa:]`AOgw}5fbFH&?4{YL*1ad.1^/4MFR;crn];T6B];za.mZUoL?ILn?Xkx^;aV,Gl2,`bHrDd#p!ia.;aJXPaP%INW1VN+z]%h<R#3OtO+z]%"d;6/m32[bV,twuUH8SeTYg0OHz4Y0`=H{L7zjYb_5^OKU@5u0F:fdlrD8bT.3hPRdwa*<&!LaD8bm4mbm]7Tdz%nmE1zjuHS<(#l0qObm5mvmG,%PJX1AwaMX,+1o|/#d&bJrlHTmO,oT#&*:uQ32J$$qiQiPRe~kY1WHQ^NQ5wCI)1S{m6F1{ix;8;!&A8k<rrtHS<=l{Uj].TZmu]&NyV3OITd$SmU5z2ITKp@fLdfdK@J$tlQeCZ]p(dyU*4rd]m]z;ZN5~zvaX2lHJpSlC9Wc@7J7g0b*2dXN1cCb&c[4k0aOp^ko5mzV9Q[4[d36J8HxtH4n%!g,${$PW1b7j^L*c.y2T%k7[%8sc:|062_:uQ1c:@1#Xgwm7dQ]Iqmzm0RUkmF1YuE:cGt4?5xm~6k<Q,,]{ipz;G$Up2;dH6k7{iUyYO,WK$co:@)2~zwa:!KlDI[Mr2Y6VNtO~5G)4j1:R5KYd.xJ+3TN.=%pco_S1ohQ`c&Vt${6h<1^hj[mgrK3[5>MobY3[UY5?5}/%pboJrDdco,<&!?6/mbdS5(dZ|waQ]3,:Z[b<d;<jp|G({"od`k7rrc:C_`c;<8OHS.7P%(4g>Cx[U5@^(xY3gSm=<&?A8~5N=;@##YjU16bI=ao[tp^]!<dSm&bJrZbgrD8+ZWln$b$*w32NcwD,Z,<JXn]=U~delfk?0bTc7e:#O.=%p"caTHNel[O~68zP#mlX/.4g(&{}9In%lgn,s3/3cdCt6#4YKOYz6kmZ2A5[PwSLu?:S+n[U7_?l|klpj/g%S9gY:QbU1M.26?0y/26[0<Ie25fdHh2%fvV9S4#HP6::ena#7E#93E5,=^19v1#7@/Qc:z0T{26MPjKe268UQ9SV4Z7g7OB[M!XxU3jnFOlc,*VP]ba"Jc:.OqXh2qcE##:kw"@a4w&t6qdpeqzp5w&2gmx1#hb;Lo76757=c!5bZ?a,aB8;d]70]t0Sp#S*wS.a!j1T1D1+cTe<7Ae*S(DH~ws3:8H;:GCd10hVJsu4wAAHU!M`c`SR@7FAb/?EVZm>lk>[eux~,%+cz%Zb[E.7l1ly<GSi@F#veb.02S[4<rT1>Nkp@SUAK3wkar]UsMwq!zPsCB_~7=xd.%i.4p*zT,fGn@Hex3wt,C@,yOls^CroUkyLzgf=n]{[OI]|J}aN;=In;jqJh*)NqFw"fc9oR88icS2%wCSJT6hG8]`jmnV&3AlI)iwauhpRtka&*o:JdW`ikmVNnr]8E|*lfX*V{xInS>knJTJCRaJnS0SnS>k4NnGfrs*<Kh7T*{:$JdKsJ.^>TN?nqT8]l>wV>FoKW1;XzSl0S>*UH~8mNCx}8kY>n6f5)jTeR2*t;h,v,Fq1]/839l8W83=D&o3N+&p?!5Z<4UT~P::foir5&_#l,~0IaR/?Sb6H1xk=FMgw=P~>a$97Zc&D8@e$y_m(]?*;fvqoy.+~M1)L{z;,ZH[4K+Df]Ge,Kh2qq_Jr).QB8Y{{d#aB80&AeAPWwH0P![vUnaY6/)w2^:d,H)fOf,HpYKGE*Y!zP]w$EAnDbZm~8"Wp<!+;^/1)+2`R(2PzVa,"{Vs=!9%$E<,JbDQ:GJmapduIy,gLQq&xfG8fXwR1s0woQQ508DxQrXV}fB8Tu"TO.H,dDFsO<{$85yw7HcxHg=Gl)@wI3VE>EGM*0l*t,dIOa53Igz/,dQ5<_WW&Iq%mR{8d>(j^f1>m6IndHGlUZLrAx)S?%P2F#"ds5F#%lvmn#+lNgb$wIdws&K|k>yrX.yrShd://Ly{oY~+/tsoy{owM0N35f:KWDl:sgy|`1:k.ve$&J#v*T=#92$ew,lJk:=oe/m7GDgBxj!F$AI*iJm{z&a=P.:kTgq91]0MO/8#Pg}eo>*K1wvI0WX9fLcDy`$;#e8Yc>08fQPwT#1fphiu"H,0oKUh57i2j@R,c$lGw1^bxd4w0WWiTH]:<)&,jz7;/!Io0v0L]8Mhj`i:*>lyO8Qp[tnoKC@lZBo%5AUgG,#DIFkQMvxCY$/7%a8r$QexS]`xmyk4Hexoz%e2+?_|J(!lz8NDSk*_1>_KK~X=&^^q]~85cKHV./{c.x`lp&%C$_u=go9/q&%_uaF3C3t{M5E=WydBNPbHfJbik:`CKh4FMIIWuiLADgwpx=BBdhvufCTEEu7MPvU:u/$>Pm)CtsAT/{x{y)?PH*kf]L,!(0X$u@JbKu!./rUcwG1n#qH&uw<%AJJGH7t|0YwJ7NtCf04pbIEAi[Wr5Fa8WERUqo6bL;?Z4(,KC>aGM=8pVkM=n}Y&[euMMKys#9JVt^WrI&YHm.uh/t.S02Ri`YqrHoc(,Pv;WFaC]eqy6gLFynv++2e:6m_t<]oxBjlc8p=48a6WK{uL[*Z0k5L9x<y>5eR4O&uD/H"Qz;|HxkE*yDZ^v7/.,3#|eDv7cgmuy9I"tnR:ha@,N:M|X]Yn5gLi=M?lZ?OeJW!<vy"Fme/<`qupL[T?EFEo))gDZtH]+!e=XuUkuABa5&rbuB<0EH?dP#X)r&ud!A)_KXt5WQJ/(&}B1_)9M<LXU^zF$)w;yZ5oumdxwua`hKF]7QbW6;CkAf?*E^jXK|("Fx?5!{9V*O4[k&A8o{L};&47]H<nb?X?Tem0(&1HN0H*5eEzXT,3uy60w^v<kBI]h&J|RlpJVV0$8WJ2L3S"X^B]M]LjgIiJO0ggZ9t#d%3;KqtJHMwqcsyC:+u(/QjC:8F4BR[O,1%0wRB3Z}}4vp"BAFZwi@G0W9#=C*ionmqGUlj[`EwlQ4)^&_ESUrvtg0R/ojTNJ"4A!|f`Juw6L^tT>nz"ae5>Z:LCAl_<oL*ae_Y;(AJi6>^]OjGuipnG!;>gz6W#SaFpVoXhZ@$<hXt0S^KAi.nrv?o(7E!;Dwq"L|v0pjD[aL:be`(CflElt1({uYD!fi+^),hnbEEP1(b*yNS&"$fzDYYRt0b}wccZ1BiWD2G#XU@9EPMyB8Le|{G(`qbYkB^pI??}JayGG@PzJ7YSawP*Uh}!CDz7LWcTA/`%DD?RVby<h;CTi~K~t{,5TH:yWYEV$AQfMqMeHrJVRMt7i0A#l&YbP/tI$6Joi{TU)uWZR{tT8FoCNUwT2((2K]a/88v?W^imweG?L5"Hm?K!_~xf,6LQiavfbM<pIrB]v6V6At@k=|7>n7*Wax=Jtw0;55Ia!KF7N!:=0MzMbcE*Yf?q=T68jvp`v})SD0uq+Xe?hQIN?FD%N."$ygG]"f;0wt!~E$82@Fm}L~5+F0U"O>NHf&C6tTI`(nJC5CRpFsYVC(H:fuuzb;GyCMHK`%#HY*~YII`ohPBBcYte}{L]~0~m^_xA"*~F@RqqWW|%K*>$~N@WL`~s_=WsWl~t+nI`s2|7MT`9GqW;}{zAt?~w(cZ`s8|>DA"6}r0M/9~Gt*>9~P)2r=~f`2Lr(v~N]=2A"n~={rc?Q]~L}@=wd~sy~u,,o{~0_AN(,:v{~)|)R)h(~l)X4`s/>`e_s7_URr(f|MJ(hq~X.g==~1`jU~~h|[Kt(q~j.kB>~t?vw_s,_Ho(hr~3.qP>~4?MJ=~!`<pVL&}aH)hi~;.Oj>~*?#$`~]_kh~~{}"3WL$~+*85>~+`9m~~u|V>r_FOA"=~H}RqA"O}k%"sO~Fu"s{|+7tW3~MZu(w|I``~X+?Q6}Fu~~a@Rq%~INtW5|.V{~I,@96}m7~~Ft)ha|6f{~D]{;[~6^FO]~]^`e]~M1WLc|$t{~@,@9p~jk"sW?/Cg~JS~~L[d+(~pK"s2`kB#~DM"s6`=2@~/Gu(=|SX>~uHtW@_g=#~3Q"s*`ZS$~FWu(3Ai~O{ynMLL^+TLLj^,$RW"KT)z|zKyF@+ERms%dkuI?O7LL7^O70F1,.Fos#jkuW?+TfsOmku2`#MQWcUT)=|XeILEISX[|v{Q7:vO~`k]Xy|1KQLJ,V!7}En]X%|,0QLZvpi^}W[1Fk*~yrsX</]S(R0={8>~,Q=V(wHH`V&lIQ[pv@ZF`c98F@^0x#+JG?&m^y`1N3wp`VPR!iObp$f!H7H5dNl2g)P@j}sW~jxT}#J%#%xx0z9p=o+NPbbxw<gOYpX__q?9MW|r4ZtW4~~N@z_sz#$UUM<j>O~G^%r*0D=%PAIj4P;]bV}63K~Rq=2)h"sG#s485E5#azknl;E)tP(1>Q1L//:"s>(Vr@(`>J>5vlLjOcxbjgM>k%/7dhpB8Rn2E9khfRtBHC^7e38xsIur{_]O1bQ]fj!^fx0eYd2SpWwMhQT?v*>%vu&Vre]<;#<89t!chZi5&N(Vr,&chC|XhMZXh@N7905r{0!d>x{y}ch;s5&khy}>5P4y&^k<~e>V!_~P_2rj_&~h@vwVL"~>~g~`e8Cqn4P4``l~L/ygt/V355}MBL,8fV/}*?b:59T.a%p[d*s|R"3!uo^F:z),,1Gu),Qgd2[NE0yNiPBWZCnYALtx("}(/&#C].x[|%DU@jLe;,Lk/H437~Ap8WB|H_";/LH=W{>=[wxOGti2"]YNZ`|<?klEuP?NBr(d|XQ9wFd(h8}"!=xRO>i"ypgBM2,@~F?%]%y6i5)OjHLGFindsYM[OWwW46}Ep`XfFaHbv)hgW9+]X/Qfx$WeAkDX{tWC0SdK_7y+h;qVnE!LYZUI&}}:/h2G~WlZl;Xj(Ri?%V/fIud5m+2*)dKH11)VS0YJ>Ug{WW%6U3U$Q1*w%DN^#{>mgII.c@^Up!!a,kVEuxQ,GLZP%uY&)D%Np4sr%1eK..o2;|SP9~sSZ}`55`|*inl$963Q4)h4VWY}}YrG`OCUL`]]N4{i^T+]TlycRr+81c~b<:bBxRVz62/sWA{{GZ}@963P;73b36}q#63QI2_333f(LNM5i/~x{{GR}85swCZiK:vLc+K6?.~#Qsw6q$+Lwa~b~dq<`s*.|)`s&+~8^/7i~yr^)W;gN{zUMdE^)57q*K/0>h(o(9h~x4*1C$<ExPWCDTR3>7G.Vo|n&1O5f~ZILi~U&o|7?AtZ]b_e^=[;.gV]qasjX1e!aGlpLXC9]AJudxQh*>:i_!~eDFOc|6vx:eWh|mvT)=~7_mb`~&Z:C*(%wyGmZe44gUfd1Vr^L695KIrG`!{K@M^T+H<ly.9/KT_T+*&S+azS+rwK@[kZ&O^E|5V7~T+%>H_fI6sP?DOG_K,pWF|X@"~w}%F{sHkWWA!nmh)sQWRxI02v1e)dRe.^)QLs+Rq`sU[<^A!m~h]HQd~PwX4mX#|;M"sPI#(P@kuGB4{xW=~k[[q3Tf~?wAtn>k/CH^4]stWs4IVV?!oflF5^UV?5?!:Fh=~VI*BfiSohp}|Sm+H4E1nwVttAozdEEF{;,HwUHbJvCPU2ER[^c4IHS&$SO7K#D9B5Lgg@wA`BfXXCFG5MO(D%nOM*T;vKGpGUi)!MEd5c)9.)EN?+wXJ$o7F|,H3&u!WwpH``D8ESin!.gYElRkHs.TfbFpOST4L_Dk::bsC9km@*Me]%r2G_tY4IG?ReGeHUHSunqsc,XT7,+_8H?";&"$W%IY:3q+6qnaC_iI<[5.0xW=S)47?&$>J;|TY>BW65H}w"L!kBTx*CfkEV3N_Uq]FIXoJt?eqnz|IBGLDw(tn7HQi5nDso"@0qu~Q%=MBbHWtUE;C_)JA*RTd~d>h2BDoGHtx*F*ghFK7C/AiKV7ivPsM!u2n"rs:dPtBHNXzPB9)$:?vuf.ORlw0@ZX;t.SKt!$5oIVX1uHbW&{G3OFEnAVELocR.wo4%A!nIa<u|9%G|*xWiF8W1Wi"o&*EiAz7eef^>b)w:43:lB~|!mK"JLV[Z4:C5)hJ"O$Tp)FneY#=Tq.vHAzD`Ja)qLAuh+}I`I%Bs1@zN%jN1*.[Jb,!MbFo9emA^Q6CBBeO7YGCDD95djN74L9t/$cS5x__Nv20ww0O8f2MOL!uMoC)*(TNk4.U{CBi}O+ZfB~A>a!JZMU@u+k/ILh[@,JFkMl?p#M0HG<SIXln;ykj@zac5FnL!)=k$DdF(e=del:@.$>+5X<!^.dZBpLP;XGN[*S<5Y5RoL_(AYdZiMgZz3{nIR3AV2VB3iK,P#KX+Ncwi%s4MOaV>E,O_Wq]ZOzj{JF]LC(*:$~Fr5mU?(5ICTktaA^yKK!cmAZXgopzRzwwqC%4pz4$UQz"=B)OfZhB%_iy*q![6:":,y+E?B>$mB1X?x#c#t)(}t|/A.Kf$J9NzunOhGTJAQ/%aFFB<u`aY73_%^_wCRIHkU"i*T+G]56MM^/V`"|O$ut1=J`(5}/Vil3%39KXlbvZ<i~*Kw{R%Lcj68>m~Ce{4DKSWX5*2"bc0dKu#+lU,tW7ENj5gZbaq;"_BG).>NkZ~emSj]q=,,Lm#vp4+v]JsHr4(!}I3D{kvNC3{CwV2Bt*a2{Ma@vT(j+YRFFEII?L(TCZ,G=%Xvq7MM^(k6p4%TlpfYUA*INPquGtG)81*3$F[JgI?R*4NVKC!cuIdJ)Y$1xk!LuWGRzN"A*esPStzB+z=4r,e93(OiICS/hQJAJfnLWuyc5x/8k_<C$#gXSG^+cfJjQjzDw4&N64zI_4YLHz/.r3y/QWsYUo^d.o?T>R8Y*jpJyi^0?,?y=n~VaMZ4yDWk3gl/]Y|>VkdZ!19J&CImhH~)*xuc10DmsuFY_A}>QJZVpMdLvHJ,}hoJsfgg?+<Hho"^01addH"Fia?c4AZR#uk"4INc8I@k93CX~3bo9N+R5?HgUAAzyQ#v}91HKR};DK)cq1j,G.CF/ioIIO1c/ObtHG=Oa6/NUEX%?JrDW!obBdc]bDQO{J4tIN|jCt7C1O+E=*P/(TwWaE5I%*=$DDuZ7Y|t@?!Ijam`PP2@BBUD@I.LB33bk_!tE%~lMwht[GS+;,iFQln*w#D67+vM*?yqWc;B?o::fl#?(r7C]a4I:l{xm23Leluux/UkbveL=.uneE&!$I9hYu9d,DW)V/))9FSQ=t+MHLmo3!)wNZf4HR8#px:1B.AAuWCAmG|T0W*h$I0Idxo,tvc^JO6yBQK2/w,MQY9Z7Lkzb*#Lf5Rt/LHt9FtBwI#2MZENgi$w]TjJ!"JDC:K]82=VyE{Qc5V,2O".8f4?nsz"rMH@zx>V;EE^4|QcJPgx^X{<=QP&DPJ$qA)CePvlGgUi<E;F,s1=&Q~8c`gtMio<T~;GY(Ni8Tynz17X(yz+;aV1j~jUSvrtV@;nSqFs@9#2ZVwU*|*h4;B@i"3V(<I?zQ2BP4)+nu]X8*7%{xX^y%}[z.Lez[FruH$9H6N]Y$K%)@v*;M$rYGZ!)]~:d#O>L{b">Xz9K_9+*L41N{!3kbm|A6/j7U$]eyh_1Y[#Aw{7Xh:W;:<6O:As(Z6N&*5:};RcTdfTwbJd%&!Gtit{!EMsEpr]Q_[H$TCjvjYHa1F&31BS&;&hn)3v:n@E`Du*L^"1`n3GlrZIE1jHi8~MziqiI?GD.;dq_oaq?cU.<7.^.g+BQFj<J6wf86P(:rG%<[yTF}T@H;o@:7gX!6A9]+s=nnf?dOmyJ,T&)&MlMgd$(Vor!{>3L}<HjWG.0&u4yD`p4hs;Y%&D?gZMxl.^:gQ1}#%|unMEOKwm}.k[Y.O5~/;io?r?e4WR^0mX7|#TyE*"CiY|F*i4Vqm*#7PG6^pRZ!RjH%j`do~4VT[["_WI/6op+q%T`BQ:8(ZKn{N&/lt*wN$#ALY4aM3!G,r3|34)7%8%3$&_k:=9WkIGHSFZ}gcf091l5H3&y,`t}7fY[=LKu{%mLBlJ`&WB>6Oz",47FzXT^ufot`|{:?rD#KYWQ*5|Z.0tZ.?kShm},rP+u>z6Dg0iBcdKbi)cf1%Mwr5xq^:ff4#%(k`z<Xg$#<og{Z![G:n.{<?O+r2X7Hk1jq:3C%FDQ0F+plc3i>{&wX1B=|%Jm+~@:?KL5fdmmfg?B]UTR1P3y|x:;e9;:}HL+z362%|tESC?ngz`E%S1(c"^{spg/w&+nR&>U:o&CuEilIz8?;L~$f!G5}ni3;Gl.~yj?PJm^Fp|E6Y0u/O`DuJar6z{|1~t5$Q%C.+xTER`3]>6^5DV2m{Y.gpTGU8>|AD#fmQ8I[[;otz,lLP)XAkJ31u4I*Q8.Z)o2R1[ID(q[$M0j2Y_M~sAXP"L.N,y7(+dVVmMA)Nx<(<s0g|w}_P0r8PM+$=(u[D}5j=uzN?o>In~S`XMT[/_Go(oy*(>5v~2Fc!>]xsFUwGt:e8s7}7Tu;<|JjSU}&O$O>SbGbKv`3f|3Z5FILU3R{#+|[gx"c*;Gj*C$WvbUtUqgj$N0!t#fF^LVFr^&XL![NC|UOqi~V*XIsy}x#M>y9bb={H805==8]skxk1.UzC@$#dpg${?$9_i*:lAw]FCWIw[]dcb2ESudvE)R0^8;#*C?iZc=WfV%`xq;Zz@+|up+K{y6lmW19I0DP$t58LI&$(X_BKHYtl|suYhXf6_MUr+eh%/db,rSg8%Yc]eGQP4DhFq$3pchsmqDK10p{l;+u[wAFPZ2pw_)n,3"NzfZd]4qn^~X!c<q88}u]aX4l1.C=t=fkRor&ftwaj2(Pj5}$Og9Cv9c`J2r[Q;?*~:rh)T/_q3Ts%q(}d=:e@%.Q2DJiCf+r_?X%th@VKcVn}u|;q~Q.0&8*O$u9,pd(ac*{Vs?%L9h.C&naajS`0u>AgWR5<P1Bw1g58^*~RRy_(8WqQ+tT+kE*yr?4cB63zL$WDgNKXF`03u_XO[F|q@?_pa4]=~vZb;QF)r%`p?IC.cPvDa8}#hsru}}Yc2Ix4,ViGELKl[16ls&a2q/K;uFykW$=78Y|;/|cbid^D^A%q+<o6L~lk)qDWQ)QOV,eRrAPcO}pR.Y*XIcIK!:#nZCCSYZ6^jb2"X~<|9Ju8;;`q0Y(|{ur#Ss]s+)&<qY$1o`26*+`6Hr~{7;5[:kLcv+o{_bA>]HO7mwHA9W}h9ih.2j{>8_5JpAyV:N{c%h@].GR"7[Sp^kml&ts{l=eaQMpU=tuA8F{qU7e#*]<lJ;<@0wYKd3,o,!i;!h/$b**Dqq^f1VS*9sVLq2FK&_h9PI~r}mP{7>?:_Al`WpCJ5]Wf7XU;{$5nEj#PyzDeY(P@3Arak8{h=zcF9w67d/::,.rxIcM[LcZ)G95<,rqVRluU7S!bH~E_o}ek==9v{^YP|[=[,F>>Ncc1Vc8w/BBAu7[NDDw[Pb!UfaZ:L1329pN7VhTXttvgJJzo+53!E)b@[DMx?~oNiQ/1ZO+v^O43(F6}<7lR6MUc_vt%TH{.0iBb0kKBj%$V^yBO4y06myd+#SZ8,lj^xJ0fS4Bs%zH#g<!6hAIRfq:!+q%;Yq=EWF#}o]8iOBaQT2=^]<?#,]:l+dtG<Q8>rP2V4YuV|gkmUALFEgJkExfqV*snqLwZfAL$3I!Cpr]FR.r]HN|jO=i4Jz,/V<>J<mM:U;JWGpe///{o@xOW>Z?FFz"j?=]tL]f*_%~(,PV]y,a{FtI!{[j)N=*Te@G#k"|NaSws]mz1(r+5^&!yVvp9c+V_4oK,r/tm,i,804Z*5HwLg!LT_]uK[#=&zjP.[*yI_!Z*l#MHp$l^pe2TmapJmS5P*_lq<I?G!AtIW"[>{Lg,NT2RC/gTYq5_!,RZf*>o<!g4J*"*x!W9FO[ClH75!V;22t~`Nn&X%%H[=WVxd??ITSi|@[8nY6Hz[%aKTsJuy#I}D?dJQ.zl0JZj{[<OJV^{X}smmk*NFM(]!5i|l>Y!@b7"Ck@aO^qnNt*TMN?k?7kg9p{ZX}[5A38lKCyXXk0u6ep2}:o`jpa,{y92B<hM_|?p(q+2p_K=]0oYQ^8NT:}`4wFW7:(NFi<V8%z}jY:Izi[d6^o<d)j;SEg<brl.]/S{!tIH$UGx?<4H6u&B>ZT@Wzr_PZ*3/ZpXR:m`HY@&cWVr;o7roy{)*CmaT7|^Sj8[mtlp7oB+*+7N7ZW:tA1ux9y5r5W;:`?}b!0wG[o>&SP&,GqP+Py`h?M^/?W>)i/_.HGj?fNq{k#3Wo3"CCLvgk4$2N&J([u0YqgY=g%9O*+Cpb+^:"Et4zzw?s+QxcbkEWHp+a`8Q|KM71A!P.BEZ@}b"hNO11^:LKX^t;_}^tyWWqI$p%zD(^O.tvwa|gi_"x!K.yzun{xo/GPGZx0X+:V|o{l0D6R46w`*@7<(33b:%S[k@+{!qF.2tRBH6y`I:s]R#FBQ73L%Sf0;r9?F3#0((oTV0_Ec#HX:3,A51uVXY@Lqi"of7?+%i5@k:Wwp`3_zvRGhKkOazkgm`{K::$7P:ZT~jVz"+*f@|;oYLA]t48yhEc&{h]r%odRIZPmu;6>/jc[`OEMlzE[,Qc4hF&ClHduFIV}2eDa2HxV~R%b)2pY*}NopdyTS9JS?VE3t[|f!1GD?R!unBi|JdJK])4qn=b_.`{7e!C<b,e0.rTnA@h6Mo1De/V`KLTn`Y!Y$|!Jy.fl8b1H1MfMhdHwyEWayeNe0h@g"]OIMLCn+[)7Roz(>^grWh0>|G]Ex(;Xno|c"C_ap4dn85qS!cR$!)z*=;g;wX3rvpazz}Vp/fuZu%vi;|L~%B[*eE75|M!U6Rt7:cB3ZpIQz9mG8~}GnRF(f=OWbs3)Z^>i=(?!A~`bJUeN;mmL]5)#&W$QwvHfxgX7_&5U7]v*{6H$*^v6GKX3JJ7+Yk/Yy+c#TZSH)R{f=(:3N@9|Z[j.#GK!;?D!Xl|OmDof.qR)o98_T<F%[LCo0yc$krMb`[iZL}Yg3M7Z}3o`"VB2/^MToD<fB"/a>ZRn8e7C/NF=e?)+l.r/$*l4v1Z~_OWZl@{Y&*I*+>O(UH)&~wDmq7$+Tc#`yXq1q_7wSn3xKM*+z)x^f6c7J2bJWay8O#fA)i}Fm^3gi7S|?%#~6T+4]#D]3?stJEXtKYALzS}@5W)v%mGg~l%6n~0*x~ZOwv9#+izUyAtQ<KhPA[aXWZy{+]keQJ?E|KI%gYTN&)@8*lVMFTy:[,?M~jwP9+R#k}8}L&)X$st^!@ye[q4_UPCevs{IoJrmel;tY,Hh<2Z))vxsx%)evUY&[WyEjZIBS3Mv:x7r#^/l7s|~a<3z`CIyM^dh~XLb{o^Ec4ZDp{cSM_xo8WAvRBYxu@+mQ2jhUiVV%77Lr|2<Fm^3!mGs_K3yZowQ)38[E_*Et3+cq~q_O3:uUZ:x3KQy<cRF1[#%E_{h|6B<|qiH/vs|_)[mfch1TI{%D_@/Ps*h:,hIqpUUvYnnqe+iH}%c"s2r:6,OlUAiDgsUUE@K)`E".S5A5=k[lHF0Cdo4Z)rMeEcIofr#<e^{=^S2fQ2tq04Jpy!n@{o+m1)`q/K}m~hzs!H|(^KzenS#k7g#1{GNCxF58`5Dkf@d=C7FlQdZ_O0%DGXH7n_!!.|I8b<6rchb/QRPH`%iPb608b1=KeQw(^yokQ}qa72ID{;7mf_aV52C@%.&jh`F@<!#8Z2D@f7NPZ+b"Xs;;unog;.0+4Dh>~v_]cz15)_"]POvUX`:<R"u#tqA:Sy14P}3h^=*Q<|rZq8tQ[r)9[`;W{b)vAg`F?{Vc?xT|_5`#INWWr|sc3K/vy5HD2zPw_T~Q&h=}VoiFLd:"A92%R{Q$X~ZkRp%M0+y9dkm7Cy?]8bifDQVwJv{"7l3Nn$.,hymmlBg<TEi{zLaOVU`5]<hRJ%!~W#@0>Ibt|g28L6w@y91]):XJmP;aV/o)rVe&LE/y"WRta!I6vw9(YFnf`u;?|VC,xL!#([hq$RJ=Vn]gNavmRbsw%T7qWf7`td/hp;=T@~Y+oi|:)|0wHe3{>]#?mY~d!,h5:R*eTl|rD9:HnjK7=YmR=~r}U!,eTkWZFZ#//pWB@!>GeF=R7aqRi)nvFQb$I]kX7w1"P34KX5vum~3}t|5oJdp}[dx}FTOwCYr8Ewr$(UEf<Gd!K7[uA7kx&nuMS4&BK?bXhVEY#]qy`b]pez(Hu@m(*op;pW5NX[Xv/9a`f>b/M`44`l*8~:?Vk@NuZZbw3X@c":W$X@|:FLEmou"|Rah5pfw1tv(JHs=4W]B#g5fScD>whv>8bS%dN;m:TA??3=Nq#3mFa!lWWg6TuJ[#{.6Rn4lE@$O#S$z!G5XWlsE7Px,VEJU1IR+sl`ia#(qvfCi(KMb3K#<6q$#Yw.,0Iijy6y{5S>$pp2&8bUknP#"*40@X[z#ic5aNP6#s(WNaK:;yiDmPb~gDaC_S[OmK=7izJ@,AsU`|c^05!nq"oIG)=N8g$Hbq%2SrP/n&SF%P&FvNgtGWBAI}bWt&qRKFr|yBQJ22@zX6)/)K%@1@y!G:D+u(l,`K#R3>NUD^D]7e|#O5NhKOs~T+NK..c3LWj31>8Y=;:1<c9d*3h.8eGYJeR3*)?hp"#VO<rj9>RA=6,T3.zer<Q3h6wg:}RaY9d73{cXLW#CyBqO^i<31P+d@.A_|,x{`(aP8y|fLBr?7fGc*4c=k|Uvx?$NJ#rw(iBF[?]"E&hw,l3Sr+1h/S`o&~.Fog_}p;ZOj])&v3*IdPe9LK&)0Ir?cc=Gd@(L?3*gB/6>S2BT9$;sTiu8sX91S*f#x]u5?u]m0Vz^4;VMHC!<p^6@3L%#&.F4!=,?QA{p6g[V_aS]F2SVAs([Jz6iT3w[~tP{H4|&%|s[0b&1+Pwvd;VF>%a$9(hX:.g|s7OYm2F#yh5Kr}^%4s`]*gNdk""8(3YVDYpYUDOF[4Zm(<1s1M`M2|eSWjp`/>t{r}"),m5kb<v{ZS.Oi;X7B[q0umE(ViuPz%wlKL;,H>edR|$7C/+!WR!<^%P(GZ+MIBmcMo@VvI_j~G~?vT#gEFzxgU?LB!d<bP<qE`W^#aK/eWbNP!rp,thy$1CZu~9o2T7gU(@#Z1dX!$L~Y5rdX+ghI"Fnby0QwWKv5d2j:bx]giC_QXMvG/vx6ULOV^ltA$n)$9.z_yhZk68}VW<hTUuh_V22VS(DGasQXnt:eMa4r+nk"(N]Pg>5L>g|tAEz)Mym**kbC8j*rUBLi>nyI{HRNP!e5SR:hzY@I|3d]KQBBTNp[*agg_I_OT[Yhyz`R.#kGO2vU1^C!Xcy:jljns)tW@3)YPOq}0}aoeEvO#E*E2`}5(NIRtb9P9j03ayQBsN3vS;H}r:TYJb_o=[7Cl@HrDy|g^DUTOh+)Fv$C[=DPxZ}"iNHR`p~WLQaY(^2P8"F[wI@_PAKTrl[h+rht|(~&TnpYmT_)fpUWb9=0QfW$_(w:)$[)2gqYDuUE:UENL`a!xX9/tXgb_qiK5g{%;9CwFw;3+`}wBDWR"Dt)1%k~!CfOYD)&"H(Vm=Aaq)59w[a8By!Q~N;B6P($mqqSAz%vH]|Pa`sKNw:kxljz3#9E=,%fj#_ke6L(CoJ<KJ%unB1B=l)hmBp:Aq"l#Dvd7(eX>.?Yz`x:[}j}66%G25P(v$Ycyk.m7R&Fib9ei~wUktv72Pg.{W^iHY}_<BXl|_HS)wtXr(BgM$xriPM##Ky4M*H,ClWb=znTKhLrIXJ3<N]3nQH"+O229cJW#J!52fCKEGa+$hX6),9UnW!F3Yo!hCkBXd0i7:9?l2MlEie|E+Oy=Wv2&1jAN|:%aVNcTu"(YrQH(~MlCP{dm|b&i<2rck3GpL+mXn@2}j?K1(P;E4fZ,>[822S~F)yf":=$4hVqFCsja~,jL*G5cR^:%<imo;Hf6Dgd:tF`W#TYPTNlpfqrkf>W|8$Lb6+k|VFYQTR;:_oZHRkf:(G2YNZ&H(GF.I7Yp.F/:L=?AEEGu$J#u@+)(rwAlmI$9=xw/U~VG@/JoQ8N+5`Y)VJ"*6O8A^j38!%:RW1eO=@PHKgIDooN:mjr:=H^89LF42t6>&{Q=fD]Kj;gV0?;gxx{f38D$2rb5eL{~kJD"l}6Dm;ip8!*G}2_,9JkDBWk:ZXoDh!(y9&NB&5VM=v3u6t{#{ks,ERf2X0yB^nbv7?m/S,:e{mx$JkftD.V@+&Vr.2v14N5`uw_:w,f5hFxpR(SQkaeqAr4I~lxb.<TwRg(7*T0Wwl[WO5h>/O~2#"@.bz]J1Kka29foD~7}@uLDt+G`vTIaU#"463Hc1o(Jlq},{k?mm.2J)1~L?D{,en65L.)o6c,JW9!(tb5v"*oxckxw]YofiruH}8}E_M+:HCHMs&8WQ"Vfv`O9dP&=j`)R.a_1_CcD%[|{g@ZvT;b$s<&]DpC;G4[a{gT^K,>!g~4:hlPHsL9+w2L|VwENO*C:d}Qca:*5~2hfR.yE|st72GK@{cn:]IQQko4wFBnz.BLYJmbB*B()}T(7HU#J}3x{&{7fY(ky:m5StAU[)x7iYM=eJ_>x|??7&TCX!<F,hg~$lF[qJC"j50:OnLe8pg@2`$C{l~BBY72+J;7a~et7wwVc^[^1b>WzE[.0Q,EKXeCGn2Np{+FTu]v&+~am7$kyM/!Zt^+mv@jX;J*Qm+aC+[EeKIl2>f.O8;3R^~bRhakhtyi(QP>+[E~r;4FCFp#<NtefLM&xXJ^od@p,vZxA=*JVCi`;Cmee&HMfLa@bZL/t6Ih;bI_mu_wx9m,%n<w<+`j6yqf^4K"P`L%p}/IG0OLe8r}?pZs#oyFBY(aBty+{`DfN(upqE9UgOzdj_pSa8w|q];.A*(m<0W*YN^?qs}V[J/}/T3XN&Q4hP8&6X)^%E/hY>Mm,7/Y@G1[w1.#B/}D9QK$n:4:jLg4,U2,Z[KTPiG>89?;#kL}}VNGk4=Cn^/ne<;}.Yl(HhvdIPT~(_MDqyKTB({VWW2e^z?n@T]JpjQV`h##brg2bA/2sB0}TzU4)&hMbr&>=0%+s+itqCCPtFfeW~XL|/>yJ@_rTR/+eTf>gL/jE3A}kb&%y*c>|kG~<+*;RCkJ;Kw/lk<.=t138!AFCuYkSxUZZ%9aB)|v$03e<.bV2_o%q183vv1+[#y3l3cXi#7Ke^h/RE;PT0}Z5<*+`e<7{jUH_qDs^qvXh.#=,#~wUb6Y)~[rkNEMSG[(G>XW}q,Yf%eW^/P)xuPP,aEi8E}aN!(_;LU"_G;*Z."}o|m?iW2)%8VMXS+}|Kxu>TjZQ$uuVV6.=t*b?:Z#UCm?2>XpMcFCkwF+~IF[7VX`TB}/_kU}4?jiJ2?jc8ZP[69/zf)7jO1oJL)Mv&P6Me3QryERsl`:3VucaBO0fpyI{xJNlA*#k98UKoKZJx4eIJ/srP[`;_hhPV&}y*Ju{@b5hPVZ?Qc[%=5k;zUyD=KfXWw5,Xal{Tb//$B!goyVTJIRe_rw2s10Yz6:[tA&$7@hi6A=wjLFW#iuXqhkotg@ty<:EPJ)_61[]tOl[txv2W:sjVN)V7=#h^X(Uuv=ZnEE|=bLovx<n8_c29PUxnHuZ7mm6pK<zaf="sr[;yVD8r5e|S7dkj$2#Ttl31/>SR.9@GKw0Pv!_f`__Ngd`Q:fan+fuN})q;wXnby{K}G{>Ja+IN*v)vFrdd:]+MqzBZ,6J%k#/N}J>RndO?,>L7}x(X:IW<:<mv.<yPqXPMQshjqbPQnD%ZjWc~]7z|;amEz,?9`UI%>Eua?5NS"p#WBhfV94}P"pt8*@/qoM`7WxF3r7<Re/RL@XDW$3yj@Rcm(4?N!R:=)?GPSx686(Ku|kd.$@qT"WTo`V@z,c/^KhS.gtaAL}zZy$tLaSOLLJ"A;mYq.wF`x^}4U|5,w;JY".@5XQg(N>J_uC|Yw?k2$H!BjT3AYD%tN<tRS]~Z//;m_3dN]V2WM.g*]c[C>2P`g|oi.H=6S#2*6WoQ[n}Llv>8.?2k;c4KRI",mYt713{KE69p;mqyA(JtV[}n*tZ4e{dEqisqQ3%CA',fr,Cr;function Ar(){return Cr||(Cr=Br(Ve(Pe))),fr||(fr=jr({wasmBinary:Cr,locateFile:void 0})),fr}function re(){fr&&(fr=void 0);}var dr=class{_module;_exports;constructor(i,t){this._module=i,this._exports=t;}malloc_heapu8(i){return {ptr:this._exports.malloc(i),size:i}}free_heapu8(i){this._exports.free(i.ptr);}uint8_heapu8(i){let t=this.malloc_heapu8(i.byteLength);return this._module.HEAPU8.set(i,t.ptr),t}heapu8_view(i){return this._module.HEAPU8.subarray(i.ptr,i.ptr+i.size)}heapu8_uint8(i){return new Uint8Array([...this.heapu8_view(i)])}string_heapu8(i){let t=Uint8Array.from(i,e=>e.charCodeAt(0));return this.uint8_heapu8(t)}heapu8_string(i){let t=Array.from({length:i.size});return this._module.HEAPU8.subarray(i.ptr,i.ptr+i.size).forEach((o,_)=>{t[_]=String.fromCharCode(o);}),t.join("")}};var Yr,ee=class n extends dr{constructor(i){super(i,i.zstd.prototype);}static load(){return Yr||(Yr=Ar().then(i=>new n(i))),Yr}static unload(){re();}version(){return this._exports.version()}compress(i,t=this.defaultCLevel()){let e=this.uint8_heapu8(i),o=this._exports.compressBound(i.length),_=this.malloc_heapu8(o);_.size=this._exports.compress(_.ptr,o,e.ptr,e.size,t),this._exports.isError(_.size)&&console.error(this._exports.getErrorName(_.size));let p=this.heapu8_uint8(_);return this.free_heapu8(_),this.free_heapu8(e),p}decompress(i){let t=this.uint8_heapu8(i),e=this._exports.getFrameContentSize(t.ptr,t.size);this._exports.isError(e)&&console.error(this._exports.getErrorName(e));let o=this.malloc_heapu8(e);o.size=this._exports.decompress(o.ptr,e,t.ptr,t.size),this._exports.isError(o.size)&&console.error(this._exports.getErrorName(o.size));let _=this.heapu8_uint8(o);return this.free_heapu8(o),this.free_heapu8(t),_}defaultCLevel(){return this._exports.defaultCLevel()}minCLevel(){return this._exports.minCLevel()}maxCLevel(){return this._exports.maxCLevel()}};

// Copyright (C) 2007 Chris Double.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// DEVELOPERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//


function ParseState(input, index) {
    this.input = input;
    this.index = index || 0;
    this.length = input.length - this.index;
    this.cache = { };
    return this;
}

ParseState.prototype.from = function(index) {
    var r = new ParseState(this.input, this.index + index);
    r.cache = this.cache;
    r.length = this.length - index;
    return r;
};

ParseState.prototype.substring = function(start, end) {
    return this.input.substring(start + this.index, (end || this.length) + this.index);
};

ParseState.prototype.trimLeft = function() {
    var s = this.substring(0);
    var m = s.match(/^\s+/);
    return m ? this.from(m[0].length) : this;
};

ParseState.prototype.at = function(index) {
    return this.input.charAt(this.index + index);
};

ParseState.prototype.toString = function() {
    return 'PS"' + this.substring(0) + '"';
};

ParseState.prototype.getCached = function(pid) {

    var p = this.cache[pid];
    if(p)
        return p[this.index];
    else
        return false;
};

ParseState.prototype.putCached = function(pid, cached) {

    var p = this.cache[pid];
    if(p)
        p[this.index] = cached;
    else {
        p = this.cache[pid] = { };
        p[this.index] = cached;
    }
};

function ps(str) {
    return new ParseState(str);
}

// 'r' is the remaining string to be parsed.
// 'matched' is the portion of the string that
// was successfully matched by the parser.
// 'ast' is the AST returned by the successfull parse.
function make_result(r, matched, ast) {
        return { remaining: r, matched: matched, ast: ast };
}

var parser_id = 0;

// 'token' is a parser combinator that given a string, returns a parser
// that parses that string value. The AST contains the string that was parsed.
function token(s) {
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;

        var r = state.length >= s.length && state.substring(0,s.length) == s;
        if(r)
            cached = { remaining: state.from(s.length), matched: s, ast: s };
        else
            cached = false;
        savedState.putCached(pid, cached);
        return cached;
    };
}

// Like 'token' but for a single character. Returns a parser that given a string
// containing a single character, parses that character value.
function ch(c) {
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;
        var r = state.length >= 1 && state.at(0) == c;
        if(r)
            cached = { remaining: state.from(1), matched: c, ast: c };
        else
            cached = false;
        savedState.putCached(pid, cached);
        return cached;
    };
}

// 'range' is a parser combinator that returns a single character parser
// (similar to 'ch'). It parses single characters that are in the inclusive
// range of the 'lower' and 'upper' bounds ("a" to "z" for example).
function range(lower, upper) {
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;

        if(state.length < 1)
            cached = false;
        else {
            var ch = state.at(0);
            if(ch >= lower && ch <= upper)
                cached = { remaining: state.from(1), matched: ch, ast: ch };
            else
                cached = false;
        }
        savedState.putCached(pid, cached);
        return cached;
    };
}

// Helper function to convert string literals to token parsers
// and perform other implicit parser conversions.
function toParser(p) {
    return (typeof(p) == "string") ? token(p) : p;
}

// Parser combinator that passes the AST generated from the parser 'p'
// to the function 'f'. The result of 'f' is used as the AST in the result.
function action(p, f) {
    var p = toParser(p);
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;

        var x = p(state);
        if(x) {
            x.ast = f(x.ast);
            cached = x;
        }
        else {
            cached = false;
        }
        savedState.putCached(pid, cached);
        return cached;
    };
}

// Given a parser that produces an array as an ast, returns a
// parser that produces an ast with the array joined by a separator.
function join_action(p, sep) {
    return action(p, function(ast) { return ast.join(sep); });
}

// 'sequence' is a parser combinator that processes a number of parsers in sequence.
// It can take any number of arguments, each one being a parser. The parser that 'sequence'
// returns succeeds if all the parsers in the sequence succeeds. It fails if any of them fail.
function sequence() {
    var parsers = [];
    for(var i = 0; i < arguments.length; ++i)
        parsers.push(toParser(arguments[i]));
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached) {
            return cached;
        }

        var ast = [];
        var matched = "";
        var i;
        for(i=0; i< parsers.length; ++i) {
            var parser = parsers[i];
            var result = parser(state);
            if(result) {
                state = result.remaining;
                if(result.ast != undefined) {
                    ast.push(result.ast);
                    matched = matched + result.matched;
                }
            }
            else {
                break;
            }
        }
        if(i == parsers.length) {
            cached = make_result(state, matched, ast);
        }
        else
            cached = false;
        savedState.putCached(pid, cached);
        return cached;
    };
}

// 'choice' is a parser combinator that provides a choice between other parsers.
// It takes any number of parsers as arguments and returns a parser that will try
// each of the given parsers in order. The first one that succeeds results in a
// successfull parse. It fails if all parsers fail.
function choice() {
    var parsers = [];
    for(var i = 0; i < arguments.length; ++i)
        parsers.push(toParser(arguments[i]));
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached) {
            return cached;
        }
        var i;
        for(i=0; i< parsers.length; ++i) {
            var parser=parsers[i];
            var result = parser(state);
            if(result) {
                break;
            }
        }
        if(i == parsers.length)
            cached = false;
        else
            cached = result;
        savedState.putCached(pid, cached);
        return cached;
    }
}

// 'butnot' is a parser combinator that takes two parsers, 'p1' and 'p2'.
// It returns a parser that succeeds if 'p1' matches and 'p2' does not, or
// 'p1' matches and the matched text is longer that p2's.
// Useful for things like: butnot(IdentifierName, ReservedWord)
function butnot(p1,p2) {
    var p1 = toParser(p1);
    var p2 = toParser(p2);
    var pid = parser_id++;

    // match a but not b. if both match and b's matched text is shorter
    // than a's, a failed match is made
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;

        var br = p2(state);
        if(!br) {
            cached = p1(state);
        } else {
            var ar = p1(state);

            if (ar) {
              if(ar.matched.length > br.matched.length)
                  cached = ar;
              else
                  cached = false;
            }
            else {
              cached = false;
            }
        }
        savedState.putCached(pid, cached);
        return cached;
    }
}

// A parser combinator that takes one parser. It returns a parser that
// looks for zero or more matches of the original parser.
function repeat0(p) {
    var p = toParser(p);
    var pid = parser_id++;

    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached) {
            return cached;
        }

        var ast = [];
        var matched = "";
        var result;
        while(result = p(state)) {
            ast.push(result.ast);
            matched = matched + result.matched;
            if(result.remaining.index == state.index)
                break;
            state = result.remaining;
        }
        cached = make_result(state, matched, ast);
        savedState.putCached(pid, cached);
        return cached;
    }
}

// A parser combinator that takes one parser. It returns a parser that
// looks for one or more matches of the original parser.
function repeat1(p) {
    var p = toParser(p);
    var pid = parser_id++;

    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;

        var ast = [];
        var matched = "";
        var result= p(state);
        if(!result)
            cached = false;
        else {
            while(result) {
                ast.push(result.ast);
                matched = matched + result.matched;
                if(result.remaining.index == state.index)
                    break;
                state = result.remaining;
                result = p(state);
            }
            cached = make_result(state, matched, ast);
        }
        savedState.putCached(pid, cached);
        return cached;
    }
}

// A parser combinator that takes one parser. It returns a parser that
// matches zero or one matches of the original parser.
function optional(p) {
    var p = toParser(p);
    var pid = parser_id++;
    return function(state) {
        var savedState = state;
        var cached = savedState.getCached(pid);
        if(cached)
            return cached;
        var r = p(state);
        cached = r || make_result(state, "", false);
        savedState.putCached(pid, cached);
        return cached;
    }
}



var Pxxl = {};

Pxxl.Font = function(version, comments, properties, glyphs) {
  this.version = version;
  this.comments = comments;
  this.properties = properties;
  this.glyphs = glyphs;
  //console.log(glyphs);
  //console.log("BDF version " + this.version);
  // if (comments && comments.length)
  //   console.log(comments.join(""));
};

Pxxl.Font.prototype = {

  size: function() {
    return this.SIZE[0];
  },

  getGlyph: function(character) {
    var c = character.charCodeAt(0);

    return this.glyphs[c];
  },

  defaultWidth: function () {
    return this.FONTBOUNDINGBOX[0];
  },

  defaultHeight: function () {
    return this.FONTBOUNDINGBOX[1];
  },

  bit: function(text, row, column ) {
    var t = ~~(column / 8);
    if (t < 0 || t > text.length-1) return false;
    var c = text.charCodeAt(t);

    //console.log(t);
    var g = this.glyphs[c];
    if (g)
      return g.bit(row , column % 8);
    else
      return false;
  },

  getPixels : function(text) {
    //console.log(text, x,y, maxWidth);
    this.ctx;
    var hspacing = this.FONTBOUNDINGBOX[0];

    var pixels = [];


    for( var t=0 ; t<text.length ; t++) // characters in a string x
    {
     var chr = text.charCodeAt(t);
     var glyph = this.glyphs[chr];

     var bitmap = glyph.bitmap;
     var dx = t * hspacing;
     var dy = this.defaultHeight() - glyph.height(); // some glyphs have fewer rows

     for ( var r=0 ; r<bitmap.length ; r++) // pixelrows in a glyph y
     {
       var row = bitmap[r];

       for (var b=0 ; b<row.length ; b++) // bytes in a row x
       {
         var byt = row[b];

         var offset = b*8; //consecutive bytes are drawn next to each other
         var bit = 256;

         while (bit >>>= 1) // bits in a byte x
         {
           if (byt & bit)
           {
             var px = dx+offset;
             var py = dy+r;

              pixels.push({x:px, y:py, row:r, column:offset });
           }
           offset++;
         }
       }
     }
    }

    return pixels;
  }
};


Pxxl.Glyph = function (name, bitmap) {
  //console.log("Glyph", name, bitmap);
  this.name = name;
  this.bitmap = bitmap;
};

Pxxl.Glyph.prototype = {

  set: function (x,y,value) {
    var bit = 1 << this.width() - x - 1;
    var byt = ~~(bit/256);
    bit %= (byt+1) * 256;

    //console.log(this.bitmap);

    if (value)
      this.bitmap[y][byt] |= bit;
    else
      this.bitmap[y][byt] &= ~bit;

    //console.log(this.bitmap);
  },

  get: function (x,y) {
    var bit = 1 << this.width() - x - 1;
    var byt = ~~(bit/256);
    bit %= (byt+1) * 256;

    var result = this.bitmap[y][byt] & bit;
    //console.log("x:"+x, "y:"+y, "bit:"+bit, "byte:"+byte, "value:"+result );
    return !!result;
  },

  width: function () {
    return this.BBX[0];
  },

  height: function () {
    return this.BBX[1];
  },

  toString: function() {
    var result = "";
    for (var y=0 ; y<this.bitmap.length ; y++)
    {
      for (var x=0 ; x<this.width() ; x++)
      {
        result += this.get(x,y) ? "*" : " ";
      }
      result += "/n";
    }

    return result;
  }
};
(function() {

var EXCLAMATION_MARK = ch("!");
var AT = ch("@");
var HASH = ch("#");
var DOLLAR = ch("$");
var PERCENT = ch("%");
var CARET = ch("^");
var AMPERSAND = ch("&");
var ASTERISK = ch("*");
var LEFT_PARENTHESIS = ch("(");
var RIGHT_PARENTHESIS = ch(")");
var MINUS = ch("-");
var UNDERSCORE = ch("_");
var PLUS = ch("+");
var EQUALS = ch("=");
var LEFT_ACCOLADE = ch("{");
var RIGHT_ACCOLADE = ch("}");
var LEFT_BRACKET = ch("[");
var RIGHT_BRACKET = ch("]");
var COLON = ch(":");
var SEMICOLON = ch(";");
var QUOTE = ch("'");
var DOUBLE_QUOTE = ch('"');
var PIPE  = ch("|");
var BACKSLASH  = ch("\\");
var TILDE  = ch("~");
var BACKTICK = ch("`");
var COMMA = ch(",");
var PERIOD = ch(".");
var LESS_THAN = ch("<");
var GREATER_THAN = ch(">");
var QUESTION_MARK = ch("?");
var SLASH = ch("/");

var SpecialChar = choice(EXCLAMATION_MARK, AT, HASH, DOLLAR, PERCENT, CARET, AMPERSAND, ASTERISK, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, MINUS, UNDERSCORE, PLUS, EQUALS, LEFT_ACCOLADE, RIGHT_ACCOLADE, LEFT_BRACKET, RIGHT_BRACKET, COLON, SEMICOLON, QUOTE, DOUBLE_QUOTE, PIPE, BACKSLASH, TILDE, BACKTICK, COMMA, PERIOD, LESS_THAN, GREATER_THAN, QUESTION_MARK, SLASH);

var Digit = range("0","9");
var LowerCase = range("a", "z");
var UpperCase = range("A", "Z");

var NEWLINE = ch('\n');
var Space = ch(' ');
ch("\t");

var Alpha = choice(LowerCase, UpperCase);
var AlphaNum = choice(Alpha, Digit);
var NoSpaceChar = choice(AlphaNum, SpecialChar);
var Char = choice(NoSpaceChar, Space);
var Spaces = flatten(repeat1(Space));
var Text = flatten(repeat1(Char));

var EOL = sequence(repeat0(Space), NEWLINE);

var QUOTED_STRING = pick(1, sequence(DOUBLE_QUOTE, flatten(repeat1(butnot(Char, DOUBLE_QUOTE))), DOUBLE_QUOTE));

var HexDigit =  choice(range("a", "f"), range("A", "F"), Digit);
var Byte = action(flatten(sequence(HexDigit,HexDigit)), function(s) { return parseInt(s, 16); });
var ByteArray = repeat1(Byte);
var Natural = flatten(repeat1(Digit));

var NegativeNumber = flatten(sequence(MINUS, Natural));
var Integer = action(choice(Natural, NegativeNumber), parseInt);
//var Word = flatten(repeat1(Alpha));

//var PropName = flatten(sequence(Alpha, flatten(repeat0(choice(Alpha, UNDERSCORE)))));
var PropName = flatten(repeat1(choice(Alpha, UNDERSCORE)));
var Prop1 = action(sequence(PropName, repeat1(pick(1,sequence(Spaces, Integer)))), MakeProp1);
var Prop2 = action(sequence(PropName, Spaces, QUOTED_STRING), MakeProp2);
var Prop3 = action(sequence(PropName, Spaces, flatten(repeat1(NoSpaceChar))), MakeProp2);
var ENDPROPERTIES = token("ENDPROPERTIES");
var Prop = trace(choice(Prop1, Prop2, Prop3, ENDPROPERTIES), "prop");
var PropRow = pick(0, sequence(Prop, EOL));

var BitmapRow = pick(0,sequence( ByteArray, EOL ));
var BITMAP = token("BITMAP");
var BitmapStart = sequence(BITMAP, EOL);
var Bitmap = trace(pick(1, sequence(BitmapStart, repeat0( BitmapRow ))), "bitmap");

var STARTCHAR = token("STARTCHAR");
var ENDCHAR = token("ENDCHAR");
var GlyphStart = trace(pick(2, sequence(STARTCHAR, Space, Text, EOL)), "glyphstart");
var GlyphEnd = sequence(ENDCHAR, EOL);
var Glyph = trace(action(sequence(GlyphStart, repeat0(PropRow), Bitmap, GlyphEnd), MakeGlyph), "glyph");

//var Glyph = action(_Glyph, function(ast) { console.log(ast)} );

var STARTFONT = token("STARTFONT");
var ENDFONT = token("ENDFONT");
var Version = flatten(sequence(Natural, PERIOD, Natural));
var FontStart = trace(pick(2, sequence( STARTFONT, Spaces, Version, EOL )), "fontstart");
var FontEnd = trace(sequence( ENDFONT, optional(EOL)), "fontend"); // EOL optional for now
var COMMENT = token("COMMENT");
var Comment = pick(2, sequence(COMMENT, optional(Space), optional(Text)));
var CommentRow = trace(pick(0, sequence(Comment, EOL)), "comment");


var BDF = action(sequence( repeat0(CommentRow), FontStart, repeat0(CommentRow), repeat0(butnot(PropRow, GlyphStart)), repeat0(Glyph), FontEnd), MakeFont); // empty container is allowed

// input: sequence( FontStart, repeat0(CommentRow), repeat0(butnot(PropRow, GlyphStart)), repeat0(Glyph), FontEnd)
function MakeFont(ast) {
  var formatVersion = ast[1];
  var comments = ast[0].concat(ast[2]);
  var properties = ast[3];
  var glyphs = PropertyList2Hash(ast[4]);
  var f = new Pxxl.Font(formatVersion, comments, properties, glyphs);
  return PropertyBagMixin(f, properties);
}

// input: sequence(GlyphStart, repeat0(PropRow), Bitmap, GlyphEnd
function MakeGlyph(ast) {
  var name = ast[0];
  var properties = ast[1];
  var bitmap = ast[2];
  var g =  new Pxxl.Glyph(name, bitmap);
  //console.log("glyph", g.toString());
  g = PropertyBagMixin(g, properties);
  return { name: g["ENCODING"], value :g};
}

function PropertyBagMixin(obj, proplist) {
  for( var i=0 ; i<proplist.length ; i++ ) {
    var prop = proplist[i];

    // WATCH OUT! possibly overwriting pre-existing properties!
    obj[prop.name] = prop.value;
  }

  return obj;
}

function PropertyList2Hash(proplist) {
  var hash = {};

  for( var i=0 ; i<proplist.length ; i++ ) {
    var prop = proplist[i];

    // WATCH OUT! possibly overwriting pre-existing properties!
    hash[prop.name] = prop.value;
  }

  return hash;
}

function MakeProp1(ast) {
  var value = ast[1];
  var name = ast[0];

  if (name == "ENCODING" || name == "CHARS")
    value = value[0];

  return { name: name, value: value };
}

function MakeProp2(ast) {
  return { name: ast[0], value: ast[2] };
}

function flatten(p) {
  return join_action(p, "");
}

function pick(i, p) {
  return action(p, function(ast) { return ast[i]; });
}

function trace(p, label) {
  var traceon = Pxxl.trace;
  var traceall = Pxxl.traceall;

  if (!traceon) return p;

  return function(state) {
    var result = p(state);
    if (!result.ast) {
      var matched = state.input.substring(0,state.index);
      var lines = matched.split("\n");
      //lines[lines.length-1]
      console.error(label, "failed at line", lines.length, state);
    }
    if (result.ast && traceall)
      console.log(label, "matches", result.matched, "\nAST:", result.ast);

    return result;
  }
}

function pre(input) {
  var lines = input.split("\n");
  for (var l=lines.length-1 ; l>=0 ; l--) {
    var line = ltrim(lines[l]);

    if (line == "")
      lines.splice(l, 1);
    else
      lines[l] = line;
  }

  return lines.join("\n");
}

function ltrim(stringToTrim) {
	return stringToTrim.replace(/^\s+/,"");
}

function parseBDF (input, trace, traceall) {
  Pxxl.trace = trace;
  Pxxl.traceall = traceall;

  input = pre(input);
  var state = ps(input);
  var result = BDF(state);

  if (result.ast) {
    //console.log("parsing took: " + time + "ms");
    return result.ast;
  }

  throw new Error("Unable to parse font!");
}

// export only single function
Pxxl.Font.ParseBDF = parseBDF;

})();

Pxxl.Glyph.ParseJSON = function (obj) {

  var g = new Pxxl.Glyph(obj.name, obj.bitmap);

  // shallow copy
  for (var k in obj) {
    if (obj.hasOwnProperty(k))
      g[k] = obj[k];
  }
  //console.log("glyph", g.toString());
  return g;
};

Pxxl.Font.ParseJSON = function (obj) {
  var f = new Pxxl.Font(obj.version, obj.comments, obj.properties, {});
  //console.log(f);
  for (var k in obj) {
    if (obj.hasOwnProperty(k) && k != "glyphs")
      f[k] = obj[k];
  }

  f.glyphs = {};
  for (var g in obj.glyphs) {
    //console.log(g);
    if (obj.glyphs.hasOwnProperty(g))
      f.glyphs[g] = Pxxl.Glyph.ParseJSON(obj.glyphs[g]);
  }
  return f;
};
(function() {
  //from: http://www.quirksmode.org/js/xmlhttp.html
  function sendRequest(url,callback,postData) {
      var req = createXMLHTTPObject();
      if (!req) return;
      var method = "GET";
      req.open(method,url,true);
      req.onreadystatechange = function () {
          if (req.readyState != 4) return;
          if (req.status != 200 && req.status != 304) {
  //          alert('HTTP error ' + req.status);
              return;
          }
          callback(req);
      };
      if (req.readyState == 4) return;
      req.send(postData);
  }

  var XMLHttpFactories = [
      function () {return new XMLHttpRequest()},
      function () {return new ActiveXObject("Msxml2.XMLHTTP")},
      function () {return new ActiveXObject("Msxml3.XMLHTTP")},
      function () {return new ActiveXObject("Microsoft.XMLHTTP")}
  ];

  function createXMLHTTPObject() {
      var xmlhttp = false;
      for (var i=0;i<XMLHttpFactories.length;i++) {
          try {
              xmlhttp = XMLHttpFactories[i]();
          }
          catch (e) {
              continue;
          }
          break;
      }
      return xmlhttp;
  }


  function LoadFont(url, callback) {
    // FIXME: determine type based on mimetype and/or extension
    // if(url.indexOf("json") > -1 )
    //   $.getJSON(url, function(data) {
    //     callback(Pxxl.Font.ParseJSON(data));
    //   });
    // else
    sendRequest(url,function(req) {
      callback(Pxxl.Font.ParseBDF(req.responseText));
    });
  }
  // memoization funcion for use with callbacks
  function memoize2(f) {
    var cache = {};

    return function (arg, callback) {
      var cached = cache[arg];

      if (typeof cached !== 'undefined') {
        //console.log('cache hit: ', arg);
        return callback(cached);
      }
      else {
        //console.log('cache miss:', arg);
        return f(arg, function(result) {
          cache[arg] = result;
          return callback(result);
        });
      }
    };
  }

  Pxxl.LoadFont = memoize2(LoadFont);

})();

const zstd = await ee.load();
const pf = Pxxl.Font.ParseBDF(Deno.readTextFileSync("assets/5x7.bdf"));
function fpng(label,text) {
  const f_sides = 2;
  const f_tracks = 80;
  const f_sectors = 18;
  const f_bytes = 512;
  const dat = zstd.compress(new TextEncoder().encode(text),22);
  const width = 1024;
  const font_height = 7;
  console.log(
    `1.44 MB Floppy Disk Size=${f_sides * f_tracks * f_sectors * f_bytes}`,
  );
  const head = new Uint8Array(width * font_height).fill(255);
  const dat_rows = (dat.length) % width == 0
    ? (dat.length) / width
    : Math.floor(dat.length / width) + 1;
  const dat_fill = new Uint8Array(dat_rows * width - dat.length).fill(
    32,
  );
  const flp_dat_arr = new Uint8Array([
    ...head,
    ...dat,
    ...dat_fill,
  ]);
  const pixels = pf.getPixels(label);
  for (const pixel of pixels) {
    for (let i = 0; i < 4; i++) {
      flp_dat_arr[
        (pixel.x + pixel.y * width / 4) * 4 + i
      ] = [0, 0, 0, 255][i];
    }
  }
  const img=new Uint8Array(
    UPNG.encodeLL(
      [flp_dat_arr],
      width / 4,
      dat_rows + font_height,
      3,
      1,
      8
    ),
  );
  console.log(
    `Floppy PNG Size=${img.length}`,
  );
  return {"im":img,"ln":dat.length}
}

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/*
// This constant can also be computed with the following algorithm:
const base64abc = [],
    A = "A".charCodeAt(0),
    a = "a".charCodeAt(0),
    n = "0".charCodeAt(0);
for (let i = 0; i < 26; ++i) {
    base64abc.push(String.fromCharCode(A + i));
}
for (let i = 0; i < 26; ++i) {
    base64abc.push(String.fromCharCode(a + i));
}
for (let i = 0; i < 10; ++i) {
    base64abc.push(String.fromCharCode(n + i));
}
base64abc.push("+");
base64abc.push("/");
*/
const base64abc = [
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"
];
function bytesToBase64(bytes) {
    let result = '', i, l = bytes.length;
    for (i = 2; i < l; i += 3) {
        result += base64abc[bytes[i - 2] >> 2];
        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];
        result += base64abc[((bytes[i - 1] & 0x0F) << 2) | (bytes[i] >> 6)];
        result += base64abc[bytes[i] & 0x3F];
    }
    if (i === l + 1) { // 1 octet yet to write
        result += base64abc[bytes[i - 2] >> 2];
        result += base64abc[(bytes[i - 2] & 0x03) << 4];
        result += "==";
    }
    if (i === l) { // 2 octets yet to write
        result += base64abc[bytes[i - 2] >> 2];
        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];
        result += base64abc[(bytes[i - 1] & 0x0F) << 2];
        result += "=";
    }
    return result;
}

const metadata=JSON.parse(Deno.readTextFileSync("assets/metadata.json"));
const dt$1 = new Date();
const tss = dt$1.toISOString().replaceAll(":", "").replaceAll("-","").replaceAll(".","");
async function create(site,backup) {
  const st = JSON.stringify(site);
  Deno.writeTextFileSync("site.txt", `let site=${st}\n`);
  const text = Deno.readTextFileSync("site.txt") +
    Deno.readTextFileSync("dist/app.bundle.js");
  function arr_to_hex(u8arr) {
    return `${Array.from(u8arr, (i) => i.toString(16).padStart(2, "0")).join("")
      }`;
  }
  const last_hash = Deno.readTextFileSync("data_sha512.txt");
  const cur_hash = arr_to_hex(
    new Uint8Array(
      await crypto.subtle.digest("SHA-512", new TextEncoder().encode(text)),
    ),
  );
  if (last_hash.trim() != cur_hash.trim()) {
    Deno.writeTextFileSync("data_sha512.txt", cur_hash);
    const fp_obj = fpng(` Verify sig at floppypng.com - ${tss}`, text);
    const a32h = arr_to_hex(fp_obj.im.slice(-20, -16));
    console.log(`Generated FloppyPNG Size=${fp_obj.ln}`);

    const priv = Deno.readTextFileSync(Deno.env.get("CL_PRIV")).replace(
      /.*KEY-----(.+?)-----END.*/smg,
      "$1",
    );
    const b_der_str = globalThis.atob(priv);
    const b_der = Uint8Array.from([...b_der_str].map((c) =>
      c.charCodeAt()
    )).buffer;
    const prv = await globalThis.crypto.subtle.importKey(
      "pkcs8",
      b_der,
      {
        name: "RSA-PSS",
        hash: "SHA-256",
      },
      true,
      ["sign"],
    );
    const sig = await crypto.subtle.sign(
      {
        name: "RSA-PSS",
        hash: "SHA-256",
        saltLength: 32,
      },
      prv,
      fp_obj.im,
    );
    const u8sig = new Uint8Array(sig);
    Deno.writeFileSync(`${tss}-${a32h}.png`, fp_obj.im);
    Deno.writeTextFileSync(`${tss}-${a32h}.txt`, bytesToBase64(u8sig));
    Deno.writeFileSync(`${backup}${tss}-${a32h}.png`, fp_obj.im);
    for await (const i of Deno.readDir("./")) {
      if (
        i.name != `${tss}-${a32h}.js` &&
        i.name.match(/^\d{8}T\d{9}Z\-\w{8}.js$/)
      ) {
        console.log(`removing ${i.name}`);
        Deno.remove(i.name);
      }
      if (
        i.name != `${tss}-${a32h}.png` &&
        i.name.match(/^\d{8}T\d{9}Z\-\w{8}.png$/)
      ) {
        console.log(`removing ${i.name}`);
        Deno.remove(i.name);
      }
      if (
        i.name != `${tss}-${a32h}.txt` &&
        i.name.match(/^\d{8}T\d{9}Z\-\w{8}.txt$/)
      ) {
        console.log(`removing ${i.name}`);
        Deno.remove(i.name);
      }
    }
    console.log(`${tss}-${a32h}`);
    Deno.writeTextFileSync(
      `${tss}-${a32h}.js`,
      Deno.readTextFileSync(`assets/bootloader.template.js`)
        .replaceAll("thisistss", tss)
        .replaceAll("thisisadler", a32h)
        .replaceAll("thisistextlength", st.length)
        .replaceAll("thisislength", fp_obj.ln),
    );
    for (let i in metadata){
    Deno.writeTextFileSync(
      `${i}.page.html`,
      Deno.readTextFileSync(`assets/pageops.html`)
        .replace("<title></title>",`<title>${metadata[i].title}</title>`)
        .replace(`<meta name="description" content="">`,`<meta name="description" content="${metadata[i].description}">`)
        .replaceAll("thisistss", tss)
        .replaceAll("thisisadler", a32h)
    );
  }
  }
}

var dist$5 = {};

var dist$4 = {};

var types$5 = {};

var lib$1 = {};

var external$1 = {};

var errors = {};

var en = {};

var util$7 = {};

var hasRequiredUtil$7;

function requireUtil$7 () {
	if (hasRequiredUtil$7) return util$7;
	hasRequiredUtil$7 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
		var util;
		(function (util) {
		    util.assertEqual = (val) => val;
		    function assertIs(_arg) { }
		    util.assertIs = assertIs;
		    function assertNever(_x) {
		        throw new Error();
		    }
		    util.assertNever = assertNever;
		    util.arrayToEnum = (items) => {
		        const obj = {};
		        for (const item of items) {
		            obj[item] = item;
		        }
		        return obj;
		    };
		    util.getValidEnumValues = (obj) => {
		        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
		        const filtered = {};
		        for (const k of validKeys) {
		            filtered[k] = obj[k];
		        }
		        return util.objectValues(filtered);
		    };
		    util.objectValues = (obj) => {
		        return util.objectKeys(obj).map(function (e) {
		            return obj[e];
		        });
		    };
		    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
		        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
		        : (object) => {
		            const keys = [];
		            for (const key in object) {
		                if (Object.prototype.hasOwnProperty.call(object, key)) {
		                    keys.push(key);
		                }
		            }
		            return keys;
		        };
		    util.find = (arr, checker) => {
		        for (const item of arr) {
		            if (checker(item))
		                return item;
		        }
		        return undefined;
		    };
		    util.isInteger = typeof Number.isInteger === "function"
		        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
		        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
		    function joinValues(array, separator = " | ") {
		        return array
		            .map((val) => (typeof val === "string" ? `'${val}'` : val))
		            .join(separator);
		    }
		    util.joinValues = joinValues;
		    util.jsonStringifyReplacer = (_, value) => {
		        if (typeof value === "bigint") {
		            return value.toString();
		        }
		        return value;
		    };
		})(util || (exports.util = util = {}));
		var objectUtil;
		(function (objectUtil) {
		    objectUtil.mergeShapes = (first, second) => {
		        return {
		            ...first,
		            ...second, // second overwrites first
		        };
		    };
		})(objectUtil || (exports.objectUtil = objectUtil = {}));
		exports.ZodParsedType = util.arrayToEnum([
		    "string",
		    "nan",
		    "number",
		    "integer",
		    "float",
		    "boolean",
		    "date",
		    "bigint",
		    "symbol",
		    "function",
		    "undefined",
		    "null",
		    "array",
		    "object",
		    "unknown",
		    "promise",
		    "void",
		    "never",
		    "map",
		    "set",
		]);
		const getParsedType = (data) => {
		    const t = typeof data;
		    switch (t) {
		        case "undefined":
		            return exports.ZodParsedType.undefined;
		        case "string":
		            return exports.ZodParsedType.string;
		        case "number":
		            return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
		        case "boolean":
		            return exports.ZodParsedType.boolean;
		        case "function":
		            return exports.ZodParsedType.function;
		        case "bigint":
		            return exports.ZodParsedType.bigint;
		        case "symbol":
		            return exports.ZodParsedType.symbol;
		        case "object":
		            if (Array.isArray(data)) {
		                return exports.ZodParsedType.array;
		            }
		            if (data === null) {
		                return exports.ZodParsedType.null;
		            }
		            if (data.then &&
		                typeof data.then === "function" &&
		                data.catch &&
		                typeof data.catch === "function") {
		                return exports.ZodParsedType.promise;
		            }
		            if (typeof Map !== "undefined" && data instanceof Map) {
		                return exports.ZodParsedType.map;
		            }
		            if (typeof Set !== "undefined" && data instanceof Set) {
		                return exports.ZodParsedType.set;
		            }
		            if (typeof Date !== "undefined" && data instanceof Date) {
		                return exports.ZodParsedType.date;
		            }
		            return exports.ZodParsedType.object;
		        default:
		            return exports.ZodParsedType.unknown;
		    }
		};
		exports.getParsedType = getParsedType; 
	} (util$7));
	return util$7;
}

var ZodError = {};

var hasRequiredZodError;

function requireZodError () {
	if (hasRequiredZodError) return ZodError;
	hasRequiredZodError = 1;
	Object.defineProperty(ZodError, "__esModule", { value: true });
	ZodError.ZodError = ZodError.quotelessJson = ZodError.ZodIssueCode = void 0;
	const util_1 = /*@__PURE__*/ requireUtil$7();
	ZodError.ZodIssueCode = util_1.util.arrayToEnum([
	    "invalid_type",
	    "invalid_literal",
	    "custom",
	    "invalid_union",
	    "invalid_union_discriminator",
	    "invalid_enum_value",
	    "unrecognized_keys",
	    "invalid_arguments",
	    "invalid_return_type",
	    "invalid_date",
	    "invalid_string",
	    "too_small",
	    "too_big",
	    "invalid_intersection_types",
	    "not_multiple_of",
	    "not_finite",
	]);
	const quotelessJson = (obj) => {
	    const json = JSON.stringify(obj, null, 2);
	    return json.replace(/"([^"]+)":/g, "$1:");
	};
	ZodError.quotelessJson = quotelessJson;
	let ZodError$1 = class ZodError extends Error {
	    get errors() {
	        return this.issues;
	    }
	    constructor(issues) {
	        super();
	        this.issues = [];
	        this.addIssue = (sub) => {
	            this.issues = [...this.issues, sub];
	        };
	        this.addIssues = (subs = []) => {
	            this.issues = [...this.issues, ...subs];
	        };
	        const actualProto = new.target.prototype;
	        if (Object.setPrototypeOf) {
	            // eslint-disable-next-line ban/ban
	            Object.setPrototypeOf(this, actualProto);
	        }
	        else {
	            this.__proto__ = actualProto;
	        }
	        this.name = "ZodError";
	        this.issues = issues;
	    }
	    format(_mapper) {
	        const mapper = _mapper ||
	            function (issue) {
	                return issue.message;
	            };
	        const fieldErrors = { _errors: [] };
	        const processError = (error) => {
	            for (const issue of error.issues) {
	                if (issue.code === "invalid_union") {
	                    issue.unionErrors.map(processError);
	                }
	                else if (issue.code === "invalid_return_type") {
	                    processError(issue.returnTypeError);
	                }
	                else if (issue.code === "invalid_arguments") {
	                    processError(issue.argumentsError);
	                }
	                else if (issue.path.length === 0) {
	                    fieldErrors._errors.push(mapper(issue));
	                }
	                else {
	                    let curr = fieldErrors;
	                    let i = 0;
	                    while (i < issue.path.length) {
	                        const el = issue.path[i];
	                        const terminal = i === issue.path.length - 1;
	                        if (!terminal) {
	                            curr[el] = curr[el] || { _errors: [] };
	                            // if (typeof el === "string") {
	                            //   curr[el] = curr[el] || { _errors: [] };
	                            // } else if (typeof el === "number") {
	                            //   const errorArray: any = [];
	                            //   errorArray._errors = [];
	                            //   curr[el] = curr[el] || errorArray;
	                            // }
	                        }
	                        else {
	                            curr[el] = curr[el] || { _errors: [] };
	                            curr[el]._errors.push(mapper(issue));
	                        }
	                        curr = curr[el];
	                        i++;
	                    }
	                }
	            }
	        };
	        processError(this);
	        return fieldErrors;
	    }
	    static assert(value) {
	        if (!(value instanceof ZodError)) {
	            throw new Error(`Not a ZodError: ${value}`);
	        }
	    }
	    toString() {
	        return this.message;
	    }
	    get message() {
	        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
	    }
	    get isEmpty() {
	        return this.issues.length === 0;
	    }
	    flatten(mapper = (issue) => issue.message) {
	        const fieldErrors = {};
	        const formErrors = [];
	        for (const sub of this.issues) {
	            if (sub.path.length > 0) {
	                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
	                fieldErrors[sub.path[0]].push(mapper(sub));
	            }
	            else {
	                formErrors.push(mapper(sub));
	            }
	        }
	        return { formErrors, fieldErrors };
	    }
	    get formErrors() {
	        return this.flatten();
	    }
	};
	ZodError.ZodError = ZodError$1;
	ZodError$1.create = (issues) => {
	    const error = new ZodError$1(issues);
	    return error;
	};
	return ZodError;
}

var hasRequiredEn;

function requireEn () {
	if (hasRequiredEn) return en;
	hasRequiredEn = 1;
	Object.defineProperty(en, "__esModule", { value: true });
	const util_1 = /*@__PURE__*/ requireUtil$7();
	const ZodError_1 = /*@__PURE__*/ requireZodError();
	const errorMap = (issue, _ctx) => {
	    let message;
	    switch (issue.code) {
	        case ZodError_1.ZodIssueCode.invalid_type:
	            if (issue.received === util_1.ZodParsedType.undefined) {
	                message = "Required";
	            }
	            else {
	                message = `Expected ${issue.expected}, received ${issue.received}`;
	            }
	            break;
	        case ZodError_1.ZodIssueCode.invalid_literal:
	            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
	            break;
	        case ZodError_1.ZodIssueCode.unrecognized_keys:
	            message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_union:
	            message = `Invalid input`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_union_discriminator:
	            message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_enum_value:
	            message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_arguments:
	            message = `Invalid function arguments`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_return_type:
	            message = `Invalid function return type`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_date:
	            message = `Invalid date`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_string:
	            if (typeof issue.validation === "object") {
	                if ("includes" in issue.validation) {
	                    message = `Invalid input: must include "${issue.validation.includes}"`;
	                    if (typeof issue.validation.position === "number") {
	                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
	                    }
	                }
	                else if ("startsWith" in issue.validation) {
	                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
	                }
	                else if ("endsWith" in issue.validation) {
	                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
	                }
	                else {
	                    util_1.util.assertNever(issue.validation);
	                }
	            }
	            else if (issue.validation !== "regex") {
	                message = `Invalid ${issue.validation}`;
	            }
	            else {
	                message = "Invalid";
	            }
	            break;
	        case ZodError_1.ZodIssueCode.too_small:
	            if (issue.type === "array")
	                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
	            else if (issue.type === "string")
	                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
	            else if (issue.type === "number")
	                message = `Number must be ${issue.exact
	                    ? `exactly equal to `
	                    : issue.inclusive
	                        ? `greater than or equal to `
	                        : `greater than `}${issue.minimum}`;
	            else if (issue.type === "date")
	                message = `Date must be ${issue.exact
	                    ? `exactly equal to `
	                    : issue.inclusive
	                        ? `greater than or equal to `
	                        : `greater than `}${new Date(Number(issue.minimum))}`;
	            else
	                message = "Invalid input";
	            break;
	        case ZodError_1.ZodIssueCode.too_big:
	            if (issue.type === "array")
	                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
	            else if (issue.type === "string")
	                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
	            else if (issue.type === "number")
	                message = `Number must be ${issue.exact
	                    ? `exactly`
	                    : issue.inclusive
	                        ? `less than or equal to`
	                        : `less than`} ${issue.maximum}`;
	            else if (issue.type === "bigint")
	                message = `BigInt must be ${issue.exact
	                    ? `exactly`
	                    : issue.inclusive
	                        ? `less than or equal to`
	                        : `less than`} ${issue.maximum}`;
	            else if (issue.type === "date")
	                message = `Date must be ${issue.exact
	                    ? `exactly`
	                    : issue.inclusive
	                        ? `smaller than or equal to`
	                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
	            else
	                message = "Invalid input";
	            break;
	        case ZodError_1.ZodIssueCode.custom:
	            message = `Invalid input`;
	            break;
	        case ZodError_1.ZodIssueCode.invalid_intersection_types:
	            message = `Intersection results could not be merged`;
	            break;
	        case ZodError_1.ZodIssueCode.not_multiple_of:
	            message = `Number must be a multiple of ${issue.multipleOf}`;
	            break;
	        case ZodError_1.ZodIssueCode.not_finite:
	            message = "Number must be finite";
	            break;
	        default:
	            message = _ctx.defaultError;
	            util_1.util.assertNever(issue);
	    }
	    return { message };
	};
	en.default = errorMap;
	return en;
}

var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;
	var __importDefault = (errors && errors.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(errors, "__esModule", { value: true });
	errors.getErrorMap = errors.setErrorMap = errors.defaultErrorMap = void 0;
	const en_1 = __importDefault(/*@__PURE__*/ requireEn());
	errors.defaultErrorMap = en_1.default;
	let overrideErrorMap = en_1.default;
	function setErrorMap(map) {
	    overrideErrorMap = map;
	}
	errors.setErrorMap = setErrorMap;
	function getErrorMap() {
	    return overrideErrorMap;
	}
	errors.getErrorMap = getErrorMap;
	return errors;
}

var parseUtil = {};

var hasRequiredParseUtil;

function requireParseUtil () {
	if (hasRequiredParseUtil) return parseUtil;
	hasRequiredParseUtil = 1;
	(function (exports) {
		var __importDefault = (parseUtil && parseUtil.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
		const errors_1 = /*@__PURE__*/ requireErrors();
		const en_1 = __importDefault(/*@__PURE__*/ requireEn());
		const makeIssue = (params) => {
		    const { data, path, errorMaps, issueData } = params;
		    const fullPath = [...path, ...(issueData.path || [])];
		    const fullIssue = {
		        ...issueData,
		        path: fullPath,
		    };
		    if (issueData.message !== undefined) {
		        return {
		            ...issueData,
		            path: fullPath,
		            message: issueData.message,
		        };
		    }
		    let errorMessage = "";
		    const maps = errorMaps
		        .filter((m) => !!m)
		        .slice()
		        .reverse();
		    for (const map of maps) {
		        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
		    }
		    return {
		        ...issueData,
		        path: fullPath,
		        message: errorMessage,
		    };
		};
		exports.makeIssue = makeIssue;
		exports.EMPTY_PATH = [];
		function addIssueToContext(ctx, issueData) {
		    const overrideMap = (0, errors_1.getErrorMap)();
		    const issue = (0, exports.makeIssue)({
		        issueData: issueData,
		        data: ctx.data,
		        path: ctx.path,
		        errorMaps: [
		            ctx.common.contextualErrorMap, // contextual error map is first priority
		            ctx.schemaErrorMap, // then schema-bound map if available
		            overrideMap, // then global override map
		            overrideMap === en_1.default ? undefined : en_1.default, // then global default map
		        ].filter((x) => !!x),
		    });
		    ctx.common.issues.push(issue);
		}
		exports.addIssueToContext = addIssueToContext;
		class ParseStatus {
		    constructor() {
		        this.value = "valid";
		    }
		    dirty() {
		        if (this.value === "valid")
		            this.value = "dirty";
		    }
		    abort() {
		        if (this.value !== "aborted")
		            this.value = "aborted";
		    }
		    static mergeArray(status, results) {
		        const arrayValue = [];
		        for (const s of results) {
		            if (s.status === "aborted")
		                return exports.INVALID;
		            if (s.status === "dirty")
		                status.dirty();
		            arrayValue.push(s.value);
		        }
		        return { status: status.value, value: arrayValue };
		    }
		    static async mergeObjectAsync(status, pairs) {
		        const syncPairs = [];
		        for (const pair of pairs) {
		            const key = await pair.key;
		            const value = await pair.value;
		            syncPairs.push({
		                key,
		                value,
		            });
		        }
		        return ParseStatus.mergeObjectSync(status, syncPairs);
		    }
		    static mergeObjectSync(status, pairs) {
		        const finalObject = {};
		        for (const pair of pairs) {
		            const { key, value } = pair;
		            if (key.status === "aborted")
		                return exports.INVALID;
		            if (value.status === "aborted")
		                return exports.INVALID;
		            if (key.status === "dirty")
		                status.dirty();
		            if (value.status === "dirty")
		                status.dirty();
		            if (key.value !== "__proto__" &&
		                (typeof value.value !== "undefined" || pair.alwaysSet)) {
		                finalObject[key.value] = value.value;
		            }
		        }
		        return { status: status.value, value: finalObject };
		    }
		}
		exports.ParseStatus = ParseStatus;
		exports.INVALID = Object.freeze({
		    status: "aborted",
		});
		const DIRTY = (value) => ({ status: "dirty", value });
		exports.DIRTY = DIRTY;
		const OK = (value) => ({ status: "valid", value });
		exports.OK = OK;
		const isAborted = (x) => x.status === "aborted";
		exports.isAborted = isAborted;
		const isDirty = (x) => x.status === "dirty";
		exports.isDirty = isDirty;
		const isValid = (x) => x.status === "valid";
		exports.isValid = isValid;
		const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
		exports.isAsync = isAsync; 
	} (parseUtil));
	return parseUtil;
}

var typeAliases = {};

var hasRequiredTypeAliases;

function requireTypeAliases () {
	if (hasRequiredTypeAliases) return typeAliases;
	hasRequiredTypeAliases = 1;
	Object.defineProperty(typeAliases, "__esModule", { value: true });
	return typeAliases;
}

var types$4 = {};

var errorUtil = {};

var hasRequiredErrorUtil;

function requireErrorUtil () {
	if (hasRequiredErrorUtil) return errorUtil;
	hasRequiredErrorUtil = 1;
	Object.defineProperty(errorUtil, "__esModule", { value: true });
	errorUtil.errorUtil = void 0;
	var errorUtil$1;
	(function (errorUtil) {
	    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
	    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
	})(errorUtil$1 || (errorUtil.errorUtil = errorUtil$1 = {}));
	return errorUtil;
}

var hasRequiredTypes$5;

function requireTypes$5 () {
	if (hasRequiredTypes$5) return types$4;
	hasRequiredTypes$5 = 1;
	var __classPrivateFieldGet = (types$4 && types$4.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var __classPrivateFieldSet = (types$4 && types$4.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var _ZodEnum_cache, _ZodNativeEnum_cache;
	Object.defineProperty(types$4, "__esModule", { value: true });
	types$4.boolean = types$4.bigint = types$4.array = types$4.any = types$4.coerce = types$4.ZodFirstPartyTypeKind = types$4.late = types$4.ZodSchema = types$4.Schema = types$4.custom = types$4.ZodReadonly = types$4.ZodPipeline = types$4.ZodBranded = types$4.BRAND = types$4.ZodNaN = types$4.ZodCatch = types$4.ZodDefault = types$4.ZodNullable = types$4.ZodOptional = types$4.ZodTransformer = types$4.ZodEffects = types$4.ZodPromise = types$4.ZodNativeEnum = types$4.ZodEnum = types$4.ZodLiteral = types$4.ZodLazy = types$4.ZodFunction = types$4.ZodSet = types$4.ZodMap = types$4.ZodRecord = types$4.ZodTuple = types$4.ZodIntersection = types$4.ZodDiscriminatedUnion = types$4.ZodUnion = types$4.ZodObject = types$4.ZodArray = types$4.ZodVoid = types$4.ZodNever = types$4.ZodUnknown = types$4.ZodAny = types$4.ZodNull = types$4.ZodUndefined = types$4.ZodSymbol = types$4.ZodDate = types$4.ZodBoolean = types$4.ZodBigInt = types$4.ZodNumber = types$4.ZodString = types$4.datetimeRegex = types$4.ZodType = void 0;
	types$4.NEVER = types$4.void = types$4.unknown = types$4.union = types$4.undefined = types$4.tuple = types$4.transformer = types$4.symbol = types$4.string = types$4.strictObject = types$4.set = types$4.record = types$4.promise = types$4.preprocess = types$4.pipeline = types$4.ostring = types$4.optional = types$4.onumber = types$4.oboolean = types$4.object = types$4.number = types$4.nullable = types$4.null = types$4.never = types$4.nativeEnum = types$4.nan = types$4.map = types$4.literal = types$4.lazy = types$4.intersection = types$4.instanceof = types$4.function = types$4.enum = types$4.effect = types$4.discriminatedUnion = types$4.date = void 0;
	const errors_1 = /*@__PURE__*/ requireErrors();
	const errorUtil_1 = /*@__PURE__*/ requireErrorUtil();
	const parseUtil_1 = /*@__PURE__*/ requireParseUtil();
	const util_1 = /*@__PURE__*/ requireUtil$7();
	const ZodError_1 = /*@__PURE__*/ requireZodError();
	class ParseInputLazyPath {
	    constructor(parent, value, path, key) {
	        this._cachedPath = [];
	        this.parent = parent;
	        this.data = value;
	        this._path = path;
	        this._key = key;
	    }
	    get path() {
	        if (!this._cachedPath.length) {
	            if (this._key instanceof Array) {
	                this._cachedPath.push(...this._path, ...this._key);
	            }
	            else {
	                this._cachedPath.push(...this._path, this._key);
	            }
	        }
	        return this._cachedPath;
	    }
	}
	const handleResult = (ctx, result) => {
	    if ((0, parseUtil_1.isValid)(result)) {
	        return { success: true, data: result.value };
	    }
	    else {
	        if (!ctx.common.issues.length) {
	            throw new Error("Validation failed but no issues detected.");
	        }
	        return {
	            success: false,
	            get error() {
	                if (this._error)
	                    return this._error;
	                const error = new ZodError_1.ZodError(ctx.common.issues);
	                this._error = error;
	                return this._error;
	            },
	        };
	    }
	};
	function processCreateParams(params) {
	    if (!params)
	        return {};
	    const { errorMap, invalid_type_error, required_error, description } = params;
	    if (errorMap && (invalid_type_error || required_error)) {
	        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
	    }
	    if (errorMap)
	        return { errorMap: errorMap, description };
	    const customMap = (iss, ctx) => {
	        var _a, _b;
	        const { message } = params;
	        if (iss.code === "invalid_enum_value") {
	            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
	        }
	        if (typeof ctx.data === "undefined") {
	            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
	        }
	        if (iss.code !== "invalid_type")
	            return { message: ctx.defaultError };
	        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
	    };
	    return { errorMap: customMap, description };
	}
	class ZodType {
	    get description() {
	        return this._def.description;
	    }
	    _getType(input) {
	        return (0, util_1.getParsedType)(input.data);
	    }
	    _getOrReturnCtx(input, ctx) {
	        return (ctx || {
	            common: input.parent.common,
	            data: input.data,
	            parsedType: (0, util_1.getParsedType)(input.data),
	            schemaErrorMap: this._def.errorMap,
	            path: input.path,
	            parent: input.parent,
	        });
	    }
	    _processInputParams(input) {
	        return {
	            status: new parseUtil_1.ParseStatus(),
	            ctx: {
	                common: input.parent.common,
	                data: input.data,
	                parsedType: (0, util_1.getParsedType)(input.data),
	                schemaErrorMap: this._def.errorMap,
	                path: input.path,
	                parent: input.parent,
	            },
	        };
	    }
	    _parseSync(input) {
	        const result = this._parse(input);
	        if ((0, parseUtil_1.isAsync)(result)) {
	            throw new Error("Synchronous parse encountered promise.");
	        }
	        return result;
	    }
	    _parseAsync(input) {
	        const result = this._parse(input);
	        return Promise.resolve(result);
	    }
	    parse(data, params) {
	        const result = this.safeParse(data, params);
	        if (result.success)
	            return result.data;
	        throw result.error;
	    }
	    safeParse(data, params) {
	        var _a;
	        const ctx = {
	            common: {
	                issues: [],
	                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
	                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
	            },
	            path: (params === null || params === void 0 ? void 0 : params.path) || [],
	            schemaErrorMap: this._def.errorMap,
	            parent: null,
	            data,
	            parsedType: (0, util_1.getParsedType)(data),
	        };
	        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
	        return handleResult(ctx, result);
	    }
	    "~validate"(data) {
	        var _a, _b;
	        const ctx = {
	            common: {
	                issues: [],
	                async: !!this["~standard"].async,
	            },
	            path: [],
	            schemaErrorMap: this._def.errorMap,
	            parent: null,
	            data,
	            parsedType: (0, util_1.getParsedType)(data),
	        };
	        if (!this["~standard"].async) {
	            try {
	                const result = this._parseSync({ data, path: [], parent: ctx });
	                return (0, parseUtil_1.isValid)(result)
	                    ? {
	                        value: result.value,
	                    }
	                    : {
	                        issues: ctx.common.issues,
	                    };
	            }
	            catch (err) {
	                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
	                    this["~standard"].async = true;
	                }
	                ctx.common = {
	                    issues: [],
	                    async: true,
	                };
	            }
	        }
	        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0, parseUtil_1.isValid)(result)
	            ? {
	                value: result.value,
	            }
	            : {
	                issues: ctx.common.issues,
	            });
	    }
	    async parseAsync(data, params) {
	        const result = await this.safeParseAsync(data, params);
	        if (result.success)
	            return result.data;
	        throw result.error;
	    }
	    async safeParseAsync(data, params) {
	        const ctx = {
	            common: {
	                issues: [],
	                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
	                async: true,
	            },
	            path: (params === null || params === void 0 ? void 0 : params.path) || [],
	            schemaErrorMap: this._def.errorMap,
	            parent: null,
	            data,
	            parsedType: (0, util_1.getParsedType)(data),
	        };
	        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
	        const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult)
	            ? maybeAsyncResult
	            : Promise.resolve(maybeAsyncResult));
	        return handleResult(ctx, result);
	    }
	    refine(check, message) {
	        const getIssueProperties = (val) => {
	            if (typeof message === "string" || typeof message === "undefined") {
	                return { message };
	            }
	            else if (typeof message === "function") {
	                return message(val);
	            }
	            else {
	                return message;
	            }
	        };
	        return this._refinement((val, ctx) => {
	            const result = check(val);
	            const setError = () => ctx.addIssue({
	                code: ZodError_1.ZodIssueCode.custom,
	                ...getIssueProperties(val),
	            });
	            if (typeof Promise !== "undefined" && result instanceof Promise) {
	                return result.then((data) => {
	                    if (!data) {
	                        setError();
	                        return false;
	                    }
	                    else {
	                        return true;
	                    }
	                });
	            }
	            if (!result) {
	                setError();
	                return false;
	            }
	            else {
	                return true;
	            }
	        });
	    }
	    refinement(check, refinementData) {
	        return this._refinement((val, ctx) => {
	            if (!check(val)) {
	                ctx.addIssue(typeof refinementData === "function"
	                    ? refinementData(val, ctx)
	                    : refinementData);
	                return false;
	            }
	            else {
	                return true;
	            }
	        });
	    }
	    _refinement(refinement) {
	        return new ZodEffects({
	            schema: this,
	            typeName: ZodFirstPartyTypeKind.ZodEffects,
	            effect: { type: "refinement", refinement },
	        });
	    }
	    superRefine(refinement) {
	        return this._refinement(refinement);
	    }
	    constructor(def) {
	        /** Alias of safeParseAsync */
	        this.spa = this.safeParseAsync;
	        this._def = def;
	        this.parse = this.parse.bind(this);
	        this.safeParse = this.safeParse.bind(this);
	        this.parseAsync = this.parseAsync.bind(this);
	        this.safeParseAsync = this.safeParseAsync.bind(this);
	        this.spa = this.spa.bind(this);
	        this.refine = this.refine.bind(this);
	        this.refinement = this.refinement.bind(this);
	        this.superRefine = this.superRefine.bind(this);
	        this.optional = this.optional.bind(this);
	        this.nullable = this.nullable.bind(this);
	        this.nullish = this.nullish.bind(this);
	        this.array = this.array.bind(this);
	        this.promise = this.promise.bind(this);
	        this.or = this.or.bind(this);
	        this.and = this.and.bind(this);
	        this.transform = this.transform.bind(this);
	        this.brand = this.brand.bind(this);
	        this.default = this.default.bind(this);
	        this.catch = this.catch.bind(this);
	        this.describe = this.describe.bind(this);
	        this.pipe = this.pipe.bind(this);
	        this.readonly = this.readonly.bind(this);
	        this.isNullable = this.isNullable.bind(this);
	        this.isOptional = this.isOptional.bind(this);
	        this["~standard"] = {
	            version: 1,
	            vendor: "zod",
	            validate: (data) => this["~validate"](data),
	        };
	    }
	    optional() {
	        return ZodOptional.create(this, this._def);
	    }
	    nullable() {
	        return ZodNullable.create(this, this._def);
	    }
	    nullish() {
	        return this.nullable().optional();
	    }
	    array() {
	        return ZodArray.create(this);
	    }
	    promise() {
	        return ZodPromise.create(this, this._def);
	    }
	    or(option) {
	        return ZodUnion.create([this, option], this._def);
	    }
	    and(incoming) {
	        return ZodIntersection.create(this, incoming, this._def);
	    }
	    transform(transform) {
	        return new ZodEffects({
	            ...processCreateParams(this._def),
	            schema: this,
	            typeName: ZodFirstPartyTypeKind.ZodEffects,
	            effect: { type: "transform", transform },
	        });
	    }
	    default(def) {
	        const defaultValueFunc = typeof def === "function" ? def : () => def;
	        return new ZodDefault({
	            ...processCreateParams(this._def),
	            innerType: this,
	            defaultValue: defaultValueFunc,
	            typeName: ZodFirstPartyTypeKind.ZodDefault,
	        });
	    }
	    brand() {
	        return new ZodBranded({
	            typeName: ZodFirstPartyTypeKind.ZodBranded,
	            type: this,
	            ...processCreateParams(this._def),
	        });
	    }
	    catch(def) {
	        const catchValueFunc = typeof def === "function" ? def : () => def;
	        return new ZodCatch({
	            ...processCreateParams(this._def),
	            innerType: this,
	            catchValue: catchValueFunc,
	            typeName: ZodFirstPartyTypeKind.ZodCatch,
	        });
	    }
	    describe(description) {
	        const This = this.constructor;
	        return new This({
	            ...this._def,
	            description,
	        });
	    }
	    pipe(target) {
	        return ZodPipeline.create(this, target);
	    }
	    readonly() {
	        return ZodReadonly.create(this);
	    }
	    isOptional() {
	        return this.safeParse(undefined).success;
	    }
	    isNullable() {
	        return this.safeParse(null).success;
	    }
	}
	types$4.ZodType = ZodType;
	types$4.Schema = ZodType;
	types$4.ZodSchema = ZodType;
	const cuidRegex = /^c[^\s-]{8,}$/i;
	const cuid2Regex = /^[0-9a-z]+$/;
	const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
	// const uuidRegex =
	//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
	const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
	const nanoidRegex = /^[a-z0-9_-]{21}$/i;
	const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
	const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
	// from https://stackoverflow.com/a/46181/1550155
	// old version: too slow, didn't support unicode
	// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
	//old email regex
	// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
	// eslint-disable-next-line
	// const emailRegex =
	//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
	// const emailRegex =
	//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
	// const emailRegex =
	//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
	const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
	// const emailRegex =
	//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
	// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
	const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
	let emojiRegex;
	// faster, simpler, safer
	const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
	const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
	// const ipv6Regex =
	// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
	const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
	const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
	// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
	const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
	// https://base64.guru/standards/base64url
	const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
	// simple
	// const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
	// no leap year validation
	// const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
	// with leap year validation
	const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
	const dateRegex = new RegExp(`^${dateRegexSource}$`);
	function timeRegexSource(args) {
	    // let regex = `\\d{2}:\\d{2}:\\d{2}`;
	    let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
	    if (args.precision) {
	        regex = `${regex}\\.\\d{${args.precision}}`;
	    }
	    else if (args.precision == null) {
	        regex = `${regex}(\\.\\d+)?`;
	    }
	    return regex;
	}
	function timeRegex(args) {
	    return new RegExp(`^${timeRegexSource(args)}$`);
	}
	// Adapted from https://stackoverflow.com/a/3143231
	function datetimeRegex(args) {
	    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
	    const opts = [];
	    opts.push(args.local ? `Z?` : `Z`);
	    if (args.offset)
	        opts.push(`([+-]\\d{2}:?\\d{2})`);
	    regex = `${regex}(${opts.join("|")})`;
	    return new RegExp(`^${regex}$`);
	}
	types$4.datetimeRegex = datetimeRegex;
	function isValidIP(ip, version) {
	    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
	        return true;
	    }
	    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
	        return true;
	    }
	    return false;
	}
	function isValidJWT(jwt, alg) {
	    if (!jwtRegex.test(jwt))
	        return false;
	    try {
	        const [header] = jwt.split(".");
	        // Convert base64url to base64
	        const base64 = header
	            .replace(/-/g, "+")
	            .replace(/_/g, "/")
	            .padEnd(header.length + ((4 - (header.length % 4)) % 4), "=");
	        const decoded = JSON.parse(atob(base64));
	        if (typeof decoded !== "object" || decoded === null)
	            return false;
	        if (!decoded.typ || !decoded.alg)
	            return false;
	        if (alg && decoded.alg !== alg)
	            return false;
	        return true;
	    }
	    catch (_a) {
	        return false;
	    }
	}
	function isValidCidr(ip, version) {
	    if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
	        return true;
	    }
	    if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
	        return true;
	    }
	    return false;
	}
	class ZodString extends ZodType {
	    _parse(input) {
	        if (this._def.coerce) {
	            input.data = String(input.data);
	        }
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.string) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.string,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const status = new parseUtil_1.ParseStatus();
	        let ctx = undefined;
	        for (const check of this._def.checks) {
	            if (check.kind === "min") {
	                if (input.data.length < check.value) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_small,
	                        minimum: check.value,
	                        type: "string",
	                        inclusive: true,
	                        exact: false,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "max") {
	                if (input.data.length > check.value) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_big,
	                        maximum: check.value,
	                        type: "string",
	                        inclusive: true,
	                        exact: false,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "length") {
	                const tooBig = input.data.length > check.value;
	                const tooSmall = input.data.length < check.value;
	                if (tooBig || tooSmall) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    if (tooBig) {
	                        (0, parseUtil_1.addIssueToContext)(ctx, {
	                            code: ZodError_1.ZodIssueCode.too_big,
	                            maximum: check.value,
	                            type: "string",
	                            inclusive: true,
	                            exact: true,
	                            message: check.message,
	                        });
	                    }
	                    else if (tooSmall) {
	                        (0, parseUtil_1.addIssueToContext)(ctx, {
	                            code: ZodError_1.ZodIssueCode.too_small,
	                            minimum: check.value,
	                            type: "string",
	                            inclusive: true,
	                            exact: true,
	                            message: check.message,
	                        });
	                    }
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "email") {
	                if (!emailRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "email",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "emoji") {
	                if (!emojiRegex) {
	                    emojiRegex = new RegExp(_emojiRegex, "u");
	                }
	                if (!emojiRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "emoji",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "uuid") {
	                if (!uuidRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "uuid",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "nanoid") {
	                if (!nanoidRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "nanoid",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "cuid") {
	                if (!cuidRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "cuid",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "cuid2") {
	                if (!cuid2Regex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "cuid2",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "ulid") {
	                if (!ulidRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "ulid",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "url") {
	                try {
	                    new URL(input.data);
	                }
	                catch (_a) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "url",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "regex") {
	                check.regex.lastIndex = 0;
	                const testResult = check.regex.test(input.data);
	                if (!testResult) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "regex",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "trim") {
	                input.data = input.data.trim();
	            }
	            else if (check.kind === "includes") {
	                if (!input.data.includes(check.value, check.position)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        validation: { includes: check.value, position: check.position },
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "toLowerCase") {
	                input.data = input.data.toLowerCase();
	            }
	            else if (check.kind === "toUpperCase") {
	                input.data = input.data.toUpperCase();
	            }
	            else if (check.kind === "startsWith") {
	                if (!input.data.startsWith(check.value)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        validation: { startsWith: check.value },
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "endsWith") {
	                if (!input.data.endsWith(check.value)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        validation: { endsWith: check.value },
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "datetime") {
	                const regex = datetimeRegex(check);
	                if (!regex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        validation: "datetime",
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "date") {
	                const regex = dateRegex;
	                if (!regex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        validation: "date",
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "time") {
	                const regex = timeRegex(check);
	                if (!regex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        validation: "time",
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "duration") {
	                if (!durationRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "duration",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "ip") {
	                if (!isValidIP(input.data, check.version)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "ip",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "jwt") {
	                if (!isValidJWT(input.data, check.alg)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "jwt",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "cidr") {
	                if (!isValidCidr(input.data, check.version)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "cidr",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "base64") {
	                if (!base64Regex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "base64",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "base64url") {
	                if (!base64urlRegex.test(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        validation: "base64url",
	                        code: ZodError_1.ZodIssueCode.invalid_string,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else {
	                util_1.util.assertNever(check);
	            }
	        }
	        return { status: status.value, value: input.data };
	    }
	    _regex(regex, validation, message) {
	        return this.refinement((data) => regex.test(data), {
	            validation,
	            code: ZodError_1.ZodIssueCode.invalid_string,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    _addCheck(check) {
	        return new ZodString({
	            ...this._def,
	            checks: [...this._def.checks, check],
	        });
	    }
	    email(message) {
	        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    url(message) {
	        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    emoji(message) {
	        return this._addCheck({ kind: "emoji", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    uuid(message) {
	        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    nanoid(message) {
	        return this._addCheck({ kind: "nanoid", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    cuid(message) {
	        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    cuid2(message) {
	        return this._addCheck({ kind: "cuid2", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    ulid(message) {
	        return this._addCheck({ kind: "ulid", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    base64(message) {
	        return this._addCheck({ kind: "base64", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    base64url(message) {
	        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
	        return this._addCheck({
	            kind: "base64url",
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    jwt(options) {
	        return this._addCheck({ kind: "jwt", ...errorUtil_1.errorUtil.errToObj(options) });
	    }
	    ip(options) {
	        return this._addCheck({ kind: "ip", ...errorUtil_1.errorUtil.errToObj(options) });
	    }
	    cidr(options) {
	        return this._addCheck({ kind: "cidr", ...errorUtil_1.errorUtil.errToObj(options) });
	    }
	    datetime(options) {
	        var _a, _b;
	        if (typeof options === "string") {
	            return this._addCheck({
	                kind: "datetime",
	                precision: null,
	                offset: false,
	                local: false,
	                message: options,
	            });
	        }
	        return this._addCheck({
	            kind: "datetime",
	            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
	            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
	            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
	            ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
	        });
	    }
	    date(message) {
	        return this._addCheck({ kind: "date", message });
	    }
	    time(options) {
	        if (typeof options === "string") {
	            return this._addCheck({
	                kind: "time",
	                precision: null,
	                message: options,
	            });
	        }
	        return this._addCheck({
	            kind: "time",
	            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
	            ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
	        });
	    }
	    duration(message) {
	        return this._addCheck({ kind: "duration", ...errorUtil_1.errorUtil.errToObj(message) });
	    }
	    regex(regex, message) {
	        return this._addCheck({
	            kind: "regex",
	            regex: regex,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    includes(value, options) {
	        return this._addCheck({
	            kind: "includes",
	            value: value,
	            position: options === null || options === void 0 ? void 0 : options.position,
	            ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
	        });
	    }
	    startsWith(value, message) {
	        return this._addCheck({
	            kind: "startsWith",
	            value: value,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    endsWith(value, message) {
	        return this._addCheck({
	            kind: "endsWith",
	            value: value,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    min(minLength, message) {
	        return this._addCheck({
	            kind: "min",
	            value: minLength,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    max(maxLength, message) {
	        return this._addCheck({
	            kind: "max",
	            value: maxLength,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    length(len, message) {
	        return this._addCheck({
	            kind: "length",
	            value: len,
	            ...errorUtil_1.errorUtil.errToObj(message),
	        });
	    }
	    /**
	     * Equivalent to `.min(1)`
	     */
	    nonempty(message) {
	        return this.min(1, errorUtil_1.errorUtil.errToObj(message));
	    }
	    trim() {
	        return new ZodString({
	            ...this._def,
	            checks: [...this._def.checks, { kind: "trim" }],
	        });
	    }
	    toLowerCase() {
	        return new ZodString({
	            ...this._def,
	            checks: [...this._def.checks, { kind: "toLowerCase" }],
	        });
	    }
	    toUpperCase() {
	        return new ZodString({
	            ...this._def,
	            checks: [...this._def.checks, { kind: "toUpperCase" }],
	        });
	    }
	    get isDatetime() {
	        return !!this._def.checks.find((ch) => ch.kind === "datetime");
	    }
	    get isDate() {
	        return !!this._def.checks.find((ch) => ch.kind === "date");
	    }
	    get isTime() {
	        return !!this._def.checks.find((ch) => ch.kind === "time");
	    }
	    get isDuration() {
	        return !!this._def.checks.find((ch) => ch.kind === "duration");
	    }
	    get isEmail() {
	        return !!this._def.checks.find((ch) => ch.kind === "email");
	    }
	    get isURL() {
	        return !!this._def.checks.find((ch) => ch.kind === "url");
	    }
	    get isEmoji() {
	        return !!this._def.checks.find((ch) => ch.kind === "emoji");
	    }
	    get isUUID() {
	        return !!this._def.checks.find((ch) => ch.kind === "uuid");
	    }
	    get isNANOID() {
	        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
	    }
	    get isCUID() {
	        return !!this._def.checks.find((ch) => ch.kind === "cuid");
	    }
	    get isCUID2() {
	        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
	    }
	    get isULID() {
	        return !!this._def.checks.find((ch) => ch.kind === "ulid");
	    }
	    get isIP() {
	        return !!this._def.checks.find((ch) => ch.kind === "ip");
	    }
	    get isCIDR() {
	        return !!this._def.checks.find((ch) => ch.kind === "cidr");
	    }
	    get isBase64() {
	        return !!this._def.checks.find((ch) => ch.kind === "base64");
	    }
	    get isBase64url() {
	        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
	        return !!this._def.checks.find((ch) => ch.kind === "base64url");
	    }
	    get minLength() {
	        let min = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "min") {
	                if (min === null || ch.value > min)
	                    min = ch.value;
	            }
	        }
	        return min;
	    }
	    get maxLength() {
	        let max = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "max") {
	                if (max === null || ch.value < max)
	                    max = ch.value;
	            }
	        }
	        return max;
	    }
	}
	types$4.ZodString = ZodString;
	ZodString.create = (params) => {
	    var _a;
	    return new ZodString({
	        checks: [],
	        typeName: ZodFirstPartyTypeKind.ZodString,
	        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
	        ...processCreateParams(params),
	    });
	};
	// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
	function floatSafeRemainder(val, step) {
	    const valDecCount = (val.toString().split(".")[1] || "").length;
	    const stepDecCount = (step.toString().split(".")[1] || "").length;
	    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
	    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
	    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
	    return (valInt % stepInt) / Math.pow(10, decCount);
	}
	class ZodNumber extends ZodType {
	    constructor() {
	        super(...arguments);
	        this.min = this.gte;
	        this.max = this.lte;
	        this.step = this.multipleOf;
	    }
	    _parse(input) {
	        if (this._def.coerce) {
	            input.data = Number(input.data);
	        }
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.number) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.number,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        let ctx = undefined;
	        const status = new parseUtil_1.ParseStatus();
	        for (const check of this._def.checks) {
	            if (check.kind === "int") {
	                if (!util_1.util.isInteger(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.invalid_type,
	                        expected: "integer",
	                        received: "float",
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "min") {
	                const tooSmall = check.inclusive
	                    ? input.data < check.value
	                    : input.data <= check.value;
	                if (tooSmall) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_small,
	                        minimum: check.value,
	                        type: "number",
	                        inclusive: check.inclusive,
	                        exact: false,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "max") {
	                const tooBig = check.inclusive
	                    ? input.data > check.value
	                    : input.data >= check.value;
	                if (tooBig) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_big,
	                        maximum: check.value,
	                        type: "number",
	                        inclusive: check.inclusive,
	                        exact: false,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "multipleOf") {
	                if (floatSafeRemainder(input.data, check.value) !== 0) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.not_multiple_of,
	                        multipleOf: check.value,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "finite") {
	                if (!Number.isFinite(input.data)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.not_finite,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else {
	                util_1.util.assertNever(check);
	            }
	        }
	        return { status: status.value, value: input.data };
	    }
	    gte(value, message) {
	        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    gt(value, message) {
	        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    lte(value, message) {
	        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    lt(value, message) {
	        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    setLimit(kind, value, inclusive, message) {
	        return new ZodNumber({
	            ...this._def,
	            checks: [
	                ...this._def.checks,
	                {
	                    kind,
	                    value,
	                    inclusive,
	                    message: errorUtil_1.errorUtil.toString(message),
	                },
	            ],
	        });
	    }
	    _addCheck(check) {
	        return new ZodNumber({
	            ...this._def,
	            checks: [...this._def.checks, check],
	        });
	    }
	    int(message) {
	        return this._addCheck({
	            kind: "int",
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    positive(message) {
	        return this._addCheck({
	            kind: "min",
	            value: 0,
	            inclusive: false,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    negative(message) {
	        return this._addCheck({
	            kind: "max",
	            value: 0,
	            inclusive: false,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    nonpositive(message) {
	        return this._addCheck({
	            kind: "max",
	            value: 0,
	            inclusive: true,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    nonnegative(message) {
	        return this._addCheck({
	            kind: "min",
	            value: 0,
	            inclusive: true,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    multipleOf(value, message) {
	        return this._addCheck({
	            kind: "multipleOf",
	            value: value,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    finite(message) {
	        return this._addCheck({
	            kind: "finite",
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    safe(message) {
	        return this._addCheck({
	            kind: "min",
	            inclusive: true,
	            value: Number.MIN_SAFE_INTEGER,
	            message: errorUtil_1.errorUtil.toString(message),
	        })._addCheck({
	            kind: "max",
	            inclusive: true,
	            value: Number.MAX_SAFE_INTEGER,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    get minValue() {
	        let min = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "min") {
	                if (min === null || ch.value > min)
	                    min = ch.value;
	            }
	        }
	        return min;
	    }
	    get maxValue() {
	        let max = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "max") {
	                if (max === null || ch.value < max)
	                    max = ch.value;
	            }
	        }
	        return max;
	    }
	    get isInt() {
	        return !!this._def.checks.find((ch) => ch.kind === "int" ||
	            (ch.kind === "multipleOf" && util_1.util.isInteger(ch.value)));
	    }
	    get isFinite() {
	        let max = null, min = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "finite" ||
	                ch.kind === "int" ||
	                ch.kind === "multipleOf") {
	                return true;
	            }
	            else if (ch.kind === "min") {
	                if (min === null || ch.value > min)
	                    min = ch.value;
	            }
	            else if (ch.kind === "max") {
	                if (max === null || ch.value < max)
	                    max = ch.value;
	            }
	        }
	        return Number.isFinite(min) && Number.isFinite(max);
	    }
	}
	types$4.ZodNumber = ZodNumber;
	ZodNumber.create = (params) => {
	    return new ZodNumber({
	        checks: [],
	        typeName: ZodFirstPartyTypeKind.ZodNumber,
	        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
	        ...processCreateParams(params),
	    });
	};
	class ZodBigInt extends ZodType {
	    constructor() {
	        super(...arguments);
	        this.min = this.gte;
	        this.max = this.lte;
	    }
	    _parse(input) {
	        if (this._def.coerce) {
	            try {
	                input.data = BigInt(input.data);
	            }
	            catch (_a) {
	                return this._getInvalidInput(input);
	            }
	        }
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.bigint) {
	            return this._getInvalidInput(input);
	        }
	        let ctx = undefined;
	        const status = new parseUtil_1.ParseStatus();
	        for (const check of this._def.checks) {
	            if (check.kind === "min") {
	                const tooSmall = check.inclusive
	                    ? input.data < check.value
	                    : input.data <= check.value;
	                if (tooSmall) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_small,
	                        type: "bigint",
	                        minimum: check.value,
	                        inclusive: check.inclusive,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "max") {
	                const tooBig = check.inclusive
	                    ? input.data > check.value
	                    : input.data >= check.value;
	                if (tooBig) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_big,
	                        type: "bigint",
	                        maximum: check.value,
	                        inclusive: check.inclusive,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "multipleOf") {
	                if (input.data % check.value !== BigInt(0)) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.not_multiple_of,
	                        multipleOf: check.value,
	                        message: check.message,
	                    });
	                    status.dirty();
	                }
	            }
	            else {
	                util_1.util.assertNever(check);
	            }
	        }
	        return { status: status.value, value: input.data };
	    }
	    _getInvalidInput(input) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.invalid_type,
	            expected: util_1.ZodParsedType.bigint,
	            received: ctx.parsedType,
	        });
	        return parseUtil_1.INVALID;
	    }
	    gte(value, message) {
	        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    gt(value, message) {
	        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    lte(value, message) {
	        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
	    }
	    lt(value, message) {
	        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
	    }
	    setLimit(kind, value, inclusive, message) {
	        return new ZodBigInt({
	            ...this._def,
	            checks: [
	                ...this._def.checks,
	                {
	                    kind,
	                    value,
	                    inclusive,
	                    message: errorUtil_1.errorUtil.toString(message),
	                },
	            ],
	        });
	    }
	    _addCheck(check) {
	        return new ZodBigInt({
	            ...this._def,
	            checks: [...this._def.checks, check],
	        });
	    }
	    positive(message) {
	        return this._addCheck({
	            kind: "min",
	            value: BigInt(0),
	            inclusive: false,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    negative(message) {
	        return this._addCheck({
	            kind: "max",
	            value: BigInt(0),
	            inclusive: false,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    nonpositive(message) {
	        return this._addCheck({
	            kind: "max",
	            value: BigInt(0),
	            inclusive: true,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    nonnegative(message) {
	        return this._addCheck({
	            kind: "min",
	            value: BigInt(0),
	            inclusive: true,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    multipleOf(value, message) {
	        return this._addCheck({
	            kind: "multipleOf",
	            value,
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    get minValue() {
	        let min = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "min") {
	                if (min === null || ch.value > min)
	                    min = ch.value;
	            }
	        }
	        return min;
	    }
	    get maxValue() {
	        let max = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "max") {
	                if (max === null || ch.value < max)
	                    max = ch.value;
	            }
	        }
	        return max;
	    }
	}
	types$4.ZodBigInt = ZodBigInt;
	ZodBigInt.create = (params) => {
	    var _a;
	    return new ZodBigInt({
	        checks: [],
	        typeName: ZodFirstPartyTypeKind.ZodBigInt,
	        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
	        ...processCreateParams(params),
	    });
	};
	class ZodBoolean extends ZodType {
	    _parse(input) {
	        if (this._def.coerce) {
	            input.data = Boolean(input.data);
	        }
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.boolean) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.boolean,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodBoolean = ZodBoolean;
	ZodBoolean.create = (params) => {
	    return new ZodBoolean({
	        typeName: ZodFirstPartyTypeKind.ZodBoolean,
	        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
	        ...processCreateParams(params),
	    });
	};
	class ZodDate extends ZodType {
	    _parse(input) {
	        if (this._def.coerce) {
	            input.data = new Date(input.data);
	        }
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.date) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.date,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (isNaN(input.data.getTime())) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_date,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const status = new parseUtil_1.ParseStatus();
	        let ctx = undefined;
	        for (const check of this._def.checks) {
	            if (check.kind === "min") {
	                if (input.data.getTime() < check.value) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_small,
	                        message: check.message,
	                        inclusive: true,
	                        exact: false,
	                        minimum: check.value,
	                        type: "date",
	                    });
	                    status.dirty();
	                }
	            }
	            else if (check.kind === "max") {
	                if (input.data.getTime() > check.value) {
	                    ctx = this._getOrReturnCtx(input, ctx);
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.too_big,
	                        message: check.message,
	                        inclusive: true,
	                        exact: false,
	                        maximum: check.value,
	                        type: "date",
	                    });
	                    status.dirty();
	                }
	            }
	            else {
	                util_1.util.assertNever(check);
	            }
	        }
	        return {
	            status: status.value,
	            value: new Date(input.data.getTime()),
	        };
	    }
	    _addCheck(check) {
	        return new ZodDate({
	            ...this._def,
	            checks: [...this._def.checks, check],
	        });
	    }
	    min(minDate, message) {
	        return this._addCheck({
	            kind: "min",
	            value: minDate.getTime(),
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    max(maxDate, message) {
	        return this._addCheck({
	            kind: "max",
	            value: maxDate.getTime(),
	            message: errorUtil_1.errorUtil.toString(message),
	        });
	    }
	    get minDate() {
	        let min = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "min") {
	                if (min === null || ch.value > min)
	                    min = ch.value;
	            }
	        }
	        return min != null ? new Date(min) : null;
	    }
	    get maxDate() {
	        let max = null;
	        for (const ch of this._def.checks) {
	            if (ch.kind === "max") {
	                if (max === null || ch.value < max)
	                    max = ch.value;
	            }
	        }
	        return max != null ? new Date(max) : null;
	    }
	}
	types$4.ZodDate = ZodDate;
	ZodDate.create = (params) => {
	    return new ZodDate({
	        checks: [],
	        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
	        typeName: ZodFirstPartyTypeKind.ZodDate,
	        ...processCreateParams(params),
	    });
	};
	class ZodSymbol extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.symbol) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.symbol,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodSymbol = ZodSymbol;
	ZodSymbol.create = (params) => {
	    return new ZodSymbol({
	        typeName: ZodFirstPartyTypeKind.ZodSymbol,
	        ...processCreateParams(params),
	    });
	};
	class ZodUndefined extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.undefined) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.undefined,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodUndefined = ZodUndefined;
	ZodUndefined.create = (params) => {
	    return new ZodUndefined({
	        typeName: ZodFirstPartyTypeKind.ZodUndefined,
	        ...processCreateParams(params),
	    });
	};
	class ZodNull extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.null) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.null,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodNull = ZodNull;
	ZodNull.create = (params) => {
	    return new ZodNull({
	        typeName: ZodFirstPartyTypeKind.ZodNull,
	        ...processCreateParams(params),
	    });
	};
	class ZodAny extends ZodType {
	    constructor() {
	        super(...arguments);
	        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
	        this._any = true;
	    }
	    _parse(input) {
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodAny = ZodAny;
	ZodAny.create = (params) => {
	    return new ZodAny({
	        typeName: ZodFirstPartyTypeKind.ZodAny,
	        ...processCreateParams(params),
	    });
	};
	class ZodUnknown extends ZodType {
	    constructor() {
	        super(...arguments);
	        // required
	        this._unknown = true;
	    }
	    _parse(input) {
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodUnknown = ZodUnknown;
	ZodUnknown.create = (params) => {
	    return new ZodUnknown({
	        typeName: ZodFirstPartyTypeKind.ZodUnknown,
	        ...processCreateParams(params),
	    });
	};
	class ZodNever extends ZodType {
	    _parse(input) {
	        const ctx = this._getOrReturnCtx(input);
	        (0, parseUtil_1.addIssueToContext)(ctx, {
	            code: ZodError_1.ZodIssueCode.invalid_type,
	            expected: util_1.ZodParsedType.never,
	            received: ctx.parsedType,
	        });
	        return parseUtil_1.INVALID;
	    }
	}
	types$4.ZodNever = ZodNever;
	ZodNever.create = (params) => {
	    return new ZodNever({
	        typeName: ZodFirstPartyTypeKind.ZodNever,
	        ...processCreateParams(params),
	    });
	};
	class ZodVoid extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.undefined) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.void,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	}
	types$4.ZodVoid = ZodVoid;
	ZodVoid.create = (params) => {
	    return new ZodVoid({
	        typeName: ZodFirstPartyTypeKind.ZodVoid,
	        ...processCreateParams(params),
	    });
	};
	class ZodArray extends ZodType {
	    _parse(input) {
	        const { ctx, status } = this._processInputParams(input);
	        const def = this._def;
	        if (ctx.parsedType !== util_1.ZodParsedType.array) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.array,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (def.exactLength !== null) {
	            const tooBig = ctx.data.length > def.exactLength.value;
	            const tooSmall = ctx.data.length < def.exactLength.value;
	            if (tooBig || tooSmall) {
	                (0, parseUtil_1.addIssueToContext)(ctx, {
	                    code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
	                    minimum: (tooSmall ? def.exactLength.value : undefined),
	                    maximum: (tooBig ? def.exactLength.value : undefined),
	                    type: "array",
	                    inclusive: true,
	                    exact: true,
	                    message: def.exactLength.message,
	                });
	                status.dirty();
	            }
	        }
	        if (def.minLength !== null) {
	            if (ctx.data.length < def.minLength.value) {
	                (0, parseUtil_1.addIssueToContext)(ctx, {
	                    code: ZodError_1.ZodIssueCode.too_small,
	                    minimum: def.minLength.value,
	                    type: "array",
	                    inclusive: true,
	                    exact: false,
	                    message: def.minLength.message,
	                });
	                status.dirty();
	            }
	        }
	        if (def.maxLength !== null) {
	            if (ctx.data.length > def.maxLength.value) {
	                (0, parseUtil_1.addIssueToContext)(ctx, {
	                    code: ZodError_1.ZodIssueCode.too_big,
	                    maximum: def.maxLength.value,
	                    type: "array",
	                    inclusive: true,
	                    exact: false,
	                    message: def.maxLength.message,
	                });
	                status.dirty();
	            }
	        }
	        if (ctx.common.async) {
	            return Promise.all([...ctx.data].map((item, i) => {
	                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
	            })).then((result) => {
	                return parseUtil_1.ParseStatus.mergeArray(status, result);
	            });
	        }
	        const result = [...ctx.data].map((item, i) => {
	            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
	        });
	        return parseUtil_1.ParseStatus.mergeArray(status, result);
	    }
	    get element() {
	        return this._def.type;
	    }
	    min(minLength, message) {
	        return new ZodArray({
	            ...this._def,
	            minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) },
	        });
	    }
	    max(maxLength, message) {
	        return new ZodArray({
	            ...this._def,
	            maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) },
	        });
	    }
	    length(len, message) {
	        return new ZodArray({
	            ...this._def,
	            exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message) },
	        });
	    }
	    nonempty(message) {
	        return this.min(1, message);
	    }
	}
	types$4.ZodArray = ZodArray;
	ZodArray.create = (schema, params) => {
	    return new ZodArray({
	        type: schema,
	        minLength: null,
	        maxLength: null,
	        exactLength: null,
	        typeName: ZodFirstPartyTypeKind.ZodArray,
	        ...processCreateParams(params),
	    });
	};
	function deepPartialify(schema) {
	    if (schema instanceof ZodObject) {
	        const newShape = {};
	        for (const key in schema.shape) {
	            const fieldSchema = schema.shape[key];
	            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
	        }
	        return new ZodObject({
	            ...schema._def,
	            shape: () => newShape,
	        });
	    }
	    else if (schema instanceof ZodArray) {
	        return new ZodArray({
	            ...schema._def,
	            type: deepPartialify(schema.element),
	        });
	    }
	    else if (schema instanceof ZodOptional) {
	        return ZodOptional.create(deepPartialify(schema.unwrap()));
	    }
	    else if (schema instanceof ZodNullable) {
	        return ZodNullable.create(deepPartialify(schema.unwrap()));
	    }
	    else if (schema instanceof ZodTuple) {
	        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
	    }
	    else {
	        return schema;
	    }
	}
	class ZodObject extends ZodType {
	    constructor() {
	        super(...arguments);
	        this._cached = null;
	        /**
	         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
	         * If you want to pass through unknown properties, use `.passthrough()` instead.
	         */
	        this.nonstrict = this.passthrough;
	        // extend<
	        //   Augmentation extends ZodRawShape,
	        //   NewOutput extends util.flatten<{
	        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
	        //       ? Augmentation[k]["_output"]
	        //       : k extends keyof Output
	        //       ? Output[k]
	        //       : never;
	        //   }>,
	        //   NewInput extends util.flatten<{
	        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
	        //       ? Augmentation[k]["_input"]
	        //       : k extends keyof Input
	        //       ? Input[k]
	        //       : never;
	        //   }>
	        // >(
	        //   augmentation: Augmentation
	        // ): ZodObject<
	        //   extendShape<T, Augmentation>,
	        //   UnknownKeys,
	        //   Catchall,
	        //   NewOutput,
	        //   NewInput
	        // > {
	        //   return new ZodObject({
	        //     ...this._def,
	        //     shape: () => ({
	        //       ...this._def.shape(),
	        //       ...augmentation,
	        //     }),
	        //   }) as any;
	        // }
	        /**
	         * @deprecated Use `.extend` instead
	         *  */
	        this.augment = this.extend;
	    }
	    _getCached() {
	        if (this._cached !== null)
	            return this._cached;
	        const shape = this._def.shape();
	        const keys = util_1.util.objectKeys(shape);
	        return (this._cached = { shape, keys });
	    }
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.object) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.object,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const { status, ctx } = this._processInputParams(input);
	        const { shape, keys: shapeKeys } = this._getCached();
	        const extraKeys = [];
	        if (!(this._def.catchall instanceof ZodNever &&
	            this._def.unknownKeys === "strip")) {
	            for (const key in ctx.data) {
	                if (!shapeKeys.includes(key)) {
	                    extraKeys.push(key);
	                }
	            }
	        }
	        const pairs = [];
	        for (const key of shapeKeys) {
	            const keyValidator = shape[key];
	            const value = ctx.data[key];
	            pairs.push({
	                key: { status: "valid", value: key },
	                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
	                alwaysSet: key in ctx.data,
	            });
	        }
	        if (this._def.catchall instanceof ZodNever) {
	            const unknownKeys = this._def.unknownKeys;
	            if (unknownKeys === "passthrough") {
	                for (const key of extraKeys) {
	                    pairs.push({
	                        key: { status: "valid", value: key },
	                        value: { status: "valid", value: ctx.data[key] },
	                    });
	                }
	            }
	            else if (unknownKeys === "strict") {
	                if (extraKeys.length > 0) {
	                    (0, parseUtil_1.addIssueToContext)(ctx, {
	                        code: ZodError_1.ZodIssueCode.unrecognized_keys,
	                        keys: extraKeys,
	                    });
	                    status.dirty();
	                }
	            }
	            else if (unknownKeys === "strip") ;
	            else {
	                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
	            }
	        }
	        else {
	            // run catchall validation
	            const catchall = this._def.catchall;
	            for (const key of extraKeys) {
	                const value = ctx.data[key];
	                pairs.push({
	                    key: { status: "valid", value: key },
	                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
	                    ),
	                    alwaysSet: key in ctx.data,
	                });
	            }
	        }
	        if (ctx.common.async) {
	            return Promise.resolve()
	                .then(async () => {
	                const syncPairs = [];
	                for (const pair of pairs) {
	                    const key = await pair.key;
	                    const value = await pair.value;
	                    syncPairs.push({
	                        key,
	                        value,
	                        alwaysSet: pair.alwaysSet,
	                    });
	                }
	                return syncPairs;
	            })
	                .then((syncPairs) => {
	                return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
	            });
	        }
	        else {
	            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
	        }
	    }
	    get shape() {
	        return this._def.shape();
	    }
	    strict(message) {
	        errorUtil_1.errorUtil.errToObj;
	        return new ZodObject({
	            ...this._def,
	            unknownKeys: "strict",
	            ...(message !== undefined
	                ? {
	                    errorMap: (issue, ctx) => {
	                        var _a, _b, _c, _d;
	                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
	                        if (issue.code === "unrecognized_keys")
	                            return {
	                                message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
	                            };
	                        return {
	                            message: defaultError,
	                        };
	                    },
	                }
	                : {}),
	        });
	    }
	    strip() {
	        return new ZodObject({
	            ...this._def,
	            unknownKeys: "strip",
	        });
	    }
	    passthrough() {
	        return new ZodObject({
	            ...this._def,
	            unknownKeys: "passthrough",
	        });
	    }
	    // const AugmentFactory =
	    //   <Def extends ZodObjectDef>(def: Def) =>
	    //   <Augmentation extends ZodRawShape>(
	    //     augmentation: Augmentation
	    //   ): ZodObject<
	    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
	    //     Def["unknownKeys"],
	    //     Def["catchall"]
	    //   > => {
	    //     return new ZodObject({
	    //       ...def,
	    //       shape: () => ({
	    //         ...def.shape(),
	    //         ...augmentation,
	    //       }),
	    //     }) as any;
	    //   };
	    extend(augmentation) {
	        return new ZodObject({
	            ...this._def,
	            shape: () => ({
	                ...this._def.shape(),
	                ...augmentation,
	            }),
	        });
	    }
	    /**
	     * Prior to zod@1.0.12 there was a bug in the
	     * inferred type of merged objects. Please
	     * upgrade if you are experiencing issues.
	     */
	    merge(merging) {
	        const merged = new ZodObject({
	            unknownKeys: merging._def.unknownKeys,
	            catchall: merging._def.catchall,
	            shape: () => ({
	                ...this._def.shape(),
	                ...merging._def.shape(),
	            }),
	            typeName: ZodFirstPartyTypeKind.ZodObject,
	        });
	        return merged;
	    }
	    // merge<
	    //   Incoming extends AnyZodObject,
	    //   Augmentation extends Incoming["shape"],
	    //   NewOutput extends {
	    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
	    //       ? Augmentation[k]["_output"]
	    //       : k extends keyof Output
	    //       ? Output[k]
	    //       : never;
	    //   },
	    //   NewInput extends {
	    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
	    //       ? Augmentation[k]["_input"]
	    //       : k extends keyof Input
	    //       ? Input[k]
	    //       : never;
	    //   }
	    // >(
	    //   merging: Incoming
	    // ): ZodObject<
	    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
	    //   Incoming["_def"]["unknownKeys"],
	    //   Incoming["_def"]["catchall"],
	    //   NewOutput,
	    //   NewInput
	    // > {
	    //   const merged: any = new ZodObject({
	    //     unknownKeys: merging._def.unknownKeys,
	    //     catchall: merging._def.catchall,
	    //     shape: () =>
	    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
	    //     typeName: ZodFirstPartyTypeKind.ZodObject,
	    //   }) as any;
	    //   return merged;
	    // }
	    setKey(key, schema) {
	        return this.augment({ [key]: schema });
	    }
	    // merge<Incoming extends AnyZodObject>(
	    //   merging: Incoming
	    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
	    // ZodObject<
	    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
	    //   Incoming["_def"]["unknownKeys"],
	    //   Incoming["_def"]["catchall"]
	    // > {
	    //   // const mergedShape = objectUtil.mergeShapes(
	    //   //   this._def.shape(),
	    //   //   merging._def.shape()
	    //   // );
	    //   const merged: any = new ZodObject({
	    //     unknownKeys: merging._def.unknownKeys,
	    //     catchall: merging._def.catchall,
	    //     shape: () =>
	    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
	    //     typeName: ZodFirstPartyTypeKind.ZodObject,
	    //   }) as any;
	    //   return merged;
	    // }
	    catchall(index) {
	        return new ZodObject({
	            ...this._def,
	            catchall: index,
	        });
	    }
	    pick(mask) {
	        const shape = {};
	        util_1.util.objectKeys(mask).forEach((key) => {
	            if (mask[key] && this.shape[key]) {
	                shape[key] = this.shape[key];
	            }
	        });
	        return new ZodObject({
	            ...this._def,
	            shape: () => shape,
	        });
	    }
	    omit(mask) {
	        const shape = {};
	        util_1.util.objectKeys(this.shape).forEach((key) => {
	            if (!mask[key]) {
	                shape[key] = this.shape[key];
	            }
	        });
	        return new ZodObject({
	            ...this._def,
	            shape: () => shape,
	        });
	    }
	    /**
	     * @deprecated
	     */
	    deepPartial() {
	        return deepPartialify(this);
	    }
	    partial(mask) {
	        const newShape = {};
	        util_1.util.objectKeys(this.shape).forEach((key) => {
	            const fieldSchema = this.shape[key];
	            if (mask && !mask[key]) {
	                newShape[key] = fieldSchema;
	            }
	            else {
	                newShape[key] = fieldSchema.optional();
	            }
	        });
	        return new ZodObject({
	            ...this._def,
	            shape: () => newShape,
	        });
	    }
	    required(mask) {
	        const newShape = {};
	        util_1.util.objectKeys(this.shape).forEach((key) => {
	            if (mask && !mask[key]) {
	                newShape[key] = this.shape[key];
	            }
	            else {
	                const fieldSchema = this.shape[key];
	                let newField = fieldSchema;
	                while (newField instanceof ZodOptional) {
	                    newField = newField._def.innerType;
	                }
	                newShape[key] = newField;
	            }
	        });
	        return new ZodObject({
	            ...this._def,
	            shape: () => newShape,
	        });
	    }
	    keyof() {
	        return createZodEnum(util_1.util.objectKeys(this.shape));
	    }
	}
	types$4.ZodObject = ZodObject;
	ZodObject.create = (shape, params) => {
	    return new ZodObject({
	        shape: () => shape,
	        unknownKeys: "strip",
	        catchall: ZodNever.create(),
	        typeName: ZodFirstPartyTypeKind.ZodObject,
	        ...processCreateParams(params),
	    });
	};
	ZodObject.strictCreate = (shape, params) => {
	    return new ZodObject({
	        shape: () => shape,
	        unknownKeys: "strict",
	        catchall: ZodNever.create(),
	        typeName: ZodFirstPartyTypeKind.ZodObject,
	        ...processCreateParams(params),
	    });
	};
	ZodObject.lazycreate = (shape, params) => {
	    return new ZodObject({
	        shape,
	        unknownKeys: "strip",
	        catchall: ZodNever.create(),
	        typeName: ZodFirstPartyTypeKind.ZodObject,
	        ...processCreateParams(params),
	    });
	};
	class ZodUnion extends ZodType {
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        const options = this._def.options;
	        function handleResults(results) {
	            // return first issue-free validation if it exists
	            for (const result of results) {
	                if (result.result.status === "valid") {
	                    return result.result;
	                }
	            }
	            for (const result of results) {
	                if (result.result.status === "dirty") {
	                    // add issues from dirty option
	                    ctx.common.issues.push(...result.ctx.common.issues);
	                    return result.result;
	                }
	            }
	            // return invalid
	            const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_union,
	                unionErrors,
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (ctx.common.async) {
	            return Promise.all(options.map(async (option) => {
	                const childCtx = {
	                    ...ctx,
	                    common: {
	                        ...ctx.common,
	                        issues: [],
	                    },
	                    parent: null,
	                };
	                return {
	                    result: await option._parseAsync({
	                        data: ctx.data,
	                        path: ctx.path,
	                        parent: childCtx,
	                    }),
	                    ctx: childCtx,
	                };
	            })).then(handleResults);
	        }
	        else {
	            let dirty = undefined;
	            const issues = [];
	            for (const option of options) {
	                const childCtx = {
	                    ...ctx,
	                    common: {
	                        ...ctx.common,
	                        issues: [],
	                    },
	                    parent: null,
	                };
	                const result = option._parseSync({
	                    data: ctx.data,
	                    path: ctx.path,
	                    parent: childCtx,
	                });
	                if (result.status === "valid") {
	                    return result;
	                }
	                else if (result.status === "dirty" && !dirty) {
	                    dirty = { result, ctx: childCtx };
	                }
	                if (childCtx.common.issues.length) {
	                    issues.push(childCtx.common.issues);
	                }
	            }
	            if (dirty) {
	                ctx.common.issues.push(...dirty.ctx.common.issues);
	                return dirty.result;
	            }
	            const unionErrors = issues.map((issues) => new ZodError_1.ZodError(issues));
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_union,
	                unionErrors,
	            });
	            return parseUtil_1.INVALID;
	        }
	    }
	    get options() {
	        return this._def.options;
	    }
	}
	types$4.ZodUnion = ZodUnion;
	ZodUnion.create = (types, params) => {
	    return new ZodUnion({
	        options: types,
	        typeName: ZodFirstPartyTypeKind.ZodUnion,
	        ...processCreateParams(params),
	    });
	};
	/////////////////////////////////////////////////////
	/////////////////////////////////////////////////////
	//////////                                 //////////
	//////////      ZodDiscriminatedUnion      //////////
	//////////                                 //////////
	/////////////////////////////////////////////////////
	/////////////////////////////////////////////////////
	const getDiscriminator = (type) => {
	    if (type instanceof ZodLazy) {
	        return getDiscriminator(type.schema);
	    }
	    else if (type instanceof ZodEffects) {
	        return getDiscriminator(type.innerType());
	    }
	    else if (type instanceof ZodLiteral) {
	        return [type.value];
	    }
	    else if (type instanceof ZodEnum) {
	        return type.options;
	    }
	    else if (type instanceof ZodNativeEnum) {
	        // eslint-disable-next-line ban/ban
	        return util_1.util.objectValues(type.enum);
	    }
	    else if (type instanceof ZodDefault) {
	        return getDiscriminator(type._def.innerType);
	    }
	    else if (type instanceof ZodUndefined) {
	        return [undefined];
	    }
	    else if (type instanceof ZodNull) {
	        return [null];
	    }
	    else if (type instanceof ZodOptional) {
	        return [undefined, ...getDiscriminator(type.unwrap())];
	    }
	    else if (type instanceof ZodNullable) {
	        return [null, ...getDiscriminator(type.unwrap())];
	    }
	    else if (type instanceof ZodBranded) {
	        return getDiscriminator(type.unwrap());
	    }
	    else if (type instanceof ZodReadonly) {
	        return getDiscriminator(type.unwrap());
	    }
	    else if (type instanceof ZodCatch) {
	        return getDiscriminator(type._def.innerType);
	    }
	    else {
	        return [];
	    }
	};
	class ZodDiscriminatedUnion extends ZodType {
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.object) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.object,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const discriminator = this.discriminator;
	        const discriminatorValue = ctx.data[discriminator];
	        const option = this.optionsMap.get(discriminatorValue);
	        if (!option) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
	                options: Array.from(this.optionsMap.keys()),
	                path: [discriminator],
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (ctx.common.async) {
	            return option._parseAsync({
	                data: ctx.data,
	                path: ctx.path,
	                parent: ctx,
	            });
	        }
	        else {
	            return option._parseSync({
	                data: ctx.data,
	                path: ctx.path,
	                parent: ctx,
	            });
	        }
	    }
	    get discriminator() {
	        return this._def.discriminator;
	    }
	    get options() {
	        return this._def.options;
	    }
	    get optionsMap() {
	        return this._def.optionsMap;
	    }
	    /**
	     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
	     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
	     * have a different value for each object in the union.
	     * @param discriminator the name of the discriminator property
	     * @param types an array of object schemas
	     * @param params
	     */
	    static create(discriminator, options, params) {
	        // Get all the valid discriminator values
	        const optionsMap = new Map();
	        // try {
	        for (const type of options) {
	            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
	            if (!discriminatorValues.length) {
	                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
	            }
	            for (const value of discriminatorValues) {
	                if (optionsMap.has(value)) {
	                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
	                }
	                optionsMap.set(value, type);
	            }
	        }
	        return new ZodDiscriminatedUnion({
	            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
	            discriminator,
	            options,
	            optionsMap,
	            ...processCreateParams(params),
	        });
	    }
	}
	types$4.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
	function mergeValues(a, b) {
	    const aType = (0, util_1.getParsedType)(a);
	    const bType = (0, util_1.getParsedType)(b);
	    if (a === b) {
	        return { valid: true, data: a };
	    }
	    else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
	        const bKeys = util_1.util.objectKeys(b);
	        const sharedKeys = util_1.util
	            .objectKeys(a)
	            .filter((key) => bKeys.indexOf(key) !== -1);
	        const newObj = { ...a, ...b };
	        for (const key of sharedKeys) {
	            const sharedValue = mergeValues(a[key], b[key]);
	            if (!sharedValue.valid) {
	                return { valid: false };
	            }
	            newObj[key] = sharedValue.data;
	        }
	        return { valid: true, data: newObj };
	    }
	    else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
	        if (a.length !== b.length) {
	            return { valid: false };
	        }
	        const newArray = [];
	        for (let index = 0; index < a.length; index++) {
	            const itemA = a[index];
	            const itemB = b[index];
	            const sharedValue = mergeValues(itemA, itemB);
	            if (!sharedValue.valid) {
	                return { valid: false };
	            }
	            newArray.push(sharedValue.data);
	        }
	        return { valid: true, data: newArray };
	    }
	    else if (aType === util_1.ZodParsedType.date &&
	        bType === util_1.ZodParsedType.date &&
	        +a === +b) {
	        return { valid: true, data: a };
	    }
	    else {
	        return { valid: false };
	    }
	}
	class ZodIntersection extends ZodType {
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        const handleParsed = (parsedLeft, parsedRight) => {
	            if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
	                return parseUtil_1.INVALID;
	            }
	            const merged = mergeValues(parsedLeft.value, parsedRight.value);
	            if (!merged.valid) {
	                (0, parseUtil_1.addIssueToContext)(ctx, {
	                    code: ZodError_1.ZodIssueCode.invalid_intersection_types,
	                });
	                return parseUtil_1.INVALID;
	            }
	            if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
	                status.dirty();
	            }
	            return { status: status.value, value: merged.data };
	        };
	        if (ctx.common.async) {
	            return Promise.all([
	                this._def.left._parseAsync({
	                    data: ctx.data,
	                    path: ctx.path,
	                    parent: ctx,
	                }),
	                this._def.right._parseAsync({
	                    data: ctx.data,
	                    path: ctx.path,
	                    parent: ctx,
	                }),
	            ]).then(([left, right]) => handleParsed(left, right));
	        }
	        else {
	            return handleParsed(this._def.left._parseSync({
	                data: ctx.data,
	                path: ctx.path,
	                parent: ctx,
	            }), this._def.right._parseSync({
	                data: ctx.data,
	                path: ctx.path,
	                parent: ctx,
	            }));
	        }
	    }
	}
	types$4.ZodIntersection = ZodIntersection;
	ZodIntersection.create = (left, right, params) => {
	    return new ZodIntersection({
	        left: left,
	        right: right,
	        typeName: ZodFirstPartyTypeKind.ZodIntersection,
	        ...processCreateParams(params),
	    });
	};
	class ZodTuple extends ZodType {
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.array) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.array,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (ctx.data.length < this._def.items.length) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.too_small,
	                minimum: this._def.items.length,
	                inclusive: true,
	                exact: false,
	                type: "array",
	            });
	            return parseUtil_1.INVALID;
	        }
	        const rest = this._def.rest;
	        if (!rest && ctx.data.length > this._def.items.length) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.too_big,
	                maximum: this._def.items.length,
	                inclusive: true,
	                exact: false,
	                type: "array",
	            });
	            status.dirty();
	        }
	        const items = [...ctx.data]
	            .map((item, itemIndex) => {
	            const schema = this._def.items[itemIndex] || this._def.rest;
	            if (!schema)
	                return null;
	            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
	        })
	            .filter((x) => !!x); // filter nulls
	        if (ctx.common.async) {
	            return Promise.all(items).then((results) => {
	                return parseUtil_1.ParseStatus.mergeArray(status, results);
	            });
	        }
	        else {
	            return parseUtil_1.ParseStatus.mergeArray(status, items);
	        }
	    }
	    get items() {
	        return this._def.items;
	    }
	    rest(rest) {
	        return new ZodTuple({
	            ...this._def,
	            rest,
	        });
	    }
	}
	types$4.ZodTuple = ZodTuple;
	ZodTuple.create = (schemas, params) => {
	    if (!Array.isArray(schemas)) {
	        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
	    }
	    return new ZodTuple({
	        items: schemas,
	        typeName: ZodFirstPartyTypeKind.ZodTuple,
	        rest: null,
	        ...processCreateParams(params),
	    });
	};
	class ZodRecord extends ZodType {
	    get keySchema() {
	        return this._def.keyType;
	    }
	    get valueSchema() {
	        return this._def.valueType;
	    }
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.object) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.object,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const pairs = [];
	        const keyType = this._def.keyType;
	        const valueType = this._def.valueType;
	        for (const key in ctx.data) {
	            pairs.push({
	                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
	                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
	                alwaysSet: key in ctx.data,
	            });
	        }
	        if (ctx.common.async) {
	            return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
	        }
	        else {
	            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
	        }
	    }
	    get element() {
	        return this._def.valueType;
	    }
	    static create(first, second, third) {
	        if (second instanceof ZodType) {
	            return new ZodRecord({
	                keyType: first,
	                valueType: second,
	                typeName: ZodFirstPartyTypeKind.ZodRecord,
	                ...processCreateParams(third),
	            });
	        }
	        return new ZodRecord({
	            keyType: ZodString.create(),
	            valueType: first,
	            typeName: ZodFirstPartyTypeKind.ZodRecord,
	            ...processCreateParams(second),
	        });
	    }
	}
	types$4.ZodRecord = ZodRecord;
	class ZodMap extends ZodType {
	    get keySchema() {
	        return this._def.keyType;
	    }
	    get valueSchema() {
	        return this._def.valueType;
	    }
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.map) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.map,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const keyType = this._def.keyType;
	        const valueType = this._def.valueType;
	        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
	            return {
	                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
	                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
	            };
	        });
	        if (ctx.common.async) {
	            const finalMap = new Map();
	            return Promise.resolve().then(async () => {
	                for (const pair of pairs) {
	                    const key = await pair.key;
	                    const value = await pair.value;
	                    if (key.status === "aborted" || value.status === "aborted") {
	                        return parseUtil_1.INVALID;
	                    }
	                    if (key.status === "dirty" || value.status === "dirty") {
	                        status.dirty();
	                    }
	                    finalMap.set(key.value, value.value);
	                }
	                return { status: status.value, value: finalMap };
	            });
	        }
	        else {
	            const finalMap = new Map();
	            for (const pair of pairs) {
	                const key = pair.key;
	                const value = pair.value;
	                if (key.status === "aborted" || value.status === "aborted") {
	                    return parseUtil_1.INVALID;
	                }
	                if (key.status === "dirty" || value.status === "dirty") {
	                    status.dirty();
	                }
	                finalMap.set(key.value, value.value);
	            }
	            return { status: status.value, value: finalMap };
	        }
	    }
	}
	types$4.ZodMap = ZodMap;
	ZodMap.create = (keyType, valueType, params) => {
	    return new ZodMap({
	        valueType,
	        keyType,
	        typeName: ZodFirstPartyTypeKind.ZodMap,
	        ...processCreateParams(params),
	    });
	};
	class ZodSet extends ZodType {
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.set) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.set,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const def = this._def;
	        if (def.minSize !== null) {
	            if (ctx.data.size < def.minSize.value) {
	                (0, parseUtil_1.addIssueToContext)(ctx, {
	                    code: ZodError_1.ZodIssueCode.too_small,
	                    minimum: def.minSize.value,
	                    type: "set",
	                    inclusive: true,
	                    exact: false,
	                    message: def.minSize.message,
	                });
	                status.dirty();
	            }
	        }
	        if (def.maxSize !== null) {
	            if (ctx.data.size > def.maxSize.value) {
	                (0, parseUtil_1.addIssueToContext)(ctx, {
	                    code: ZodError_1.ZodIssueCode.too_big,
	                    maximum: def.maxSize.value,
	                    type: "set",
	                    inclusive: true,
	                    exact: false,
	                    message: def.maxSize.message,
	                });
	                status.dirty();
	            }
	        }
	        const valueType = this._def.valueType;
	        function finalizeSet(elements) {
	            const parsedSet = new Set();
	            for (const element of elements) {
	                if (element.status === "aborted")
	                    return parseUtil_1.INVALID;
	                if (element.status === "dirty")
	                    status.dirty();
	                parsedSet.add(element.value);
	            }
	            return { status: status.value, value: parsedSet };
	        }
	        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
	        if (ctx.common.async) {
	            return Promise.all(elements).then((elements) => finalizeSet(elements));
	        }
	        else {
	            return finalizeSet(elements);
	        }
	    }
	    min(minSize, message) {
	        return new ZodSet({
	            ...this._def,
	            minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) },
	        });
	    }
	    max(maxSize, message) {
	        return new ZodSet({
	            ...this._def,
	            maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) },
	        });
	    }
	    size(size, message) {
	        return this.min(size, message).max(size, message);
	    }
	    nonempty(message) {
	        return this.min(1, message);
	    }
	}
	types$4.ZodSet = ZodSet;
	ZodSet.create = (valueType, params) => {
	    return new ZodSet({
	        valueType,
	        minSize: null,
	        maxSize: null,
	        typeName: ZodFirstPartyTypeKind.ZodSet,
	        ...processCreateParams(params),
	    });
	};
	class ZodFunction extends ZodType {
	    constructor() {
	        super(...arguments);
	        this.validate = this.implement;
	    }
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.function) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.function,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        function makeArgsIssue(args, error) {
	            return (0, parseUtil_1.makeIssue)({
	                data: args,
	                path: ctx.path,
	                errorMaps: [
	                    ctx.common.contextualErrorMap,
	                    ctx.schemaErrorMap,
	                    (0, errors_1.getErrorMap)(),
	                    errors_1.defaultErrorMap,
	                ].filter((x) => !!x),
	                issueData: {
	                    code: ZodError_1.ZodIssueCode.invalid_arguments,
	                    argumentsError: error,
	                },
	            });
	        }
	        function makeReturnsIssue(returns, error) {
	            return (0, parseUtil_1.makeIssue)({
	                data: returns,
	                path: ctx.path,
	                errorMaps: [
	                    ctx.common.contextualErrorMap,
	                    ctx.schemaErrorMap,
	                    (0, errors_1.getErrorMap)(),
	                    errors_1.defaultErrorMap,
	                ].filter((x) => !!x),
	                issueData: {
	                    code: ZodError_1.ZodIssueCode.invalid_return_type,
	                    returnTypeError: error,
	                },
	            });
	        }
	        const params = { errorMap: ctx.common.contextualErrorMap };
	        const fn = ctx.data;
	        if (this._def.returns instanceof ZodPromise) {
	            // Would love a way to avoid disabling this rule, but we need
	            // an alias (using an arrow function was what caused 2651).
	            // eslint-disable-next-line @typescript-eslint/no-this-alias
	            const me = this;
	            return (0, parseUtil_1.OK)(async function (...args) {
	                const error = new ZodError_1.ZodError([]);
	                const parsedArgs = await me._def.args
	                    .parseAsync(args, params)
	                    .catch((e) => {
	                    error.addIssue(makeArgsIssue(args, e));
	                    throw error;
	                });
	                const result = await Reflect.apply(fn, this, parsedArgs);
	                const parsedReturns = await me._def.returns._def.type
	                    .parseAsync(result, params)
	                    .catch((e) => {
	                    error.addIssue(makeReturnsIssue(result, e));
	                    throw error;
	                });
	                return parsedReturns;
	            });
	        }
	        else {
	            // Would love a way to avoid disabling this rule, but we need
	            // an alias (using an arrow function was what caused 2651).
	            // eslint-disable-next-line @typescript-eslint/no-this-alias
	            const me = this;
	            return (0, parseUtil_1.OK)(function (...args) {
	                const parsedArgs = me._def.args.safeParse(args, params);
	                if (!parsedArgs.success) {
	                    throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
	                }
	                const result = Reflect.apply(fn, this, parsedArgs.data);
	                const parsedReturns = me._def.returns.safeParse(result, params);
	                if (!parsedReturns.success) {
	                    throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
	                }
	                return parsedReturns.data;
	            });
	        }
	    }
	    parameters() {
	        return this._def.args;
	    }
	    returnType() {
	        return this._def.returns;
	    }
	    args(...items) {
	        return new ZodFunction({
	            ...this._def,
	            args: ZodTuple.create(items).rest(ZodUnknown.create()),
	        });
	    }
	    returns(returnType) {
	        return new ZodFunction({
	            ...this._def,
	            returns: returnType,
	        });
	    }
	    implement(func) {
	        const validatedFunc = this.parse(func);
	        return validatedFunc;
	    }
	    strictImplement(func) {
	        const validatedFunc = this.parse(func);
	        return validatedFunc;
	    }
	    static create(args, returns, params) {
	        return new ZodFunction({
	            args: (args
	                ? args
	                : ZodTuple.create([]).rest(ZodUnknown.create())),
	            returns: returns || ZodUnknown.create(),
	            typeName: ZodFirstPartyTypeKind.ZodFunction,
	            ...processCreateParams(params),
	        });
	    }
	}
	types$4.ZodFunction = ZodFunction;
	class ZodLazy extends ZodType {
	    get schema() {
	        return this._def.getter();
	    }
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        const lazySchema = this._def.getter();
	        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
	    }
	}
	types$4.ZodLazy = ZodLazy;
	ZodLazy.create = (getter, params) => {
	    return new ZodLazy({
	        getter: getter,
	        typeName: ZodFirstPartyTypeKind.ZodLazy,
	        ...processCreateParams(params),
	    });
	};
	class ZodLiteral extends ZodType {
	    _parse(input) {
	        if (input.data !== this._def.value) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                received: ctx.data,
	                code: ZodError_1.ZodIssueCode.invalid_literal,
	                expected: this._def.value,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return { status: "valid", value: input.data };
	    }
	    get value() {
	        return this._def.value;
	    }
	}
	types$4.ZodLiteral = ZodLiteral;
	ZodLiteral.create = (value, params) => {
	    return new ZodLiteral({
	        value: value,
	        typeName: ZodFirstPartyTypeKind.ZodLiteral,
	        ...processCreateParams(params),
	    });
	};
	function createZodEnum(values, params) {
	    return new ZodEnum({
	        values,
	        typeName: ZodFirstPartyTypeKind.ZodEnum,
	        ...processCreateParams(params),
	    });
	}
	class ZodEnum extends ZodType {
	    constructor() {
	        super(...arguments);
	        _ZodEnum_cache.set(this, void 0);
	    }
	    _parse(input) {
	        if (typeof input.data !== "string") {
	            const ctx = this._getOrReturnCtx(input);
	            const expectedValues = this._def.values;
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                expected: util_1.util.joinValues(expectedValues),
	                received: ctx.parsedType,
	                code: ZodError_1.ZodIssueCode.invalid_type,
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
	            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
	        }
	        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
	            const ctx = this._getOrReturnCtx(input);
	            const expectedValues = this._def.values;
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                received: ctx.data,
	                code: ZodError_1.ZodIssueCode.invalid_enum_value,
	                options: expectedValues,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	    get options() {
	        return this._def.values;
	    }
	    get enum() {
	        const enumValues = {};
	        for (const val of this._def.values) {
	            enumValues[val] = val;
	        }
	        return enumValues;
	    }
	    get Values() {
	        const enumValues = {};
	        for (const val of this._def.values) {
	            enumValues[val] = val;
	        }
	        return enumValues;
	    }
	    get Enum() {
	        const enumValues = {};
	        for (const val of this._def.values) {
	            enumValues[val] = val;
	        }
	        return enumValues;
	    }
	    extract(values, newDef = this._def) {
	        return ZodEnum.create(values, {
	            ...this._def,
	            ...newDef,
	        });
	    }
	    exclude(values, newDef = this._def) {
	        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
	            ...this._def,
	            ...newDef,
	        });
	    }
	}
	types$4.ZodEnum = ZodEnum;
	_ZodEnum_cache = new WeakMap();
	ZodEnum.create = createZodEnum;
	class ZodNativeEnum extends ZodType {
	    constructor() {
	        super(...arguments);
	        _ZodNativeEnum_cache.set(this, void 0);
	    }
	    _parse(input) {
	        const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
	        const ctx = this._getOrReturnCtx(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.string &&
	            ctx.parsedType !== util_1.ZodParsedType.number) {
	            const expectedValues = util_1.util.objectValues(nativeEnumValues);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                expected: util_1.util.joinValues(expectedValues),
	                received: ctx.parsedType,
	                code: ZodError_1.ZodIssueCode.invalid_type,
	            });
	            return parseUtil_1.INVALID;
	        }
	        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
	            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
	        }
	        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
	            const expectedValues = util_1.util.objectValues(nativeEnumValues);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                received: ctx.data,
	                code: ZodError_1.ZodIssueCode.invalid_enum_value,
	                options: expectedValues,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return (0, parseUtil_1.OK)(input.data);
	    }
	    get enum() {
	        return this._def.values;
	    }
	}
	types$4.ZodNativeEnum = ZodNativeEnum;
	_ZodNativeEnum_cache = new WeakMap();
	ZodNativeEnum.create = (values, params) => {
	    return new ZodNativeEnum({
	        values: values,
	        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
	        ...processCreateParams(params),
	    });
	};
	class ZodPromise extends ZodType {
	    unwrap() {
	        return this._def.type;
	    }
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        if (ctx.parsedType !== util_1.ZodParsedType.promise &&
	            ctx.common.async === false) {
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.promise,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        const promisified = ctx.parsedType === util_1.ZodParsedType.promise
	            ? ctx.data
	            : Promise.resolve(ctx.data);
	        return (0, parseUtil_1.OK)(promisified.then((data) => {
	            return this._def.type.parseAsync(data, {
	                path: ctx.path,
	                errorMap: ctx.common.contextualErrorMap,
	            });
	        }));
	    }
	}
	types$4.ZodPromise = ZodPromise;
	ZodPromise.create = (schema, params) => {
	    return new ZodPromise({
	        type: schema,
	        typeName: ZodFirstPartyTypeKind.ZodPromise,
	        ...processCreateParams(params),
	    });
	};
	class ZodEffects extends ZodType {
	    innerType() {
	        return this._def.schema;
	    }
	    sourceType() {
	        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
	            ? this._def.schema.sourceType()
	            : this._def.schema;
	    }
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        const effect = this._def.effect || null;
	        const checkCtx = {
	            addIssue: (arg) => {
	                (0, parseUtil_1.addIssueToContext)(ctx, arg);
	                if (arg.fatal) {
	                    status.abort();
	                }
	                else {
	                    status.dirty();
	                }
	            },
	            get path() {
	                return ctx.path;
	            },
	        };
	        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
	        if (effect.type === "preprocess") {
	            const processed = effect.transform(ctx.data, checkCtx);
	            if (ctx.common.async) {
	                return Promise.resolve(processed).then(async (processed) => {
	                    if (status.value === "aborted")
	                        return parseUtil_1.INVALID;
	                    const result = await this._def.schema._parseAsync({
	                        data: processed,
	                        path: ctx.path,
	                        parent: ctx,
	                    });
	                    if (result.status === "aborted")
	                        return parseUtil_1.INVALID;
	                    if (result.status === "dirty")
	                        return (0, parseUtil_1.DIRTY)(result.value);
	                    if (status.value === "dirty")
	                        return (0, parseUtil_1.DIRTY)(result.value);
	                    return result;
	                });
	            }
	            else {
	                if (status.value === "aborted")
	                    return parseUtil_1.INVALID;
	                const result = this._def.schema._parseSync({
	                    data: processed,
	                    path: ctx.path,
	                    parent: ctx,
	                });
	                if (result.status === "aborted")
	                    return parseUtil_1.INVALID;
	                if (result.status === "dirty")
	                    return (0, parseUtil_1.DIRTY)(result.value);
	                if (status.value === "dirty")
	                    return (0, parseUtil_1.DIRTY)(result.value);
	                return result;
	            }
	        }
	        if (effect.type === "refinement") {
	            const executeRefinement = (acc) => {
	                const result = effect.refinement(acc, checkCtx);
	                if (ctx.common.async) {
	                    return Promise.resolve(result);
	                }
	                if (result instanceof Promise) {
	                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
	                }
	                return acc;
	            };
	            if (ctx.common.async === false) {
	                const inner = this._def.schema._parseSync({
	                    data: ctx.data,
	                    path: ctx.path,
	                    parent: ctx,
	                });
	                if (inner.status === "aborted")
	                    return parseUtil_1.INVALID;
	                if (inner.status === "dirty")
	                    status.dirty();
	                // return value is ignored
	                executeRefinement(inner.value);
	                return { status: status.value, value: inner.value };
	            }
	            else {
	                return this._def.schema
	                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
	                    .then((inner) => {
	                    if (inner.status === "aborted")
	                        return parseUtil_1.INVALID;
	                    if (inner.status === "dirty")
	                        status.dirty();
	                    return executeRefinement(inner.value).then(() => {
	                        return { status: status.value, value: inner.value };
	                    });
	                });
	            }
	        }
	        if (effect.type === "transform") {
	            if (ctx.common.async === false) {
	                const base = this._def.schema._parseSync({
	                    data: ctx.data,
	                    path: ctx.path,
	                    parent: ctx,
	                });
	                if (!(0, parseUtil_1.isValid)(base))
	                    return base;
	                const result = effect.transform(base.value, checkCtx);
	                if (result instanceof Promise) {
	                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
	                }
	                return { status: status.value, value: result };
	            }
	            else {
	                return this._def.schema
	                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
	                    .then((base) => {
	                    if (!(0, parseUtil_1.isValid)(base))
	                        return base;
	                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
	                });
	            }
	        }
	        util_1.util.assertNever(effect);
	    }
	}
	types$4.ZodEffects = ZodEffects;
	types$4.ZodTransformer = ZodEffects;
	ZodEffects.create = (schema, effect, params) => {
	    return new ZodEffects({
	        schema,
	        typeName: ZodFirstPartyTypeKind.ZodEffects,
	        effect,
	        ...processCreateParams(params),
	    });
	};
	ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
	    return new ZodEffects({
	        schema,
	        effect: { type: "preprocess", transform: preprocess },
	        typeName: ZodFirstPartyTypeKind.ZodEffects,
	        ...processCreateParams(params),
	    });
	};
	class ZodOptional extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType === util_1.ZodParsedType.undefined) {
	            return (0, parseUtil_1.OK)(undefined);
	        }
	        return this._def.innerType._parse(input);
	    }
	    unwrap() {
	        return this._def.innerType;
	    }
	}
	types$4.ZodOptional = ZodOptional;
	ZodOptional.create = (type, params) => {
	    return new ZodOptional({
	        innerType: type,
	        typeName: ZodFirstPartyTypeKind.ZodOptional,
	        ...processCreateParams(params),
	    });
	};
	class ZodNullable extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType === util_1.ZodParsedType.null) {
	            return (0, parseUtil_1.OK)(null);
	        }
	        return this._def.innerType._parse(input);
	    }
	    unwrap() {
	        return this._def.innerType;
	    }
	}
	types$4.ZodNullable = ZodNullable;
	ZodNullable.create = (type, params) => {
	    return new ZodNullable({
	        innerType: type,
	        typeName: ZodFirstPartyTypeKind.ZodNullable,
	        ...processCreateParams(params),
	    });
	};
	class ZodDefault extends ZodType {
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        let data = ctx.data;
	        if (ctx.parsedType === util_1.ZodParsedType.undefined) {
	            data = this._def.defaultValue();
	        }
	        return this._def.innerType._parse({
	            data,
	            path: ctx.path,
	            parent: ctx,
	        });
	    }
	    removeDefault() {
	        return this._def.innerType;
	    }
	}
	types$4.ZodDefault = ZodDefault;
	ZodDefault.create = (type, params) => {
	    return new ZodDefault({
	        innerType: type,
	        typeName: ZodFirstPartyTypeKind.ZodDefault,
	        defaultValue: typeof params.default === "function"
	            ? params.default
	            : () => params.default,
	        ...processCreateParams(params),
	    });
	};
	class ZodCatch extends ZodType {
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        // newCtx is used to not collect issues from inner types in ctx
	        const newCtx = {
	            ...ctx,
	            common: {
	                ...ctx.common,
	                issues: [],
	            },
	        };
	        const result = this._def.innerType._parse({
	            data: newCtx.data,
	            path: newCtx.path,
	            parent: {
	                ...newCtx,
	            },
	        });
	        if ((0, parseUtil_1.isAsync)(result)) {
	            return result.then((result) => {
	                return {
	                    status: "valid",
	                    value: result.status === "valid"
	                        ? result.value
	                        : this._def.catchValue({
	                            get error() {
	                                return new ZodError_1.ZodError(newCtx.common.issues);
	                            },
	                            input: newCtx.data,
	                        }),
	                };
	            });
	        }
	        else {
	            return {
	                status: "valid",
	                value: result.status === "valid"
	                    ? result.value
	                    : this._def.catchValue({
	                        get error() {
	                            return new ZodError_1.ZodError(newCtx.common.issues);
	                        },
	                        input: newCtx.data,
	                    }),
	            };
	        }
	    }
	    removeCatch() {
	        return this._def.innerType;
	    }
	}
	types$4.ZodCatch = ZodCatch;
	ZodCatch.create = (type, params) => {
	    return new ZodCatch({
	        innerType: type,
	        typeName: ZodFirstPartyTypeKind.ZodCatch,
	        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
	        ...processCreateParams(params),
	    });
	};
	class ZodNaN extends ZodType {
	    _parse(input) {
	        const parsedType = this._getType(input);
	        if (parsedType !== util_1.ZodParsedType.nan) {
	            const ctx = this._getOrReturnCtx(input);
	            (0, parseUtil_1.addIssueToContext)(ctx, {
	                code: ZodError_1.ZodIssueCode.invalid_type,
	                expected: util_1.ZodParsedType.nan,
	                received: ctx.parsedType,
	            });
	            return parseUtil_1.INVALID;
	        }
	        return { status: "valid", value: input.data };
	    }
	}
	types$4.ZodNaN = ZodNaN;
	ZodNaN.create = (params) => {
	    return new ZodNaN({
	        typeName: ZodFirstPartyTypeKind.ZodNaN,
	        ...processCreateParams(params),
	    });
	};
	types$4.BRAND = Symbol("zod_brand");
	class ZodBranded extends ZodType {
	    _parse(input) {
	        const { ctx } = this._processInputParams(input);
	        const data = ctx.data;
	        return this._def.type._parse({
	            data,
	            path: ctx.path,
	            parent: ctx,
	        });
	    }
	    unwrap() {
	        return this._def.type;
	    }
	}
	types$4.ZodBranded = ZodBranded;
	class ZodPipeline extends ZodType {
	    _parse(input) {
	        const { status, ctx } = this._processInputParams(input);
	        if (ctx.common.async) {
	            const handleAsync = async () => {
	                const inResult = await this._def.in._parseAsync({
	                    data: ctx.data,
	                    path: ctx.path,
	                    parent: ctx,
	                });
	                if (inResult.status === "aborted")
	                    return parseUtil_1.INVALID;
	                if (inResult.status === "dirty") {
	                    status.dirty();
	                    return (0, parseUtil_1.DIRTY)(inResult.value);
	                }
	                else {
	                    return this._def.out._parseAsync({
	                        data: inResult.value,
	                        path: ctx.path,
	                        parent: ctx,
	                    });
	                }
	            };
	            return handleAsync();
	        }
	        else {
	            const inResult = this._def.in._parseSync({
	                data: ctx.data,
	                path: ctx.path,
	                parent: ctx,
	            });
	            if (inResult.status === "aborted")
	                return parseUtil_1.INVALID;
	            if (inResult.status === "dirty") {
	                status.dirty();
	                return {
	                    status: "dirty",
	                    value: inResult.value,
	                };
	            }
	            else {
	                return this._def.out._parseSync({
	                    data: inResult.value,
	                    path: ctx.path,
	                    parent: ctx,
	                });
	            }
	        }
	    }
	    static create(a, b) {
	        return new ZodPipeline({
	            in: a,
	            out: b,
	            typeName: ZodFirstPartyTypeKind.ZodPipeline,
	        });
	    }
	}
	types$4.ZodPipeline = ZodPipeline;
	class ZodReadonly extends ZodType {
	    _parse(input) {
	        const result = this._def.innerType._parse(input);
	        const freeze = (data) => {
	            if ((0, parseUtil_1.isValid)(data)) {
	                data.value = Object.freeze(data.value);
	            }
	            return data;
	        };
	        return (0, parseUtil_1.isAsync)(result)
	            ? result.then((data) => freeze(data))
	            : freeze(result);
	    }
	    unwrap() {
	        return this._def.innerType;
	    }
	}
	types$4.ZodReadonly = ZodReadonly;
	ZodReadonly.create = (type, params) => {
	    return new ZodReadonly({
	        innerType: type,
	        typeName: ZodFirstPartyTypeKind.ZodReadonly,
	        ...processCreateParams(params),
	    });
	};
	////////////////////////////////////////
	////////////////////////////////////////
	//////////                    //////////
	//////////      z.custom      //////////
	//////////                    //////////
	////////////////////////////////////////
	////////////////////////////////////////
	function cleanParams(params, data) {
	    const p = typeof params === "function"
	        ? params(data)
	        : typeof params === "string"
	            ? { message: params }
	            : params;
	    const p2 = typeof p === "string" ? { message: p } : p;
	    return p2;
	}
	function custom(check, _params = {}, 
	/**
	 * @deprecated
	 *
	 * Pass `fatal` into the params object instead:
	 *
	 * ```ts
	 * z.string().custom((val) => val.length > 5, { fatal: false })
	 * ```
	 *
	 */
	fatal) {
	    if (check)
	        return ZodAny.create().superRefine((data, ctx) => {
	            var _a, _b;
	            const r = check(data);
	            if (r instanceof Promise) {
	                return r.then((r) => {
	                    var _a, _b;
	                    if (!r) {
	                        const params = cleanParams(_params, data);
	                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
	                        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
	                    }
	                });
	            }
	            if (!r) {
	                const params = cleanParams(_params, data);
	                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
	                ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
	            }
	            return;
	        });
	    return ZodAny.create();
	}
	types$4.custom = custom;
	types$4.late = {
	    object: ZodObject.lazycreate,
	};
	var ZodFirstPartyTypeKind;
	(function (ZodFirstPartyTypeKind) {
	    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
	    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
	    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
	    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
	    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
	    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
	    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
	    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
	    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
	    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
	    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
	    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
	    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
	    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
	    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
	    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
	    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
	    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
	    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
	    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
	    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
	    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
	    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
	    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
	    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
	    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
	    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
	    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
	    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
	    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
	    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
	    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
	    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
	    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
	    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
	    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
	})(ZodFirstPartyTypeKind || (types$4.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind = {}));
	const instanceOfType = (
	// const instanceOfType = <T extends new (...args: any[]) => any>(
	cls, params = {
	    message: `Input not instance of ${cls.name}`,
	}) => custom((data) => data instanceof cls, params);
	types$4.instanceof = instanceOfType;
	const stringType = ZodString.create;
	types$4.string = stringType;
	const numberType = ZodNumber.create;
	types$4.number = numberType;
	const nanType = ZodNaN.create;
	types$4.nan = nanType;
	const bigIntType = ZodBigInt.create;
	types$4.bigint = bigIntType;
	const booleanType = ZodBoolean.create;
	types$4.boolean = booleanType;
	const dateType = ZodDate.create;
	types$4.date = dateType;
	const symbolType = ZodSymbol.create;
	types$4.symbol = symbolType;
	const undefinedType = ZodUndefined.create;
	types$4.undefined = undefinedType;
	const nullType = ZodNull.create;
	types$4.null = nullType;
	const anyType = ZodAny.create;
	types$4.any = anyType;
	const unknownType = ZodUnknown.create;
	types$4.unknown = unknownType;
	const neverType = ZodNever.create;
	types$4.never = neverType;
	const voidType = ZodVoid.create;
	types$4.void = voidType;
	const arrayType = ZodArray.create;
	types$4.array = arrayType;
	const objectType = ZodObject.create;
	types$4.object = objectType;
	const strictObjectType = ZodObject.strictCreate;
	types$4.strictObject = strictObjectType;
	const unionType = ZodUnion.create;
	types$4.union = unionType;
	const discriminatedUnionType = ZodDiscriminatedUnion.create;
	types$4.discriminatedUnion = discriminatedUnionType;
	const intersectionType = ZodIntersection.create;
	types$4.intersection = intersectionType;
	const tupleType = ZodTuple.create;
	types$4.tuple = tupleType;
	const recordType = ZodRecord.create;
	types$4.record = recordType;
	const mapType = ZodMap.create;
	types$4.map = mapType;
	const setType = ZodSet.create;
	types$4.set = setType;
	const functionType = ZodFunction.create;
	types$4.function = functionType;
	const lazyType = ZodLazy.create;
	types$4.lazy = lazyType;
	const literalType = ZodLiteral.create;
	types$4.literal = literalType;
	const enumType = ZodEnum.create;
	types$4.enum = enumType;
	const nativeEnumType = ZodNativeEnum.create;
	types$4.nativeEnum = nativeEnumType;
	const promiseType = ZodPromise.create;
	types$4.promise = promiseType;
	const effectsType = ZodEffects.create;
	types$4.effect = effectsType;
	types$4.transformer = effectsType;
	const optionalType = ZodOptional.create;
	types$4.optional = optionalType;
	const nullableType = ZodNullable.create;
	types$4.nullable = nullableType;
	const preprocessType = ZodEffects.createWithPreprocess;
	types$4.preprocess = preprocessType;
	const pipelineType = ZodPipeline.create;
	types$4.pipeline = pipelineType;
	const ostring = () => stringType().optional();
	types$4.ostring = ostring;
	const onumber = () => numberType().optional();
	types$4.onumber = onumber;
	const oboolean = () => booleanType().optional();
	types$4.oboolean = oboolean;
	types$4.coerce = {
	    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
	    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
	    boolean: ((arg) => ZodBoolean.create({
	        ...arg,
	        coerce: true,
	    })),
	    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
	    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
	};
	types$4.NEVER = parseUtil_1.INVALID;
	return types$4;
}

var hasRequiredExternal$1;

function requireExternal$1 () {
	if (hasRequiredExternal$1) return external$1;
	hasRequiredExternal$1 = 1;
	(function (exports) {
		var __createBinding = (external$1 && external$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (external$1 && external$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(/*@__PURE__*/ requireErrors(), exports);
		__exportStar(/*@__PURE__*/ requireParseUtil(), exports);
		__exportStar(/*@__PURE__*/ requireTypeAliases(), exports);
		__exportStar(/*@__PURE__*/ requireUtil$7(), exports);
		__exportStar(/*@__PURE__*/ requireTypes$5(), exports);
		__exportStar(/*@__PURE__*/ requireZodError(), exports); 
	} (external$1));
	return external$1;
}

var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib$1;
	hasRequiredLib$1 = 1;
	(function (exports) {
		var __createBinding = (lib$1 && lib$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (lib$1 && lib$1.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (lib$1 && lib$1.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		var __exportStar = (lib$1 && lib$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.z = void 0;
		const z = __importStar(/*@__PURE__*/ requireExternal$1());
		exports.z = z;
		__exportStar(/*@__PURE__*/ requireExternal$1(), exports);
		exports.default = z; 
	} (lib$1));
	return lib$1;
}

var dist$3 = {};

var handle = {};

var hasRequiredHandle;

function requireHandle () {
	if (hasRequiredHandle) return handle;
	hasRequiredHandle = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
		exports.INVALID_HANDLE = 'handle.invalid';
		// Currently these are registration-time restrictions, not protocol-level
		// restrictions. We have a couple accounts in the wild that we need to clean up
		// before hard-disallow.
		// See also: https://en.wikipedia.org/wiki/Top-level_domain#Reserved_domains
		exports.DISALLOWED_TLDS = [
		    '.local',
		    '.arpa',
		    '.invalid',
		    '.localhost',
		    '.internal',
		    '.example',
		    '.alt',
		    // policy could concievably change on ".onion" some day
		    '.onion',
		    // NOTE: .test is allowed in testing and devopment. In practical terms
		    // "should" "never" actually resolve and get registered in production
		];
		// Handle constraints, in English:
		//  - must be a possible domain name
		//    - RFC-1035 is commonly referenced, but has been updated. eg, RFC-3696,
		//      section 2. and RFC-3986, section 3. can now have leading numbers (eg,
		//      4chan.org)
		//    - "labels" (sub-names) are made of ASCII letters, digits, hyphens
		//    - can not start or end with a hyphen
		//    - TLD (last component) should not start with a digit
		//    - can't end with a hyphen (can end with digit)
		//    - each segment must be between 1 and 63 characters (not including any periods)
		//    - overall length can't be more than 253 characters
		//    - separated by (ASCII) periods; does not start or end with period
		//    - case insensitive
		//    - domains (handles) are equal if they are the same lower-case
		//    - punycode allowed for internationalization
		//  - no whitespace, null bytes, joining chars, etc
		//  - does not validate whether domain or TLD exists, or is a reserved or
		//    special TLD (eg, .onion or .local)
		//  - does not validate punycode
		const ensureValidHandle = (handle) => {
		    // check that all chars are boring ASCII
		    if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
		        throw new InvalidHandleError('Disallowed characters in handle (ASCII letters, digits, dashes, periods only)');
		    }
		    if (handle.length > 253) {
		        throw new InvalidHandleError('Handle is too long (253 chars max)');
		    }
		    const labels = handle.split('.');
		    if (labels.length < 2) {
		        throw new InvalidHandleError('Handle domain needs at least two parts');
		    }
		    for (let i = 0; i < labels.length; i++) {
		        const l = labels[i];
		        if (l.length < 1) {
		            throw new InvalidHandleError('Handle parts can not be empty');
		        }
		        if (l.length > 63) {
		            throw new InvalidHandleError('Handle part too long (max 63 chars)');
		        }
		        if (l.endsWith('-') || l.startsWith('-')) {
		            throw new InvalidHandleError('Handle parts can not start or end with hyphens');
		        }
		        if (i + 1 === labels.length && !/^[a-zA-Z]/.test(l)) {
		            throw new InvalidHandleError('Handle final component (TLD) must start with ASCII letter');
		        }
		    }
		};
		exports.ensureValidHandle = ensureValidHandle;
		// simple regex translation of above constraints
		const ensureValidHandleRegex = (handle) => {
		    if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
		        throw new InvalidHandleError("Handle didn't validate via regex");
		    }
		    if (handle.length > 253) {
		        throw new InvalidHandleError('Handle is too long (253 chars max)');
		    }
		};
		exports.ensureValidHandleRegex = ensureValidHandleRegex;
		const normalizeHandle = (handle) => {
		    return handle.toLowerCase();
		};
		exports.normalizeHandle = normalizeHandle;
		const normalizeAndEnsureValidHandle = (handle) => {
		    const normalized = (0, exports.normalizeHandle)(handle);
		    (0, exports.ensureValidHandle)(normalized);
		    return normalized;
		};
		exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
		const isValidHandle = (handle) => {
		    try {
		        (0, exports.ensureValidHandle)(handle);
		    }
		    catch (err) {
		        if (err instanceof InvalidHandleError) {
		            return false;
		        }
		        throw err;
		    }
		    return true;
		};
		exports.isValidHandle = isValidHandle;
		const isValidTld = (handle) => {
		    return !exports.DISALLOWED_TLDS.some((domain) => handle.endsWith(domain));
		};
		exports.isValidTld = isValidTld;
		class InvalidHandleError extends Error {
		}
		exports.InvalidHandleError = InvalidHandleError;
		/** @deprecated Never used */
		class ReservedHandleError extends Error {
		}
		exports.ReservedHandleError = ReservedHandleError;
		/** @deprecated Never used */
		class UnsupportedDomainError extends Error {
		}
		exports.UnsupportedDomainError = UnsupportedDomainError;
		/** @deprecated Never used */
		class DisallowedDomainError extends Error {
		}
		exports.DisallowedDomainError = DisallowedDomainError;
		
	} (handle));
	return handle;
}

var did = {};

var hasRequiredDid;

function requireDid () {
	if (hasRequiredDid) return did;
	hasRequiredDid = 1;
	Object.defineProperty(did, "__esModule", { value: true });
	did.InvalidDidError = did.ensureValidDidRegex = did.ensureValidDid = void 0;
	// Human-readable constraints:
	//   - valid W3C DID (https://www.w3.org/TR/did-core/#did-syntax)
	//      - entire URI is ASCII: [a-zA-Z0-9._:%-]
	//      - always starts "did:" (lower-case)
	//      - method name is one or more lower-case letters, followed by ":"
	//      - remaining identifier can have any of the above chars, but can not end in ":"
	//      - it seems that a bunch of ":" can be included, and don't need spaces between
	//      - "%" is used only for "percent encoding" and must be followed by two hex characters (and thus can't end in "%")
	//      - query ("?") and fragment ("#") stuff is defined for "DID URIs", but not as part of identifier itself
	//      - "The current specification does not take a position on the maximum length of a DID"
	//   - in current atproto, only allowing did:plc and did:web. But not *forcing* this at lexicon layer
	//   - hard length limit of 8KBytes
	//   - not going to validate "percent encoding" here
	const ensureValidDid = (did) => {
	    if (!did.startsWith('did:')) {
	        throw new InvalidDidError('DID requires "did:" prefix');
	    }
	    // check that all chars are boring ASCII
	    if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
	        throw new InvalidDidError('Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)');
	    }
	    const { length, 1: method } = did.split(':');
	    if (length < 3) {
	        throw new InvalidDidError('DID requires prefix, method, and method-specific content');
	    }
	    if (!/^[a-z]+$/.test(method)) {
	        throw new InvalidDidError('DID method must be lower-case letters');
	    }
	    if (did.endsWith(':') || did.endsWith('%')) {
	        throw new InvalidDidError('DID can not end with ":" or "%"');
	    }
	    if (did.length > 2 * 1024) {
	        throw new InvalidDidError('DID is too long (2048 chars max)');
	    }
	};
	did.ensureValidDid = ensureValidDid;
	const ensureValidDidRegex = (did) => {
	    // simple regex to enforce most constraints via just regex and length.
	    // hand wrote this regex based on above constraints
	    if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
	        throw new InvalidDidError("DID didn't validate via regex");
	    }
	    if (did.length > 2 * 1024) {
	        throw new InvalidDidError('DID is too long (2048 chars max)');
	    }
	};
	did.ensureValidDidRegex = ensureValidDidRegex;
	class InvalidDidError extends Error {
	}
	did.InvalidDidError = InvalidDidError;
	
	return did;
}

var nsid = {};

var hasRequiredNsid;

function requireNsid () {
	if (hasRequiredNsid) return nsid;
	hasRequiredNsid = 1;
	(function (exports) {
		/*
		Grammar:

		alpha     = "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z" / "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z"
		number    = "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
		delim     = "."
		segment   = alpha *( alpha / number / "-" )
		authority = segment *( delim segment )
		name      = alpha *( alpha )
		nsid      = authority delim name

		*/
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
		class NSID {
		    static parse(nsid) {
		        return new NSID(nsid);
		    }
		    static create(authority, name) {
		        const segments = [...authority.split('.').reverse(), name].join('.');
		        return new NSID(segments);
		    }
		    static isValid(nsid) {
		        try {
		            NSID.parse(nsid);
		            return true;
		        }
		        catch (e) {
		            return false;
		        }
		    }
		    constructor(nsid) {
		        Object.defineProperty(this, "segments", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: []
		        });
		        (0, exports.ensureValidNsid)(nsid);
		        this.segments = nsid.split('.');
		    }
		    get authority() {
		        return this.segments
		            .slice(0, this.segments.length - 1)
		            .reverse()
		            .join('.');
		    }
		    get name() {
		        return this.segments.at(this.segments.length - 1);
		    }
		    toString() {
		        return this.segments.join('.');
		    }
		}
		exports.NSID = NSID;
		// Human readable constraints on NSID:
		// - a valid domain in reversed notation
		// - followed by an additional period-separated name, which is camel-case letters
		const ensureValidNsid = (nsid) => {
		    const toCheck = nsid;
		    // check that all chars are boring ASCII
		    if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
		        throw new InvalidNsidError('Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)');
		    }
		    if (toCheck.length > 253 + 1 + 63) {
		        throw new InvalidNsidError('NSID is too long (317 chars max)');
		    }
		    const labels = toCheck.split('.');
		    if (labels.length < 3) {
		        throw new InvalidNsidError('NSID needs at least three parts');
		    }
		    for (let i = 0; i < labels.length; i++) {
		        const l = labels[i];
		        if (l.length < 1) {
		            throw new InvalidNsidError('NSID parts can not be empty');
		        }
		        if (l.length > 63) {
		            throw new InvalidNsidError('NSID part too long (max 63 chars)');
		        }
		        if (l.endsWith('-') || l.startsWith('-')) {
		            throw new InvalidNsidError('NSID parts can not start or end with hyphen');
		        }
		        if (/^[0-9]/.test(l) && i === 0) {
		            throw new InvalidNsidError('NSID first part may not start with a digit');
		        }
		        if (!/^[a-zA-Z][a-zA-Z0-9]*$/.test(l) && i + 1 === labels.length) {
		            throw new InvalidNsidError('NSID name part must be only letters and digits (and no leading digit)');
		        }
		    }
		};
		exports.ensureValidNsid = ensureValidNsid;
		const ensureValidNsidRegex = (nsid) => {
		    // simple regex to enforce most constraints via just regex and length.
		    // hand wrote this regex based on above constraints
		    if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z0-9]{0,62})?)$/.test(nsid)) {
		        throw new InvalidNsidError("NSID didn't validate via regex");
		    }
		    if (nsid.length > 253 + 1 + 63) {
		        throw new InvalidNsidError('NSID is too long (317 chars max)');
		    }
		};
		exports.ensureValidNsidRegex = ensureValidNsidRegex;
		class InvalidNsidError extends Error {
		}
		exports.InvalidNsidError = InvalidNsidError;
		
	} (nsid));
	return nsid;
}

var aturi = {};

var aturi_validation = {};

var hasRequiredAturi_validation;

function requireAturi_validation () {
	if (hasRequiredAturi_validation) return aturi_validation;
	hasRequiredAturi_validation = 1;
	Object.defineProperty(aturi_validation, "__esModule", { value: true });
	aturi_validation.ensureValidAtUriRegex = aturi_validation.ensureValidAtUri = void 0;
	const did_1 = requireDid();
	const handle_1 = requireHandle();
	const nsid_1 = requireNsid();
	// Human-readable constraints on ATURI:
	//   - following regular URLs, a 8KByte hard total length limit
	//   - follows ATURI docs on website
	//      - all ASCII characters, no whitespace. non-ASCII could be URL-encoded
	//      - starts "at://"
	//      - "authority" is a valid DID or a valid handle
	//      - optionally, follow "authority" with "/" and valid NSID as start of path
	//      - optionally, if NSID given, follow that with "/" and rkey
	//      - rkey path component can include URL-encoded ("percent encoded"), or:
	//          ALPHA / DIGIT / "-" / "." / "_" / "~" / ":" / "@" / "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
	//          [a-zA-Z0-9._~:@!$&'\(\)*+,;=-]
	//      - rkey must have at least one char
	//      - regardless of path component, a fragment can follow  as "#" and then a JSON pointer (RFC-6901)
	const ensureValidAtUri = (uri) => {
	    // JSON pointer is pretty different from rest of URI, so split that out first
	    const uriParts = uri.split('#');
	    if (uriParts.length > 2) {
	        throw new Error('ATURI can have at most one "#", separating fragment out');
	    }
	    const fragmentPart = uriParts[1] || null;
	    uri = uriParts[0];
	    // check that all chars are boring ASCII
	    if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
	        throw new Error('Disallowed characters in ATURI (ASCII)');
	    }
	    const parts = uri.split('/');
	    if (parts.length >= 3 && (parts[0] !== 'at:' || parts[1].length !== 0)) {
	        throw new Error('ATURI must start with "at://"');
	    }
	    if (parts.length < 3) {
	        throw new Error('ATURI requires at least method and authority sections');
	    }
	    try {
	        if (parts[2].startsWith('did:')) {
	            (0, did_1.ensureValidDid)(parts[2]);
	        }
	        else {
	            (0, handle_1.ensureValidHandle)(parts[2]);
	        }
	    }
	    catch {
	        throw new Error('ATURI authority must be a valid handle or DID');
	    }
	    if (parts.length >= 4) {
	        if (parts[3].length === 0) {
	            throw new Error('ATURI can not have a slash after authority without a path segment');
	        }
	        try {
	            (0, nsid_1.ensureValidNsid)(parts[3]);
	        }
	        catch {
	            throw new Error('ATURI requires first path segment (if supplied) to be valid NSID');
	        }
	    }
	    if (parts.length >= 5) {
	        if (parts[4].length === 0) {
	            throw new Error('ATURI can not have a slash after collection, unless record key is provided');
	        }
	        // would validate rkey here, but there are basically no constraints!
	    }
	    if (parts.length >= 6) {
	        throw new Error('ATURI path can have at most two parts, and no trailing slash');
	    }
	    if (uriParts.length >= 2 && fragmentPart == null) {
	        throw new Error('ATURI fragment must be non-empty and start with slash');
	    }
	    if (fragmentPart != null) {
	        if (fragmentPart.length === 0 || fragmentPart[0] !== '/') {
	            throw new Error('ATURI fragment must be non-empty and start with slash');
	        }
	        // NOTE: enforcing *some* checks here for sanity. Eg, at least no whitespace
	        if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
	            throw new Error('Disallowed characters in ATURI fragment (ASCII)');
	        }
	    }
	    if (uri.length > 8 * 1024) {
	        throw new Error('ATURI is far too long');
	    }
	};
	aturi_validation.ensureValidAtUri = ensureValidAtUri;
	const ensureValidAtUriRegex = (uri) => {
	    // simple regex to enforce most constraints via just regex and length.
	    // hand wrote this regex based on above constraints. whew!
	    const aturiRegex = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
	    const rm = uri.match(aturiRegex);
	    if (!rm || !rm.groups) {
	        throw new Error("ATURI didn't validate via regex");
	    }
	    const groups = rm.groups;
	    try {
	        (0, handle_1.ensureValidHandleRegex)(groups.authority);
	    }
	    catch {
	        try {
	            (0, did_1.ensureValidDidRegex)(groups.authority);
	        }
	        catch {
	            throw new Error('ATURI authority must be a valid handle or DID');
	        }
	    }
	    if (groups.collection) {
	        try {
	            (0, nsid_1.ensureValidNsidRegex)(groups.collection);
	        }
	        catch {
	            throw new Error('ATURI collection path segment must be a valid NSID');
	        }
	    }
	    if (uri.length > 8 * 1024) {
	        throw new Error('ATURI is far too long');
	    }
	};
	aturi_validation.ensureValidAtUriRegex = ensureValidAtUriRegex;
	
	return aturi_validation;
}

var hasRequiredAturi;

function requireAturi () {
	if (hasRequiredAturi) return aturi;
	hasRequiredAturi = 1;
	(function (exports) {
		var __createBinding = (aturi && aturi.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (aturi && aturi.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.AtUri = exports.ATP_URI_REGEX = void 0;
		__exportStar(requireAturi_validation(), exports);
		exports.ATP_URI_REGEX = 
		// proto-    --did--------------   --name----------------   --path----   --query--   --hash--
		/^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
		//                       --path-----   --query--  --hash--
		const RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
		class AtUri {
		    constructor(uri, base) {
		        Object.defineProperty(this, "hash", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        Object.defineProperty(this, "host", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        Object.defineProperty(this, "pathname", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        Object.defineProperty(this, "searchParams", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        let parsed;
		        if (base) {
		            parsed = parse(base);
		            if (!parsed) {
		                throw new Error(`Invalid at uri: ${base}`);
		            }
		            const relativep = parseRelative(uri);
		            if (!relativep) {
		                throw new Error(`Invalid path: ${uri}`);
		            }
		            Object.assign(parsed, relativep);
		        }
		        else {
		            parsed = parse(uri);
		            if (!parsed) {
		                throw new Error(`Invalid at uri: ${uri}`);
		            }
		        }
		        this.hash = parsed.hash;
		        this.host = parsed.host;
		        this.pathname = parsed.pathname;
		        this.searchParams = parsed.searchParams;
		    }
		    static make(handleOrDid, collection, rkey) {
		        let str = handleOrDid;
		        if (collection)
		            str += '/' + collection;
		        if (rkey)
		            str += '/' + rkey;
		        return new AtUri(str);
		    }
		    get protocol() {
		        return 'at:';
		    }
		    get origin() {
		        return `at://${this.host}`;
		    }
		    get hostname() {
		        return this.host;
		    }
		    set hostname(v) {
		        this.host = v;
		    }
		    get search() {
		        return this.searchParams.toString();
		    }
		    set search(v) {
		        this.searchParams = new URLSearchParams(v);
		    }
		    get collection() {
		        return this.pathname.split('/').filter(Boolean)[0] || '';
		    }
		    set collection(v) {
		        const parts = this.pathname.split('/').filter(Boolean);
		        parts[0] = v;
		        this.pathname = parts.join('/');
		    }
		    get rkey() {
		        return this.pathname.split('/').filter(Boolean)[1] || '';
		    }
		    set rkey(v) {
		        const parts = this.pathname.split('/').filter(Boolean);
		        if (!parts[0])
		            parts[0] = 'undefined';
		        parts[1] = v;
		        this.pathname = parts.join('/');
		    }
		    get href() {
		        return this.toString();
		    }
		    toString() {
		        let path = this.pathname || '/';
		        if (!path.startsWith('/')) {
		            path = `/${path}`;
		        }
		        let qs = this.searchParams.toString();
		        if (qs && !qs.startsWith('?')) {
		            qs = `?${qs}`;
		        }
		        let hash = this.hash;
		        if (hash && !hash.startsWith('#')) {
		            hash = `#${hash}`;
		        }
		        return `at://${this.host}${path}${qs}${hash}`;
		    }
		}
		exports.AtUri = AtUri;
		function parse(str) {
		    const match = exports.ATP_URI_REGEX.exec(str);
		    if (match) {
		        return {
		            hash: match[5] || '',
		            host: match[2] || '',
		            pathname: match[3] || '',
		            searchParams: new URLSearchParams(match[4] || ''),
		        };
		    }
		    return undefined;
		}
		function parseRelative(str) {
		    const match = RELATIVE_REGEX.exec(str);
		    if (match) {
		        return {
		            hash: match[3] || '',
		            pathname: match[1] || '',
		            searchParams: new URLSearchParams(match[2] || ''),
		        };
		    }
		    return undefined;
		}
		
	} (aturi));
	return aturi;
}

var tid$1 = {};

var hasRequiredTid$1;

function requireTid$1 () {
	if (hasRequiredTid$1) return tid$1;
	hasRequiredTid$1 = 1;
	Object.defineProperty(tid$1, "__esModule", { value: true });
	tid$1.InvalidTidError = tid$1.isValidTid = tid$1.ensureValidTid = void 0;
	const TID_LENGTH = 13;
	const TID_REGEX = /^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/;
	const ensureValidTid = (tid) => {
	    if (tid.length !== TID_LENGTH) {
	        throw new InvalidTidError(`TID must be ${TID_LENGTH} characters`);
	    }
	    // simple regex to enforce most constraints via just regex and length.
	    if (!TID_REGEX.test(tid)) {
	        throw new InvalidTidError('TID syntax not valid (regex)');
	    }
	};
	tid$1.ensureValidTid = ensureValidTid;
	const isValidTid = (tid) => {
	    return tid.length === TID_LENGTH && TID_REGEX.test(tid);
	};
	tid$1.isValidTid = isValidTid;
	class InvalidTidError extends Error {
	}
	tid$1.InvalidTidError = InvalidTidError;
	
	return tid$1;
}

var recordkey = {};

var hasRequiredRecordkey;

function requireRecordkey () {
	if (hasRequiredRecordkey) return recordkey;
	hasRequiredRecordkey = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
		const ensureValidRecordKey = (rkey) => {
		    if (rkey.length > 512 || rkey.length < 1) {
		        throw new InvalidRecordKeyError('record key must be 1 to 512 characters');
		    }
		    // simple regex to enforce most constraints via just regex and length.
		    if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
		        throw new InvalidRecordKeyError('record key syntax not valid (regex)');
		    }
		    if (rkey === '.' || rkey === '..')
		        throw new InvalidRecordKeyError('record key can not be "." or ".."');
		};
		exports.ensureValidRecordKey = ensureValidRecordKey;
		const isValidRecordKey = (rkey) => {
		    try {
		        (0, exports.ensureValidRecordKey)(rkey);
		    }
		    catch (err) {
		        if (err instanceof InvalidRecordKeyError) {
		            return false;
		        }
		        throw err;
		    }
		    return true;
		};
		exports.isValidRecordKey = isValidRecordKey;
		class InvalidRecordKeyError extends Error {
		}
		exports.InvalidRecordKeyError = InvalidRecordKeyError;
		
	} (recordkey));
	return recordkey;
}

var datetime = {};

var hasRequiredDatetime;

function requireDatetime () {
	if (hasRequiredDatetime) return datetime;
	hasRequiredDatetime = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
		/* Validates datetime string against atproto Lexicon 'datetime' format.
		 * Syntax is described at: https://atproto.com/specs/lexicon#datetime
		 */
		const ensureValidDatetime = (dtStr) => {
		    const date = new Date(dtStr);
		    // must parse as ISO 8601; this also verifies semantics like month is not 13 or 00
		    if (isNaN(date.getTime())) {
		        throw new InvalidDatetimeError('datetime did not parse as ISO 8601');
		    }
		    if (date.toISOString().startsWith('-')) {
		        throw new InvalidDatetimeError('datetime normalized to a negative time');
		    }
		    // regex and other checks for RFC-3339
		    if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
		        throw new InvalidDatetimeError("datetime didn't validate via regex");
		    }
		    if (dtStr.length > 64) {
		        throw new InvalidDatetimeError('datetime is too long (64 chars max)');
		    }
		    if (dtStr.endsWith('-00:00')) {
		        throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
		    }
		    if (dtStr.startsWith('000')) {
		        throw new InvalidDatetimeError('datetime so close to year zero not allowed');
		    }
		};
		exports.ensureValidDatetime = ensureValidDatetime;
		/* Same logic as ensureValidDatetime(), but returns a boolean instead of throwing an exception.
		 */
		const isValidDatetime = (dtStr) => {
		    try {
		        (0, exports.ensureValidDatetime)(dtStr);
		    }
		    catch (err) {
		        if (err instanceof InvalidDatetimeError) {
		            return false;
		        }
		        throw err;
		    }
		    return true;
		};
		exports.isValidDatetime = isValidDatetime;
		/* Takes a flexible datetime string and normalizes representation.
		 *
		 * This function will work with any valid atproto datetime (eg, anything which isValidDatetime() is true for). It *additionally* is more flexible about accepting datetimes that don't comply to RFC 3339, or are missing timezone information, and normalizing them to a valid datetime.
		 *
		 * One use-case is a consistent, sortable string. Another is to work with older invalid createdAt datetimes.
		 *
		 * Successful output will be a valid atproto datetime with millisecond precision (3 sub-second digits) and UTC timezone with trailing 'Z' syntax. Throws `InvalidDatetimeError` if the input string could not be parsed as a datetime, even with permissive parsing.
		 *
		 * Expected output format: YYYY-MM-DDTHH:mm:ss.sssZ
		 */
		const normalizeDatetime = (dtStr) => {
		    if ((0, exports.isValidDatetime)(dtStr)) {
		        const outStr = new Date(dtStr).toISOString();
		        if ((0, exports.isValidDatetime)(outStr)) {
		            return outStr;
		        }
		    }
		    // check if this permissive datetime is missing a timezone
		    if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
		        const date = new Date(dtStr + 'Z');
		        if (!isNaN(date.getTime())) {
		            const tzStr = date.toISOString();
		            if ((0, exports.isValidDatetime)(tzStr)) {
		                return tzStr;
		            }
		        }
		    }
		    // finally try parsing as simple datetime
		    const date = new Date(dtStr);
		    if (isNaN(date.getTime())) {
		        throw new InvalidDatetimeError('datetime did not parse as any timestamp format');
		    }
		    const isoStr = date.toISOString();
		    if ((0, exports.isValidDatetime)(isoStr)) {
		        return isoStr;
		    }
		    else {
		        throw new InvalidDatetimeError('datetime normalized to invalid timestamp string');
		    }
		};
		exports.normalizeDatetime = normalizeDatetime;
		/* Variant of normalizeDatetime() which always returns a valid datetime strings.
		 *
		 * If a InvalidDatetimeError is encountered, returns the UNIX epoch time as a UTC datetime (1970-01-01T00:00:00.000Z).
		 */
		const normalizeDatetimeAlways = (dtStr) => {
		    try {
		        return (0, exports.normalizeDatetime)(dtStr);
		    }
		    catch (err) {
		        if (err instanceof InvalidDatetimeError) {
		            return new Date(0).toISOString();
		        }
		        throw err;
		    }
		};
		exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
		/* Indicates a datetime string did not pass full atproto Lexicon datetime string format checks.
		 */
		class InvalidDatetimeError extends Error {
		}
		exports.InvalidDatetimeError = InvalidDatetimeError;
		
	} (datetime));
	return datetime;
}

var hasRequiredDist$5;

function requireDist$5 () {
	if (hasRequiredDist$5) return dist$3;
	hasRequiredDist$5 = 1;
	(function (exports) {
		var __createBinding = (dist$3 && dist$3.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (dist$3 && dist$3.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireHandle(), exports);
		__exportStar(requireDid(), exports);
		__exportStar(requireNsid(), exports);
		__exportStar(requireAturi(), exports);
		__exportStar(requireTid$1(), exports);
		__exportStar(requireRecordkey(), exports);
		__exportStar(requireDatetime(), exports);
		
	} (dist$3));
	return dist$3;
}

var util$6 = {};

var hasRequiredUtil$6;

function requireUtil$6 () {
	if (hasRequiredUtil$6) return util$6;
	hasRequiredUtil$6 = 1;
	Object.defineProperty(util$6, "__esModule", { value: true });
	util$6.toLexUri = toLexUri;
	util$6.requiredPropertiesRefinement = requiredPropertiesRefinement;
	const zod_1 = /*@__PURE__*/ requireLib$1();
	function toLexUri(str, baseUri) {
	    if (str.split('#').length > 2) {
	        throw new Error('Uri can only have one hash segment');
	    }
	    if (str.startsWith('lex:')) {
	        return str;
	    }
	    if (str.startsWith('#')) {
	        if (!baseUri) {
	            throw new Error(`Unable to resolve uri without anchor: ${str}`);
	        }
	        return `${baseUri}${str}`;
	    }
	    return `lex:${str}`;
	}
	function requiredPropertiesRefinement(object, ctx) {
	    // Required fields check
	    if (object.required === undefined) {
	        return;
	    }
	    if (!Array.isArray(object.required)) {
	        ctx.addIssue({
	            code: zod_1.z.ZodIssueCode.invalid_type,
	            received: typeof object.required,
	            expected: 'array',
	        });
	        return;
	    }
	    if (object.properties === undefined) {
	        if (object.required.length > 0) {
	            ctx.addIssue({
	                code: zod_1.z.ZodIssueCode.custom,
	                message: `Required fields defined but no properties defined`,
	            });
	        }
	        return;
	    }
	    for (const field of object.required) {
	        if (object.properties[field] === undefined) {
	            ctx.addIssue({
	                code: zod_1.z.ZodIssueCode.custom,
	                message: `Required field "${field}" not defined`,
	            });
	        }
	    }
	}
	
	return util$6;
}

var hasRequiredTypes$4;

function requireTypes$4 () {
	if (hasRequiredTypes$4) return types$5;
	hasRequiredTypes$4 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
		exports.isValidLexiconDoc = isValidLexiconDoc;
		exports.isObj = isObj;
		exports.isDiscriminatedObject = isDiscriminatedObject;
		exports.parseLexiconDoc = parseLexiconDoc;
		const zod_1 = /*@__PURE__*/ requireLib$1();
		const syntax_1 = requireDist$5();
		const util_1 = requireUtil$6();
		// primitives
		// =
		exports.lexBoolean = zod_1.z
		    .object({
		    type: zod_1.z.literal('boolean'),
		    description: zod_1.z.string().optional(),
		    default: zod_1.z.boolean().optional(),
		    const: zod_1.z.boolean().optional(),
		})
		    .strict();
		exports.lexInteger = zod_1.z
		    .object({
		    type: zod_1.z.literal('integer'),
		    description: zod_1.z.string().optional(),
		    default: zod_1.z.number().int().optional(),
		    minimum: zod_1.z.number().int().optional(),
		    maximum: zod_1.z.number().int().optional(),
		    enum: zod_1.z.number().int().array().optional(),
		    const: zod_1.z.number().int().optional(),
		})
		    .strict();
		exports.lexStringFormat = zod_1.z.enum([
		    'datetime',
		    'uri',
		    'at-uri',
		    'did',
		    'handle',
		    'at-identifier',
		    'nsid',
		    'cid',
		    'language',
		    'tid',
		    'record-key',
		]);
		exports.lexString = zod_1.z
		    .object({
		    type: zod_1.z.literal('string'),
		    format: exports.lexStringFormat.optional(),
		    description: zod_1.z.string().optional(),
		    default: zod_1.z.string().optional(),
		    minLength: zod_1.z.number().int().optional(),
		    maxLength: zod_1.z.number().int().optional(),
		    minGraphemes: zod_1.z.number().int().optional(),
		    maxGraphemes: zod_1.z.number().int().optional(),
		    enum: zod_1.z.string().array().optional(),
		    const: zod_1.z.string().optional(),
		    knownValues: zod_1.z.string().array().optional(),
		})
		    .strict();
		exports.lexUnknown = zod_1.z
		    .object({
		    type: zod_1.z.literal('unknown'),
		    description: zod_1.z.string().optional(),
		})
		    .strict();
		exports.lexPrimitive = zod_1.z.discriminatedUnion('type', [
		    exports.lexBoolean,
		    exports.lexInteger,
		    exports.lexString,
		    exports.lexUnknown,
		]);
		// ipld types
		// =
		exports.lexBytes = zod_1.z
		    .object({
		    type: zod_1.z.literal('bytes'),
		    description: zod_1.z.string().optional(),
		    maxLength: zod_1.z.number().optional(),
		    minLength: zod_1.z.number().optional(),
		})
		    .strict();
		exports.lexCidLink = zod_1.z
		    .object({
		    type: zod_1.z.literal('cid-link'),
		    description: zod_1.z.string().optional(),
		})
		    .strict();
		exports.lexIpldType = zod_1.z.discriminatedUnion('type', [exports.lexBytes, exports.lexCidLink]);
		// references
		// =
		exports.lexRef = zod_1.z
		    .object({
		    type: zod_1.z.literal('ref'),
		    description: zod_1.z.string().optional(),
		    ref: zod_1.z.string(),
		})
		    .strict();
		exports.lexRefUnion = zod_1.z
		    .object({
		    type: zod_1.z.literal('union'),
		    description: zod_1.z.string().optional(),
		    refs: zod_1.z.string().array(),
		    closed: zod_1.z.boolean().optional(),
		})
		    .strict();
		exports.lexRefVariant = zod_1.z.discriminatedUnion('type', [exports.lexRef, exports.lexRefUnion]);
		// blobs
		// =
		exports.lexBlob = zod_1.z
		    .object({
		    type: zod_1.z.literal('blob'),
		    description: zod_1.z.string().optional(),
		    accept: zod_1.z.string().array().optional(),
		    maxSize: zod_1.z.number().optional(),
		})
		    .strict();
		// complex types
		// =
		exports.lexArray = zod_1.z
		    .object({
		    type: zod_1.z.literal('array'),
		    description: zod_1.z.string().optional(),
		    items: zod_1.z.discriminatedUnion('type', [
		        // lexPrimitive
		        exports.lexBoolean,
		        exports.lexInteger,
		        exports.lexString,
		        exports.lexUnknown,
		        // lexIpldType
		        exports.lexBytes,
		        exports.lexCidLink,
		        // lexRefVariant
		        exports.lexRef,
		        exports.lexRefUnion,
		        // other
		        exports.lexBlob,
		    ]),
		    minLength: zod_1.z.number().int().optional(),
		    maxLength: zod_1.z.number().int().optional(),
		})
		    .strict();
		exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z
		    .object({
		    items: exports.lexPrimitive,
		})
		    .strict());
		exports.lexToken = zod_1.z
		    .object({
		    type: zod_1.z.literal('token'),
		    description: zod_1.z.string().optional(),
		})
		    .strict();
		exports.lexObject = zod_1.z
		    .object({
		    type: zod_1.z.literal('object'),
		    description: zod_1.z.string().optional(),
		    required: zod_1.z.string().array().optional(),
		    nullable: zod_1.z.string().array().optional(),
		    properties: zod_1.z.record(zod_1.z.discriminatedUnion('type', [
		        exports.lexArray,
		        // lexPrimitive
		        exports.lexBoolean,
		        exports.lexInteger,
		        exports.lexString,
		        exports.lexUnknown,
		        // lexIpldType
		        exports.lexBytes,
		        exports.lexCidLink,
		        // lexRefVariant
		        exports.lexRef,
		        exports.lexRefUnion,
		        // other
		        exports.lexBlob,
		    ])),
		})
		    .strict()
		    .superRefine(util_1.requiredPropertiesRefinement);
		// xrpc
		// =
		exports.lexXrpcParameters = zod_1.z
		    .object({
		    type: zod_1.z.literal('params'),
		    description: zod_1.z.string().optional(),
		    required: zod_1.z.string().array().optional(),
		    properties: zod_1.z.record(zod_1.z.discriminatedUnion('type', [
		        exports.lexPrimitiveArray,
		        // lexPrimitive
		        exports.lexBoolean,
		        exports.lexInteger,
		        exports.lexString,
		        exports.lexUnknown,
		    ])),
		})
		    .strict()
		    .superRefine(util_1.requiredPropertiesRefinement);
		exports.lexXrpcBody = zod_1.z
		    .object({
		    description: zod_1.z.string().optional(),
		    encoding: zod_1.z.string(),
		    // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
		    schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional(),
		})
		    .strict();
		exports.lexXrpcSubscriptionMessage = zod_1.z
		    .object({
		    description: zod_1.z.string().optional(),
		    // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
		    schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional(),
		})
		    .strict();
		exports.lexXrpcError = zod_1.z
		    .object({
		    name: zod_1.z.string(),
		    description: zod_1.z.string().optional(),
		})
		    .strict();
		exports.lexXrpcQuery = zod_1.z
		    .object({
		    type: zod_1.z.literal('query'),
		    description: zod_1.z.string().optional(),
		    parameters: exports.lexXrpcParameters.optional(),
		    output: exports.lexXrpcBody.optional(),
		    errors: exports.lexXrpcError.array().optional(),
		})
		    .strict();
		exports.lexXrpcProcedure = zod_1.z
		    .object({
		    type: zod_1.z.literal('procedure'),
		    description: zod_1.z.string().optional(),
		    parameters: exports.lexXrpcParameters.optional(),
		    input: exports.lexXrpcBody.optional(),
		    output: exports.lexXrpcBody.optional(),
		    errors: exports.lexXrpcError.array().optional(),
		})
		    .strict();
		exports.lexXrpcSubscription = zod_1.z
		    .object({
		    type: zod_1.z.literal('subscription'),
		    description: zod_1.z.string().optional(),
		    parameters: exports.lexXrpcParameters.optional(),
		    message: exports.lexXrpcSubscriptionMessage.optional(),
		    errors: exports.lexXrpcError.array().optional(),
		})
		    .strict();
		// database
		// =
		exports.lexRecord = zod_1.z
		    .object({
		    type: zod_1.z.literal('record'),
		    description: zod_1.z.string().optional(),
		    key: zod_1.z.string().optional(),
		    record: exports.lexObject,
		})
		    .strict();
		// core
		// =
		// We need to use `z.custom` here because
		// lexXrpcProperty and lexObject are refined
		// `z.union` would work, but it's too slow
		// see #915 for details
		exports.lexUserType = zod_1.z.custom((val) => {
		    if (!val || typeof val !== 'object') {
		        return;
		    }
		    if (val['type'] === undefined) {
		        return;
		    }
		    switch (val['type']) {
		        case 'record':
		            return exports.lexRecord.parse(val);
		        case 'query':
		            return exports.lexXrpcQuery.parse(val);
		        case 'procedure':
		            return exports.lexXrpcProcedure.parse(val);
		        case 'subscription':
		            return exports.lexXrpcSubscription.parse(val);
		        case 'blob':
		            return exports.lexBlob.parse(val);
		        case 'array':
		            return exports.lexArray.parse(val);
		        case 'token':
		            return exports.lexToken.parse(val);
		        case 'object':
		            return exports.lexObject.parse(val);
		        case 'boolean':
		            return exports.lexBoolean.parse(val);
		        case 'integer':
		            return exports.lexInteger.parse(val);
		        case 'string':
		            return exports.lexString.parse(val);
		        case 'bytes':
		            return exports.lexBytes.parse(val);
		        case 'cid-link':
		            return exports.lexCidLink.parse(val);
		        case 'unknown':
		            return exports.lexUnknown.parse(val);
		    }
		}, (val) => {
		    if (!val || typeof val !== 'object') {
		        return {
		            message: 'Must be an object',
		            fatal: true,
		        };
		    }
		    if (val['type'] === undefined) {
		        return {
		            message: 'Must have a type',
		            fatal: true,
		        };
		    }
		    if (typeof val['type'] !== 'string') {
		        return {
		            message: 'Type property must be a string',
		            fatal: true,
		        };
		    }
		    return {
		        message: `Invalid type: ${val['type']} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
		        fatal: true,
		    };
		});
		exports.lexiconDoc = zod_1.z
		    .object({
		    lexicon: zod_1.z.literal(1),
		    id: zod_1.z.string().refine((v) => syntax_1.NSID.isValid(v), {
		        message: 'Must be a valid NSID',
		    }),
		    revision: zod_1.z.number().optional(),
		    description: zod_1.z.string().optional(),
		    defs: zod_1.z.record(exports.lexUserType),
		})
		    .strict()
		    .superRefine((doc, ctx) => {
		    for (const defId in doc.defs) {
		        const def = doc.defs[defId];
		        if (defId !== 'main' &&
		            (def.type === 'record' ||
		                def.type === 'procedure' ||
		                def.type === 'query' ||
		                def.type === 'subscription')) {
		            ctx.addIssue({
		                code: zod_1.z.ZodIssueCode.custom,
		                message: `Records, procedures, queries, and subscriptions must be the main definition.`,
		            });
		        }
		    }
		});
		// helpers
		// =
		function isValidLexiconDoc(v) {
		    return exports.lexiconDoc.safeParse(v).success;
		}
		function isObj(v) {
		    return v != null && typeof v === 'object';
		}
		function isDiscriminatedObject(v) {
		    return isObj(v) && '$type' in v && typeof v.$type === 'string';
		}
		function parseLexiconDoc(v) {
		    exports.lexiconDoc.parse(v);
		    return v;
		}
		class ValidationError extends Error {
		}
		exports.ValidationError = ValidationError;
		class InvalidLexiconError extends Error {
		}
		exports.InvalidLexiconError = InvalidLexiconError;
		class LexiconDefNotFoundError extends Error {
		}
		exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
		
	} (types$5));
	return types$5;
}

var lexicons$1 = {};

var validation = {};

var complex = {};

var blob = {};

var blobRefs = {};

var cid = {};

var varint = {};

var varint_1;
var hasRequiredVarint$1;

function requireVarint$1 () {
	if (hasRequiredVarint$1) return varint_1;
	hasRequiredVarint$1 = 1;

	var encode_1 = encode;
	var MSB = 128, MSBALL = -128, INT = Math.pow(2, 31);
	function encode(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;
	  while (num >= INT) {
	    out[offset++] = num & 255 | MSB;
	    num /= 128;
	  }
	  while (num & MSBALL) {
	    out[offset++] = num & 255 | MSB;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  encode.bytes = offset - oldOffset + 1;
	  return out;
	}
	var decode = read;
	var MSB$1 = 128, REST$1 = 127;
	function read(buf, offset) {
	  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
	  do {
	    if (counter >= l) {
	      read.bytes = 0;
	      throw new RangeError('Could not decode varint');
	    }
	    b = buf[counter++];
	    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$1);
	  read.bytes = counter - offset;
	  return res;
	}
	var N1 = Math.pow(2, 7);
	var N2 = Math.pow(2, 14);
	var N3 = Math.pow(2, 21);
	var N4 = Math.pow(2, 28);
	var N5 = Math.pow(2, 35);
	var N6 = Math.pow(2, 42);
	var N7 = Math.pow(2, 49);
	var N8 = Math.pow(2, 56);
	var N9 = Math.pow(2, 63);
	var length = function (value) {
	  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
	};
	var varint = {
	  encode: encode_1,
	  decode: decode,
	  encodingLength: length
	};
	var _brrp_varint = varint;
	var varint$1 = _brrp_varint;

	varint_1 = varint$1;
	return varint_1;
}

var hasRequiredVarint;

function requireVarint () {
	if (hasRequiredVarint) return varint;
	hasRequiredVarint = 1;

	Object.defineProperty(varint, '__esModule', { value: true });

	var varint$1 = requireVarint$1();

	const decode = (data, offset = 0) => {
	  const code = varint$1.decode(data, offset);
	  return [
	    code,
	    varint$1.decode.bytes
	  ];
	};
	const encodeTo = (int, target, offset = 0) => {
	  varint$1.encode(int, target, offset);
	  return target;
	};
	const encodingLength = int => {
	  return varint$1.encodingLength(int);
	};

	varint.decode = decode;
	varint.encodeTo = encodeTo;
	varint.encodingLength = encodingLength;
	return varint;
}

var digest = {};

var bytes = {};

var hasRequiredBytes;

function requireBytes () {
	if (hasRequiredBytes) return bytes;
	hasRequiredBytes = 1;

	Object.defineProperty(bytes, '__esModule', { value: true });

	const empty = new Uint8Array(0);
	const toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');
	const fromHex = hex => {
	  const hexes = hex.match(/../g);
	  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;
	};
	const equals = (aa, bb) => {
	  if (aa === bb)
	    return true;
	  if (aa.byteLength !== bb.byteLength) {
	    return false;
	  }
	  for (let ii = 0; ii < aa.byteLength; ii++) {
	    if (aa[ii] !== bb[ii]) {
	      return false;
	    }
	  }
	  return true;
	};
	const coerce = o => {
	  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
	    return o;
	  if (o instanceof ArrayBuffer)
	    return new Uint8Array(o);
	  if (ArrayBuffer.isView(o)) {
	    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	};
	const isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);
	const fromString = str => new TextEncoder().encode(str);
	const toString = b => new TextDecoder().decode(b);

	bytes.coerce = coerce;
	bytes.empty = empty;
	bytes.equals = equals;
	bytes.fromHex = fromHex;
	bytes.fromString = fromString;
	bytes.isBinary = isBinary;
	bytes.toHex = toHex;
	bytes.toString = toString;
	return bytes;
}

var hasRequiredDigest;

function requireDigest () {
	if (hasRequiredDigest) return digest;
	hasRequiredDigest = 1;

	Object.defineProperty(digest, '__esModule', { value: true });

	var bytes = requireBytes();
	var varint = requireVarint();

	const create = (code, digest) => {
	  const size = digest.byteLength;
	  const sizeOffset = varint.encodingLength(code);
	  const digestOffset = sizeOffset + varint.encodingLength(size);
	  const bytes = new Uint8Array(digestOffset + size);
	  varint.encodeTo(code, bytes, 0);
	  varint.encodeTo(size, bytes, sizeOffset);
	  bytes.set(digest, digestOffset);
	  return new Digest(code, size, digest, bytes);
	};
	const decode = multihash => {
	  const bytes$1 = bytes.coerce(multihash);
	  const [code, sizeOffset] = varint.decode(bytes$1);
	  const [size, digestOffset] = varint.decode(bytes$1.subarray(sizeOffset));
	  const digest = bytes$1.subarray(sizeOffset + digestOffset);
	  if (digest.byteLength !== size) {
	    throw new Error('Incorrect length');
	  }
	  return new Digest(code, size, digest, bytes$1);
	};
	const equals = (a, b) => {
	  if (a === b) {
	    return true;
	  } else {
	    return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);
	  }
	};
	class Digest {
	  constructor(code, size, digest, bytes) {
	    this.code = code;
	    this.size = size;
	    this.digest = digest;
	    this.bytes = bytes;
	  }
	}

	digest.Digest = Digest;
	digest.create = create;
	digest.decode = decode;
	digest.equals = equals;
	return digest;
}

var base58 = {};

var base = {};

var baseX;
var hasRequiredBaseX;

function requireBaseX () {
	if (hasRequiredBaseX) return baseX;
	hasRequiredBaseX = 1;

	function base(ALPHABET, name) {
	  if (ALPHABET.length >= 255) {
	    throw new TypeError('Alphabet too long');
	  }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) {
	      throw new TypeError(x + ' is ambiguous');
	    }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256);
	  var iFACTOR = Math.log(256) / Math.log(BASE);
	  function encode(source) {
	    if (source instanceof Uint8Array);
	    else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) {
	      throw new TypeError('Expected Uint8Array');
	    }
	    if (source.length === 0) {
	      return '';
	    }
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
	    var b58 = new Uint8Array(size);
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
	        carry += 256 * b58[it1] >>> 0;
	        b58[it1] = carry % BASE >>> 0;
	        carry = carry / BASE >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      pbegin++;
	    }
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) {
	      str += ALPHABET.charAt(b58[it2]);
	    }
	    return str;
	  }
	  function decodeUnsafe(source) {
	    if (typeof source !== 'string') {
	      throw new TypeError('Expected String');
	    }
	    if (source.length === 0) {
	      return new Uint8Array();
	    }
	    var psz = 0;
	    if (source[psz] === ' ') {
	      return;
	    }
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	    var size = (source.length - psz) * FACTOR + 1 >>> 0;
	    var b256 = new Uint8Array(size);
	    while (source[psz]) {
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	      if (carry === 255) {
	        return;
	      }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
	        carry += BASE * b256[it3] >>> 0;
	        b256[it3] = carry % 256 >>> 0;
	        carry = carry / 256 >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      psz++;
	    }
	    if (source[psz] === ' ') {
	      return;
	    }
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch;
	  }
	  function decode(string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) {
	      return buffer;
	    }
	    throw new Error(`Non-${ name } character`);
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  };
	}
	var src = base;
	var _brrp__multiformats_scope_baseX = src;

	baseX = _brrp__multiformats_scope_baseX;
	return baseX;
}

var hasRequiredBase;

function requireBase () {
	if (hasRequiredBase) return base;
	hasRequiredBase = 1;

	Object.defineProperty(base, '__esModule', { value: true });

	var baseX$1 = requireBaseX();
	var bytes = requireBytes();

	class Encoder {
	  constructor(name, prefix, baseEncode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	  }
	  encode(bytes) {
	    if (bytes instanceof Uint8Array) {
	      return `${ this.prefix }${ this.baseEncode(bytes) }`;
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	class Decoder {
	  constructor(name, prefix, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    if (prefix.codePointAt(0) === undefined) {
	      throw new Error('Invalid prefix character');
	    }
	    this.prefixCodePoint = prefix.codePointAt(0);
	    this.baseDecode = baseDecode;
	  }
	  decode(text) {
	    if (typeof text === 'string') {
	      if (text.codePointAt(0) !== this.prefixCodePoint) {
	        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
	      }
	      return this.baseDecode(text.slice(this.prefix.length));
	    } else {
	      throw Error('Can only multibase decode strings');
	    }
	  }
	  or(decoder) {
	    return or(this, decoder);
	  }
	}
	class ComposedDecoder {
	  constructor(decoders) {
	    this.decoders = decoders;
	  }
	  or(decoder) {
	    return or(this, decoder);
	  }
	  decode(input) {
	    const prefix = input[0];
	    const decoder = this.decoders[prefix];
	    if (decoder) {
	      return decoder.decode(input);
	    } else {
	      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
	    }
	  }
	}
	const or = (left, right) => new ComposedDecoder({
	  ...left.decoders || { [left.prefix]: left },
	  ...right.decoders || { [right.prefix]: right }
	});
	class Codec {
	  constructor(name, prefix, baseEncode, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	    this.baseDecode = baseDecode;
	    this.encoder = new Encoder(name, prefix, baseEncode);
	    this.decoder = new Decoder(name, prefix, baseDecode);
	  }
	  encode(input) {
	    return this.encoder.encode(input);
	  }
	  decode(input) {
	    return this.decoder.decode(input);
	  }
	}
	const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);
	const baseX = ({prefix, name, alphabet}) => {
	  const {encode, decode} = baseX$1(alphabet, name);
	  return from({
	    prefix,
	    name,
	    encode,
	    decode: text => bytes.coerce(decode(text))
	  });
	};
	const decode = (string, alphabet, bitsPerChar, name) => {
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }
	  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;
	  for (let i = 0; i < end; ++i) {
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError(`Non-${ name } character`);
	    }
	    buffer = buffer << bitsPerChar | value;
	    bits += bitsPerChar;
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 255 & buffer >> bits;
	    }
	  }
	  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
	    throw new SyntaxError('Unexpected end of data');
	  }
	  return out;
	};
	const encode = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';
	  let bits = 0;
	  let buffer = 0;
	  for (let i = 0; i < data.length; ++i) {
	    buffer = buffer << 8 | data[i];
	    bits += 8;
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & buffer >> bits];
	    }
	  }
	  if (bits) {
	    out += alphabet[mask & buffer << bitsPerChar - bits];
	  }
	  if (pad) {
	    while (out.length * bitsPerChar & 7) {
	      out += '=';
	    }
	  }
	  return out;
	};
	const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {
	  return from({
	    prefix,
	    name,
	    encode(input) {
	      return encode(input, alphabet, bitsPerChar);
	    },
	    decode(input) {
	      return decode(input, alphabet, bitsPerChar, name);
	    }
	  });
	};

	base.Codec = Codec;
	base.baseX = baseX;
	base.from = from;
	base.or = or;
	base.rfc4648 = rfc4648;
	return base;
}

var hasRequiredBase58;

function requireBase58 () {
	if (hasRequiredBase58) return base58;
	hasRequiredBase58 = 1;

	Object.defineProperty(base58, '__esModule', { value: true });

	var base = requireBase();

	const base58btc = base.baseX({
	  name: 'base58btc',
	  prefix: 'z',
	  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	});
	const base58flickr = base.baseX({
	  name: 'base58flickr',
	  prefix: 'Z',
	  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
	});

	base58.base58btc = base58btc;
	base58.base58flickr = base58flickr;
	return base58;
}

var base32 = {};

var hasRequiredBase32;

function requireBase32 () {
	if (hasRequiredBase32) return base32;
	hasRequiredBase32 = 1;

	Object.defineProperty(base32, '__esModule', { value: true });

	var base = requireBase();

	const base32$1 = base.rfc4648({
	  prefix: 'b',
	  name: 'base32',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
	  bitsPerChar: 5
	});
	const base32upper = base.rfc4648({
	  prefix: 'B',
	  name: 'base32upper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	  bitsPerChar: 5
	});
	const base32pad = base.rfc4648({
	  prefix: 'c',
	  name: 'base32pad',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
	  bitsPerChar: 5
	});
	const base32padupper = base.rfc4648({
	  prefix: 'C',
	  name: 'base32padupper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
	  bitsPerChar: 5
	});
	const base32hex = base.rfc4648({
	  prefix: 'v',
	  name: 'base32hex',
	  alphabet: '0123456789abcdefghijklmnopqrstuv',
	  bitsPerChar: 5
	});
	const base32hexupper = base.rfc4648({
	  prefix: 'V',
	  name: 'base32hexupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
	  bitsPerChar: 5
	});
	const base32hexpad = base.rfc4648({
	  prefix: 't',
	  name: 'base32hexpad',
	  alphabet: '0123456789abcdefghijklmnopqrstuv=',
	  bitsPerChar: 5
	});
	const base32hexpadupper = base.rfc4648({
	  prefix: 'T',
	  name: 'base32hexpadupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
	  bitsPerChar: 5
	});
	const base32z = base.rfc4648({
	  prefix: 'h',
	  name: 'base32z',
	  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
	  bitsPerChar: 5
	});

	base32.base32 = base32$1;
	base32.base32hex = base32hex;
	base32.base32hexpad = base32hexpad;
	base32.base32hexpadupper = base32hexpadupper;
	base32.base32hexupper = base32hexupper;
	base32.base32pad = base32pad;
	base32.base32padupper = base32padupper;
	base32.base32upper = base32upper;
	base32.base32z = base32z;
	return base32;
}

var hasRequiredCid;

function requireCid () {
	if (hasRequiredCid) return cid;
	hasRequiredCid = 1;

	Object.defineProperty(cid, '__esModule', { value: true });

	var varint = requireVarint();
	var digest = requireDigest();
	var base58 = requireBase58();
	var base32 = requireBase32();
	var bytes = requireBytes();

	class CID {
	  constructor(version, code, multihash, bytes) {
	    this.code = code;
	    this.version = version;
	    this.multihash = multihash;
	    this.bytes = bytes;
	    this.byteOffset = bytes.byteOffset;
	    this.byteLength = bytes.byteLength;
	    this.asCID = this;
	    this._baseCache = new Map();
	    Object.defineProperties(this, {
	      byteOffset: hidden,
	      byteLength: hidden,
	      code: readonly,
	      version: readonly,
	      multihash: readonly,
	      bytes: readonly,
	      _baseCache: hidden,
	      asCID: hidden
	    });
	  }
	  toV0() {
	    switch (this.version) {
	    case 0: {
	        return this;
	      }
	    default: {
	        const {code, multihash} = this;
	        if (code !== DAG_PB_CODE) {
	          throw new Error('Cannot convert a non dag-pb CID to CIDv0');
	        }
	        if (multihash.code !== SHA_256_CODE) {
	          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
	        }
	        return CID.createV0(multihash);
	      }
	    }
	  }
	  toV1() {
	    switch (this.version) {
	    case 0: {
	        const {code, digest: digest$1} = this.multihash;
	        const multihash = digest.create(code, digest$1);
	        return CID.createV1(this.code, multihash);
	      }
	    case 1: {
	        return this;
	      }
	    default: {
	        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);
	      }
	    }
	  }
	  equals(other) {
	    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);
	  }
	  toString(base) {
	    const {bytes, version, _baseCache} = this;
	    switch (version) {
	    case 0:
	      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);
	    default:
	      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);
	    }
	  }
	  toJSON() {
	    return {
	      code: this.code,
	      version: this.version,
	      hash: this.multihash.bytes
	    };
	  }
	  get [Symbol.toStringTag]() {
	    return 'CID';
	  }
	  [Symbol.for('nodejs.util.inspect.custom')]() {
	    return 'CID(' + this.toString() + ')';
	  }
	  static isCID(value) {
	    deprecate(/^0\.0/, IS_CID_DEPRECATION);
	    return !!(value && (value[cidSymbol] || value.asCID === value));
	  }
	  get toBaseEncodedString() {
	    throw new Error('Deprecated, use .toString()');
	  }
	  get codec() {
	    throw new Error('"codec" property is deprecated, use integer "code" property instead');
	  }
	  get buffer() {
	    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
	  }
	  get multibaseName() {
	    throw new Error('"multibaseName" property is deprecated');
	  }
	  get prefix() {
	    throw new Error('"prefix" property is deprecated');
	  }
	  static asCID(value) {
	    if (value instanceof CID) {
	      return value;
	    } else if (value != null && value.asCID === value) {
	      const {version, code, multihash, bytes} = value;
	      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));
	    } else if (value != null && value[cidSymbol] === true) {
	      const {version, multihash, code} = value;
	      const digest$1 = digest.decode(multihash);
	      return CID.create(version, code, digest$1);
	    } else {
	      return null;
	    }
	  }
	  static create(version, code, digest) {
	    if (typeof code !== 'number') {
	      throw new Error('String codecs are no longer supported');
	    }
	    switch (version) {
	    case 0: {
	        if (code !== DAG_PB_CODE) {
	          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);
	        } else {
	          return new CID(version, code, digest, digest.bytes);
	        }
	      }
	    case 1: {
	        const bytes = encodeCID(version, code, digest.bytes);
	        return new CID(version, code, digest, bytes);
	      }
	    default: {
	        throw new Error('Invalid version');
	      }
	    }
	  }
	  static createV0(digest) {
	    return CID.create(0, DAG_PB_CODE, digest);
	  }
	  static createV1(code, digest) {
	    return CID.create(1, code, digest);
	  }
	  static decode(bytes) {
	    const [cid, remainder] = CID.decodeFirst(bytes);
	    if (remainder.length) {
	      throw new Error('Incorrect length');
	    }
	    return cid;
	  }
	  static decodeFirst(bytes$1) {
	    const specs = CID.inspectBytes(bytes$1);
	    const prefixSize = specs.size - specs.multihashSize;
	    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
	    if (multihashBytes.byteLength !== specs.multihashSize) {
	      throw new Error('Incorrect length');
	    }
	    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
	    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
	    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);
	    return [
	      cid,
	      bytes$1.subarray(specs.size)
	    ];
	  }
	  static inspectBytes(initialBytes) {
	    let offset = 0;
	    const next = () => {
	      const [i, length] = varint.decode(initialBytes.subarray(offset));
	      offset += length;
	      return i;
	    };
	    let version = next();
	    let codec = DAG_PB_CODE;
	    if (version === 18) {
	      version = 0;
	      offset = 0;
	    } else if (version === 1) {
	      codec = next();
	    }
	    if (version !== 0 && version !== 1) {
	      throw new RangeError(`Invalid CID version ${ version }`);
	    }
	    const prefixSize = offset;
	    const multihashCode = next();
	    const digestSize = next();
	    const size = offset + digestSize;
	    const multihashSize = size - prefixSize;
	    return {
	      version,
	      codec,
	      multihashCode,
	      digestSize,
	      multihashSize,
	      size
	    };
	  }
	  static parse(source, base) {
	    const [prefix, bytes] = parseCIDtoBytes(source, base);
	    const cid = CID.decode(bytes);
	    cid._baseCache.set(prefix, source);
	    return cid;
	  }
	}
	const parseCIDtoBytes = (source, base) => {
	  switch (source[0]) {
	  case 'Q': {
	      const decoder = base || base58.base58btc;
	      return [
	        base58.base58btc.prefix,
	        decoder.decode(`${ base58.base58btc.prefix }${ source }`)
	      ];
	    }
	  case base58.base58btc.prefix: {
	      const decoder = base || base58.base58btc;
	      return [
	        base58.base58btc.prefix,
	        decoder.decode(source)
	      ];
	    }
	  case base32.base32.prefix: {
	      const decoder = base || base32.base32;
	      return [
	        base32.base32.prefix,
	        decoder.decode(source)
	      ];
	    }
	  default: {
	      if (base == null) {
	        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
	      }
	      return [
	        source[0],
	        base.decode(source)
	      ];
	    }
	  }
	};
	const toStringV0 = (bytes, cache, base) => {
	  const {prefix} = base;
	  if (prefix !== base58.base58btc.prefix) {
	    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);
	  }
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes).slice(1);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const toStringV1 = (bytes, cache, base) => {
	  const {prefix} = base;
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const DAG_PB_CODE = 112;
	const SHA_256_CODE = 18;
	const encodeCID = (version, code, multihash) => {
	  const codeOffset = varint.encodingLength(version);
	  const hashOffset = codeOffset + varint.encodingLength(code);
	  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
	  varint.encodeTo(version, bytes, 0);
	  varint.encodeTo(code, bytes, codeOffset);
	  bytes.set(multihash, hashOffset);
	  return bytes;
	};
	const cidSymbol = Symbol.for('@ipld/js-cid/CID');
	const readonly = {
	  writable: false,
	  configurable: false,
	  enumerable: true
	};
	const hidden = {
	  writable: false,
	  enumerable: false,
	  configurable: false
	};
	const version = '0.0.0-dev';
	const deprecate = (range, message) => {
	  if (range.test(version)) {
	    console.warn(message);
	  } else {
	    throw new Error(message);
	  }
	};
	const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

	cid.CID = CID;
	return cid;
}

var dist$2 = {};

var check = {};

var hasRequiredCheck;

function requireCheck () {
	if (hasRequiredCheck) return check;
	hasRequiredCheck = 1;
	// Explicitly not using "zod" types here to avoid mismatching types due to
	// version differences.
	Object.defineProperty(check, "__esModule", { value: true });
	check.isObject = check.assure = check.create = check.is = void 0;
	const is = (obj, def) => {
	    return def.safeParse(obj).success;
	};
	check.is = is;
	const create = (def) => (v) => def.safeParse(v).success;
	check.create = create;
	const assure = (def, obj) => {
	    return def.parse(obj);
	};
	check.assure = assure;
	const isObject = (obj) => {
	    return typeof obj === 'object' && obj !== null;
	};
	check.isObject = isObject;
	
	return check;
}

var util$5 = {};

var hasRequiredUtil$5;

function requireUtil$5 () {
	if (hasRequiredUtil$5) return util$5;
	hasRequiredUtil$5 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
		exports.omit = omit;
		const noUndefinedVals = (obj) => {
		    Object.keys(obj).forEach((k) => {
		        if (obj[k] === undefined) {
		            delete obj[k];
		        }
		    });
		    return obj;
		};
		exports.noUndefinedVals = noUndefinedVals;
		function omit(src, rejectedKeys) {
		    // Hot path
		    if (!src)
		        return src;
		    const dst = {};
		    const srcKeys = Object.keys(src);
		    for (let i = 0; i < srcKeys.length; i++) {
		        const key = srcKeys[i];
		        if (!rejectedKeys.includes(key)) {
		            dst[key] = src[key];
		        }
		    }
		    return dst;
		}
		const jitter = (maxMs) => {
		    return Math.round((Math.random() - 0.5) * maxMs * 2);
		};
		exports.jitter = jitter;
		const wait = (ms) => {
		    return new Promise((res) => setTimeout(res, ms));
		};
		exports.wait = wait;
		const bailableWait = (ms) => {
		    let bail;
		    const waitPromise = new Promise((res) => {
		        const timeout = setTimeout(res, ms);
		        bail = () => {
		            clearTimeout(timeout);
		            res();
		        };
		    });
		    return { bail, wait: () => waitPromise };
		};
		exports.bailableWait = bailableWait;
		const flattenUint8Arrays = (arrs) => {
		    const length = arrs.reduce((acc, cur) => {
		        return acc + cur.length;
		    }, 0);
		    const flattened = new Uint8Array(length);
		    let offset = 0;
		    arrs.forEach((arr) => {
		        flattened.set(arr, offset);
		        offset += arr.length;
		    });
		    return flattened;
		};
		exports.flattenUint8Arrays = flattenUint8Arrays;
		const streamToBuffer = async (stream) => {
		    const arrays = [];
		    for await (const chunk of stream) {
		        arrays.push(chunk);
		    }
		    return (0, exports.flattenUint8Arrays)(arrays);
		};
		exports.streamToBuffer = streamToBuffer;
		const S32_CHAR = '234567abcdefghijklmnopqrstuvwxyz';
		const s32encode = (i) => {
		    let s = '';
		    while (i) {
		        const c = i % 32;
		        i = Math.floor(i / 32);
		        s = S32_CHAR.charAt(c) + s;
		    }
		    return s;
		};
		exports.s32encode = s32encode;
		const s32decode = (s) => {
		    let i = 0;
		    for (const c of s) {
		        i = i * 32 + S32_CHAR.indexOf(c);
		    }
		    return i;
		};
		exports.s32decode = s32decode;
		const asyncFilter = async (arr, fn) => {
		    const results = await Promise.all(arr.map((t) => fn(t)));
		    return arr.filter((_, i) => results[i]);
		};
		exports.asyncFilter = asyncFilter;
		const isErrnoException = (err) => {
		    return !!err && err['code'];
		};
		exports.isErrnoException = isErrnoException;
		const errHasMsg = (err, msg) => {
		    return !!err && typeof err === 'object' && err['message'] === msg;
		};
		exports.errHasMsg = errHasMsg;
		const chunkArray = (arr, chunkSize) => {
		    return arr.reduce((acc, cur, i) => {
		        const chunkI = Math.floor(i / chunkSize);
		        if (!acc[chunkI]) {
		            acc[chunkI] = [];
		        }
		        acc[chunkI].push(cur);
		        return acc;
		    }, []);
		};
		exports.chunkArray = chunkArray;
		const range = (num) => {
		    const nums = [];
		    for (let i = 0; i < num; i++) {
		        nums.push(i);
		    }
		    return nums;
		};
		exports.range = range;
		const dedupeStrs = (strs) => {
		    return [...new Set(strs)];
		};
		exports.dedupeStrs = dedupeStrs;
		const parseIntWithFallback = (value, fallback) => {
		    const parsed = parseInt(value || '', 10);
		    return isNaN(parsed) ? fallback : parsed;
		};
		exports.parseIntWithFallback = parseIntWithFallback;
		
	} (util$5));
	return util$5;
}

var arrays = {};

var hasRequiredArrays;

function requireArrays () {
	if (hasRequiredArrays) return arrays;
	hasRequiredArrays = 1;
	Object.defineProperty(arrays, "__esModule", { value: true });
	arrays.mapDefined = void 0;
	arrays.keyBy = keyBy;
	function keyBy(arr, key) {
	    return arr.reduce((acc, cur) => {
	        acc.set(cur[key], cur);
	        return acc;
	    }, new Map());
	}
	const mapDefined = (arr, fn) => {
	    const output = [];
	    for (const item of arr) {
	        const val = fn(item);
	        if (val !== undefined) {
	            output.push(val);
	        }
	    }
	    return output;
	};
	arrays.mapDefined = mapDefined;
	
	return arrays;
}

var async = {};

var hasRequiredAsync;

function requireAsync () {
	if (hasRequiredAsync) return async;
	hasRequiredAsync = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
		exports.allFulfilled = allFulfilled;
		exports.handleAllSettledErrors = handleAllSettledErrors;
		exports.isRejectedResult = isRejectedResult;
		exports.isFulfilledResult = isFulfilledResult;
		const util_1 = requireUtil$5();
		// reads values from a generator into a list
		// breaks when isDone signals `true` AND `waitFor` completes OR when a max length is reached
		// NOTE: does not signal generator to close. it *will* continue to produce values
		const readFromGenerator = async (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) => {
		    const evts = [];
		    let bail;
		    let hasBroke = false;
		    const awaitDone = async () => {
		        if (await isDone(evts.at(-1))) {
		            return true;
		        }
		        const bailable = (0, util_1.bailableWait)(20);
		        await bailable.wait();
		        bail = bailable.bail;
		        if (hasBroke)
		            return false;
		        return await awaitDone();
		    };
		    const breakOn = new Promise((resolve) => {
		        waitFor.then(() => {
		            awaitDone().then(() => resolve());
		        });
		    });
		    try {
		        while (evts.length < maxLength) {
		            const maybeEvt = await Promise.race([gen.next(), breakOn]);
		            if (!maybeEvt)
		                break;
		            const evt = maybeEvt;
		            if (evt.done)
		                break;
		            evts.push(evt.value);
		        }
		    }
		    finally {
		        hasBroke = true;
		        bail && bail();
		    }
		    return evts;
		};
		exports.readFromGenerator = readFromGenerator;
		const createDeferrable = () => {
		    let resolve;
		    const promise = new Promise((res) => {
		        resolve = () => res();
		    });
		    return { resolve, complete: promise };
		};
		exports.createDeferrable = createDeferrable;
		const createDeferrables = (count) => {
		    const list = [];
		    for (let i = 0; i < count; i++) {
		        list.push((0, exports.createDeferrable)());
		    }
		    return list;
		};
		exports.createDeferrables = createDeferrables;
		const allComplete = async (deferrables) => {
		    await Promise.all(deferrables.map((d) => d.complete));
		};
		exports.allComplete = allComplete;
		class AsyncBuffer {
		    constructor(maxSize) {
		        Object.defineProperty(this, "maxSize", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: maxSize
		        });
		        Object.defineProperty(this, "buffer", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: []
		        });
		        Object.defineProperty(this, "promise", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        Object.defineProperty(this, "resolve", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        Object.defineProperty(this, "closed", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: false
		        });
		        Object.defineProperty(this, "toThrow", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        // Initializing to satisfy types/build, immediately reset by resetPromise()
		        this.promise = Promise.resolve();
		        this.resolve = () => null;
		        this.resetPromise();
		    }
		    get curr() {
		        return this.buffer;
		    }
		    get size() {
		        return this.buffer.length;
		    }
		    get isClosed() {
		        return this.closed;
		    }
		    resetPromise() {
		        this.promise = new Promise((r) => (this.resolve = r));
		    }
		    push(item) {
		        this.buffer.push(item);
		        this.resolve();
		    }
		    pushMany(items) {
		        items.forEach((i) => this.buffer.push(i));
		        this.resolve();
		    }
		    async *events() {
		        while (true) {
		            if (this.closed && this.buffer.length === 0) {
		                if (this.toThrow) {
		                    throw this.toThrow;
		                }
		                else {
		                    return;
		                }
		            }
		            await this.promise;
		            if (this.toThrow) {
		                throw this.toThrow;
		            }
		            if (this.maxSize && this.size > this.maxSize) {
		                throw new AsyncBufferFullError(this.maxSize);
		            }
		            const [first, ...rest] = this.buffer;
		            if (first) {
		                this.buffer = rest;
		                yield first;
		            }
		            else {
		                this.resetPromise();
		            }
		        }
		    }
		    throw(err) {
		        this.toThrow = err;
		        this.closed = true;
		        this.resolve();
		    }
		    close() {
		        this.closed = true;
		        this.resolve();
		    }
		}
		exports.AsyncBuffer = AsyncBuffer;
		class AsyncBufferFullError extends Error {
		    constructor(maxSize) {
		        super(`ReachedMaxBufferSize: ${maxSize}`);
		    }
		}
		exports.AsyncBufferFullError = AsyncBufferFullError;
		function allFulfilled(promises) {
		    return Promise.allSettled(promises).then(handleAllSettledErrors);
		}
		function handleAllSettledErrors(results) {
		    const errors = results.filter(isRejectedResult).map(extractReason);
		    if (errors.length === 0) {
		        // No need to filter here, it is safe to assume that all promises are fulfilled
		        return results.map(extractValue);
		    }
		    if (errors.length === 1) {
		        throw errors[0];
		    }
		    throw new AggregateError(errors, `Multiple errors: ${errors.map(stringifyReason).join('\n')}`);
		}
		function isRejectedResult(result) {
		    return result.status === 'rejected';
		}
		function extractReason(result) {
		    return result.reason;
		}
		function isFulfilledResult(result) {
		    return result.status === 'fulfilled';
		}
		function extractValue(result) {
		    return result.value;
		}
		function stringifyReason(reason) {
		    if (reason instanceof Error) {
		        return reason.message;
		    }
		    return String(reason);
		}
		
	} (async));
	return async;
}

var tid = {};

var hasRequiredTid;

function requireTid () {
	if (hasRequiredTid) return tid;
	hasRequiredTid = 1;
	Object.defineProperty(tid, "__esModule", { value: true });
	tid.TID = void 0;
	const util_1 = requireUtil$5();
	const TID_LEN = 13;
	let lastTimestamp = 0;
	let timestampCount = 0;
	let clockid = null;
	function dedash(str) {
	    return str.replaceAll('-', '');
	}
	class TID {
	    constructor(str) {
	        Object.defineProperty(this, "str", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        const noDashes = dedash(str);
	        if (noDashes.length !== TID_LEN) {
	            throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
	        }
	        this.str = noDashes;
	    }
	    static next(prev) {
	        // javascript does not have microsecond precision
	        // instead, we append a counter to the timestamp to indicate if multiple timestamps were created within the same millisecond
	        // take max of current time & last timestamp to prevent tids moving backwards if system clock drifts backwards
	        const time = Math.max(Date.now(), lastTimestamp);
	        if (time === lastTimestamp) {
	            timestampCount++;
	        }
	        lastTimestamp = time;
	        const timestamp = time * 1000 + timestampCount;
	        // the bottom 32 clock ids can be randomized & are not guaranteed to be collision resistant
	        // we use the same clockid for all tids coming from this machine
	        if (clockid === null) {
	            clockid = Math.floor(Math.random() * 32);
	        }
	        const tid = TID.fromTime(timestamp, clockid);
	        if (!prev || tid.newerThan(prev)) {
	            return tid;
	        }
	        return TID.fromTime(prev.timestamp() + 1, clockid);
	    }
	    static nextStr(prev) {
	        return TID.next(prev ? new TID(prev) : undefined).toString();
	    }
	    static fromTime(timestamp, clockid) {
	        // base32 encode with encoding variant sort (s32)
	        const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid).padStart(2, '2')}`;
	        return new TID(str);
	    }
	    static fromStr(str) {
	        return new TID(str);
	    }
	    static oldestFirst(a, b) {
	        return a.compareTo(b);
	    }
	    static newestFirst(a, b) {
	        return b.compareTo(a);
	    }
	    static is(str) {
	        return dedash(str).length === TID_LEN;
	    }
	    timestamp() {
	        return (0, util_1.s32decode)(this.str.slice(0, 11));
	    }
	    clockid() {
	        return (0, util_1.s32decode)(this.str.slice(11, 13));
	    }
	    formatted() {
	        const str = this.toString();
	        return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
	    }
	    toString() {
	        return this.str;
	    }
	    // newer > older
	    compareTo(other) {
	        if (this.str > other.str)
	            return 1;
	        if (this.str < other.str)
	            return -1;
	        return 0;
	    }
	    equals(other) {
	        return this.str === other.str;
	    }
	    newerThan(other) {
	        return this.compareTo(other) > 0;
	    }
	    olderThan(other) {
	        return this.compareTo(other) < 0;
	    }
	}
	tid.TID = TID;
	
	return tid;
}

var ipld = {};

var src$1 = {};

var compare = {};

var hasRequiredCompare;

function requireCompare () {
	if (hasRequiredCompare) return compare;
	hasRequiredCompare = 1;

	Object.defineProperty(compare, '__esModule', { value: true });

	function compare$1(a, b) {
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] < b[i]) {
	      return -1;
	    }
	    if (a[i] > b[i]) {
	      return 1;
	    }
	  }
	  if (a.byteLength > b.byteLength) {
	    return 1;
	  }
	  if (a.byteLength < b.byteLength) {
	    return -1;
	  }
	  return 0;
	}

	compare.compare = compare$1;
	return compare;
}

var concat = {};

var hasRequiredConcat;

function requireConcat () {
	if (hasRequiredConcat) return concat;
	hasRequiredConcat = 1;

	Object.defineProperty(concat, '__esModule', { value: true });

	function concat$1(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}

	concat.concat = concat$1;
	return concat;
}

var equals = {};

var hasRequiredEquals;

function requireEquals () {
	if (hasRequiredEquals) return equals;
	hasRequiredEquals = 1;

	Object.defineProperty(equals, '__esModule', { value: true });

	function equals$1(a, b) {
	  if (a === b) {
	    return true;
	  }
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	equals.equals = equals$1;
	return equals;
}

var fromString = {};

var basics = {};

var identity$1 = {};

var hasRequiredIdentity$1;

function requireIdentity$1 () {
	if (hasRequiredIdentity$1) return identity$1;
	hasRequiredIdentity$1 = 1;

	Object.defineProperty(identity$1, '__esModule', { value: true });

	var base = requireBase();
	var bytes = requireBytes();

	const identity = base.from({
	  prefix: '\0',
	  name: 'identity',
	  encode: buf => bytes.toString(buf),
	  decode: str => bytes.fromString(str)
	});

	identity$1.identity = identity;
	return identity$1;
}

var base2 = {};

var hasRequiredBase2;

function requireBase2 () {
	if (hasRequiredBase2) return base2;
	hasRequiredBase2 = 1;

	Object.defineProperty(base2, '__esModule', { value: true });

	var base = requireBase();

	const base2$1 = base.rfc4648({
	  prefix: '0',
	  name: 'base2',
	  alphabet: '01',
	  bitsPerChar: 1
	});

	base2.base2 = base2$1;
	return base2;
}

var base8 = {};

var hasRequiredBase8;

function requireBase8 () {
	if (hasRequiredBase8) return base8;
	hasRequiredBase8 = 1;

	Object.defineProperty(base8, '__esModule', { value: true });

	var base = requireBase();

	const base8$1 = base.rfc4648({
	  prefix: '7',
	  name: 'base8',
	  alphabet: '01234567',
	  bitsPerChar: 3
	});

	base8.base8 = base8$1;
	return base8;
}

var base10 = {};

var hasRequiredBase10;

function requireBase10 () {
	if (hasRequiredBase10) return base10;
	hasRequiredBase10 = 1;

	Object.defineProperty(base10, '__esModule', { value: true });

	var base = requireBase();

	const base10$1 = base.baseX({
	  prefix: '9',
	  name: 'base10',
	  alphabet: '0123456789'
	});

	base10.base10 = base10$1;
	return base10;
}

var base16 = {};

var hasRequiredBase16;

function requireBase16 () {
	if (hasRequiredBase16) return base16;
	hasRequiredBase16 = 1;

	Object.defineProperty(base16, '__esModule', { value: true });

	var base = requireBase();

	const base16$1 = base.rfc4648({
	  prefix: 'f',
	  name: 'base16',
	  alphabet: '0123456789abcdef',
	  bitsPerChar: 4
	});
	const base16upper = base.rfc4648({
	  prefix: 'F',
	  name: 'base16upper',
	  alphabet: '0123456789ABCDEF',
	  bitsPerChar: 4
	});

	base16.base16 = base16$1;
	base16.base16upper = base16upper;
	return base16;
}

var base36 = {};

var hasRequiredBase36;

function requireBase36 () {
	if (hasRequiredBase36) return base36;
	hasRequiredBase36 = 1;

	Object.defineProperty(base36, '__esModule', { value: true });

	var base = requireBase();

	const base36$1 = base.baseX({
	  prefix: 'k',
	  name: 'base36',
	  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
	});
	const base36upper = base.baseX({
	  prefix: 'K',
	  name: 'base36upper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	});

	base36.base36 = base36$1;
	base36.base36upper = base36upper;
	return base36;
}

var base64 = {};

var hasRequiredBase64;

function requireBase64 () {
	if (hasRequiredBase64) return base64;
	hasRequiredBase64 = 1;

	Object.defineProperty(base64, '__esModule', { value: true });

	var base = requireBase();

	const base64$1 = base.rfc4648({
	  prefix: 'm',
	  name: 'base64',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	  bitsPerChar: 6
	});
	const base64pad = base.rfc4648({
	  prefix: 'M',
	  name: 'base64pad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	  bitsPerChar: 6
	});
	const base64url = base.rfc4648({
	  prefix: 'u',
	  name: 'base64url',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	  bitsPerChar: 6
	});
	const base64urlpad = base.rfc4648({
	  prefix: 'U',
	  name: 'base64urlpad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
	  bitsPerChar: 6
	});

	base64.base64 = base64$1;
	base64.base64pad = base64pad;
	base64.base64url = base64url;
	base64.base64urlpad = base64urlpad;
	return base64;
}

var base256emoji = {};

var hasRequiredBase256emoji;

function requireBase256emoji () {
	if (hasRequiredBase256emoji) return base256emoji;
	hasRequiredBase256emoji = 1;

	Object.defineProperty(base256emoji, '__esModule', { value: true });

	var base = requireBase();

	const alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42');
	const alphabetBytesToChars = alphabet.reduce((p, c, i) => {
	  p[i] = c;
	  return p;
	}, []);
	const alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
	  p[c.codePointAt(0)] = i;
	  return p;
	}, []);
	function encode(data) {
	  return data.reduce((p, c) => {
	    p += alphabetBytesToChars[c];
	    return p;
	  }, '');
	}
	function decode(str) {
	  const byts = [];
	  for (const char of str) {
	    const byt = alphabetCharsToBytes[char.codePointAt(0)];
	    if (byt === undefined) {
	      throw new Error(`Non-base256emoji character: ${ char }`);
	    }
	    byts.push(byt);
	  }
	  return new Uint8Array(byts);
	}
	const base256emoji$1 = base.from({
	  prefix: '\uD83D\uDE80',
	  name: 'base256emoji',
	  encode,
	  decode
	});

	base256emoji.base256emoji = base256emoji$1;
	return base256emoji;
}

var sha2 = {};

var hasher = {};

var hasRequiredHasher;

function requireHasher () {
	if (hasRequiredHasher) return hasher;
	hasRequiredHasher = 1;

	Object.defineProperty(hasher, '__esModule', { value: true });

	var digest = requireDigest();

	const from = ({name, code, encode}) => new Hasher(name, code, encode);
	class Hasher {
	  constructor(name, code, encode) {
	    this.name = name;
	    this.code = code;
	    this.encode = encode;
	  }
	  digest(input) {
	    if (input instanceof Uint8Array) {
	      const result = this.encode(input);
	      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}

	hasher.Hasher = Hasher;
	hasher.from = from;
	return hasher;
}

var hasRequiredSha2;

function requireSha2 () {
	if (hasRequiredSha2) return sha2;
	hasRequiredSha2 = 1;

	Object.defineProperty(sha2, '__esModule', { value: true });

	var crypto = require$$0$1;
	var hasher = requireHasher();
	var bytes = requireBytes();

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);

	const sha256 = hasher.from({
	  name: 'sha2-256',
	  code: 18,
	  encode: input => bytes.coerce(crypto__default["default"].createHash('sha256').update(input).digest())
	});
	const sha512 = hasher.from({
	  name: 'sha2-512',
	  code: 19,
	  encode: input => bytes.coerce(crypto__default["default"].createHash('sha512').update(input).digest())
	});

	sha2.sha256 = sha256;
	sha2.sha512 = sha512;
	return sha2;
}

var identity = {};

var hasRequiredIdentity;

function requireIdentity () {
	if (hasRequiredIdentity) return identity;
	hasRequiredIdentity = 1;

	Object.defineProperty(identity, '__esModule', { value: true });

	var bytes = requireBytes();
	var digest$1 = requireDigest();

	const code = 0;
	const name = 'identity';
	const encode = bytes.coerce;
	const digest = input => digest$1.create(code, encode(input));
	const identity$1 = {
	  code,
	  name,
	  encode,
	  digest
	};

	identity.identity = identity$1;
	return identity;
}

var raw = {};

var hasRequiredRaw;

function requireRaw () {
	if (hasRequiredRaw) return raw;
	hasRequiredRaw = 1;

	Object.defineProperty(raw, '__esModule', { value: true });

	var bytes = requireBytes();

	const name = 'raw';
	const code = 85;
	const encode = node => bytes.coerce(node);
	const decode = data => bytes.coerce(data);

	raw.code = code;
	raw.decode = decode;
	raw.encode = encode;
	raw.name = name;
	return raw;
}

var json = {};

var hasRequiredJson;

function requireJson () {
	if (hasRequiredJson) return json;
	hasRequiredJson = 1;

	Object.defineProperty(json, '__esModule', { value: true });

	const textEncoder = new TextEncoder();
	const textDecoder = new TextDecoder();
	const name = 'json';
	const code = 512;
	const encode = node => textEncoder.encode(JSON.stringify(node));
	const decode = data => JSON.parse(textDecoder.decode(data));

	json.code = code;
	json.decode = decode;
	json.encode = encode;
	json.name = name;
	return json;
}

var src = {};

var hasRequiredSrc$1;

function requireSrc$1 () {
	if (hasRequiredSrc$1) return src;
	hasRequiredSrc$1 = 1;

	Object.defineProperty(src, '__esModule', { value: true });

	var cid = requireCid();
	var varint = requireVarint();
	var bytes = requireBytes();
	var hasher = requireHasher();
	var digest = requireDigest();



	src.CID = cid.CID;
	src.varint = varint;
	src.bytes = bytes;
	src.hasher = hasher;
	src.digest = digest;
	return src;
}

var hasRequiredBasics;

function requireBasics () {
	if (hasRequiredBasics) return basics;
	hasRequiredBasics = 1;

	Object.defineProperty(basics, '__esModule', { value: true });

	var identity = requireIdentity$1();
	var base2 = requireBase2();
	var base8 = requireBase8();
	var base10 = requireBase10();
	var base16 = requireBase16();
	var base32 = requireBase32();
	var base36 = requireBase36();
	var base58 = requireBase58();
	var base64 = requireBase64();
	var base256emoji = requireBase256emoji();
	var sha2 = requireSha2();
	var identity$1 = requireIdentity();
	var raw = requireRaw();
	var json = requireJson();
	requireSrc$1();
	var cid = requireCid();
	var hasher = requireHasher();
	var digest = requireDigest();
	var varint = requireVarint();
	var bytes = requireBytes();

	const bases = {
	  ...identity,
	  ...base2,
	  ...base8,
	  ...base10,
	  ...base16,
	  ...base32,
	  ...base36,
	  ...base58,
	  ...base64,
	  ...base256emoji
	};
	const hashes = {
	  ...sha2,
	  ...identity$1
	};
	const codecs = {
	  raw,
	  json
	};

	basics.CID = cid.CID;
	basics.hasher = hasher;
	basics.digest = digest;
	basics.varint = varint;
	basics.bytes = bytes;
	basics.bases = bases;
	basics.codecs = codecs;
	basics.hashes = hashes;
	return basics;
}

var bases;
var hasRequiredBases;

function requireBases () {
	if (hasRequiredBases) return bases;
	hasRequiredBases = 1;

	var basics = requireBasics();

	function createCodec(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string = createCodec('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii = createCodec('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES = {
	  utf8: string,
	  'utf-8': string,
	  hex: basics.bases.base16,
	  latin1: ascii,
	  ascii: ascii,
	  binary: ascii,
	  ...basics.bases
	};

	bases = BASES;
	return bases;
}

var hasRequiredFromString;

function requireFromString () {
	if (hasRequiredFromString) return fromString;
	hasRequiredFromString = 1;

	Object.defineProperty(fromString, '__esModule', { value: true });

	var bases = requireBases();

	function fromString$1(string, encoding = 'utf8') {
	  const base = bases[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	fromString.fromString = fromString$1;
	return fromString;
}

var toString = {};

var hasRequiredToString;

function requireToString () {
	if (hasRequiredToString) return toString;
	hasRequiredToString = 1;

	Object.defineProperty(toString, '__esModule', { value: true });

	var bases = requireBases();

	function toString$1(array, encoding = 'utf8') {
	  const base = bases[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}

	toString.toString = toString$1;
	return toString;
}

var xor = {};

var hasRequiredXor;

function requireXor () {
	if (hasRequiredXor) return xor;
	hasRequiredXor = 1;

	Object.defineProperty(xor, '__esModule', { value: true });

	function xor$1(a, b) {
	  if (a.length !== b.length) {
	    throw new Error('Inputs should have the same length');
	  }
	  const result = new Uint8Array(a.length);
	  for (let i = 0; i < a.length; i++) {
	    result[i] = a[i] ^ b[i];
	  }
	  return result;
	}

	xor.xor = xor$1;
	return xor;
}

var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src$1;
	hasRequiredSrc = 1;

	Object.defineProperty(src$1, '__esModule', { value: true });

	var compare = requireCompare();
	var concat = requireConcat();
	var equals = requireEquals();
	var fromString = requireFromString();
	var toString = requireToString();
	var xor = requireXor();



	src$1.compare = compare.compare;
	src$1.concat = concat.concat;
	src$1.equals = equals.equals;
	src$1.fromString = fromString.fromString;
	src$1.toString = toString.toString;
	src$1.xor = xor.xor;
	return src$1;
}

var hasRequiredIpld;

function requireIpld () {
	if (hasRequiredIpld) return ipld;
	hasRequiredIpld = 1;
	(function (exports) {
		var __createBinding = (ipld && ipld.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (ipld && ipld.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (ipld && ipld.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
		const cid_1 = requireCid();
		const ui8 = __importStar(requireSrc());
		// @NOTE avoiding use of check.is() here only because it makes
		// these implementations slow, and they often live in hot paths.
		const jsonToIpld = (val) => {
		    // walk arrays
		    if (Array.isArray(val)) {
		        return val.map((item) => (0, exports.jsonToIpld)(item));
		    }
		    // objects
		    if (val && typeof val === 'object') {
		        // check for dag json values
		        if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) {
		            return cid_1.CID.parse(val['$link']);
		        }
		        if (typeof val['$bytes'] === 'string' && Object.keys(val).length === 1) {
		            return ui8.fromString(val['$bytes'], 'base64');
		        }
		        // walk plain objects
		        const toReturn = {};
		        for (const key of Object.keys(val)) {
		            toReturn[key] = (0, exports.jsonToIpld)(val[key]);
		        }
		        return toReturn;
		    }
		    // pass through
		    return val;
		};
		exports.jsonToIpld = jsonToIpld;
		const ipldToJson = (val) => {
		    // walk arrays
		    if (Array.isArray(val)) {
		        return val.map((item) => (0, exports.ipldToJson)(item));
		    }
		    // objects
		    if (val && typeof val === 'object') {
		        // convert bytes
		        if (val instanceof Uint8Array) {
		            return {
		                $bytes: ui8.toString(val, 'base64'),
		            };
		        }
		        // convert cids
		        if (cid_1.CID.asCID(val)) {
		            return {
		                $link: val.toString(),
		            };
		        }
		        // walk plain objects
		        const toReturn = {};
		        for (const key of Object.keys(val)) {
		            toReturn[key] = (0, exports.ipldToJson)(val[key]);
		        }
		        return toReturn;
		    }
		    // pass through
		    return val;
		};
		exports.ipldToJson = ipldToJson;
		const ipldEquals = (a, b) => {
		    // walk arrays
		    if (Array.isArray(a) && Array.isArray(b)) {
		        if (a.length !== b.length)
		            return false;
		        for (let i = 0; i < a.length; i++) {
		            if (!(0, exports.ipldEquals)(a[i], b[i]))
		                return false;
		        }
		        return true;
		    }
		    // objects
		    if (a && b && typeof a === 'object' && typeof b === 'object') {
		        // check bytes
		        if (a instanceof Uint8Array && b instanceof Uint8Array) {
		            return ui8.equals(a, b);
		        }
		        // check cids
		        if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) {
		            return cid_1.CID.asCID(a)?.equals(cid_1.CID.asCID(b));
		        }
		        // walk plain objects
		        if (Object.keys(a).length !== Object.keys(b).length)
		            return false;
		        for (const key of Object.keys(a)) {
		            if (!(0, exports.ipldEquals)(a[key], b[key]))
		                return false;
		        }
		        return true;
		    }
		    return a === b;
		};
		exports.ipldEquals = ipldEquals;
		
	} (ipld));
	return ipld;
}

var retry = {};

var hasRequiredRetry;

function requireRetry () {
	if (hasRequiredRetry) return retry;
	hasRequiredRetry = 1;
	Object.defineProperty(retry, "__esModule", { value: true });
	retry.retry = retry$1;
	retry.createRetryable = createRetryable;
	retry.backoffMs = backoffMs;
	const util_1 = requireUtil$5();
	async function retry$1(fn, opts = {}) {
	    const { maxRetries = 3, retryable = () => true, getWaitMs = backoffMs } = opts;
	    let retries = 0;
	    let doneError;
	    while (!doneError) {
	        try {
	            return await fn();
	        }
	        catch (err) {
	            const waitMs = getWaitMs(retries);
	            const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
	            if (willRetry) {
	                retries += 1;
	                if (waitMs !== 0) {
	                    await (0, util_1.wait)(waitMs);
	                }
	            }
	            else {
	                doneError = err;
	            }
	        }
	    }
	    throw doneError;
	}
	function createRetryable(retryable) {
	    return async (fn, opts) => retry$1(fn, { ...opts, retryable });
	}
	// Waits exponential backoff with max and jitter: ~100, ~200, ~400, ~800, ~1000, ~1000, ...
	function backoffMs(n, multiplier = 100, max = 1000) {
	    const exponentialMs = Math.pow(2, n) * multiplier;
	    const ms = Math.min(exponentialMs, max);
	    return jitter(ms);
	}
	// Adds randomness +/-15% of value
	function jitter(value) {
	    const delta = value * 0.15;
	    return value + randomRange(-delta, delta);
	}
	function randomRange(from, to) {
	    const rand = Math.random() * (to - from);
	    return rand + from;
	}
	
	return retry;
}

var types$3 = {};

var hasRequiredTypes$3;

function requireTypes$3 () {
	if (hasRequiredTypes$3) return types$3;
	hasRequiredTypes$3 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.def = exports.schema = void 0;
		const cid_1 = requireCid();
		const zod_1 = /*@__PURE__*/ requireLib$1();
		const cidSchema = zod_1.z
		    .any()
		    .refine((obj) => cid_1.CID.asCID(obj) !== null, {
		    message: 'Not a CID',
		})
		    .transform((obj) => cid_1.CID.asCID(obj));
		const carHeader = zod_1.z.object({
		    version: zod_1.z.literal(1),
		    roots: zod_1.z.array(cidSchema),
		});
		exports.schema = {
		    cid: cidSchema,
		    carHeader,
		    bytes: zod_1.z.instanceof(Uint8Array),
		    string: zod_1.z.string(),
		    array: zod_1.z.array(zod_1.z.unknown()),
		    map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
		    unknown: zod_1.z.unknown(),
		};
		exports.def = {
		    cid: {
		        name: 'cid',
		        schema: exports.schema.cid,
		    },
		    carHeader: {
		        name: 'CAR header',
		        schema: exports.schema.carHeader,
		    },
		    bytes: {
		        name: 'bytes',
		        schema: exports.schema.bytes,
		    },
		    string: {
		        name: 'string',
		        schema: exports.schema.string,
		    },
		    map: {
		        name: 'map',
		        schema: exports.schema.map,
		    },
		    unknown: {
		        name: 'unknown',
		        schema: exports.schema.unknown,
		    },
		};
		
	} (types$3));
	return types$3;
}

var times = {};

var hasRequiredTimes;

function requireTimes () {
	if (hasRequiredTimes) return times;
	hasRequiredTimes = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
		exports.SECOND = 1000;
		exports.MINUTE = exports.SECOND * 60;
		exports.HOUR = exports.MINUTE * 60;
		exports.DAY = exports.HOUR * 24;
		const lessThanAgoMs = (time, range) => {
		    return Date.now() < time.getTime() + range;
		};
		exports.lessThanAgoMs = lessThanAgoMs;
		const addHoursToDate = (hours, startingDate) => {
		    // When date is passed, clone before calling `setHours()` so that we are not mutating the original date
		    const currentDate = startingDate ? new Date(startingDate) : new Date();
		    currentDate.setHours(currentDate.getHours() + hours);
		    return currentDate;
		};
		exports.addHoursToDate = addHoursToDate;
		
	} (times));
	return times;
}

var strings = {};

var lib = {};

var Graphemer = {};

var boundaries = {};

var hasRequiredBoundaries;

function requireBoundaries () {
	if (hasRequiredBoundaries) return boundaries;
	hasRequiredBoundaries = 1;
	(function (exports) {
		/**
		 * The Grapheme_Cluster_Break property value
		 * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
		(function (CLUSTER_BREAK) {
		    CLUSTER_BREAK[CLUSTER_BREAK["CR"] = 0] = "CR";
		    CLUSTER_BREAK[CLUSTER_BREAK["LF"] = 1] = "LF";
		    CLUSTER_BREAK[CLUSTER_BREAK["CONTROL"] = 2] = "CONTROL";
		    CLUSTER_BREAK[CLUSTER_BREAK["EXTEND"] = 3] = "EXTEND";
		    CLUSTER_BREAK[CLUSTER_BREAK["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
		    CLUSTER_BREAK[CLUSTER_BREAK["SPACINGMARK"] = 5] = "SPACINGMARK";
		    CLUSTER_BREAK[CLUSTER_BREAK["L"] = 6] = "L";
		    CLUSTER_BREAK[CLUSTER_BREAK["V"] = 7] = "V";
		    CLUSTER_BREAK[CLUSTER_BREAK["T"] = 8] = "T";
		    CLUSTER_BREAK[CLUSTER_BREAK["LV"] = 9] = "LV";
		    CLUSTER_BREAK[CLUSTER_BREAK["LVT"] = 10] = "LVT";
		    CLUSTER_BREAK[CLUSTER_BREAK["OTHER"] = 11] = "OTHER";
		    CLUSTER_BREAK[CLUSTER_BREAK["PREPEND"] = 12] = "PREPEND";
		    CLUSTER_BREAK[CLUSTER_BREAK["E_BASE"] = 13] = "E_BASE";
		    CLUSTER_BREAK[CLUSTER_BREAK["E_MODIFIER"] = 14] = "E_MODIFIER";
		    CLUSTER_BREAK[CLUSTER_BREAK["ZWJ"] = 15] = "ZWJ";
		    CLUSTER_BREAK[CLUSTER_BREAK["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
		    CLUSTER_BREAK[CLUSTER_BREAK["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
		})(exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
		/**
		 * The Emoji character property is an extension of UCD but shares the same namespace and structure
		 * @see http://www.unicode.org/reports/tr51/tr51-14.html#Emoji_Properties_and_Data_Files
		 *
		 * Here we model Extended_Pictograhpic only to implement UAX #29 GB11
		 * \p{Extended_Pictographic} Extend* ZWJ	×	\p{Extended_Pictographic}
		 *
		 * The Emoji character property should not be mixed with Grapheme_Cluster_Break since they are not exclusive
		 */
		exports.EXTENDED_PICTOGRAPHIC = 101; 
	} (boundaries));
	return boundaries;
}

var GraphemerHelper = {};

var hasRequiredGraphemerHelper;

function requireGraphemerHelper () {
	if (hasRequiredGraphemerHelper) return GraphemerHelper;
	hasRequiredGraphemerHelper = 1;
	Object.defineProperty(GraphemerHelper, "__esModule", { value: true });
	const boundaries_1 = requireBoundaries();
	// BreakTypes
	// @type {BreakType}
	const NotBreak = 0;
	const BreakStart = 1;
	const Break = 2;
	const BreakLastRegional = 3;
	const BreakPenultimateRegional = 4;
	let GraphemerHelper$1 = class GraphemerHelper {
	    /**
	     * Check if the the character at the position {pos} of the string is surrogate
	     * @param str {string}
	     * @param pos {number}
	     * @returns {boolean}
	     */
	    static isSurrogate(str, pos) {
	        return (0xd800 <= str.charCodeAt(pos) &&
	            str.charCodeAt(pos) <= 0xdbff &&
	            0xdc00 <= str.charCodeAt(pos + 1) &&
	            str.charCodeAt(pos + 1) <= 0xdfff);
	    }
	    /**
	     * The String.prototype.codePointAt polyfill
	     * Private function, gets a Unicode code point from a JavaScript UTF-16 string
	     * handling surrogate pairs appropriately
	     * @param str {string}
	     * @param idx {number}
	     * @returns {number}
	     */
	    static codePointAt(str, idx) {
	        if (idx === undefined) {
	            idx = 0;
	        }
	        const code = str.charCodeAt(idx);
	        // if a high surrogate
	        if (0xd800 <= code && code <= 0xdbff && idx < str.length - 1) {
	            const hi = code;
	            const low = str.charCodeAt(idx + 1);
	            if (0xdc00 <= low && low <= 0xdfff) {
	                return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
	            }
	            return hi;
	        }
	        // if a low surrogate
	        if (0xdc00 <= code && code <= 0xdfff && idx >= 1) {
	            const hi = str.charCodeAt(idx - 1);
	            const low = code;
	            if (0xd800 <= hi && hi <= 0xdbff) {
	                return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
	            }
	            return low;
	        }
	        // just return the char if an unmatched surrogate half or a
	        // single-char codepoint
	        return code;
	    }
	    //
	    /**
	     * Private function, returns whether a break is allowed between the two given grapheme breaking classes
	     * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
	     * @param start {number}
	     * @param mid {Array<number>}
	     * @param end {number}
	     * @param startEmoji {number}
	     * @param midEmoji {Array<number>}
	     * @param endEmoji {number}
	     * @returns {number}
	     */
	    static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
	        const all = [start].concat(mid).concat([end]);
	        const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
	        const previous = all[all.length - 2];
	        const next = end;
	        const nextEmoji = endEmoji;
	        // Lookahead terminator for:
	        // GB12. ^ (RI RI)* RI ? RI
	        // GB13. [^RI] (RI RI)* RI ? RI
	        const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
	        if (rIIndex > 0 &&
	            all.slice(1, rIIndex).every(function (c) {
	                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
	            }) &&
	            [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
	            if (all.filter(function (c) {
	                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
	            }).length %
	                2 ===
	                1) {
	                return BreakLastRegional;
	            }
	            else {
	                return BreakPenultimateRegional;
	            }
	        }
	        // GB3. CR × LF
	        if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {
	            return NotBreak;
	        }
	        // GB4. (Control|CR|LF) ÷
	        else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL ||
	            previous === boundaries_1.CLUSTER_BREAK.CR ||
	            previous === boundaries_1.CLUSTER_BREAK.LF) {
	            return BreakStart;
	        }
	        // GB5. ÷ (Control|CR|LF)
	        else if (next === boundaries_1.CLUSTER_BREAK.CONTROL ||
	            next === boundaries_1.CLUSTER_BREAK.CR ||
	            next === boundaries_1.CLUSTER_BREAK.LF) {
	            return BreakStart;
	        }
	        // GB6. L × (L|V|LV|LVT)
	        else if (previous === boundaries_1.CLUSTER_BREAK.L &&
	            (next === boundaries_1.CLUSTER_BREAK.L ||
	                next === boundaries_1.CLUSTER_BREAK.V ||
	                next === boundaries_1.CLUSTER_BREAK.LV ||
	                next === boundaries_1.CLUSTER_BREAK.LVT)) {
	            return NotBreak;
	        }
	        // GB7. (LV|V) × (V|T)
	        else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) &&
	            (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {
	            return NotBreak;
	        }
	        // GB8. (LVT|T) × (T)
	        else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) &&
	            next === boundaries_1.CLUSTER_BREAK.T) {
	            return NotBreak;
	        }
	        // GB9. × (Extend|ZWJ)
	        else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {
	            return NotBreak;
	        }
	        // GB9a. × SpacingMark
	        else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
	            return NotBreak;
	        }
	        // GB9b. Prepend ×
	        else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
	            return NotBreak;
	        }
	        // GB11. \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
	        const previousNonExtendIndex = allEmoji
	            .slice(0, -1)
	            .lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
	        if (previousNonExtendIndex !== -1 &&
	            allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC &&
	            all.slice(previousNonExtendIndex + 1, -2).every(function (c) {
	                return c === boundaries_1.CLUSTER_BREAK.EXTEND;
	            }) &&
	            previous === boundaries_1.CLUSTER_BREAK.ZWJ &&
	            nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
	            return NotBreak;
	        }
	        // GB12. ^ (RI RI)* RI × RI
	        // GB13. [^RI] (RI RI)* RI × RI
	        if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
	            return Break;
	        }
	        if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR &&
	            next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
	            return NotBreak;
	        }
	        // GB999. Any ? Any
	        return BreakStart;
	    }
	};
	GraphemerHelper.default = GraphemerHelper$1;
	return GraphemerHelper;
}

var GraphemerIterator = {};

var hasRequiredGraphemerIterator;

function requireGraphemerIterator () {
	if (hasRequiredGraphemerIterator) return GraphemerIterator;
	hasRequiredGraphemerIterator = 1;
	Object.defineProperty(GraphemerIterator, "__esModule", { value: true });
	/**
	 * GraphemerIterator
	 *
	 * Takes a string and a "BreakHandler" method during initialisation
	 * and creates an iterable object that returns individual graphemes.
	 *
	 * @param str {string}
	 * @return GraphemerIterator
	 */
	let GraphemerIterator$1 = class GraphemerIterator {
	    constructor(str, nextBreak) {
	        this._index = 0;
	        this._str = str;
	        this._nextBreak = nextBreak;
	    }
	    [Symbol.iterator]() {
	        return this;
	    }
	    next() {
	        let brk;
	        if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
	            const value = this._str.slice(this._index, brk);
	            this._index = brk;
	            return { value: value, done: false };
	        }
	        if (this._index < this._str.length) {
	            const value = this._str.slice(this._index);
	            this._index = this._str.length;
	            return { value: value, done: false };
	        }
	        return { value: undefined, done: true };
	    }
	};
	GraphemerIterator.default = GraphemerIterator$1;
	return GraphemerIterator;
}

var hasRequiredGraphemer;

function requireGraphemer () {
	if (hasRequiredGraphemer) return Graphemer;
	hasRequiredGraphemer = 1;
	var __importDefault = (Graphemer && Graphemer.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(Graphemer, "__esModule", { value: true });
	const boundaries_1 = requireBoundaries();
	const GraphemerHelper_1 = __importDefault(requireGraphemerHelper());
	const GraphemerIterator_1 = __importDefault(requireGraphemerIterator());
	let Graphemer$1 = class Graphemer {
	    /**
	     * Returns the next grapheme break in the string after the given index
	     * @param string {string}
	     * @param index {number}
	     * @returns {number}
	     */
	    static nextBreak(string, index) {
	        if (index === undefined) {
	            index = 0;
	        }
	        if (index < 0) {
	            return 0;
	        }
	        if (index >= string.length - 1) {
	            return string.length;
	        }
	        const prevCP = GraphemerHelper_1.default.codePointAt(string, index);
	        const prev = Graphemer.getGraphemeBreakProperty(prevCP);
	        const prevEmoji = Graphemer.getEmojiProperty(prevCP);
	        const mid = [];
	        const midEmoji = [];
	        for (let i = index + 1; i < string.length; i++) {
	            // check for already processed low surrogates
	            if (GraphemerHelper_1.default.isSurrogate(string, i - 1)) {
	                continue;
	            }
	            const nextCP = GraphemerHelper_1.default.codePointAt(string, i);
	            const next = Graphemer.getGraphemeBreakProperty(nextCP);
	            const nextEmoji = Graphemer.getEmojiProperty(nextCP);
	            if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {
	                return i;
	            }
	            mid.push(next);
	            midEmoji.push(nextEmoji);
	        }
	        return string.length;
	    }
	    /**
	     * Breaks the given string into an array of grapheme clusters
	     * @param str {string}
	     * @returns {string[]}
	     */
	    splitGraphemes(str) {
	        const res = [];
	        let index = 0;
	        let brk;
	        while ((brk = Graphemer.nextBreak(str, index)) < str.length) {
	            res.push(str.slice(index, brk));
	            index = brk;
	        }
	        if (index < str.length) {
	            res.push(str.slice(index));
	        }
	        return res;
	    }
	    /**
	     * Returns an iterator of grapheme clusters in the given string
	     * @param str {string}
	     * @returns {GraphemerIterator}
	     */
	    iterateGraphemes(str) {
	        return new GraphemerIterator_1.default(str, Graphemer.nextBreak);
	    }
	    /**
	     * Returns the number of grapheme clusters in the given string
	     * @param str {string}
	     * @returns {number}
	     */
	    countGraphemes(str) {
	        let count = 0;
	        let index = 0;
	        let brk;
	        while ((brk = Graphemer.nextBreak(str, index)) < str.length) {
	            index = brk;
	            count++;
	        }
	        if (index < str.length) {
	            count++;
	        }
	        return count;
	    }
	    /**
	     * Given a Unicode code point, determines this symbol's grapheme break property
	     * @param code {number} Unicode code point
	     * @returns {number}
	     */
	    static getGraphemeBreakProperty(code) {
	        // Grapheme break property taken from:
	        // https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
	        // and generated by
	        // node ./scripts/generate-grapheme-break.js
	        if (code < 0xbf09) {
	            if (code < 0xac54) {
	                if (code < 0x102d) {
	                    if (code < 0xb02) {
	                        if (code < 0x93b) {
	                            if (code < 0x6df) {
	                                if (code < 0x5bf) {
	                                    if (code < 0x7f) {
	                                        if (code < 0xb) {
	                                            if (code < 0xa) {
	                                                // Cc  [10] <control-0000>..<control-0009>
	                                                if (0x0 <= code && code <= 0x9) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                // Cc       <control-000A>
	                                                if (0xa === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LF;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd) {
	                                                // Cc   [2] <control-000B>..<control-000C>
	                                                if (0xb <= code && code <= 0xc) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xe) {
	                                                    // Cc       <control-000D>
	                                                    if (0xd === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.CR;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cc  [18] <control-000E>..<control-001F>
	                                                    if (0xe <= code && code <= 0x1f) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x300) {
	                                            if (code < 0xad) {
	                                                // Cc  [33] <control-007F>..<control-009F>
	                                                if (0x7f <= code && code <= 0x9f) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                // Cf       SOFT HYPHEN
	                                                if (0xad === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x483) {
	                                                // Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
	                                                if (0x300 <= code && code <= 0x36f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x591) {
	                                                    // Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
	                                                    // Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
	                                                    if (0x483 <= code && code <= 0x489) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
	                                                    if (0x591 <= code && code <= 0x5bd) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x610) {
	                                        if (code < 0x5c4) {
	                                            if (code < 0x5c1) {
	                                                // Mn       HEBREW POINT RAFE
	                                                if (0x5bf === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
	                                                if (0x5c1 <= code && code <= 0x5c2) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x5c7) {
	                                                // Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
	                                                if (0x5c4 <= code && code <= 0x5c5) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x600) {
	                                                    // Mn       HEBREW POINT QAMATS QATAN
	                                                    if (0x5c7 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
	                                                    if (0x600 <= code && code <= 0x605) {
	                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x670) {
	                                            if (code < 0x61c) {
	                                                // Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
	                                                if (0x610 <= code && code <= 0x61a) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x64b) {
	                                                    // Cf       ARABIC LETTER MARK
	                                                    if (0x61c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
	                                                    if (0x64b <= code && code <= 0x65f) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x6d6) {
	                                                // Mn       ARABIC LETTER SUPERSCRIPT ALEF
	                                                if (0x670 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x6dd) {
	                                                    // Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
	                                                    if (0x6d6 <= code && code <= 0x6dc) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cf       ARABIC END OF AYAH
	                                                    if (0x6dd === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x81b) {
	                                    if (code < 0x730) {
	                                        if (code < 0x6ea) {
	                                            if (code < 0x6e7) {
	                                                // Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
	                                                if (0x6df <= code && code <= 0x6e4) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
	                                                if (0x6e7 <= code && code <= 0x6e8) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x70f) {
	                                                // Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
	                                                if (0x6ea <= code && code <= 0x6ed) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Cf       SYRIAC ABBREVIATION MARK
	                                                if (0x70f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                                // Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
	                                                if (0x711 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x7eb) {
	                                            if (code < 0x7a6) {
	                                                // Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
	                                                if (0x730 <= code && code <= 0x74a) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn  [11] THAANA ABAFILI..THAANA SUKUN
	                                                if (0x7a6 <= code && code <= 0x7b0) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x7fd) {
	                                                // Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
	                                                if (0x7eb <= code && code <= 0x7f3) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x816) {
	                                                    // Mn       NKO DANTAYALAN
	                                                    if (0x7fd === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
	                                                    if (0x816 <= code && code <= 0x819) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x898) {
	                                        if (code < 0x829) {
	                                            if (code < 0x825) {
	                                                // Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
	                                                if (0x81b <= code && code <= 0x823) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
	                                                if (0x825 <= code && code <= 0x827) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x859) {
	                                                // Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
	                                                if (0x829 <= code && code <= 0x82d) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x890) {
	                                                    // Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
	                                                    if (0x859 <= code && code <= 0x85b) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE
	                                                    if (0x890 <= code && code <= 0x891) {
	                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x8e3) {
	                                            if (code < 0x8ca) {
	                                                // Mn   [8] ARABIC SMALL HIGH WORD AL-JUZ..ARABIC HALF MADDA OVER MADDA
	                                                if (0x898 <= code && code <= 0x89f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x8e2) {
	                                                    // Mn  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA
	                                                    if (0x8ca <= code && code <= 0x8e1) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cf       ARABIC DISPUTED END OF AYAH
	                                                    if (0x8e2 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x903) {
	                                                // Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
	                                                if (0x8e3 <= code && code <= 0x902) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       DEVANAGARI SIGN VISARGA
	                                                if (0x903 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       DEVANAGARI VOWEL SIGN OE
	                                                if (0x93a === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xa01) {
	                                if (code < 0x982) {
	                                    if (code < 0x94d) {
	                                        if (code < 0x93e) {
	                                            // Mc       DEVANAGARI VOWEL SIGN OOE
	                                            if (0x93b === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       DEVANAGARI SIGN NUKTA
	                                            if (0x93c === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x941) {
	                                                // Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
	                                                if (0x93e <= code && code <= 0x940) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x949) {
	                                                    // Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
	                                                    if (0x941 <= code && code <= 0x948) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
	                                                    if (0x949 <= code && code <= 0x94c) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x951) {
	                                            if (code < 0x94e) {
	                                                // Mn       DEVANAGARI SIGN VIRAMA
	                                                if (0x94d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
	                                                if (0x94e <= code && code <= 0x94f) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x962) {
	                                                // Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
	                                                if (0x951 <= code && code <= 0x957) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x981) {
	                                                    // Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
	                                                    if (0x962 <= code && code <= 0x963) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       BENGALI SIGN CANDRABINDU
	                                                    if (0x981 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x9c7) {
	                                        if (code < 0x9be) {
	                                            if (code < 0x9bc) {
	                                                // Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
	                                                if (0x982 <= code && code <= 0x983) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       BENGALI SIGN NUKTA
	                                                if (0x9bc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x9bf) {
	                                                // Mc       BENGALI VOWEL SIGN AA
	                                                if (0x9be === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x9c1) {
	                                                    // Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
	                                                    if (0x9bf <= code && code <= 0x9c0) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
	                                                    if (0x9c1 <= code && code <= 0x9c4) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x9d7) {
	                                            if (code < 0x9cb) {
	                                                // Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
	                                                if (0x9c7 <= code && code <= 0x9c8) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x9cd) {
	                                                    // Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
	                                                    if (0x9cb <= code && code <= 0x9cc) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       BENGALI SIGN VIRAMA
	                                                    if (0x9cd === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x9e2) {
	                                                // Mc       BENGALI AU LENGTH MARK
	                                                if (0x9d7 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x9fe) {
	                                                    // Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
	                                                    if (0x9e2 <= code && code <= 0x9e3) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       BENGALI SANDHI MARK
	                                                    if (0x9fe === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xa83) {
	                                    if (code < 0xa47) {
	                                        if (code < 0xa3c) {
	                                            if (code < 0xa03) {
	                                                // Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
	                                                if (0xa01 <= code && code <= 0xa02) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       GURMUKHI SIGN VISARGA
	                                                if (0xa03 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa3e) {
	                                                // Mn       GURMUKHI SIGN NUKTA
	                                                if (0xa3c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa41) {
	                                                    // Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
	                                                    if (0xa3e <= code && code <= 0xa40) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
	                                                    if (0xa41 <= code && code <= 0xa42) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xa70) {
	                                            if (code < 0xa4b) {
	                                                // Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
	                                                if (0xa47 <= code && code <= 0xa48) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa51) {
	                                                    // Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
	                                                    if (0xa4b <= code && code <= 0xa4d) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       GURMUKHI SIGN UDAAT
	                                                    if (0xa51 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa75) {
	                                                // Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
	                                                if (0xa70 <= code && code <= 0xa71) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa81) {
	                                                    // Mn       GURMUKHI SIGN YAKASH
	                                                    if (0xa75 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
	                                                    if (0xa81 <= code && code <= 0xa82) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xac9) {
	                                        if (code < 0xabe) {
	                                            // Mc       GUJARATI SIGN VISARGA
	                                            if (0xa83 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       GUJARATI SIGN NUKTA
	                                            if (0xabc === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xac1) {
	                                                // Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
	                                                if (0xabe <= code && code <= 0xac0) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xac7) {
	                                                    // Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
	                                                    if (0xac1 <= code && code <= 0xac5) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
	                                                    if (0xac7 <= code && code <= 0xac8) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xae2) {
	                                            if (code < 0xacb) {
	                                                // Mc       GUJARATI VOWEL SIGN CANDRA O
	                                                if (0xac9 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xacd) {
	                                                    // Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
	                                                    if (0xacb <= code && code <= 0xacc) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       GUJARATI SIGN VIRAMA
	                                                    if (0xacd === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xafa) {
	                                                // Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
	                                                if (0xae2 <= code && code <= 0xae3) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb01) {
	                                                    // Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
	                                                    if (0xafa <= code && code <= 0xaff) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       ORIYA SIGN CANDRABINDU
	                                                    if (0xb01 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0xcf3) {
	                            if (code < 0xc04) {
	                                if (code < 0xb82) {
	                                    if (code < 0xb47) {
	                                        if (code < 0xb3e) {
	                                            if (code < 0xb3c) {
	                                                // Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
	                                                if (0xb02 <= code && code <= 0xb03) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       ORIYA SIGN NUKTA
	                                                if (0xb3c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb40) {
	                                                // Mc       ORIYA VOWEL SIGN AA
	                                                // Mn       ORIYA VOWEL SIGN I
	                                                if (0xb3e <= code && code <= 0xb3f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb41) {
	                                                    // Mc       ORIYA VOWEL SIGN II
	                                                    if (0xb40 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
	                                                    if (0xb41 <= code && code <= 0xb44) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb4d) {
	                                            if (code < 0xb4b) {
	                                                // Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
	                                                if (0xb47 <= code && code <= 0xb48) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
	                                                if (0xb4b <= code && code <= 0xb4c) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb55) {
	                                                // Mn       ORIYA SIGN VIRAMA
	                                                if (0xb4d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb62) {
	                                                    // Mn   [2] ORIYA SIGN OVERLINE..ORIYA AI LENGTH MARK
	                                                    // Mc       ORIYA AU LENGTH MARK
	                                                    if (0xb55 <= code && code <= 0xb57) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
	                                                    if (0xb62 <= code && code <= 0xb63) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xbc6) {
	                                        if (code < 0xbbf) {
	                                            // Mn       TAMIL SIGN ANUSVARA
	                                            if (0xb82 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                            // Mc       TAMIL VOWEL SIGN AA
	                                            if (0xbbe === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbc0) {
	                                                // Mc       TAMIL VOWEL SIGN I
	                                                if (0xbbf === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbc1) {
	                                                    // Mn       TAMIL VOWEL SIGN II
	                                                    if (0xbc0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
	                                                    if (0xbc1 <= code && code <= 0xbc2) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbd7) {
	                                            if (code < 0xbca) {
	                                                // Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
	                                                if (0xbc6 <= code && code <= 0xbc8) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbcd) {
	                                                    // Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
	                                                    if (0xbca <= code && code <= 0xbcc) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       TAMIL SIGN VIRAMA
	                                                    if (0xbcd === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc00) {
	                                                // Mc       TAMIL AU LENGTH MARK
	                                                if (0xbd7 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc01) {
	                                                    // Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
	                                                    if (0xc00 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
	                                                    if (0xc01 <= code && code <= 0xc03) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xcbe) {
	                                    if (code < 0xc4a) {
	                                        if (code < 0xc3e) {
	                                            // Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE
	                                            if (0xc04 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                            // Mn       TELUGU SIGN NUKTA
	                                            if (0xc3c === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc41) {
	                                                // Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
	                                                if (0xc3e <= code && code <= 0xc40) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc46) {
	                                                    // Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
	                                                    if (0xc41 <= code && code <= 0xc44) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
	                                                    if (0xc46 <= code && code <= 0xc48) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc81) {
	                                            if (code < 0xc55) {
	                                                // Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
	                                                if (0xc4a <= code && code <= 0xc4d) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc62) {
	                                                    // Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
	                                                    if (0xc55 <= code && code <= 0xc56) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
	                                                    if (0xc62 <= code && code <= 0xc63) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc82) {
	                                                // Mn       KANNADA SIGN CANDRABINDU
	                                                if (0xc81 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcbc) {
	                                                    // Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
	                                                    if (0xc82 <= code && code <= 0xc83) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       KANNADA SIGN NUKTA
	                                                    if (0xcbc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xcc6) {
	                                        if (code < 0xcc0) {
	                                            // Mc       KANNADA VOWEL SIGN AA
	                                            if (0xcbe === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       KANNADA VOWEL SIGN I
	                                            if (0xcbf === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcc2) {
	                                                // Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
	                                                if (0xcc0 <= code && code <= 0xcc1) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcc3) {
	                                                    // Mc       KANNADA VOWEL SIGN UU
	                                                    if (0xcc2 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
	                                                    if (0xcc3 <= code && code <= 0xcc4) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xccc) {
	                                            if (code < 0xcc7) {
	                                                // Mn       KANNADA VOWEL SIGN E
	                                                if (0xcc6 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcca) {
	                                                    // Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
	                                                    if (0xcc7 <= code && code <= 0xcc8) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
	                                                    if (0xcca <= code && code <= 0xccb) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcd5) {
	                                                // Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
	                                                if (0xccc <= code && code <= 0xccd) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xce2) {
	                                                    // Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
	                                                    if (0xcd5 <= code && code <= 0xcd6) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
	                                                    if (0xce2 <= code && code <= 0xce3) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xddf) {
	                                if (code < 0xd4e) {
	                                    if (code < 0xd3f) {
	                                        if (code < 0xd02) {
	                                            if (code < 0xd00) {
	                                                // Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT
	                                                if (0xcf3 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
	                                                if (0xd00 <= code && code <= 0xd01) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd3b) {
	                                                // Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
	                                                if (0xd02 <= code && code <= 0xd03) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd3e) {
	                                                    // Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
	                                                    if (0xd3b <= code && code <= 0xd3c) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       MALAYALAM VOWEL SIGN AA
	                                                    if (0xd3e === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd46) {
	                                            if (code < 0xd41) {
	                                                // Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
	                                                if (0xd3f <= code && code <= 0xd40) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
	                                                if (0xd41 <= code && code <= 0xd44) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd4a) {
	                                                // Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
	                                                if (0xd46 <= code && code <= 0xd48) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd4d) {
	                                                    // Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
	                                                    if (0xd4a <= code && code <= 0xd4c) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       MALAYALAM SIGN VIRAMA
	                                                    if (0xd4d === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xdca) {
	                                        if (code < 0xd62) {
	                                            // Lo       MALAYALAM LETTER DOT REPH
	                                            if (0xd4e === code) {
	                                                return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                            }
	                                            // Mc       MALAYALAM AU LENGTH MARK
	                                            if (0xd57 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd81) {
	                                                // Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
	                                                if (0xd62 <= code && code <= 0xd63) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd82) {
	                                                    // Mn       SINHALA SIGN CANDRABINDU
	                                                    if (0xd81 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
	                                                    if (0xd82 <= code && code <= 0xd83) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xdd2) {
	                                            if (code < 0xdcf) {
	                                                // Mn       SINHALA SIGN AL-LAKUNA
	                                                if (0xdca === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xdd0) {
	                                                    // Mc       SINHALA VOWEL SIGN AELA-PILLA
	                                                    if (0xdcf === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
	                                                    if (0xdd0 <= code && code <= 0xdd1) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xdd6) {
	                                                // Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
	                                                if (0xdd2 <= code && code <= 0xdd4) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xdd8) {
	                                                    // Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
	                                                    if (0xdd6 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
	                                                    if (0xdd8 <= code && code <= 0xdde) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xf35) {
	                                    if (code < 0xe47) {
	                                        if (code < 0xe31) {
	                                            if (code < 0xdf2) {
	                                                // Mc       SINHALA VOWEL SIGN GAYANUKITTA
	                                                if (0xddf === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
	                                                if (0xdf2 <= code && code <= 0xdf3) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xe33) {
	                                                // Mn       THAI CHARACTER MAI HAN-AKAT
	                                                if (0xe31 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xe34) {
	                                                    // Lo       THAI CHARACTER SARA AM
	                                                    if (0xe33 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
	                                                    if (0xe34 <= code && code <= 0xe3a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xeb4) {
	                                            if (code < 0xeb1) {
	                                                // Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
	                                                if (0xe47 <= code && code <= 0xe4e) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       LAO VOWEL SIGN MAI KAN
	                                                if (0xeb1 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Lo       LAO VOWEL SIGN AM
	                                                if (0xeb3 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xec8) {
	                                                // Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO
	                                                if (0xeb4 <= code && code <= 0xebc) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xf18) {
	                                                    // Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN
	                                                    if (0xec8 <= code && code <= 0xece) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
	                                                    if (0xf18 <= code && code <= 0xf19) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xf7f) {
	                                        if (code < 0xf39) {
	                                            // Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
	                                            if (0xf35 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                            // Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
	                                            if (0xf37 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xf3e) {
	                                                // Mn       TIBETAN MARK TSA -PHRU
	                                                if (0xf39 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xf71) {
	                                                    // Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
	                                                    if (0xf3e <= code && code <= 0xf3f) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
	                                                    if (0xf71 <= code && code <= 0xf7e) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xf8d) {
	                                            if (code < 0xf80) {
	                                                // Mc       TIBETAN SIGN RNAM BCAD
	                                                if (0xf7f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xf86) {
	                                                    // Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
	                                                    if (0xf80 <= code && code <= 0xf84) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
	                                                    if (0xf86 <= code && code <= 0xf87) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xf99) {
	                                                // Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
	                                                if (0xf8d <= code && code <= 0xf97) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xfc6) {
	                                                    // Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
	                                                    if (0xf99 <= code && code <= 0xfbc) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       TIBETAN SYMBOL PADMA GDAN
	                                                    if (0xfc6 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0x1c24) {
	                        if (code < 0x1930) {
	                            if (code < 0x1732) {
	                                if (code < 0x1082) {
	                                    if (code < 0x103d) {
	                                        if (code < 0x1032) {
	                                            if (code < 0x1031) {
	                                                // Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
	                                                if (0x102d <= code && code <= 0x1030) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       MYANMAR VOWEL SIGN E
	                                                if (0x1031 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1039) {
	                                                // Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
	                                                if (0x1032 <= code && code <= 0x1037) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x103b) {
	                                                    // Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
	                                                    if (0x1039 <= code && code <= 0x103a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
	                                                    if (0x103b <= code && code <= 0x103c) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1058) {
	                                            if (code < 0x1056) {
	                                                // Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
	                                                if (0x103d <= code && code <= 0x103e) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
	                                                if (0x1056 <= code && code <= 0x1057) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x105e) {
	                                                // Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
	                                                if (0x1058 <= code && code <= 0x1059) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1071) {
	                                                    // Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
	                                                    if (0x105e <= code && code <= 0x1060) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
	                                                    if (0x1071 <= code && code <= 0x1074) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x1100) {
	                                        if (code < 0x1085) {
	                                            // Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
	                                            if (0x1082 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                            // Mc       MYANMAR VOWEL SIGN SHAN E
	                                            if (0x1084 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x108d) {
	                                                // Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
	                                                if (0x1085 <= code && code <= 0x1086) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
	                                                if (0x108d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mn       MYANMAR VOWEL SIGN AITON AI
	                                                if (0x109d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x135d) {
	                                            if (code < 0x1160) {
	                                                // Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
	                                                if (0x1100 <= code && code <= 0x115f) {
	                                                    return boundaries_1.CLUSTER_BREAK.L;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11a8) {
	                                                    // Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
	                                                    if (0x1160 <= code && code <= 0x11a7) {
	                                                        return boundaries_1.CLUSTER_BREAK.V;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
	                                                    if (0x11a8 <= code && code <= 0x11ff) {
	                                                        return boundaries_1.CLUSTER_BREAK.T;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1712) {
	                                                // Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
	                                                if (0x135d <= code && code <= 0x135f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1715) {
	                                                    // Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
	                                                    if (0x1712 <= code && code <= 0x1714) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       TAGALOG SIGN PAMUDPOD
	                                                    if (0x1715 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x17c9) {
	                                    if (code < 0x17b6) {
	                                        if (code < 0x1752) {
	                                            if (code < 0x1734) {
	                                                // Mn   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U
	                                                if (0x1732 <= code && code <= 0x1733) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       HANUNOO SIGN PAMUDPOD
	                                                if (0x1734 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1772) {
	                                                // Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
	                                                if (0x1752 <= code && code <= 0x1753) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x17b4) {
	                                                    // Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
	                                                    if (0x1772 <= code && code <= 0x1773) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
	                                                    if (0x17b4 <= code && code <= 0x17b5) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x17be) {
	                                            if (code < 0x17b7) {
	                                                // Mc       KHMER VOWEL SIGN AA
	                                                if (0x17b6 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
	                                                if (0x17b7 <= code && code <= 0x17bd) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x17c6) {
	                                                // Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
	                                                if (0x17be <= code && code <= 0x17c5) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x17c7) {
	                                                    // Mn       KHMER SIGN NIKAHIT
	                                                    if (0x17c6 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
	                                                    if (0x17c7 <= code && code <= 0x17c8) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x1885) {
	                                        if (code < 0x180b) {
	                                            if (code < 0x17dd) {
	                                                // Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
	                                                if (0x17c9 <= code && code <= 0x17d3) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       KHMER SIGN ATTHACAN
	                                                if (0x17dd === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x180e) {
	                                                // Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
	                                                if (0x180b <= code && code <= 0x180d) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Cf       MONGOLIAN VOWEL SEPARATOR
	                                                if (0x180e === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                                // Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR
	                                                if (0x180f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1923) {
	                                            if (code < 0x18a9) {
	                                                // Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
	                                                if (0x1885 <= code && code <= 0x1886) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1920) {
	                                                    // Mn       MONGOLIAN LETTER ALI GALI DAGALGA
	                                                    if (0x18a9 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
	                                                    if (0x1920 <= code && code <= 0x1922) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1927) {
	                                                // Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
	                                                if (0x1923 <= code && code <= 0x1926) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1929) {
	                                                    // Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
	                                                    if (0x1927 <= code && code <= 0x1928) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
	                                                    if (0x1929 <= code && code <= 0x192b) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1b3b) {
	                                if (code < 0x1a58) {
	                                    if (code < 0x1a19) {
	                                        if (code < 0x1933) {
	                                            if (code < 0x1932) {
	                                                // Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
	                                                if (0x1930 <= code && code <= 0x1931) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       LIMBU SMALL LETTER ANUSVARA
	                                                if (0x1932 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1939) {
	                                                // Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
	                                                if (0x1933 <= code && code <= 0x1938) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1a17) {
	                                                    // Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
	                                                    if (0x1939 <= code && code <= 0x193b) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
	                                                    if (0x1a17 <= code && code <= 0x1a18) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1a55) {
	                                            if (code < 0x1a1b) {
	                                                // Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
	                                                if (0x1a19 <= code && code <= 0x1a1a) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       BUGINESE VOWEL SIGN AE
	                                                if (0x1a1b === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1a56) {
	                                                // Mc       TAI THAM CONSONANT SIGN MEDIAL RA
	                                                if (0x1a55 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       TAI THAM CONSONANT SIGN MEDIAL LA
	                                                if (0x1a56 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mc       TAI THAM CONSONANT SIGN LA TANG LAI
	                                                if (0x1a57 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x1a73) {
	                                        if (code < 0x1a62) {
	                                            if (code < 0x1a60) {
	                                                // Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
	                                                if (0x1a58 <= code && code <= 0x1a5e) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       TAI THAM SIGN SAKOT
	                                                if (0x1a60 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1a65) {
	                                                // Mn       TAI THAM VOWEL SIGN MAI SAT
	                                                if (0x1a62 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1a6d) {
	                                                    // Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
	                                                    if (0x1a65 <= code && code <= 0x1a6c) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
	                                                    if (0x1a6d <= code && code <= 0x1a72) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1b00) {
	                                            if (code < 0x1a7f) {
	                                                // Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
	                                                if (0x1a73 <= code && code <= 0x1a7c) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1ab0) {
	                                                    // Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
	                                                    if (0x1a7f === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
	                                                    // Me       COMBINING PARENTHESES OVERLAY
	                                                    // Mn  [16] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER INSULAR T
	                                                    if (0x1ab0 <= code && code <= 0x1ace) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1b04) {
	                                                // Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
	                                                if (0x1b00 <= code && code <= 0x1b03) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1b34) {
	                                                    // Mc       BALINESE SIGN BISAH
	                                                    if (0x1b04 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       BALINESE SIGN REREKAN
	                                                    // Mc       BALINESE VOWEL SIGN TEDUNG
	                                                    // Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
	                                                    if (0x1b34 <= code && code <= 0x1b3a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x1ba8) {
	                                    if (code < 0x1b6b) {
	                                        if (code < 0x1b3d) {
	                                            // Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
	                                            if (0x1b3b === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       BALINESE VOWEL SIGN LA LENGA
	                                            if (0x1b3c === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1b42) {
	                                                // Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
	                                                if (0x1b3d <= code && code <= 0x1b41) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1b43) {
	                                                    // Mn       BALINESE VOWEL SIGN PEPET
	                                                    if (0x1b42 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
	                                                    if (0x1b43 <= code && code <= 0x1b44) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1ba1) {
	                                            if (code < 0x1b80) {
	                                                // Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
	                                                if (0x1b6b <= code && code <= 0x1b73) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1b82) {
	                                                    // Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
	                                                    if (0x1b80 <= code && code <= 0x1b81) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       SUNDANESE SIGN PANGWISAD
	                                                    if (0x1b82 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1ba2) {
	                                                // Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
	                                                if (0x1ba1 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1ba6) {
	                                                    // Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
	                                                    if (0x1ba2 <= code && code <= 0x1ba5) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
	                                                    if (0x1ba6 <= code && code <= 0x1ba7) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x1be8) {
	                                        if (code < 0x1bab) {
	                                            if (code < 0x1baa) {
	                                                // Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
	                                                if (0x1ba8 <= code && code <= 0x1ba9) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       SUNDANESE SIGN PAMAAEH
	                                                if (0x1baa === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1be6) {
	                                                // Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
	                                                if (0x1bab <= code && code <= 0x1bad) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       BATAK SIGN TOMPI
	                                                if (0x1be6 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mc       BATAK VOWEL SIGN E
	                                                if (0x1be7 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1bee) {
	                                            if (code < 0x1bea) {
	                                                // Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
	                                                if (0x1be8 <= code && code <= 0x1be9) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1bed) {
	                                                    // Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
	                                                    if (0x1bea <= code && code <= 0x1bec) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       BATAK VOWEL SIGN KARO O
	                                                    if (0x1bed === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1bef) {
	                                                // Mc       BATAK VOWEL SIGN U
	                                                if (0x1bee === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1bf2) {
	                                                    // Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
	                                                    if (0x1bef <= code && code <= 0x1bf1) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
	                                                    if (0x1bf2 <= code && code <= 0x1bf3) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0xa952) {
	                            if (code < 0x2d7f) {
	                                if (code < 0x1cf7) {
	                                    if (code < 0x1cd4) {
	                                        if (code < 0x1c34) {
	                                            if (code < 0x1c2c) {
	                                                // Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
	                                                if (0x1c24 <= code && code <= 0x1c2b) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
	                                                if (0x1c2c <= code && code <= 0x1c33) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1c36) {
	                                                // Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
	                                                if (0x1c34 <= code && code <= 0x1c35) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1cd0) {
	                                                    // Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
	                                                    if (0x1c36 <= code && code <= 0x1c37) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
	                                                    if (0x1cd0 <= code && code <= 0x1cd2) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1ce2) {
	                                            if (code < 0x1ce1) {
	                                                // Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
	                                                if (0x1cd4 <= code && code <= 0x1ce0) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
	                                                if (0x1ce1 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1ced) {
	                                                // Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
	                                                if (0x1ce2 <= code && code <= 0x1ce8) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       VEDIC SIGN TIRYAK
	                                                if (0x1ced === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mn       VEDIC TONE CANDRA ABOVE
	                                                if (0x1cf4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x200d) {
	                                        if (code < 0x1dc0) {
	                                            if (code < 0x1cf8) {
	                                                // Mc       VEDIC SIGN ATIKRAMA
	                                                if (0x1cf7 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
	                                                if (0x1cf8 <= code && code <= 0x1cf9) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x200b) {
	                                                // Mn  [64] COMBINING DOTTED GRAVE ACCENT..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
	                                                if (0x1dc0 <= code && code <= 0x1dff) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Cf       ZERO WIDTH SPACE
	                                                if (0x200b === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                                // Cf       ZERO WIDTH NON-JOINER
	                                                if (0x200c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x2060) {
	                                            if (code < 0x200e) {
	                                                // Cf       ZERO WIDTH JOINER
	                                                if (0x200d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.ZWJ;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x2028) {
	                                                    // Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
	                                                    if (0x200e <= code && code <= 0x200f) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                                else {
	                                                    // Zl       LINE SEPARATOR
	                                                    // Zp       PARAGRAPH SEPARATOR
	                                                    // Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
	                                                    if (0x2028 <= code && code <= 0x202e) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x20d0) {
	                                                // Cf   [5] WORD JOINER..INVISIBLE PLUS
	                                                // Cn       <reserved-2065>
	                                                // Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
	                                                if (0x2060 <= code && code <= 0x206f) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x2cef) {
	                                                    // Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
	                                                    // Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
	                                                    // Mn       COMBINING LEFT RIGHT ARROW ABOVE
	                                                    // Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
	                                                    // Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
	                                                    if (0x20d0 <= code && code <= 0x20f0) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
	                                                    if (0x2cef <= code && code <= 0x2cf1) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xa823) {
	                                    if (code < 0xa674) {
	                                        if (code < 0x302a) {
	                                            if (code < 0x2de0) {
	                                                // Mn       TIFINAGH CONSONANT JOINER
	                                                if (0x2d7f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
	                                                if (0x2de0 <= code && code <= 0x2dff) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x3099) {
	                                                // Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
	                                                // Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
	                                                if (0x302a <= code && code <= 0x302f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa66f) {
	                                                    // Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
	                                                    if (0x3099 <= code && code <= 0x309a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       COMBINING CYRILLIC VZMET
	                                                    // Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
	                                                    if (0xa66f <= code && code <= 0xa672) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xa802) {
	                                            if (code < 0xa69e) {
	                                                // Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
	                                                if (0xa674 <= code && code <= 0xa67d) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa6f0) {
	                                                    // Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
	                                                    if (0xa69e <= code && code <= 0xa69f) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
	                                                    if (0xa6f0 <= code && code <= 0xa6f1) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa806) {
	                                                // Mn       SYLOTI NAGRI SIGN DVISVARA
	                                                if (0xa802 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       SYLOTI NAGRI SIGN HASANTA
	                                                if (0xa806 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mn       SYLOTI NAGRI SIGN ANUSVARA
	                                                if (0xa80b === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xa8b4) {
	                                        if (code < 0xa827) {
	                                            if (code < 0xa825) {
	                                                // Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
	                                                if (0xa823 <= code && code <= 0xa824) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
	                                                if (0xa825 <= code && code <= 0xa826) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa82c) {
	                                                // Mc       SYLOTI NAGRI VOWEL SIGN OO
	                                                if (0xa827 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa880) {
	                                                    // Mn       SYLOTI NAGRI SIGN ALTERNATE HASANTA
	                                                    if (0xa82c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
	                                                    if (0xa880 <= code && code <= 0xa881) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xa8ff) {
	                                            if (code < 0xa8c4) {
	                                                // Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
	                                                if (0xa8b4 <= code && code <= 0xa8c3) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa8e0) {
	                                                    // Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
	                                                    if (0xa8c4 <= code && code <= 0xa8c5) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
	                                                    if (0xa8e0 <= code && code <= 0xa8f1) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa926) {
	                                                // Mn       DEVANAGARI VOWEL SIGN AY
	                                                if (0xa8ff === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa947) {
	                                                    // Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
	                                                    if (0xa926 <= code && code <= 0xa92d) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
	                                                    if (0xa947 <= code && code <= 0xa951) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xaab2) {
	                                if (code < 0xa9e5) {
	                                    if (code < 0xa9b4) {
	                                        if (code < 0xa980) {
	                                            if (code < 0xa960) {
	                                                // Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
	                                                if (0xa952 <= code && code <= 0xa953) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
	                                                if (0xa960 <= code && code <= 0xa97c) {
	                                                    return boundaries_1.CLUSTER_BREAK.L;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa983) {
	                                                // Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
	                                                if (0xa980 <= code && code <= 0xa982) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       JAVANESE SIGN WIGNYAN
	                                                if (0xa983 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       JAVANESE SIGN CECAK TELU
	                                                if (0xa9b3 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xa9ba) {
	                                            if (code < 0xa9b6) {
	                                                // Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
	                                                if (0xa9b4 <= code && code <= 0xa9b5) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
	                                                if (0xa9b6 <= code && code <= 0xa9b9) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xa9bc) {
	                                                // Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
	                                                if (0xa9ba <= code && code <= 0xa9bb) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xa9be) {
	                                                    // Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET
	                                                    if (0xa9bc <= code && code <= 0xa9bd) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON
	                                                    if (0xa9be <= code && code <= 0xa9c0) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xaa35) {
	                                        if (code < 0xaa2f) {
	                                            if (code < 0xaa29) {
	                                                // Mn       MYANMAR SIGN SHAN SAW
	                                                if (0xa9e5 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
	                                                if (0xaa29 <= code && code <= 0xaa2e) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaa31) {
	                                                // Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
	                                                if (0xaa2f <= code && code <= 0xaa30) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaa33) {
	                                                    // Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
	                                                    if (0xaa31 <= code && code <= 0xaa32) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
	                                                    if (0xaa33 <= code && code <= 0xaa34) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xaa4d) {
	                                            if (code < 0xaa43) {
	                                                // Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
	                                                if (0xaa35 <= code && code <= 0xaa36) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       CHAM CONSONANT SIGN FINAL NG
	                                                if (0xaa43 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mn       CHAM CONSONANT SIGN FINAL M
	                                                if (0xaa4c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaa7c) {
	                                                // Mc       CHAM CONSONANT SIGN FINAL H
	                                                if (0xaa4d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       MYANMAR SIGN TAI LAING TONE-2
	                                                if (0xaa7c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mn       TAI VIET MAI KANG
	                                                if (0xaab0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xabe6) {
	                                    if (code < 0xaaec) {
	                                        if (code < 0xaabe) {
	                                            if (code < 0xaab7) {
	                                                // Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
	                                                if (0xaab2 <= code && code <= 0xaab4) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
	                                                if (0xaab7 <= code && code <= 0xaab8) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaac1) {
	                                                // Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
	                                                if (0xaabe <= code && code <= 0xaabf) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       TAI VIET TONE MAI THO
	                                                if (0xaac1 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mc       MEETEI MAYEK VOWEL SIGN II
	                                                if (0xaaeb === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xaaf6) {
	                                            if (code < 0xaaee) {
	                                                // Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
	                                                if (0xaaec <= code && code <= 0xaaed) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaaf5) {
	                                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
	                                                    if (0xaaee <= code && code <= 0xaaef) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       MEETEI MAYEK VOWEL SIGN VISARGA
	                                                    if (0xaaf5 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xabe3) {
	                                                // Mn       MEETEI MAYEK VIRAMA
	                                                if (0xaaf6 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xabe5) {
	                                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
	                                                    if (0xabe3 <= code && code <= 0xabe4) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       MEETEI MAYEK VOWEL SIGN ANAP
	                                                    if (0xabe5 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xac00) {
	                                        if (code < 0xabe9) {
	                                            if (code < 0xabe8) {
	                                                // Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
	                                                if (0xabe6 <= code && code <= 0xabe7) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       MEETEI MAYEK VOWEL SIGN UNAP
	                                                if (0xabe8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xabec) {
	                                                // Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
	                                                if (0xabe9 <= code && code <= 0xabea) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       MEETEI MAYEK LUM IYEK
	                                                if (0xabec === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       MEETEI MAYEK APUN IYEK
	                                                if (0xabed === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xac1d) {
	                                            if (code < 0xac01) {
	                                                // Lo       HANGUL SYLLABLE GA
	                                                if (0xac00 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xac1c) {
	                                                    // Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
	                                                    if (0xac01 <= code && code <= 0xac1b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GAE
	                                                    if (0xac1c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xac38) {
	                                                // Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
	                                                if (0xac1d <= code && code <= 0xac37) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xac39) {
	                                                    // Lo       HANGUL SYLLABLE GYA
	                                                    if (0xac38 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
	                                                    if (0xac39 <= code && code <= 0xac53) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            else {
	                if (code < 0xb5a1) {
	                    if (code < 0xb0ed) {
	                        if (code < 0xaea0) {
	                            if (code < 0xad6d) {
	                                if (code < 0xace0) {
	                                    if (code < 0xac8d) {
	                                        if (code < 0xac70) {
	                                            if (code < 0xac55) {
	                                                // Lo       HANGUL SYLLABLE GYAE
	                                                if (0xac54 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
	                                                if (0xac55 <= code && code <= 0xac6f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xac71) {
	                                                // Lo       HANGUL SYLLABLE GEO
	                                                if (0xac70 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xac8c) {
	                                                    // Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
	                                                    if (0xac71 <= code && code <= 0xac8b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GE
	                                                    if (0xac8c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xaca9) {
	                                            if (code < 0xaca8) {
	                                                // Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
	                                                if (0xac8d <= code && code <= 0xaca7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE GYEO
	                                                if (0xaca8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xacc4) {
	                                                // Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
	                                                if (0xaca9 <= code && code <= 0xacc3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xacc5) {
	                                                    // Lo       HANGUL SYLLABLE GYE
	                                                    if (0xacc4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
	                                                    if (0xacc5 <= code && code <= 0xacdf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xad19) {
	                                        if (code < 0xacfc) {
	                                            if (code < 0xace1) {
	                                                // Lo       HANGUL SYLLABLE GO
	                                                if (0xace0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
	                                                if (0xace1 <= code && code <= 0xacfb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xacfd) {
	                                                // Lo       HANGUL SYLLABLE GWA
	                                                if (0xacfc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xad18) {
	                                                    // Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
	                                                    if (0xacfd <= code && code <= 0xad17) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GWAE
	                                                    if (0xad18 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xad50) {
	                                            if (code < 0xad34) {
	                                                // Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
	                                                if (0xad19 <= code && code <= 0xad33) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xad35) {
	                                                    // Lo       HANGUL SYLLABLE GOE
	                                                    if (0xad34 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
	                                                    if (0xad35 <= code && code <= 0xad4f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xad51) {
	                                                // Lo       HANGUL SYLLABLE GYO
	                                                if (0xad50 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xad6c) {
	                                                    // Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
	                                                    if (0xad51 <= code && code <= 0xad6b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GU
	                                                    if (0xad6c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xadf9) {
	                                    if (code < 0xadc0) {
	                                        if (code < 0xad89) {
	                                            if (code < 0xad88) {
	                                                // Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
	                                                if (0xad6d <= code && code <= 0xad87) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE GWEO
	                                                if (0xad88 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xada4) {
	                                                // Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
	                                                if (0xad89 <= code && code <= 0xada3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xada5) {
	                                                    // Lo       HANGUL SYLLABLE GWE
	                                                    if (0xada4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
	                                                    if (0xada5 <= code && code <= 0xadbf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xaddc) {
	                                            if (code < 0xadc1) {
	                                                // Lo       HANGUL SYLLABLE GWI
	                                                if (0xadc0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
	                                                if (0xadc1 <= code && code <= 0xaddb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaddd) {
	                                                // Lo       HANGUL SYLLABLE GYU
	                                                if (0xaddc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xadf8) {
	                                                    // Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
	                                                    if (0xaddd <= code && code <= 0xadf7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GEU
	                                                    if (0xadf8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xae4c) {
	                                        if (code < 0xae15) {
	                                            if (code < 0xae14) {
	                                                // Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
	                                                if (0xadf9 <= code && code <= 0xae13) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE GYI
	                                                if (0xae14 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xae30) {
	                                                // Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
	                                                if (0xae15 <= code && code <= 0xae2f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xae31) {
	                                                    // Lo       HANGUL SYLLABLE GI
	                                                    if (0xae30 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
	                                                    if (0xae31 <= code && code <= 0xae4b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xae69) {
	                                            if (code < 0xae4d) {
	                                                // Lo       HANGUL SYLLABLE GGA
	                                                if (0xae4c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xae68) {
	                                                    // Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
	                                                    if (0xae4d <= code && code <= 0xae67) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GGAE
	                                                    if (0xae68 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xae84) {
	                                                // Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
	                                                if (0xae69 <= code && code <= 0xae83) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xae85) {
	                                                    // Lo       HANGUL SYLLABLE GGYA
	                                                    if (0xae84 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
	                                                    if (0xae85 <= code && code <= 0xae9f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xafb9) {
	                                if (code < 0xaf2c) {
	                                    if (code < 0xaed9) {
	                                        if (code < 0xaebc) {
	                                            if (code < 0xaea1) {
	                                                // Lo       HANGUL SYLLABLE GGYAE
	                                                if (0xaea0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
	                                                if (0xaea1 <= code && code <= 0xaebb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaebd) {
	                                                // Lo       HANGUL SYLLABLE GGEO
	                                                if (0xaebc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaed8) {
	                                                    // Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
	                                                    if (0xaebd <= code && code <= 0xaed7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GGE
	                                                    if (0xaed8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xaef5) {
	                                            if (code < 0xaef4) {
	                                                // Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
	                                                if (0xaed9 <= code && code <= 0xaef3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE GGYEO
	                                                if (0xaef4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaf10) {
	                                                // Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
	                                                if (0xaef5 <= code && code <= 0xaf0f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaf11) {
	                                                    // Lo       HANGUL SYLLABLE GGYE
	                                                    if (0xaf10 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
	                                                    if (0xaf11 <= code && code <= 0xaf2b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xaf65) {
	                                        if (code < 0xaf48) {
	                                            if (code < 0xaf2d) {
	                                                // Lo       HANGUL SYLLABLE GGO
	                                                if (0xaf2c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
	                                                if (0xaf2d <= code && code <= 0xaf47) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaf49) {
	                                                // Lo       HANGUL SYLLABLE GGWA
	                                                if (0xaf48 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaf64) {
	                                                    // Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
	                                                    if (0xaf49 <= code && code <= 0xaf63) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GGWAE
	                                                    if (0xaf64 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xaf9c) {
	                                            if (code < 0xaf80) {
	                                                // Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
	                                                if (0xaf65 <= code && code <= 0xaf7f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaf81) {
	                                                    // Lo       HANGUL SYLLABLE GGOE
	                                                    if (0xaf80 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
	                                                    if (0xaf81 <= code && code <= 0xaf9b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaf9d) {
	                                                // Lo       HANGUL SYLLABLE GGYO
	                                                if (0xaf9c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xafb8) {
	                                                    // Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
	                                                    if (0xaf9d <= code && code <= 0xafb7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GGU
	                                                    if (0xafb8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xb060) {
	                                    if (code < 0xb00c) {
	                                        if (code < 0xafd5) {
	                                            if (code < 0xafd4) {
	                                                // Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
	                                                if (0xafb9 <= code && code <= 0xafd3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE GGWEO
	                                                if (0xafd4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xaff0) {
	                                                // Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
	                                                if (0xafd5 <= code && code <= 0xafef) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xaff1) {
	                                                    // Lo       HANGUL SYLLABLE GGWE
	                                                    if (0xaff0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
	                                                    if (0xaff1 <= code && code <= 0xb00b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb029) {
	                                            if (code < 0xb00d) {
	                                                // Lo       HANGUL SYLLABLE GGWI
	                                                if (0xb00c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb028) {
	                                                    // Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
	                                                    if (0xb00d <= code && code <= 0xb027) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE GGYU
	                                                    if (0xb028 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb044) {
	                                                // Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
	                                                if (0xb029 <= code && code <= 0xb043) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb045) {
	                                                    // Lo       HANGUL SYLLABLE GGEU
	                                                    if (0xb044 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
	                                                    if (0xb045 <= code && code <= 0xb05f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb099) {
	                                        if (code < 0xb07c) {
	                                            if (code < 0xb061) {
	                                                // Lo       HANGUL SYLLABLE GGYI
	                                                if (0xb060 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
	                                                if (0xb061 <= code && code <= 0xb07b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb07d) {
	                                                // Lo       HANGUL SYLLABLE GGI
	                                                if (0xb07c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb098) {
	                                                    // Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
	                                                    if (0xb07d <= code && code <= 0xb097) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE NA
	                                                    if (0xb098 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb0d0) {
	                                            if (code < 0xb0b4) {
	                                                // Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
	                                                if (0xb099 <= code && code <= 0xb0b3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb0b5) {
	                                                    // Lo       HANGUL SYLLABLE NAE
	                                                    if (0xb0b4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
	                                                    if (0xb0b5 <= code && code <= 0xb0cf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb0d1) {
	                                                // Lo       HANGUL SYLLABLE NYA
	                                                if (0xb0d0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb0ec) {
	                                                    // Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
	                                                    if (0xb0d1 <= code && code <= 0xb0eb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE NYAE
	                                                    if (0xb0ec === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0xb354) {
	                            if (code < 0xb220) {
	                                if (code < 0xb179) {
	                                    if (code < 0xb140) {
	                                        if (code < 0xb109) {
	                                            if (code < 0xb108) {
	                                                // Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
	                                                if (0xb0ed <= code && code <= 0xb107) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE NEO
	                                                if (0xb108 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb124) {
	                                                // Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
	                                                if (0xb109 <= code && code <= 0xb123) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb125) {
	                                                    // Lo       HANGUL SYLLABLE NE
	                                                    if (0xb124 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
	                                                    if (0xb125 <= code && code <= 0xb13f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb15c) {
	                                            if (code < 0xb141) {
	                                                // Lo       HANGUL SYLLABLE NYEO
	                                                if (0xb140 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
	                                                if (0xb141 <= code && code <= 0xb15b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb15d) {
	                                                // Lo       HANGUL SYLLABLE NYE
	                                                if (0xb15c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb178) {
	                                                    // Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
	                                                    if (0xb15d <= code && code <= 0xb177) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE NO
	                                                    if (0xb178 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb1cc) {
	                                        if (code < 0xb195) {
	                                            if (code < 0xb194) {
	                                                // Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
	                                                if (0xb179 <= code && code <= 0xb193) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE NWA
	                                                if (0xb194 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb1b0) {
	                                                // Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
	                                                if (0xb195 <= code && code <= 0xb1af) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb1b1) {
	                                                    // Lo       HANGUL SYLLABLE NWAE
	                                                    if (0xb1b0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
	                                                    if (0xb1b1 <= code && code <= 0xb1cb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb1e9) {
	                                            if (code < 0xb1cd) {
	                                                // Lo       HANGUL SYLLABLE NOE
	                                                if (0xb1cc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb1e8) {
	                                                    // Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
	                                                    if (0xb1cd <= code && code <= 0xb1e7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE NYO
	                                                    if (0xb1e8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb204) {
	                                                // Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
	                                                if (0xb1e9 <= code && code <= 0xb203) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb205) {
	                                                    // Lo       HANGUL SYLLABLE NU
	                                                    if (0xb204 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
	                                                    if (0xb205 <= code && code <= 0xb21f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xb2ad) {
	                                    if (code < 0xb259) {
	                                        if (code < 0xb23c) {
	                                            if (code < 0xb221) {
	                                                // Lo       HANGUL SYLLABLE NWEO
	                                                if (0xb220 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
	                                                if (0xb221 <= code && code <= 0xb23b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb23d) {
	                                                // Lo       HANGUL SYLLABLE NWE
	                                                if (0xb23c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb258) {
	                                                    // Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
	                                                    if (0xb23d <= code && code <= 0xb257) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE NWI
	                                                    if (0xb258 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb290) {
	                                            if (code < 0xb274) {
	                                                // Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
	                                                if (0xb259 <= code && code <= 0xb273) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb275) {
	                                                    // Lo       HANGUL SYLLABLE NYU
	                                                    if (0xb274 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
	                                                    if (0xb275 <= code && code <= 0xb28f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb291) {
	                                                // Lo       HANGUL SYLLABLE NEU
	                                                if (0xb290 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb2ac) {
	                                                    // Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
	                                                    if (0xb291 <= code && code <= 0xb2ab) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE NYI
	                                                    if (0xb2ac === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb300) {
	                                        if (code < 0xb2c9) {
	                                            if (code < 0xb2c8) {
	                                                // Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
	                                                if (0xb2ad <= code && code <= 0xb2c7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE NI
	                                                if (0xb2c8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb2e4) {
	                                                // Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
	                                                if (0xb2c9 <= code && code <= 0xb2e3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb2e5) {
	                                                    // Lo       HANGUL SYLLABLE DA
	                                                    if (0xb2e4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
	                                                    if (0xb2e5 <= code && code <= 0xb2ff) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb31d) {
	                                            if (code < 0xb301) {
	                                                // Lo       HANGUL SYLLABLE DAE
	                                                if (0xb300 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb31c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
	                                                    if (0xb301 <= code && code <= 0xb31b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DYA
	                                                    if (0xb31c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb338) {
	                                                // Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
	                                                if (0xb31d <= code && code <= 0xb337) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb339) {
	                                                    // Lo       HANGUL SYLLABLE DYAE
	                                                    if (0xb338 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
	                                                    if (0xb339 <= code && code <= 0xb353) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xb46d) {
	                                if (code < 0xb3e0) {
	                                    if (code < 0xb38d) {
	                                        if (code < 0xb370) {
	                                            if (code < 0xb355) {
	                                                // Lo       HANGUL SYLLABLE DEO
	                                                if (0xb354 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
	                                                if (0xb355 <= code && code <= 0xb36f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb371) {
	                                                // Lo       HANGUL SYLLABLE DE
	                                                if (0xb370 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb38c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
	                                                    if (0xb371 <= code && code <= 0xb38b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DYEO
	                                                    if (0xb38c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb3a9) {
	                                            if (code < 0xb3a8) {
	                                                // Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
	                                                if (0xb38d <= code && code <= 0xb3a7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE DYE
	                                                if (0xb3a8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb3c4) {
	                                                // Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
	                                                if (0xb3a9 <= code && code <= 0xb3c3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb3c5) {
	                                                    // Lo       HANGUL SYLLABLE DO
	                                                    if (0xb3c4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
	                                                    if (0xb3c5 <= code && code <= 0xb3df) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb419) {
	                                        if (code < 0xb3fc) {
	                                            if (code < 0xb3e1) {
	                                                // Lo       HANGUL SYLLABLE DWA
	                                                if (0xb3e0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
	                                                if (0xb3e1 <= code && code <= 0xb3fb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb3fd) {
	                                                // Lo       HANGUL SYLLABLE DWAE
	                                                if (0xb3fc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb418) {
	                                                    // Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
	                                                    if (0xb3fd <= code && code <= 0xb417) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DOE
	                                                    if (0xb418 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb450) {
	                                            if (code < 0xb434) {
	                                                // Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
	                                                if (0xb419 <= code && code <= 0xb433) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb435) {
	                                                    // Lo       HANGUL SYLLABLE DYO
	                                                    if (0xb434 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
	                                                    if (0xb435 <= code && code <= 0xb44f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb451) {
	                                                // Lo       HANGUL SYLLABLE DU
	                                                if (0xb450 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb46c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
	                                                    if (0xb451 <= code && code <= 0xb46b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DWEO
	                                                    if (0xb46c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xb514) {
	                                    if (code < 0xb4c0) {
	                                        if (code < 0xb489) {
	                                            if (code < 0xb488) {
	                                                // Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
	                                                if (0xb46d <= code && code <= 0xb487) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE DWE
	                                                if (0xb488 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb4a4) {
	                                                // Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
	                                                if (0xb489 <= code && code <= 0xb4a3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb4a5) {
	                                                    // Lo       HANGUL SYLLABLE DWI
	                                                    if (0xb4a4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
	                                                    if (0xb4a5 <= code && code <= 0xb4bf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb4dd) {
	                                            if (code < 0xb4c1) {
	                                                // Lo       HANGUL SYLLABLE DYU
	                                                if (0xb4c0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb4dc) {
	                                                    // Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
	                                                    if (0xb4c1 <= code && code <= 0xb4db) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DEU
	                                                    if (0xb4dc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb4f8) {
	                                                // Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
	                                                if (0xb4dd <= code && code <= 0xb4f7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb4f9) {
	                                                    // Lo       HANGUL SYLLABLE DYI
	                                                    if (0xb4f8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
	                                                    if (0xb4f9 <= code && code <= 0xb513) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb54d) {
	                                        if (code < 0xb530) {
	                                            if (code < 0xb515) {
	                                                // Lo       HANGUL SYLLABLE DI
	                                                if (0xb514 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
	                                                if (0xb515 <= code && code <= 0xb52f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb531) {
	                                                // Lo       HANGUL SYLLABLE DDA
	                                                if (0xb530 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb54c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
	                                                    if (0xb531 <= code && code <= 0xb54b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DDAE
	                                                    if (0xb54c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb584) {
	                                            if (code < 0xb568) {
	                                                // Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
	                                                if (0xb54d <= code && code <= 0xb567) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb569) {
	                                                    // Lo       HANGUL SYLLABLE DDYA
	                                                    if (0xb568 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
	                                                    if (0xb569 <= code && code <= 0xb583) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb585) {
	                                                // Lo       HANGUL SYLLABLE DDYAE
	                                                if (0xb584 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb5a0) {
	                                                    // Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
	                                                    if (0xb585 <= code && code <= 0xb59f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DDEO
	                                                    if (0xb5a0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0xba55) {
	                        if (code < 0xb808) {
	                            if (code < 0xb6d4) {
	                                if (code < 0xb62d) {
	                                    if (code < 0xb5f4) {
	                                        if (code < 0xb5bd) {
	                                            if (code < 0xb5bc) {
	                                                // Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
	                                                if (0xb5a1 <= code && code <= 0xb5bb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE DDE
	                                                if (0xb5bc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb5d8) {
	                                                // Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
	                                                if (0xb5bd <= code && code <= 0xb5d7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb5d9) {
	                                                    // Lo       HANGUL SYLLABLE DDYEO
	                                                    if (0xb5d8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
	                                                    if (0xb5d9 <= code && code <= 0xb5f3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb610) {
	                                            if (code < 0xb5f5) {
	                                                // Lo       HANGUL SYLLABLE DDYE
	                                                if (0xb5f4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
	                                                if (0xb5f5 <= code && code <= 0xb60f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb611) {
	                                                // Lo       HANGUL SYLLABLE DDO
	                                                if (0xb610 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb62c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
	                                                    if (0xb611 <= code && code <= 0xb62b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DDWA
	                                                    if (0xb62c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb680) {
	                                        if (code < 0xb649) {
	                                            if (code < 0xb648) {
	                                                // Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
	                                                if (0xb62d <= code && code <= 0xb647) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE DDWAE
	                                                if (0xb648 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb664) {
	                                                // Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
	                                                if (0xb649 <= code && code <= 0xb663) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb665) {
	                                                    // Lo       HANGUL SYLLABLE DDOE
	                                                    if (0xb664 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
	                                                    if (0xb665 <= code && code <= 0xb67f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb69d) {
	                                            if (code < 0xb681) {
	                                                // Lo       HANGUL SYLLABLE DDYO
	                                                if (0xb680 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb69c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
	                                                    if (0xb681 <= code && code <= 0xb69b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DDU
	                                                    if (0xb69c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb6b8) {
	                                                // Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
	                                                if (0xb69d <= code && code <= 0xb6b7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb6b9) {
	                                                    // Lo       HANGUL SYLLABLE DDWEO
	                                                    if (0xb6b8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
	                                                    if (0xb6b9 <= code && code <= 0xb6d3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xb761) {
	                                    if (code < 0xb70d) {
	                                        if (code < 0xb6f0) {
	                                            if (code < 0xb6d5) {
	                                                // Lo       HANGUL SYLLABLE DDWE
	                                                if (0xb6d4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
	                                                if (0xb6d5 <= code && code <= 0xb6ef) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb6f1) {
	                                                // Lo       HANGUL SYLLABLE DDWI
	                                                if (0xb6f0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb70c) {
	                                                    // Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
	                                                    if (0xb6f1 <= code && code <= 0xb70b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DDYU
	                                                    if (0xb70c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb744) {
	                                            if (code < 0xb728) {
	                                                // Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
	                                                if (0xb70d <= code && code <= 0xb727) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb729) {
	                                                    // Lo       HANGUL SYLLABLE DDEU
	                                                    if (0xb728 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
	                                                    if (0xb729 <= code && code <= 0xb743) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb745) {
	                                                // Lo       HANGUL SYLLABLE DDYI
	                                                if (0xb744 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb760) {
	                                                    // Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
	                                                    if (0xb745 <= code && code <= 0xb75f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE DDI
	                                                    if (0xb760 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb7b4) {
	                                        if (code < 0xb77d) {
	                                            if (code < 0xb77c) {
	                                                // Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
	                                                if (0xb761 <= code && code <= 0xb77b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE RA
	                                                if (0xb77c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb798) {
	                                                // Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
	                                                if (0xb77d <= code && code <= 0xb797) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb799) {
	                                                    // Lo       HANGUL SYLLABLE RAE
	                                                    if (0xb798 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
	                                                    if (0xb799 <= code && code <= 0xb7b3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb7d1) {
	                                            if (code < 0xb7b5) {
	                                                // Lo       HANGUL SYLLABLE RYA
	                                                if (0xb7b4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb7d0) {
	                                                    // Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
	                                                    if (0xb7b5 <= code && code <= 0xb7cf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE RYAE
	                                                    if (0xb7d0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb7ec) {
	                                                // Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
	                                                if (0xb7d1 <= code && code <= 0xb7eb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb7ed) {
	                                                    // Lo       HANGUL SYLLABLE REO
	                                                    if (0xb7ec === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
	                                                    if (0xb7ed <= code && code <= 0xb807) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xb921) {
	                                if (code < 0xb894) {
	                                    if (code < 0xb841) {
	                                        if (code < 0xb824) {
	                                            if (code < 0xb809) {
	                                                // Lo       HANGUL SYLLABLE RE
	                                                if (0xb808 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
	                                                if (0xb809 <= code && code <= 0xb823) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb825) {
	                                                // Lo       HANGUL SYLLABLE RYEO
	                                                if (0xb824 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb840) {
	                                                    // Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
	                                                    if (0xb825 <= code && code <= 0xb83f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE RYE
	                                                    if (0xb840 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb85d) {
	                                            if (code < 0xb85c) {
	                                                // Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
	                                                if (0xb841 <= code && code <= 0xb85b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE RO
	                                                if (0xb85c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb878) {
	                                                // Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
	                                                if (0xb85d <= code && code <= 0xb877) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb879) {
	                                                    // Lo       HANGUL SYLLABLE RWA
	                                                    if (0xb878 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
	                                                    if (0xb879 <= code && code <= 0xb893) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xb8cd) {
	                                        if (code < 0xb8b0) {
	                                            if (code < 0xb895) {
	                                                // Lo       HANGUL SYLLABLE RWAE
	                                                if (0xb894 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
	                                                if (0xb895 <= code && code <= 0xb8af) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb8b1) {
	                                                // Lo       HANGUL SYLLABLE ROE
	                                                if (0xb8b0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb8cc) {
	                                                    // Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
	                                                    if (0xb8b1 <= code && code <= 0xb8cb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE RYO
	                                                    if (0xb8cc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb904) {
	                                            if (code < 0xb8e8) {
	                                                // Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
	                                                if (0xb8cd <= code && code <= 0xb8e7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb8e9) {
	                                                    // Lo       HANGUL SYLLABLE RU
	                                                    if (0xb8e8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
	                                                    if (0xb8e9 <= code && code <= 0xb903) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb905) {
	                                                // Lo       HANGUL SYLLABLE RWEO
	                                                if (0xb904 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb920) {
	                                                    // Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
	                                                    if (0xb905 <= code && code <= 0xb91f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE RWE
	                                                    if (0xb920 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xb9c8) {
	                                    if (code < 0xb974) {
	                                        if (code < 0xb93d) {
	                                            if (code < 0xb93c) {
	                                                // Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
	                                                if (0xb921 <= code && code <= 0xb93b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE RWI
	                                                if (0xb93c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb958) {
	                                                // Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
	                                                if (0xb93d <= code && code <= 0xb957) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb959) {
	                                                    // Lo       HANGUL SYLLABLE RYU
	                                                    if (0xb958 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
	                                                    if (0xb959 <= code && code <= 0xb973) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xb991) {
	                                            if (code < 0xb975) {
	                                                // Lo       HANGUL SYLLABLE REU
	                                                if (0xb974 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb990) {
	                                                    // Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
	                                                    if (0xb975 <= code && code <= 0xb98f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE RYI
	                                                    if (0xb990 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb9ac) {
	                                                // Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
	                                                if (0xb991 <= code && code <= 0xb9ab) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xb9ad) {
	                                                    // Lo       HANGUL SYLLABLE RI
	                                                    if (0xb9ac === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
	                                                    if (0xb9ad <= code && code <= 0xb9c7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xba01) {
	                                        if (code < 0xb9e4) {
	                                            if (code < 0xb9c9) {
	                                                // Lo       HANGUL SYLLABLE MA
	                                                if (0xb9c8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
	                                                if (0xb9c9 <= code && code <= 0xb9e3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xb9e5) {
	                                                // Lo       HANGUL SYLLABLE MAE
	                                                if (0xb9e4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xba00) {
	                                                    // Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
	                                                    if (0xb9e5 <= code && code <= 0xb9ff) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE MYA
	                                                    if (0xba00 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xba38) {
	                                            if (code < 0xba1c) {
	                                                // Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
	                                                if (0xba01 <= code && code <= 0xba1b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xba1d) {
	                                                    // Lo       HANGUL SYLLABLE MYAE
	                                                    if (0xba1c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
	                                                    if (0xba1d <= code && code <= 0xba37) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xba39) {
	                                                // Lo       HANGUL SYLLABLE MEO
	                                                if (0xba38 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xba54) {
	                                                    // Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
	                                                    if (0xba39 <= code && code <= 0xba53) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE ME
	                                                    if (0xba54 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0xbcbc) {
	                            if (code < 0xbb88) {
	                                if (code < 0xbae1) {
	                                    if (code < 0xbaa8) {
	                                        if (code < 0xba71) {
	                                            if (code < 0xba70) {
	                                                // Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
	                                                if (0xba55 <= code && code <= 0xba6f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE MYEO
	                                                if (0xba70 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xba8c) {
	                                                // Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
	                                                if (0xba71 <= code && code <= 0xba8b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xba8d) {
	                                                    // Lo       HANGUL SYLLABLE MYE
	                                                    if (0xba8c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
	                                                    if (0xba8d <= code && code <= 0xbaa7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbac4) {
	                                            if (code < 0xbaa9) {
	                                                // Lo       HANGUL SYLLABLE MO
	                                                if (0xbaa8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
	                                                if (0xbaa9 <= code && code <= 0xbac3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbac5) {
	                                                // Lo       HANGUL SYLLABLE MWA
	                                                if (0xbac4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbae0) {
	                                                    // Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
	                                                    if (0xbac5 <= code && code <= 0xbadf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE MWAE
	                                                    if (0xbae0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xbb34) {
	                                        if (code < 0xbafd) {
	                                            if (code < 0xbafc) {
	                                                // Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
	                                                if (0xbae1 <= code && code <= 0xbafb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE MOE
	                                                if (0xbafc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbb18) {
	                                                // Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
	                                                if (0xbafd <= code && code <= 0xbb17) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbb19) {
	                                                    // Lo       HANGUL SYLLABLE MYO
	                                                    if (0xbb18 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
	                                                    if (0xbb19 <= code && code <= 0xbb33) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbb51) {
	                                            if (code < 0xbb35) {
	                                                // Lo       HANGUL SYLLABLE MU
	                                                if (0xbb34 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbb50) {
	                                                    // Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
	                                                    if (0xbb35 <= code && code <= 0xbb4f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE MWEO
	                                                    if (0xbb50 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbb6c) {
	                                                // Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
	                                                if (0xbb51 <= code && code <= 0xbb6b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbb6d) {
	                                                    // Lo       HANGUL SYLLABLE MWE
	                                                    if (0xbb6c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
	                                                    if (0xbb6d <= code && code <= 0xbb87) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xbc15) {
	                                    if (code < 0xbbc1) {
	                                        if (code < 0xbba4) {
	                                            if (code < 0xbb89) {
	                                                // Lo       HANGUL SYLLABLE MWI
	                                                if (0xbb88 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
	                                                if (0xbb89 <= code && code <= 0xbba3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbba5) {
	                                                // Lo       HANGUL SYLLABLE MYU
	                                                if (0xbba4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbbc0) {
	                                                    // Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
	                                                    if (0xbba5 <= code && code <= 0xbbbf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE MEU
	                                                    if (0xbbc0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbbf8) {
	                                            if (code < 0xbbdc) {
	                                                // Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
	                                                if (0xbbc1 <= code && code <= 0xbbdb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbbdd) {
	                                                    // Lo       HANGUL SYLLABLE MYI
	                                                    if (0xbbdc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
	                                                    if (0xbbdd <= code && code <= 0xbbf7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbbf9) {
	                                                // Lo       HANGUL SYLLABLE MI
	                                                if (0xbbf8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbc14) {
	                                                    // Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
	                                                    if (0xbbf9 <= code && code <= 0xbc13) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BA
	                                                    if (0xbc14 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xbc68) {
	                                        if (code < 0xbc31) {
	                                            if (code < 0xbc30) {
	                                                // Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
	                                                if (0xbc15 <= code && code <= 0xbc2f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE BAE
	                                                if (0xbc30 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbc4c) {
	                                                // Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
	                                                if (0xbc31 <= code && code <= 0xbc4b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbc4d) {
	                                                    // Lo       HANGUL SYLLABLE BYA
	                                                    if (0xbc4c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
	                                                    if (0xbc4d <= code && code <= 0xbc67) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbc85) {
	                                            if (code < 0xbc69) {
	                                                // Lo       HANGUL SYLLABLE BYAE
	                                                if (0xbc68 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbc84) {
	                                                    // Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
	                                                    if (0xbc69 <= code && code <= 0xbc83) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BEO
	                                                    if (0xbc84 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbca0) {
	                                                // Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
	                                                if (0xbc85 <= code && code <= 0xbc9f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbca1) {
	                                                    // Lo       HANGUL SYLLABLE BE
	                                                    if (0xbca0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
	                                                    if (0xbca1 <= code && code <= 0xbcbb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xbdd5) {
	                                if (code < 0xbd48) {
	                                    if (code < 0xbcf5) {
	                                        if (code < 0xbcd8) {
	                                            if (code < 0xbcbd) {
	                                                // Lo       HANGUL SYLLABLE BYEO
	                                                if (0xbcbc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
	                                                if (0xbcbd <= code && code <= 0xbcd7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbcd9) {
	                                                // Lo       HANGUL SYLLABLE BYE
	                                                if (0xbcd8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbcf4) {
	                                                    // Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
	                                                    if (0xbcd9 <= code && code <= 0xbcf3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BO
	                                                    if (0xbcf4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbd11) {
	                                            if (code < 0xbd10) {
	                                                // Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
	                                                if (0xbcf5 <= code && code <= 0xbd0f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE BWA
	                                                if (0xbd10 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbd2c) {
	                                                // Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
	                                                if (0xbd11 <= code && code <= 0xbd2b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbd2d) {
	                                                    // Lo       HANGUL SYLLABLE BWAE
	                                                    if (0xbd2c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
	                                                    if (0xbd2d <= code && code <= 0xbd47) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xbd81) {
	                                        if (code < 0xbd64) {
	                                            if (code < 0xbd49) {
	                                                // Lo       HANGUL SYLLABLE BOE
	                                                if (0xbd48 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
	                                                if (0xbd49 <= code && code <= 0xbd63) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbd65) {
	                                                // Lo       HANGUL SYLLABLE BYO
	                                                if (0xbd64 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbd80) {
	                                                    // Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
	                                                    if (0xbd65 <= code && code <= 0xbd7f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BU
	                                                    if (0xbd80 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbdb8) {
	                                            if (code < 0xbd9c) {
	                                                // Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
	                                                if (0xbd81 <= code && code <= 0xbd9b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbd9d) {
	                                                    // Lo       HANGUL SYLLABLE BWEO
	                                                    if (0xbd9c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
	                                                    if (0xbd9d <= code && code <= 0xbdb7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbdb9) {
	                                                // Lo       HANGUL SYLLABLE BWE
	                                                if (0xbdb8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbdd4) {
	                                                    // Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
	                                                    if (0xbdb9 <= code && code <= 0xbdd3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BWI
	                                                    if (0xbdd4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xbe7c) {
	                                    if (code < 0xbe28) {
	                                        if (code < 0xbdf1) {
	                                            if (code < 0xbdf0) {
	                                                // Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
	                                                if (0xbdd5 <= code && code <= 0xbdef) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE BYU
	                                                if (0xbdf0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbe0c) {
	                                                // Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
	                                                if (0xbdf1 <= code && code <= 0xbe0b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbe0d) {
	                                                    // Lo       HANGUL SYLLABLE BEU
	                                                    if (0xbe0c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
	                                                    if (0xbe0d <= code && code <= 0xbe27) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbe45) {
	                                            if (code < 0xbe29) {
	                                                // Lo       HANGUL SYLLABLE BYI
	                                                if (0xbe28 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbe44) {
	                                                    // Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
	                                                    if (0xbe29 <= code && code <= 0xbe43) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BI
	                                                    if (0xbe44 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbe60) {
	                                                // Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
	                                                if (0xbe45 <= code && code <= 0xbe5f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbe61) {
	                                                    // Lo       HANGUL SYLLABLE BBA
	                                                    if (0xbe60 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
	                                                    if (0xbe61 <= code && code <= 0xbe7b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xbeb5) {
	                                        if (code < 0xbe98) {
	                                            if (code < 0xbe7d) {
	                                                // Lo       HANGUL SYLLABLE BBAE
	                                                if (0xbe7c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
	                                                if (0xbe7d <= code && code <= 0xbe97) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbe99) {
	                                                // Lo       HANGUL SYLLABLE BBYA
	                                                if (0xbe98 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbeb4) {
	                                                    // Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
	                                                    if (0xbe99 <= code && code <= 0xbeb3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BBYAE
	                                                    if (0xbeb4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbeec) {
	                                            if (code < 0xbed0) {
	                                                // Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
	                                                if (0xbeb5 <= code && code <= 0xbecf) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbed1) {
	                                                    // Lo       HANGUL SYLLABLE BBEO
	                                                    if (0xbed0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
	                                                    if (0xbed1 <= code && code <= 0xbeeb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbeed) {
	                                                // Lo       HANGUL SYLLABLE BBE
	                                                if (0xbeec === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbf08) {
	                                                    // Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
	                                                    if (0xbeed <= code && code <= 0xbf07) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BBYEO
	                                                    if (0xbf08 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        else {
	            if (code < 0xd1d8) {
	                if (code < 0xc870) {
	                    if (code < 0xc3bc) {
	                        if (code < 0xc155) {
	                            if (code < 0xc03c) {
	                                if (code < 0xbf95) {
	                                    if (code < 0xbf5c) {
	                                        if (code < 0xbf25) {
	                                            if (code < 0xbf24) {
	                                                // Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
	                                                if (0xbf09 <= code && code <= 0xbf23) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE BBYE
	                                                if (0xbf24 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbf40) {
	                                                // Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
	                                                if (0xbf25 <= code && code <= 0xbf3f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbf41) {
	                                                    // Lo       HANGUL SYLLABLE BBO
	                                                    if (0xbf40 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
	                                                    if (0xbf41 <= code && code <= 0xbf5b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xbf78) {
	                                            if (code < 0xbf5d) {
	                                                // Lo       HANGUL SYLLABLE BBWA
	                                                if (0xbf5c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
	                                                if (0xbf5d <= code && code <= 0xbf77) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbf79) {
	                                                // Lo       HANGUL SYLLABLE BBWAE
	                                                if (0xbf78 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbf94) {
	                                                    // Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
	                                                    if (0xbf79 <= code && code <= 0xbf93) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BBOE
	                                                    if (0xbf94 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xbfe8) {
	                                        if (code < 0xbfb1) {
	                                            if (code < 0xbfb0) {
	                                                // Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
	                                                if (0xbf95 <= code && code <= 0xbfaf) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE BBYO
	                                                if (0xbfb0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xbfcc) {
	                                                // Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
	                                                if (0xbfb1 <= code && code <= 0xbfcb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xbfcd) {
	                                                    // Lo       HANGUL SYLLABLE BBU
	                                                    if (0xbfcc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
	                                                    if (0xbfcd <= code && code <= 0xbfe7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc005) {
	                                            if (code < 0xbfe9) {
	                                                // Lo       HANGUL SYLLABLE BBWEO
	                                                if (0xbfe8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc004) {
	                                                    // Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
	                                                    if (0xbfe9 <= code && code <= 0xc003) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BBWE
	                                                    if (0xc004 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc020) {
	                                                // Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
	                                                if (0xc005 <= code && code <= 0xc01f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc021) {
	                                                    // Lo       HANGUL SYLLABLE BBWI
	                                                    if (0xc020 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
	                                                    if (0xc021 <= code && code <= 0xc03b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xc0c8) {
	                                    if (code < 0xc075) {
	                                        if (code < 0xc058) {
	                                            if (code < 0xc03d) {
	                                                // Lo       HANGUL SYLLABLE BBYU
	                                                if (0xc03c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
	                                                if (0xc03d <= code && code <= 0xc057) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc059) {
	                                                // Lo       HANGUL SYLLABLE BBEU
	                                                if (0xc058 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc074) {
	                                                    // Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
	                                                    if (0xc059 <= code && code <= 0xc073) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE BBYI
	                                                    if (0xc074 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc091) {
	                                            if (code < 0xc090) {
	                                                // Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
	                                                if (0xc075 <= code && code <= 0xc08f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE BBI
	                                                if (0xc090 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc0ac) {
	                                                // Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
	                                                if (0xc091 <= code && code <= 0xc0ab) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc0ad) {
	                                                    // Lo       HANGUL SYLLABLE SA
	                                                    if (0xc0ac === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
	                                                    if (0xc0ad <= code && code <= 0xc0c7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc101) {
	                                        if (code < 0xc0e4) {
	                                            if (code < 0xc0c9) {
	                                                // Lo       HANGUL SYLLABLE SAE
	                                                if (0xc0c8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
	                                                if (0xc0c9 <= code && code <= 0xc0e3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc0e5) {
	                                                // Lo       HANGUL SYLLABLE SYA
	                                                if (0xc0e4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc100) {
	                                                    // Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
	                                                    if (0xc0e5 <= code && code <= 0xc0ff) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SYAE
	                                                    if (0xc100 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc138) {
	                                            if (code < 0xc11c) {
	                                                // Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
	                                                if (0xc101 <= code && code <= 0xc11b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc11d) {
	                                                    // Lo       HANGUL SYLLABLE SEO
	                                                    if (0xc11c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
	                                                    if (0xc11d <= code && code <= 0xc137) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc139) {
	                                                // Lo       HANGUL SYLLABLE SE
	                                                if (0xc138 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc154) {
	                                                    // Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
	                                                    if (0xc139 <= code && code <= 0xc153) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SYEO
	                                                    if (0xc154 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xc288) {
	                                if (code < 0xc1e1) {
	                                    if (code < 0xc1a8) {
	                                        if (code < 0xc171) {
	                                            if (code < 0xc170) {
	                                                // Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
	                                                if (0xc155 <= code && code <= 0xc16f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE SYE
	                                                if (0xc170 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc18c) {
	                                                // Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
	                                                if (0xc171 <= code && code <= 0xc18b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc18d) {
	                                                    // Lo       HANGUL SYLLABLE SO
	                                                    if (0xc18c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
	                                                    if (0xc18d <= code && code <= 0xc1a7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc1c4) {
	                                            if (code < 0xc1a9) {
	                                                // Lo       HANGUL SYLLABLE SWA
	                                                if (0xc1a8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
	                                                if (0xc1a9 <= code && code <= 0xc1c3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc1c5) {
	                                                // Lo       HANGUL SYLLABLE SWAE
	                                                if (0xc1c4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc1e0) {
	                                                    // Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
	                                                    if (0xc1c5 <= code && code <= 0xc1df) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SOE
	                                                    if (0xc1e0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc234) {
	                                        if (code < 0xc1fd) {
	                                            if (code < 0xc1fc) {
	                                                // Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
	                                                if (0xc1e1 <= code && code <= 0xc1fb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE SYO
	                                                if (0xc1fc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc218) {
	                                                // Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
	                                                if (0xc1fd <= code && code <= 0xc217) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc219) {
	                                                    // Lo       HANGUL SYLLABLE SU
	                                                    if (0xc218 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
	                                                    if (0xc219 <= code && code <= 0xc233) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc251) {
	                                            if (code < 0xc235) {
	                                                // Lo       HANGUL SYLLABLE SWEO
	                                                if (0xc234 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc250) {
	                                                    // Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
	                                                    if (0xc235 <= code && code <= 0xc24f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SWE
	                                                    if (0xc250 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc26c) {
	                                                // Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
	                                                if (0xc251 <= code && code <= 0xc26b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc26d) {
	                                                    // Lo       HANGUL SYLLABLE SWI
	                                                    if (0xc26c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
	                                                    if (0xc26d <= code && code <= 0xc287) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xc315) {
	                                    if (code < 0xc2c1) {
	                                        if (code < 0xc2a4) {
	                                            if (code < 0xc289) {
	                                                // Lo       HANGUL SYLLABLE SYU
	                                                if (0xc288 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
	                                                if (0xc289 <= code && code <= 0xc2a3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc2a5) {
	                                                // Lo       HANGUL SYLLABLE SEU
	                                                if (0xc2a4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc2c0) {
	                                                    // Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
	                                                    if (0xc2a5 <= code && code <= 0xc2bf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SYI
	                                                    if (0xc2c0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc2f8) {
	                                            if (code < 0xc2dc) {
	                                                // Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
	                                                if (0xc2c1 <= code && code <= 0xc2db) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc2dd) {
	                                                    // Lo       HANGUL SYLLABLE SI
	                                                    if (0xc2dc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
	                                                    if (0xc2dd <= code && code <= 0xc2f7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc2f9) {
	                                                // Lo       HANGUL SYLLABLE SSA
	                                                if (0xc2f8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc314) {
	                                                    // Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
	                                                    if (0xc2f9 <= code && code <= 0xc313) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SSAE
	                                                    if (0xc314 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc368) {
	                                        if (code < 0xc331) {
	                                            if (code < 0xc330) {
	                                                // Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
	                                                if (0xc315 <= code && code <= 0xc32f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE SSYA
	                                                if (0xc330 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc34c) {
	                                                // Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
	                                                if (0xc331 <= code && code <= 0xc34b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc34d) {
	                                                    // Lo       HANGUL SYLLABLE SSYAE
	                                                    if (0xc34c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
	                                                    if (0xc34d <= code && code <= 0xc367) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc385) {
	                                            if (code < 0xc369) {
	                                                // Lo       HANGUL SYLLABLE SSEO
	                                                if (0xc368 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc384) {
	                                                    // Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
	                                                    if (0xc369 <= code && code <= 0xc383) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SSE
	                                                    if (0xc384 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc3a0) {
	                                                // Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
	                                                if (0xc385 <= code && code <= 0xc39f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc3a1) {
	                                                    // Lo       HANGUL SYLLABLE SSYEO
	                                                    if (0xc3a0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
	                                                    if (0xc3a1 <= code && code <= 0xc3bb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0xc609) {
	                            if (code < 0xc4d5) {
	                                if (code < 0xc448) {
	                                    if (code < 0xc3f5) {
	                                        if (code < 0xc3d8) {
	                                            if (code < 0xc3bd) {
	                                                // Lo       HANGUL SYLLABLE SSYE
	                                                if (0xc3bc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
	                                                if (0xc3bd <= code && code <= 0xc3d7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc3d9) {
	                                                // Lo       HANGUL SYLLABLE SSO
	                                                if (0xc3d8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc3f4) {
	                                                    // Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
	                                                    if (0xc3d9 <= code && code <= 0xc3f3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SSWA
	                                                    if (0xc3f4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc411) {
	                                            if (code < 0xc410) {
	                                                // Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
	                                                if (0xc3f5 <= code && code <= 0xc40f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE SSWAE
	                                                if (0xc410 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc42c) {
	                                                // Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
	                                                if (0xc411 <= code && code <= 0xc42b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc42d) {
	                                                    // Lo       HANGUL SYLLABLE SSOE
	                                                    if (0xc42c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
	                                                    if (0xc42d <= code && code <= 0xc447) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc481) {
	                                        if (code < 0xc464) {
	                                            if (code < 0xc449) {
	                                                // Lo       HANGUL SYLLABLE SSYO
	                                                if (0xc448 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
	                                                if (0xc449 <= code && code <= 0xc463) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc465) {
	                                                // Lo       HANGUL SYLLABLE SSU
	                                                if (0xc464 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc480) {
	                                                    // Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
	                                                    if (0xc465 <= code && code <= 0xc47f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SSWEO
	                                                    if (0xc480 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc4b8) {
	                                            if (code < 0xc49c) {
	                                                // Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
	                                                if (0xc481 <= code && code <= 0xc49b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc49d) {
	                                                    // Lo       HANGUL SYLLABLE SSWE
	                                                    if (0xc49c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
	                                                    if (0xc49d <= code && code <= 0xc4b7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc4b9) {
	                                                // Lo       HANGUL SYLLABLE SSWI
	                                                if (0xc4b8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc4d4) {
	                                                    // Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
	                                                    if (0xc4b9 <= code && code <= 0xc4d3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE SSYU
	                                                    if (0xc4d4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xc57c) {
	                                    if (code < 0xc528) {
	                                        if (code < 0xc4f1) {
	                                            if (code < 0xc4f0) {
	                                                // Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
	                                                if (0xc4d5 <= code && code <= 0xc4ef) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE SSEU
	                                                if (0xc4f0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc50c) {
	                                                // Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
	                                                if (0xc4f1 <= code && code <= 0xc50b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc50d) {
	                                                    // Lo       HANGUL SYLLABLE SSYI
	                                                    if (0xc50c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
	                                                    if (0xc50d <= code && code <= 0xc527) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc545) {
	                                            if (code < 0xc529) {
	                                                // Lo       HANGUL SYLLABLE SSI
	                                                if (0xc528 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc544) {
	                                                    // Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
	                                                    if (0xc529 <= code && code <= 0xc543) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE A
	                                                    if (0xc544 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc560) {
	                                                // Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
	                                                if (0xc545 <= code && code <= 0xc55f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc561) {
	                                                    // Lo       HANGUL SYLLABLE AE
	                                                    if (0xc560 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
	                                                    if (0xc561 <= code && code <= 0xc57b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc5b5) {
	                                        if (code < 0xc598) {
	                                            if (code < 0xc57d) {
	                                                // Lo       HANGUL SYLLABLE YA
	                                                if (0xc57c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
	                                                if (0xc57d <= code && code <= 0xc597) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc599) {
	                                                // Lo       HANGUL SYLLABLE YAE
	                                                if (0xc598 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc5b4) {
	                                                    // Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
	                                                    if (0xc599 <= code && code <= 0xc5b3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE EO
	                                                    if (0xc5b4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc5ec) {
	                                            if (code < 0xc5d0) {
	                                                // Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
	                                                if (0xc5b5 <= code && code <= 0xc5cf) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc5d1) {
	                                                    // Lo       HANGUL SYLLABLE E
	                                                    if (0xc5d0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
	                                                    if (0xc5d1 <= code && code <= 0xc5eb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc5ed) {
	                                                // Lo       HANGUL SYLLABLE YEO
	                                                if (0xc5ec === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc608) {
	                                                    // Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
	                                                    if (0xc5ed <= code && code <= 0xc607) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE YE
	                                                    if (0xc608 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xc73c) {
	                                if (code < 0xc695) {
	                                    if (code < 0xc65c) {
	                                        if (code < 0xc625) {
	                                            if (code < 0xc624) {
	                                                // Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
	                                                if (0xc609 <= code && code <= 0xc623) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE O
	                                                if (0xc624 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc640) {
	                                                // Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
	                                                if (0xc625 <= code && code <= 0xc63f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc641) {
	                                                    // Lo       HANGUL SYLLABLE WA
	                                                    if (0xc640 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
	                                                    if (0xc641 <= code && code <= 0xc65b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc678) {
	                                            if (code < 0xc65d) {
	                                                // Lo       HANGUL SYLLABLE WAE
	                                                if (0xc65c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
	                                                if (0xc65d <= code && code <= 0xc677) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc679) {
	                                                // Lo       HANGUL SYLLABLE OE
	                                                if (0xc678 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc694) {
	                                                    // Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
	                                                    if (0xc679 <= code && code <= 0xc693) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE YO
	                                                    if (0xc694 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc6e8) {
	                                        if (code < 0xc6b1) {
	                                            if (code < 0xc6b0) {
	                                                // Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
	                                                if (0xc695 <= code && code <= 0xc6af) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE U
	                                                if (0xc6b0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc6cc) {
	                                                // Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
	                                                if (0xc6b1 <= code && code <= 0xc6cb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc6cd) {
	                                                    // Lo       HANGUL SYLLABLE WEO
	                                                    if (0xc6cc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
	                                                    if (0xc6cd <= code && code <= 0xc6e7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc705) {
	                                            if (code < 0xc6e9) {
	                                                // Lo       HANGUL SYLLABLE WE
	                                                if (0xc6e8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc704) {
	                                                    // Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
	                                                    if (0xc6e9 <= code && code <= 0xc703) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE WI
	                                                    if (0xc704 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc720) {
	                                                // Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
	                                                if (0xc705 <= code && code <= 0xc71f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc721) {
	                                                    // Lo       HANGUL SYLLABLE YU
	                                                    if (0xc720 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
	                                                    if (0xc721 <= code && code <= 0xc73b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xc7c9) {
	                                    if (code < 0xc775) {
	                                        if (code < 0xc758) {
	                                            if (code < 0xc73d) {
	                                                // Lo       HANGUL SYLLABLE EU
	                                                if (0xc73c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
	                                                if (0xc73d <= code && code <= 0xc757) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc759) {
	                                                // Lo       HANGUL SYLLABLE YI
	                                                if (0xc758 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc774) {
	                                                    // Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
	                                                    if (0xc759 <= code && code <= 0xc773) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE I
	                                                    if (0xc774 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc7ac) {
	                                            if (code < 0xc790) {
	                                                // Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
	                                                if (0xc775 <= code && code <= 0xc78f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc791) {
	                                                    // Lo       HANGUL SYLLABLE JA
	                                                    if (0xc790 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
	                                                    if (0xc791 <= code && code <= 0xc7ab) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc7ad) {
	                                                // Lo       HANGUL SYLLABLE JAE
	                                                if (0xc7ac === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc7c8) {
	                                                    // Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
	                                                    if (0xc7ad <= code && code <= 0xc7c7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JYA
	                                                    if (0xc7c8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc81c) {
	                                        if (code < 0xc7e5) {
	                                            if (code < 0xc7e4) {
	                                                // Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
	                                                if (0xc7c9 <= code && code <= 0xc7e3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE JYAE
	                                                if (0xc7e4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc800) {
	                                                // Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
	                                                if (0xc7e5 <= code && code <= 0xc7ff) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc801) {
	                                                    // Lo       HANGUL SYLLABLE JEO
	                                                    if (0xc800 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
	                                                    if (0xc801 <= code && code <= 0xc81b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc839) {
	                                            if (code < 0xc81d) {
	                                                // Lo       HANGUL SYLLABLE JE
	                                                if (0xc81c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc838) {
	                                                    // Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
	                                                    if (0xc81d <= code && code <= 0xc837) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JYEO
	                                                    if (0xc838 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc854) {
	                                                // Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
	                                                if (0xc839 <= code && code <= 0xc853) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc855) {
	                                                    // Lo       HANGUL SYLLABLE JYE
	                                                    if (0xc854 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
	                                                    if (0xc855 <= code && code <= 0xc86f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0xcd24) {
	                        if (code < 0xcabd) {
	                            if (code < 0xc989) {
	                                if (code < 0xc8fc) {
	                                    if (code < 0xc8a9) {
	                                        if (code < 0xc88c) {
	                                            if (code < 0xc871) {
	                                                // Lo       HANGUL SYLLABLE JO
	                                                if (0xc870 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
	                                                if (0xc871 <= code && code <= 0xc88b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc88d) {
	                                                // Lo       HANGUL SYLLABLE JWA
	                                                if (0xc88c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc8a8) {
	                                                    // Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
	                                                    if (0xc88d <= code && code <= 0xc8a7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JWAE
	                                                    if (0xc8a8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc8c5) {
	                                            if (code < 0xc8c4) {
	                                                // Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
	                                                if (0xc8a9 <= code && code <= 0xc8c3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE JOE
	                                                if (0xc8c4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc8e0) {
	                                                // Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
	                                                if (0xc8c5 <= code && code <= 0xc8df) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc8e1) {
	                                                    // Lo       HANGUL SYLLABLE JYO
	                                                    if (0xc8e0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
	                                                    if (0xc8e1 <= code && code <= 0xc8fb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xc935) {
	                                        if (code < 0xc918) {
	                                            if (code < 0xc8fd) {
	                                                // Lo       HANGUL SYLLABLE JU
	                                                if (0xc8fc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
	                                                if (0xc8fd <= code && code <= 0xc917) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc919) {
	                                                // Lo       HANGUL SYLLABLE JWEO
	                                                if (0xc918 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc934) {
	                                                    // Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
	                                                    if (0xc919 <= code && code <= 0xc933) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JWE
	                                                    if (0xc934 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc96c) {
	                                            if (code < 0xc950) {
	                                                // Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
	                                                if (0xc935 <= code && code <= 0xc94f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc951) {
	                                                    // Lo       HANGUL SYLLABLE JWI
	                                                    if (0xc950 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
	                                                    if (0xc951 <= code && code <= 0xc96b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc96d) {
	                                                // Lo       HANGUL SYLLABLE JYU
	                                                if (0xc96c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc988) {
	                                                    // Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
	                                                    if (0xc96d <= code && code <= 0xc987) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JEU
	                                                    if (0xc988 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xca30) {
	                                    if (code < 0xc9dc) {
	                                        if (code < 0xc9a5) {
	                                            if (code < 0xc9a4) {
	                                                // Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
	                                                if (0xc989 <= code && code <= 0xc9a3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE JYI
	                                                if (0xc9a4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xc9c0) {
	                                                // Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
	                                                if (0xc9a5 <= code && code <= 0xc9bf) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc9c1) {
	                                                    // Lo       HANGUL SYLLABLE JI
	                                                    if (0xc9c0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
	                                                    if (0xc9c1 <= code && code <= 0xc9db) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xc9f9) {
	                                            if (code < 0xc9dd) {
	                                                // Lo       HANGUL SYLLABLE JJA
	                                                if (0xc9dc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xc9f8) {
	                                                    // Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
	                                                    if (0xc9dd <= code && code <= 0xc9f7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JJAE
	                                                    if (0xc9f8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xca14) {
	                                                // Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
	                                                if (0xc9f9 <= code && code <= 0xca13) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xca15) {
	                                                    // Lo       HANGUL SYLLABLE JJYA
	                                                    if (0xca14 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
	                                                    if (0xca15 <= code && code <= 0xca2f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xca69) {
	                                        if (code < 0xca4c) {
	                                            if (code < 0xca31) {
	                                                // Lo       HANGUL SYLLABLE JJYAE
	                                                if (0xca30 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
	                                                if (0xca31 <= code && code <= 0xca4b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xca4d) {
	                                                // Lo       HANGUL SYLLABLE JJEO
	                                                if (0xca4c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xca68) {
	                                                    // Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
	                                                    if (0xca4d <= code && code <= 0xca67) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JJE
	                                                    if (0xca68 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcaa0) {
	                                            if (code < 0xca84) {
	                                                // Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
	                                                if (0xca69 <= code && code <= 0xca83) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xca85) {
	                                                    // Lo       HANGUL SYLLABLE JJYEO
	                                                    if (0xca84 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
	                                                    if (0xca85 <= code && code <= 0xca9f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcaa1) {
	                                                // Lo       HANGUL SYLLABLE JJYE
	                                                if (0xcaa0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcabc) {
	                                                    // Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
	                                                    if (0xcaa1 <= code && code <= 0xcabb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JJO
	                                                    if (0xcabc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xcbf0) {
	                                if (code < 0xcb49) {
	                                    if (code < 0xcb10) {
	                                        if (code < 0xcad9) {
	                                            if (code < 0xcad8) {
	                                                // Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
	                                                if (0xcabd <= code && code <= 0xcad7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE JJWA
	                                                if (0xcad8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcaf4) {
	                                                // Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
	                                                if (0xcad9 <= code && code <= 0xcaf3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcaf5) {
	                                                    // Lo       HANGUL SYLLABLE JJWAE
	                                                    if (0xcaf4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
	                                                    if (0xcaf5 <= code && code <= 0xcb0f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcb2c) {
	                                            if (code < 0xcb11) {
	                                                // Lo       HANGUL SYLLABLE JJOE
	                                                if (0xcb10 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
	                                                if (0xcb11 <= code && code <= 0xcb2b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcb2d) {
	                                                // Lo       HANGUL SYLLABLE JJYO
	                                                if (0xcb2c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcb48) {
	                                                    // Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
	                                                    if (0xcb2d <= code && code <= 0xcb47) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JJU
	                                                    if (0xcb48 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xcb9c) {
	                                        if (code < 0xcb65) {
	                                            if (code < 0xcb64) {
	                                                // Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
	                                                if (0xcb49 <= code && code <= 0xcb63) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE JJWEO
	                                                if (0xcb64 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcb80) {
	                                                // Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
	                                                if (0xcb65 <= code && code <= 0xcb7f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcb81) {
	                                                    // Lo       HANGUL SYLLABLE JJWE
	                                                    if (0xcb80 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
	                                                    if (0xcb81 <= code && code <= 0xcb9b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcbb9) {
	                                            if (code < 0xcb9d) {
	                                                // Lo       HANGUL SYLLABLE JJWI
	                                                if (0xcb9c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcbb8) {
	                                                    // Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
	                                                    if (0xcb9d <= code && code <= 0xcbb7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE JJYU
	                                                    if (0xcbb8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcbd4) {
	                                                // Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
	                                                if (0xcbb9 <= code && code <= 0xcbd3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcbd5) {
	                                                    // Lo       HANGUL SYLLABLE JJEU
	                                                    if (0xcbd4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
	                                                    if (0xcbd5 <= code && code <= 0xcbef) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xcc7d) {
	                                    if (code < 0xcc29) {
	                                        if (code < 0xcc0c) {
	                                            if (code < 0xcbf1) {
	                                                // Lo       HANGUL SYLLABLE JJYI
	                                                if (0xcbf0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
	                                                if (0xcbf1 <= code && code <= 0xcc0b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcc0d) {
	                                                // Lo       HANGUL SYLLABLE JJI
	                                                if (0xcc0c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcc28) {
	                                                    // Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
	                                                    if (0xcc0d <= code && code <= 0xcc27) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE CA
	                                                    if (0xcc28 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcc60) {
	                                            if (code < 0xcc44) {
	                                                // Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
	                                                if (0xcc29 <= code && code <= 0xcc43) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcc45) {
	                                                    // Lo       HANGUL SYLLABLE CAE
	                                                    if (0xcc44 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
	                                                    if (0xcc45 <= code && code <= 0xcc5f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcc61) {
	                                                // Lo       HANGUL SYLLABLE CYA
	                                                if (0xcc60 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcc7c) {
	                                                    // Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
	                                                    if (0xcc61 <= code && code <= 0xcc7b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE CYAE
	                                                    if (0xcc7c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xccd0) {
	                                        if (code < 0xcc99) {
	                                            if (code < 0xcc98) {
	                                                // Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
	                                                if (0xcc7d <= code && code <= 0xcc97) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE CEO
	                                                if (0xcc98 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xccb4) {
	                                                // Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
	                                                if (0xcc99 <= code && code <= 0xccb3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xccb5) {
	                                                    // Lo       HANGUL SYLLABLE CE
	                                                    if (0xccb4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
	                                                    if (0xccb5 <= code && code <= 0xcccf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcced) {
	                                            if (code < 0xccd1) {
	                                                // Lo       HANGUL SYLLABLE CYEO
	                                                if (0xccd0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xccec) {
	                                                    // Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
	                                                    if (0xccd1 <= code && code <= 0xcceb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE CYE
	                                                    if (0xccec === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcd08) {
	                                                // Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
	                                                if (0xcced <= code && code <= 0xcd07) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcd09) {
	                                                    // Lo       HANGUL SYLLABLE CO
	                                                    if (0xcd08 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
	                                                    if (0xcd09 <= code && code <= 0xcd23) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0xcf71) {
	                            if (code < 0xce3d) {
	                                if (code < 0xcdb0) {
	                                    if (code < 0xcd5d) {
	                                        if (code < 0xcd40) {
	                                            if (code < 0xcd25) {
	                                                // Lo       HANGUL SYLLABLE CWA
	                                                if (0xcd24 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
	                                                if (0xcd25 <= code && code <= 0xcd3f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcd41) {
	                                                // Lo       HANGUL SYLLABLE CWAE
	                                                if (0xcd40 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcd5c) {
	                                                    // Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
	                                                    if (0xcd41 <= code && code <= 0xcd5b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE COE
	                                                    if (0xcd5c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcd79) {
	                                            if (code < 0xcd78) {
	                                                // Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
	                                                if (0xcd5d <= code && code <= 0xcd77) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE CYO
	                                                if (0xcd78 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcd94) {
	                                                // Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
	                                                if (0xcd79 <= code && code <= 0xcd93) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcd95) {
	                                                    // Lo       HANGUL SYLLABLE CU
	                                                    if (0xcd94 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
	                                                    if (0xcd95 <= code && code <= 0xcdaf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xcde9) {
	                                        if (code < 0xcdcc) {
	                                            if (code < 0xcdb1) {
	                                                // Lo       HANGUL SYLLABLE CWEO
	                                                if (0xcdb0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
	                                                if (0xcdb1 <= code && code <= 0xcdcb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcdcd) {
	                                                // Lo       HANGUL SYLLABLE CWE
	                                                if (0xcdcc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcde8) {
	                                                    // Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
	                                                    if (0xcdcd <= code && code <= 0xcde7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE CWI
	                                                    if (0xcde8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xce20) {
	                                            if (code < 0xce04) {
	                                                // Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
	                                                if (0xcde9 <= code && code <= 0xce03) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xce05) {
	                                                    // Lo       HANGUL SYLLABLE CYU
	                                                    if (0xce04 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
	                                                    if (0xce05 <= code && code <= 0xce1f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xce21) {
	                                                // Lo       HANGUL SYLLABLE CEU
	                                                if (0xce20 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xce3c) {
	                                                    // Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
	                                                    if (0xce21 <= code && code <= 0xce3b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE CYI
	                                                    if (0xce3c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xcee4) {
	                                    if (code < 0xce90) {
	                                        if (code < 0xce59) {
	                                            if (code < 0xce58) {
	                                                // Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
	                                                if (0xce3d <= code && code <= 0xce57) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE CI
	                                                if (0xce58 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xce74) {
	                                                // Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
	                                                if (0xce59 <= code && code <= 0xce73) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xce75) {
	                                                    // Lo       HANGUL SYLLABLE KA
	                                                    if (0xce74 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
	                                                    if (0xce75 <= code && code <= 0xce8f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcead) {
	                                            if (code < 0xce91) {
	                                                // Lo       HANGUL SYLLABLE KAE
	                                                if (0xce90 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xceac) {
	                                                    // Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
	                                                    if (0xce91 <= code && code <= 0xceab) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE KYA
	                                                    if (0xceac === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcec8) {
	                                                // Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
	                                                if (0xcead <= code && code <= 0xcec7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcec9) {
	                                                    // Lo       HANGUL SYLLABLE KYAE
	                                                    if (0xcec8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
	                                                    if (0xcec9 <= code && code <= 0xcee3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xcf1d) {
	                                        if (code < 0xcf00) {
	                                            if (code < 0xcee5) {
	                                                // Lo       HANGUL SYLLABLE KEO
	                                                if (0xcee4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
	                                                if (0xcee5 <= code && code <= 0xceff) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcf01) {
	                                                // Lo       HANGUL SYLLABLE KE
	                                                if (0xcf00 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcf1c) {
	                                                    // Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
	                                                    if (0xcf01 <= code && code <= 0xcf1b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE KYEO
	                                                    if (0xcf1c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcf54) {
	                                            if (code < 0xcf38) {
	                                                // Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
	                                                if (0xcf1d <= code && code <= 0xcf37) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcf39) {
	                                                    // Lo       HANGUL SYLLABLE KYE
	                                                    if (0xcf38 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
	                                                    if (0xcf39 <= code && code <= 0xcf53) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcf55) {
	                                                // Lo       HANGUL SYLLABLE KO
	                                                if (0xcf54 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcf70) {
	                                                    // Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
	                                                    if (0xcf55 <= code && code <= 0xcf6f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE KWA
	                                                    if (0xcf70 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xd0a4) {
	                                if (code < 0xcffd) {
	                                    if (code < 0xcfc4) {
	                                        if (code < 0xcf8d) {
	                                            if (code < 0xcf8c) {
	                                                // Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
	                                                if (0xcf71 <= code && code <= 0xcf8b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE KWAE
	                                                if (0xcf8c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcfa8) {
	                                                // Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
	                                                if (0xcf8d <= code && code <= 0xcfa7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcfa9) {
	                                                    // Lo       HANGUL SYLLABLE KOE
	                                                    if (0xcfa8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
	                                                    if (0xcfa9 <= code && code <= 0xcfc3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xcfe0) {
	                                            if (code < 0xcfc5) {
	                                                // Lo       HANGUL SYLLABLE KYO
	                                                if (0xcfc4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
	                                                if (0xcfc5 <= code && code <= 0xcfdf) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xcfe1) {
	                                                // Lo       HANGUL SYLLABLE KU
	                                                if (0xcfe0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xcffc) {
	                                                    // Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
	                                                    if (0xcfe1 <= code && code <= 0xcffb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE KWEO
	                                                    if (0xcffc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd050) {
	                                        if (code < 0xd019) {
	                                            if (code < 0xd018) {
	                                                // Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
	                                                if (0xcffd <= code && code <= 0xd017) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE KWE
	                                                if (0xd018 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd034) {
	                                                // Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
	                                                if (0xd019 <= code && code <= 0xd033) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd035) {
	                                                    // Lo       HANGUL SYLLABLE KWI
	                                                    if (0xd034 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
	                                                    if (0xd035 <= code && code <= 0xd04f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd06d) {
	                                            if (code < 0xd051) {
	                                                // Lo       HANGUL SYLLABLE KYU
	                                                if (0xd050 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd06c) {
	                                                    // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
	                                                    if (0xd051 <= code && code <= 0xd06b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE KEU
	                                                    if (0xd06c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd088) {
	                                                // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
	                                                if (0xd06d <= code && code <= 0xd087) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd089) {
	                                                    // Lo       HANGUL SYLLABLE KYI
	                                                    if (0xd088 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
	                                                    if (0xd089 <= code && code <= 0xd0a3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xd131) {
	                                    if (code < 0xd0dd) {
	                                        if (code < 0xd0c0) {
	                                            if (code < 0xd0a5) {
	                                                // Lo       HANGUL SYLLABLE KI
	                                                if (0xd0a4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
	                                                if (0xd0a5 <= code && code <= 0xd0bf) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd0c1) {
	                                                // Lo       HANGUL SYLLABLE TA
	                                                if (0xd0c0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd0dc) {
	                                                    // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
	                                                    if (0xd0c1 <= code && code <= 0xd0db) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE TAE
	                                                    if (0xd0dc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd114) {
	                                            if (code < 0xd0f8) {
	                                                // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
	                                                if (0xd0dd <= code && code <= 0xd0f7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd0f9) {
	                                                    // Lo       HANGUL SYLLABLE TYA
	                                                    if (0xd0f8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
	                                                    if (0xd0f9 <= code && code <= 0xd113) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd115) {
	                                                // Lo       HANGUL SYLLABLE TYAE
	                                                if (0xd114 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd130) {
	                                                    // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
	                                                    if (0xd115 <= code && code <= 0xd12f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE TEO
	                                                    if (0xd130 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd184) {
	                                        if (code < 0xd14d) {
	                                            if (code < 0xd14c) {
	                                                // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
	                                                if (0xd131 <= code && code <= 0xd14b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE TE
	                                                if (0xd14c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd168) {
	                                                // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
	                                                if (0xd14d <= code && code <= 0xd167) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd169) {
	                                                    // Lo       HANGUL SYLLABLE TYEO
	                                                    if (0xd168 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
	                                                    if (0xd169 <= code && code <= 0xd183) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd1a1) {
	                                            if (code < 0xd185) {
	                                                // Lo       HANGUL SYLLABLE TYE
	                                                if (0xd184 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd1a0) {
	                                                    // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
	                                                    if (0xd185 <= code && code <= 0xd19f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE TO
	                                                    if (0xd1a0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd1bc) {
	                                                // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
	                                                if (0xd1a1 <= code && code <= 0xd1bb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd1bd) {
	                                                    // Lo       HANGUL SYLLABLE TWA
	                                                    if (0xd1bc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
	                                                    if (0xd1bd <= code && code <= 0xd1d7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            else {
	                if (code < 0x1133b) {
	                    if (code < 0xd671) {
	                        if (code < 0xd424) {
	                            if (code < 0xd2f1) {
	                                if (code < 0xd264) {
	                                    if (code < 0xd211) {
	                                        if (code < 0xd1f4) {
	                                            if (code < 0xd1d9) {
	                                                // Lo       HANGUL SYLLABLE TWAE
	                                                if (0xd1d8 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
	                                                if (0xd1d9 <= code && code <= 0xd1f3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd1f5) {
	                                                // Lo       HANGUL SYLLABLE TOE
	                                                if (0xd1f4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd210) {
	                                                    // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
	                                                    if (0xd1f5 <= code && code <= 0xd20f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE TYO
	                                                    if (0xd210 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd22d) {
	                                            if (code < 0xd22c) {
	                                                // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
	                                                if (0xd211 <= code && code <= 0xd22b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE TU
	                                                if (0xd22c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd248) {
	                                                // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
	                                                if (0xd22d <= code && code <= 0xd247) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd249) {
	                                                    // Lo       HANGUL SYLLABLE TWEO
	                                                    if (0xd248 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
	                                                    if (0xd249 <= code && code <= 0xd263) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd29d) {
	                                        if (code < 0xd280) {
	                                            if (code < 0xd265) {
	                                                // Lo       HANGUL SYLLABLE TWE
	                                                if (0xd264 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
	                                                if (0xd265 <= code && code <= 0xd27f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd281) {
	                                                // Lo       HANGUL SYLLABLE TWI
	                                                if (0xd280 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd29c) {
	                                                    // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
	                                                    if (0xd281 <= code && code <= 0xd29b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE TYU
	                                                    if (0xd29c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd2d4) {
	                                            if (code < 0xd2b8) {
	                                                // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
	                                                if (0xd29d <= code && code <= 0xd2b7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd2b9) {
	                                                    // Lo       HANGUL SYLLABLE TEU
	                                                    if (0xd2b8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
	                                                    if (0xd2b9 <= code && code <= 0xd2d3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd2d5) {
	                                                // Lo       HANGUL SYLLABLE TYI
	                                                if (0xd2d4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd2f0) {
	                                                    // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
	                                                    if (0xd2d5 <= code && code <= 0xd2ef) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE TI
	                                                    if (0xd2f0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xd37d) {
	                                    if (code < 0xd344) {
	                                        if (code < 0xd30d) {
	                                            if (code < 0xd30c) {
	                                                // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
	                                                if (0xd2f1 <= code && code <= 0xd30b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE PA
	                                                if (0xd30c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd328) {
	                                                // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
	                                                if (0xd30d <= code && code <= 0xd327) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd329) {
	                                                    // Lo       HANGUL SYLLABLE PAE
	                                                    if (0xd328 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
	                                                    if (0xd329 <= code && code <= 0xd343) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd360) {
	                                            if (code < 0xd345) {
	                                                // Lo       HANGUL SYLLABLE PYA
	                                                if (0xd344 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
	                                                if (0xd345 <= code && code <= 0xd35f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd361) {
	                                                // Lo       HANGUL SYLLABLE PYAE
	                                                if (0xd360 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd37c) {
	                                                    // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
	                                                    if (0xd361 <= code && code <= 0xd37b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE PEO
	                                                    if (0xd37c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd3d0) {
	                                        if (code < 0xd399) {
	                                            if (code < 0xd398) {
	                                                // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
	                                                if (0xd37d <= code && code <= 0xd397) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE PE
	                                                if (0xd398 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd3b4) {
	                                                // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
	                                                if (0xd399 <= code && code <= 0xd3b3) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd3b5) {
	                                                    // Lo       HANGUL SYLLABLE PYEO
	                                                    if (0xd3b4 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
	                                                    if (0xd3b5 <= code && code <= 0xd3cf) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd3ed) {
	                                            if (code < 0xd3d1) {
	                                                // Lo       HANGUL SYLLABLE PYE
	                                                if (0xd3d0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd3ec) {
	                                                    // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
	                                                    if (0xd3d1 <= code && code <= 0xd3eb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE PO
	                                                    if (0xd3ec === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd408) {
	                                                // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
	                                                if (0xd3ed <= code && code <= 0xd407) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd409) {
	                                                    // Lo       HANGUL SYLLABLE PWA
	                                                    if (0xd408 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
	                                                    if (0xd409 <= code && code <= 0xd423) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0xd53d) {
	                                if (code < 0xd4b0) {
	                                    if (code < 0xd45d) {
	                                        if (code < 0xd440) {
	                                            if (code < 0xd425) {
	                                                // Lo       HANGUL SYLLABLE PWAE
	                                                if (0xd424 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
	                                                if (0xd425 <= code && code <= 0xd43f) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd441) {
	                                                // Lo       HANGUL SYLLABLE POE
	                                                if (0xd440 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd45c) {
	                                                    // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
	                                                    if (0xd441 <= code && code <= 0xd45b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE PYO
	                                                    if (0xd45c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd479) {
	                                            if (code < 0xd478) {
	                                                // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
	                                                if (0xd45d <= code && code <= 0xd477) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE PU
	                                                if (0xd478 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd494) {
	                                                // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
	                                                if (0xd479 <= code && code <= 0xd493) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd495) {
	                                                    // Lo       HANGUL SYLLABLE PWEO
	                                                    if (0xd494 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
	                                                    if (0xd495 <= code && code <= 0xd4af) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd4e9) {
	                                        if (code < 0xd4cc) {
	                                            if (code < 0xd4b1) {
	                                                // Lo       HANGUL SYLLABLE PWE
	                                                if (0xd4b0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
	                                                if (0xd4b1 <= code && code <= 0xd4cb) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd4cd) {
	                                                // Lo       HANGUL SYLLABLE PWI
	                                                if (0xd4cc === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd4e8) {
	                                                    // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
	                                                    if (0xd4cd <= code && code <= 0xd4e7) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE PYU
	                                                    if (0xd4e8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd520) {
	                                            if (code < 0xd504) {
	                                                // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
	                                                if (0xd4e9 <= code && code <= 0xd503) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd505) {
	                                                    // Lo       HANGUL SYLLABLE PEU
	                                                    if (0xd504 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
	                                                    if (0xd505 <= code && code <= 0xd51f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd521) {
	                                                // Lo       HANGUL SYLLABLE PYI
	                                                if (0xd520 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd53c) {
	                                                    // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
	                                                    if (0xd521 <= code && code <= 0xd53b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE PI
	                                                    if (0xd53c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0xd5e4) {
	                                    if (code < 0xd590) {
	                                        if (code < 0xd559) {
	                                            if (code < 0xd558) {
	                                                // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
	                                                if (0xd53d <= code && code <= 0xd557) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE HA
	                                                if (0xd558 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd574) {
	                                                // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
	                                                if (0xd559 <= code && code <= 0xd573) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd575) {
	                                                    // Lo       HANGUL SYLLABLE HAE
	                                                    if (0xd574 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
	                                                    if (0xd575 <= code && code <= 0xd58f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd5ad) {
	                                            if (code < 0xd591) {
	                                                // Lo       HANGUL SYLLABLE HYA
	                                                if (0xd590 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd5ac) {
	                                                    // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
	                                                    if (0xd591 <= code && code <= 0xd5ab) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE HYAE
	                                                    if (0xd5ac === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd5c8) {
	                                                // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
	                                                if (0xd5ad <= code && code <= 0xd5c7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd5c9) {
	                                                    // Lo       HANGUL SYLLABLE HEO
	                                                    if (0xd5c8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
	                                                    if (0xd5c9 <= code && code <= 0xd5e3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd61d) {
	                                        if (code < 0xd600) {
	                                            if (code < 0xd5e5) {
	                                                // Lo       HANGUL SYLLABLE HE
	                                                if (0xd5e4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
	                                                if (0xd5e5 <= code && code <= 0xd5ff) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd601) {
	                                                // Lo       HANGUL SYLLABLE HYEO
	                                                if (0xd600 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd61c) {
	                                                    // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
	                                                    if (0xd601 <= code && code <= 0xd61b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE HYE
	                                                    if (0xd61c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd654) {
	                                            if (code < 0xd638) {
	                                                // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
	                                                if (0xd61d <= code && code <= 0xd637) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd639) {
	                                                    // Lo       HANGUL SYLLABLE HO
	                                                    if (0xd638 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
	                                                    if (0xd639 <= code && code <= 0xd653) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd655) {
	                                                // Lo       HANGUL SYLLABLE HWA
	                                                if (0xd654 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd670) {
	                                                    // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
	                                                    if (0xd655 <= code && code <= 0xd66f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE HWAE
	                                                    if (0xd670 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x11000) {
	                            if (code < 0xd7b0) {
	                                if (code < 0xd6fd) {
	                                    if (code < 0xd6c4) {
	                                        if (code < 0xd68d) {
	                                            if (code < 0xd68c) {
	                                                // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
	                                                if (0xd671 <= code && code <= 0xd68b) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE HOE
	                                                if (0xd68c === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd6a8) {
	                                                // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
	                                                if (0xd68d <= code && code <= 0xd6a7) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd6a9) {
	                                                    // Lo       HANGUL SYLLABLE HYO
	                                                    if (0xd6a8 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
	                                                    if (0xd6a9 <= code && code <= 0xd6c3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd6e0) {
	                                            if (code < 0xd6c5) {
	                                                // Lo       HANGUL SYLLABLE HU
	                                                if (0xd6c4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
	                                                if (0xd6c5 <= code && code <= 0xd6df) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd6e1) {
	                                                // Lo       HANGUL SYLLABLE HWEO
	                                                if (0xd6e0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd6fc) {
	                                                    // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
	                                                    if (0xd6e1 <= code && code <= 0xd6fb) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE HWE
	                                                    if (0xd6fc === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0xd750) {
	                                        if (code < 0xd719) {
	                                            if (code < 0xd718) {
	                                                // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
	                                                if (0xd6fd <= code && code <= 0xd717) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                // Lo       HANGUL SYLLABLE HWI
	                                                if (0xd718 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd734) {
	                                                // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
	                                                if (0xd719 <= code && code <= 0xd733) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd735) {
	                                                    // Lo       HANGUL SYLLABLE HYU
	                                                    if (0xd734 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
	                                                    if (0xd735 <= code && code <= 0xd74f) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xd76d) {
	                                            if (code < 0xd751) {
	                                                // Lo       HANGUL SYLLABLE HEU
	                                                if (0xd750 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.LV;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd76c) {
	                                                    // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
	                                                    if (0xd751 <= code && code <= 0xd76b) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo       HANGUL SYLLABLE HYI
	                                                    if (0xd76c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xd788) {
	                                                // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
	                                                if (0xd76d <= code && code <= 0xd787) {
	                                                    return boundaries_1.CLUSTER_BREAK.LVT;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xd789) {
	                                                    // Lo       HANGUL SYLLABLE HI
	                                                    if (0xd788 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.LV;
	                                                    }
	                                                }
	                                                else {
	                                                    // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
	                                                    if (0xd789 <= code && code <= 0xd7a3) {
	                                                        return boundaries_1.CLUSTER_BREAK.LVT;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x10a01) {
	                                    if (code < 0xfeff) {
	                                        if (code < 0xfb1e) {
	                                            if (code < 0xd7cb) {
	                                                // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
	                                                if (0xd7b0 <= code && code <= 0xd7c6) {
	                                                    return boundaries_1.CLUSTER_BREAK.V;
	                                                }
	                                            }
	                                            else {
	                                                // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
	                                                if (0xd7cb <= code && code <= 0xd7fb) {
	                                                    return boundaries_1.CLUSTER_BREAK.T;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xfe00) {
	                                                // Mn       HEBREW POINT JUDEO-SPANISH VARIKA
	                                                if (0xfb1e === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xfe20) {
	                                                    // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
	                                                    if (0xfe00 <= code && code <= 0xfe0f) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
	                                                    if (0xfe20 <= code && code <= 0xfe2f) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x101fd) {
	                                            if (code < 0xff9e) {
	                                                // Cf       ZERO WIDTH NO-BREAK SPACE
	                                                if (0xfeff === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xfff0) {
	                                                    // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
	                                                    if (0xff9e <= code && code <= 0xff9f) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cn   [9] <reserved-FFF0>..<reserved-FFF8>
	                                                    // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
	                                                    if (0xfff0 <= code && code <= 0xfffb) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x102e0) {
	                                                // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
	                                                if (0x101fd === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x10376) {
	                                                    // Mn       COPTIC EPACT THOUSANDS MARK
	                                                    if (0x102e0 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
	                                                    if (0x10376 <= code && code <= 0x1037a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x10ae5) {
	                                        if (code < 0x10a0c) {
	                                            if (code < 0x10a05) {
	                                                // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
	                                                if (0x10a01 <= code && code <= 0x10a03) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
	                                                if (0x10a05 <= code && code <= 0x10a06) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x10a38) {
	                                                // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
	                                                if (0x10a0c <= code && code <= 0x10a0f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x10a3f) {
	                                                    // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
	                                                    if (0x10a38 <= code && code <= 0x10a3a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       KHAROSHTHI VIRAMA
	                                                    if (0x10a3f === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x10efd) {
	                                            if (code < 0x10d24) {
	                                                // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
	                                                if (0x10ae5 <= code && code <= 0x10ae6) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x10eab) {
	                                                    // Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI
	                                                    if (0x10d24 <= code && code <= 0x10d27) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK
	                                                    if (0x10eab <= code && code <= 0x10eac) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x10f46) {
	                                                // Mn   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA
	                                                if (0x10efd <= code && code <= 0x10eff) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x10f82) {
	                                                    // Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW
	                                                    if (0x10f46 <= code && code <= 0x10f50) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW
	                                                    if (0x10f82 <= code && code <= 0x10f85) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x11180) {
	                                if (code < 0x110b7) {
	                                    if (code < 0x11073) {
	                                        if (code < 0x11002) {
	                                            // Mc       BRAHMI SIGN CANDRABINDU
	                                            if (0x11000 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       BRAHMI SIGN ANUSVARA
	                                            if (0x11001 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11038) {
	                                                // Mc       BRAHMI SIGN VISARGA
	                                                if (0x11002 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11070) {
	                                                    // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
	                                                    if (0x11038 <= code && code <= 0x11046) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       BRAHMI SIGN OLD TAMIL VIRAMA
	                                                    if (0x11070 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x11082) {
	                                            if (code < 0x1107f) {
	                                                // Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O
	                                                if (0x11073 <= code && code <= 0x11074) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
	                                                if (0x1107f <= code && code <= 0x11081) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x110b0) {
	                                                // Mc       KAITHI SIGN VISARGA
	                                                if (0x11082 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x110b3) {
	                                                    // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
	                                                    if (0x110b0 <= code && code <= 0x110b2) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
	                                                    if (0x110b3 <= code && code <= 0x110b6) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11100) {
	                                        if (code < 0x110bd) {
	                                            if (code < 0x110b9) {
	                                                // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
	                                                if (0x110b7 <= code && code <= 0x110b8) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
	                                                if (0x110b9 <= code && code <= 0x110ba) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x110c2) {
	                                                // Cf       KAITHI NUMBER SIGN
	                                                if (0x110bd === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       KAITHI VOWEL SIGN VOCALIC R
	                                                if (0x110c2 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Cf       KAITHI NUMBER SIGN ABOVE
	                                                if (0x110cd === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1112d) {
	                                            if (code < 0x11127) {
	                                                // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
	                                                if (0x11100 <= code && code <= 0x11102) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1112c) {
	                                                    // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
	                                                    if (0x11127 <= code && code <= 0x1112b) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       CHAKMA VOWEL SIGN E
	                                                    if (0x1112c === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11145) {
	                                                // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
	                                                if (0x1112d <= code && code <= 0x11134) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11173) {
	                                                    // Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI
	                                                    if (0x11145 <= code && code <= 0x11146) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       MAHAJANI SIGN NUKTA
	                                                    if (0x11173 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x11232) {
	                                    if (code < 0x111c2) {
	                                        if (code < 0x111b3) {
	                                            if (code < 0x11182) {
	                                                // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
	                                                if (0x11180 <= code && code <= 0x11181) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       SHARADA SIGN VISARGA
	                                                if (0x11182 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x111b6) {
	                                                // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
	                                                if (0x111b3 <= code && code <= 0x111b5) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x111bf) {
	                                                    // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
	                                                    if (0x111b6 <= code && code <= 0x111be) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
	                                                    if (0x111bf <= code && code <= 0x111c0) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x111cf) {
	                                            if (code < 0x111c9) {
	                                                // Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
	                                                if (0x111c2 <= code && code <= 0x111c3) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x111ce) {
	                                                    // Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK
	                                                    if (0x111c9 <= code && code <= 0x111cc) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E
	                                                    if (0x111ce === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1122c) {
	                                                // Mn       SHARADA SIGN INVERTED CANDRABINDU
	                                                if (0x111cf === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1122f) {
	                                                    // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
	                                                    if (0x1122c <= code && code <= 0x1122e) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
	                                                    if (0x1122f <= code && code <= 0x11231) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11241) {
	                                        if (code < 0x11235) {
	                                            if (code < 0x11234) {
	                                                // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
	                                                if (0x11232 <= code && code <= 0x11233) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       KHOJKI SIGN ANUSVARA
	                                                if (0x11234 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11236) {
	                                                // Mc       KHOJKI SIGN VIRAMA
	                                                if (0x11235 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1123e) {
	                                                    // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
	                                                    if (0x11236 <= code && code <= 0x11237) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       KHOJKI SIGN SUKUN
	                                                    if (0x1123e === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x112e3) {
	                                            if (code < 0x112df) {
	                                                // Mn       KHOJKI VOWEL SIGN VOCALIC R
	                                                if (0x11241 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x112e0) {
	                                                    // Mn       KHUDAWADI SIGN ANUSVARA
	                                                    if (0x112df === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
	                                                    if (0x112e0 <= code && code <= 0x112e2) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11300) {
	                                                // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
	                                                if (0x112e3 <= code && code <= 0x112ea) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11302) {
	                                                    // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
	                                                    if (0x11300 <= code && code <= 0x11301) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
	                                                    if (0x11302 <= code && code <= 0x11303) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0x11a97) {
	                        if (code < 0x116ab) {
	                            if (code < 0x114b9) {
	                                if (code < 0x11370) {
	                                    if (code < 0x11347) {
	                                        if (code < 0x1133f) {
	                                            if (code < 0x1133e) {
	                                                // Mn   [2] COMBINING BINDU BELOW..GRANTHA SIGN NUKTA
	                                                if (0x1133b <= code && code <= 0x1133c) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       GRANTHA VOWEL SIGN AA
	                                                if (0x1133e === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11340) {
	                                                // Mc       GRANTHA VOWEL SIGN I
	                                                if (0x1133f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11341) {
	                                                    // Mn       GRANTHA VOWEL SIGN II
	                                                    if (0x11340 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
	                                                    if (0x11341 <= code && code <= 0x11344) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x11357) {
	                                            if (code < 0x1134b) {
	                                                // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
	                                                if (0x11347 <= code && code <= 0x11348) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
	                                                if (0x1134b <= code && code <= 0x1134d) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11362) {
	                                                // Mc       GRANTHA AU LENGTH MARK
	                                                if (0x11357 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11366) {
	                                                    // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
	                                                    if (0x11362 <= code && code <= 0x11363) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
	                                                    if (0x11366 <= code && code <= 0x1136c) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11445) {
	                                        if (code < 0x11438) {
	                                            if (code < 0x11435) {
	                                                // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
	                                                if (0x11370 <= code && code <= 0x11374) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
	                                                if (0x11435 <= code && code <= 0x11437) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11440) {
	                                                // Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
	                                                if (0x11438 <= code && code <= 0x1143f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11442) {
	                                                    // Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
	                                                    if (0x11440 <= code && code <= 0x11441) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
	                                                    if (0x11442 <= code && code <= 0x11444) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x114b0) {
	                                            if (code < 0x11446) {
	                                                // Mc       NEWA SIGN VISARGA
	                                                if (0x11445 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       NEWA SIGN NUKTA
	                                                if (0x11446 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mn       NEWA SANDHI MARK
	                                                if (0x1145e === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x114b1) {
	                                                // Mc       TIRHUTA VOWEL SIGN AA
	                                                if (0x114b0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x114b3) {
	                                                    // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
	                                                    if (0x114b1 <= code && code <= 0x114b2) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
	                                                    if (0x114b3 <= code && code <= 0x114b8) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x115b8) {
	                                    if (code < 0x114bf) {
	                                        if (code < 0x114bb) {
	                                            // Mc       TIRHUTA VOWEL SIGN E
	                                            if (0x114b9 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       TIRHUTA VOWEL SIGN SHORT E
	                                            if (0x114ba === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x114bd) {
	                                                // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
	                                                if (0x114bb <= code && code <= 0x114bc) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       TIRHUTA VOWEL SIGN SHORT O
	                                                if (0x114bd === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mc       TIRHUTA VOWEL SIGN AU
	                                                if (0x114be === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x115af) {
	                                            if (code < 0x114c1) {
	                                                // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
	                                                if (0x114bf <= code && code <= 0x114c0) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x114c2) {
	                                                    // Mc       TIRHUTA SIGN VISARGA
	                                                    if (0x114c1 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
	                                                    if (0x114c2 <= code && code <= 0x114c3) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x115b0) {
	                                                // Mc       SIDDHAM VOWEL SIGN AA
	                                                if (0x115af === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x115b2) {
	                                                    // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
	                                                    if (0x115b0 <= code && code <= 0x115b1) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
	                                                    if (0x115b2 <= code && code <= 0x115b5) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11630) {
	                                        if (code < 0x115be) {
	                                            if (code < 0x115bc) {
	                                                // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
	                                                if (0x115b8 <= code && code <= 0x115bb) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
	                                                if (0x115bc <= code && code <= 0x115bd) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x115bf) {
	                                                // Mc       SIDDHAM SIGN VISARGA
	                                                if (0x115be === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x115dc) {
	                                                    // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
	                                                    if (0x115bf <= code && code <= 0x115c0) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
	                                                    if (0x115dc <= code && code <= 0x115dd) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1163d) {
	                                            if (code < 0x11633) {
	                                                // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
	                                                if (0x11630 <= code && code <= 0x11632) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1163b) {
	                                                    // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
	                                                    if (0x11633 <= code && code <= 0x1163a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
	                                                    if (0x1163b <= code && code <= 0x1163c) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1163e) {
	                                                // Mn       MODI SIGN ANUSVARA
	                                                if (0x1163d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1163f) {
	                                                    // Mc       MODI SIGN VISARGA
	                                                    if (0x1163e === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
	                                                    if (0x1163f <= code && code <= 0x11640) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1193f) {
	                                if (code < 0x11727) {
	                                    if (code < 0x116b6) {
	                                        if (code < 0x116ad) {
	                                            // Mn       TAKRI SIGN ANUSVARA
	                                            if (0x116ab === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                            // Mc       TAKRI SIGN VISARGA
	                                            if (0x116ac === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x116ae) {
	                                                // Mn       TAKRI VOWEL SIGN AA
	                                                if (0x116ad === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x116b0) {
	                                                    // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
	                                                    if (0x116ae <= code && code <= 0x116af) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
	                                                    if (0x116b0 <= code && code <= 0x116b5) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1171d) {
	                                            // Mc       TAKRI SIGN VIRAMA
	                                            if (0x116b6 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       TAKRI SIGN NUKTA
	                                            if (0x116b7 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11722) {
	                                                // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
	                                                if (0x1171d <= code && code <= 0x1171f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11726) {
	                                                    // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
	                                                    if (0x11722 <= code && code <= 0x11725) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc       AHOM VOWEL SIGN E
	                                                    if (0x11726 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11930) {
	                                        if (code < 0x1182f) {
	                                            if (code < 0x1182c) {
	                                                // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
	                                                if (0x11727 <= code && code <= 0x1172b) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II
	                                                if (0x1182c <= code && code <= 0x1182e) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11838) {
	                                                // Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA
	                                                if (0x1182f <= code && code <= 0x11837) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11839) {
	                                                    // Mc       DOGRA SIGN VISARGA
	                                                    if (0x11838 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA
	                                                    if (0x11839 <= code && code <= 0x1183a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1193b) {
	                                            if (code < 0x11931) {
	                                                // Mc       DIVES AKURU VOWEL SIGN AA
	                                                if (0x11930 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11937) {
	                                                    // Mc   [5] DIVES AKURU VOWEL SIGN I..DIVES AKURU VOWEL SIGN E
	                                                    if (0x11931 <= code && code <= 0x11935) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O
	                                                    if (0x11937 <= code && code <= 0x11938) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1193d) {
	                                                // Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU
	                                                if (0x1193b <= code && code <= 0x1193c) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       DIVES AKURU SIGN HALANTA
	                                                if (0x1193d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       DIVES AKURU VIRAMA
	                                                if (0x1193e === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x11a01) {
	                                    if (code < 0x119d1) {
	                                        if (code < 0x11941) {
	                                            // Lo       DIVES AKURU PREFIXED NASAL SIGN
	                                            if (0x1193f === code) {
	                                                return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                            }
	                                            // Mc       DIVES AKURU MEDIAL YA
	                                            if (0x11940 === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11942) {
	                                                // Lo       DIVES AKURU INITIAL RA
	                                                if (0x11941 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       DIVES AKURU MEDIAL RA
	                                                if (0x11942 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       DIVES AKURU SIGN NUKTA
	                                                if (0x11943 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x119dc) {
	                                            if (code < 0x119d4) {
	                                                // Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II
	                                                if (0x119d1 <= code && code <= 0x119d3) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x119da) {
	                                                    // Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR
	                                                    if (0x119d4 <= code && code <= 0x119d7) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI
	                                                    if (0x119da <= code && code <= 0x119db) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x119e0) {
	                                                // Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA
	                                                if (0x119dc <= code && code <= 0x119df) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn       NANDINAGARI SIGN VIRAMA
	                                                if (0x119e0 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E
	                                                if (0x119e4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11a47) {
	                                        if (code < 0x11a39) {
	                                            if (code < 0x11a33) {
	                                                // Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK
	                                                if (0x11a01 <= code && code <= 0x11a0a) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
	                                                if (0x11a33 <= code && code <= 0x11a38) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11a3a) {
	                                                // Mc       ZANABAZAR SQUARE SIGN VISARGA
	                                                if (0x11a39 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11a3b) {
	                                                    // Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
	                                                    if (0x11a3a === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
	                                                    if (0x11a3b <= code && code <= 0x11a3e) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x11a59) {
	                                            if (code < 0x11a51) {
	                                                // Mn       ZANABAZAR SQUARE SUBJOINER
	                                                if (0x11a47 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11a57) {
	                                                    // Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
	                                                    if (0x11a51 <= code && code <= 0x11a56) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
	                                                    if (0x11a57 <= code && code <= 0x11a58) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11a84) {
	                                                // Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
	                                                if (0x11a59 <= code && code <= 0x11a5b) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11a8a) {
	                                                    // Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA
	                                                    if (0x11a84 <= code && code <= 0x11a89) {
	                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
	                                                    if (0x11a8a <= code && code <= 0x11a96) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x16f51) {
	                            if (code < 0x11d90) {
	                                if (code < 0x11cb1) {
	                                    if (code < 0x11c3e) {
	                                        if (code < 0x11c2f) {
	                                            if (code < 0x11a98) {
	                                                // Mc       SOYOMBO SIGN VISARGA
	                                                if (0x11a97 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
	                                                if (0x11a98 <= code && code <= 0x11a99) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11c30) {
	                                                // Mc       BHAIKSUKI VOWEL SIGN AA
	                                                if (0x11c2f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11c38) {
	                                                    // Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
	                                                    if (0x11c30 <= code && code <= 0x11c36) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
	                                                    if (0x11c38 <= code && code <= 0x11c3d) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x11c92) {
	                                            // Mc       BHAIKSUKI SIGN VISARGA
	                                            if (0x11c3e === code) {
	                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                            }
	                                            // Mn       BHAIKSUKI SIGN VIRAMA
	                                            if (0x11c3f === code) {
	                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11ca9) {
	                                                // Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
	                                                if (0x11c92 <= code && code <= 0x11ca7) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11caa) {
	                                                    // Mc       MARCHEN SUBJOINED LETTER YA
	                                                    if (0x11ca9 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
	                                                    if (0x11caa <= code && code <= 0x11cb0) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x11d3a) {
	                                        if (code < 0x11cb4) {
	                                            if (code < 0x11cb2) {
	                                                // Mc       MARCHEN VOWEL SIGN I
	                                                if (0x11cb1 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
	                                                if (0x11cb2 <= code && code <= 0x11cb3) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11cb5) {
	                                                // Mc       MARCHEN VOWEL SIGN O
	                                                if (0x11cb4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11d31) {
	                                                    // Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
	                                                    if (0x11cb5 <= code && code <= 0x11cb6) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
	                                                    if (0x11d31 <= code && code <= 0x11d36) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x11d46) {
	                                            if (code < 0x11d3c) {
	                                                // Mn       MASARAM GONDI VOWEL SIGN E
	                                                if (0x11d3a === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11d3f) {
	                                                    // Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
	                                                    if (0x11d3c <= code && code <= 0x11d3d) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
	                                                    if (0x11d3f <= code && code <= 0x11d45) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11d47) {
	                                                // Lo       MASARAM GONDI REPHA
	                                                if (0x11d46 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11d8a) {
	                                                    // Mn       MASARAM GONDI RA-KARA
	                                                    if (0x11d47 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU
	                                                    if (0x11d8a <= code && code <= 0x11d8e) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x11f36) {
	                                    if (code < 0x11ef3) {
	                                        if (code < 0x11d95) {
	                                            if (code < 0x11d93) {
	                                                // Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI
	                                                if (0x11d90 <= code && code <= 0x11d91) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU
	                                                if (0x11d93 <= code && code <= 0x11d94) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11d96) {
	                                                // Mn       GUNJALA GONDI SIGN ANUSVARA
	                                                if (0x11d95 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       GUNJALA GONDI SIGN VISARGA
	                                                if (0x11d96 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       GUNJALA GONDI VIRAMA
	                                                if (0x11d97 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x11f02) {
	                                            if (code < 0x11ef5) {
	                                                // Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U
	                                                if (0x11ef3 <= code && code <= 0x11ef4) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11f00) {
	                                                    // Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O
	                                                    if (0x11ef5 <= code && code <= 0x11ef6) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA
	                                                    if (0x11f00 <= code && code <= 0x11f01) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11f03) {
	                                                // Lo       KAWI SIGN REPHA
	                                                if (0x11f02 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x11f34) {
	                                                    // Mc       KAWI SIGN VISARGA
	                                                    if (0x11f03 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA
	                                                    if (0x11f34 <= code && code <= 0x11f35) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x13430) {
	                                        if (code < 0x11f40) {
	                                            if (code < 0x11f3e) {
	                                                // Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R
	                                                if (0x11f36 <= code && code <= 0x11f3a) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI
	                                                if (0x11f3e <= code && code <= 0x11f3f) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x11f41) {
	                                                // Mn       KAWI VOWEL SIGN EU
	                                                if (0x11f40 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       KAWI SIGN KILLER
	                                                if (0x11f41 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                                // Mn       KAWI CONJOINER
	                                                if (0x11f42 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x16af0) {
	                                            if (code < 0x13440) {
	                                                // Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE
	                                                if (0x13430 <= code && code <= 0x1343f) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x13447) {
	                                                    // Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY
	                                                    if (0x13440 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED
	                                                    if (0x13447 <= code && code <= 0x13455) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x16b30) {
	                                                // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
	                                                if (0x16af0 <= code && code <= 0x16af4) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x16f4f) {
	                                                    // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
	                                                    if (0x16b30 <= code && code <= 0x16b36) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       MIAO SIGN CONSONANT MODIFIER BAR
	                                                    if (0x16f4f === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1da84) {
	                                if (code < 0x1d167) {
	                                    if (code < 0x1bca0) {
	                                        if (code < 0x16fe4) {
	                                            if (code < 0x16f8f) {
	                                                // Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI
	                                                if (0x16f51 <= code && code <= 0x16f87) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
	                                                if (0x16f8f <= code && code <= 0x16f92) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x16ff0) {
	                                                // Mn       KHITAN SMALL SCRIPT FILLER
	                                                if (0x16fe4 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1bc9d) {
	                                                    // Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY
	                                                    if (0x16ff0 <= code && code <= 0x16ff1) {
	                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
	                                                    if (0x1bc9d <= code && code <= 0x1bc9e) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1cf30) {
	                                            if (code < 0x1cf00) {
	                                                // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
	                                                if (0x1bca0 <= code && code <= 0x1bca3) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                // Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT
	                                                if (0x1cf00 <= code && code <= 0x1cf2d) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1d165) {
	                                                // Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG
	                                                if (0x1cf30 <= code && code <= 0x1cf46) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       MUSICAL SYMBOL COMBINING STEM
	                                                if (0x1d165 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                                // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
	                                                if (0x1d166 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x1d185) {
	                                        if (code < 0x1d16e) {
	                                            if (code < 0x1d16d) {
	                                                // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
	                                                if (0x1d167 <= code && code <= 0x1d169) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
	                                                if (0x1d16d === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1d173) {
	                                                // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
	                                                if (0x1d16e <= code && code <= 0x1d172) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1d17b) {
	                                                    // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
	                                                    if (0x1d173 <= code && code <= 0x1d17a) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
	                                                    if (0x1d17b <= code && code <= 0x1d182) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1da00) {
	                                            if (code < 0x1d1aa) {
	                                                // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
	                                                if (0x1d185 <= code && code <= 0x1d18b) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1d242) {
	                                                    // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
	                                                    if (0x1d1aa <= code && code <= 0x1d1ad) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
	                                                    if (0x1d242 <= code && code <= 0x1d244) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1da3b) {
	                                                // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
	                                                if (0x1da00 <= code && code <= 0x1da36) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1da75) {
	                                                    // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
	                                                    if (0x1da3b <= code && code <= 0x1da6c) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
	                                                    if (0x1da75 === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                if (code < 0x1e2ec) {
	                                    if (code < 0x1e01b) {
	                                        if (code < 0x1daa1) {
	                                            if (code < 0x1da9b) {
	                                                // Mn       SIGNWRITING LOCATION HEAD NECK
	                                                if (0x1da84 === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
	                                                if (0x1da9b <= code && code <= 0x1da9f) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1e000) {
	                                                // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
	                                                if (0x1daa1 <= code && code <= 0x1daaf) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1e008) {
	                                                    // Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
	                                                    if (0x1e000 <= code && code <= 0x1e006) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
	                                                    if (0x1e008 <= code && code <= 0x1e018) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0x1e08f) {
	                                            if (code < 0x1e023) {
	                                                // Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
	                                                if (0x1e01b <= code && code <= 0x1e021) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1e026) {
	                                                    // Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
	                                                    if (0x1e023 <= code && code <= 0x1e024) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
	                                                    if (0x1e026 <= code && code <= 0x1e02a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1e130) {
	                                                // Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
	                                                if (0x1e08f === code) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1e2ae) {
	                                                    // Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D
	                                                    if (0x1e130 <= code && code <= 0x1e136) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Mn       TOTO SIGN RISING TONE
	                                                    if (0x1e2ae === code) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                                else {
	                                    if (code < 0x1f3fb) {
	                                        if (code < 0x1e8d0) {
	                                            if (code < 0x1e4ec) {
	                                                // Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI
	                                                if (0x1e2ec <= code && code <= 0x1e2ef) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                // Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH
	                                                if (0x1e4ec <= code && code <= 0x1e4ef) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0x1e944) {
	                                                // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
	                                                if (0x1e8d0 <= code && code <= 0x1e8d6) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0x1f1e6) {
	                                                    // Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
	                                                    if (0x1e944 <= code && code <= 0x1e94a) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
	                                                    if (0x1f1e6 <= code && code <= 0x1f1ff) {
	                                                        return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        if (code < 0xe0080) {
	                                            if (code < 0xe0000) {
	                                                // Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
	                                                if (0x1f3fb <= code && code <= 0x1f3ff) {
	                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xe0020) {
	                                                    // Cn       <reserved-E0000>
	                                                    // Cf       LANGUAGE TAG
	                                                    // Cn  [30] <reserved-E0002>..<reserved-E001F>
	                                                    if (0xe0000 <= code && code <= 0xe001f) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cf  [96] TAG SPACE..CANCEL TAG
	                                                    if (0xe0020 <= code && code <= 0xe007f) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            if (code < 0xe0100) {
	                                                // Cn [128] <reserved-E0080>..<reserved-E00FF>
	                                                if (0xe0080 <= code && code <= 0xe00ff) {
	                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                }
	                                            }
	                                            else {
	                                                if (code < 0xe01f0) {
	                                                    // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
	                                                    if (0xe0100 <= code && code <= 0xe01ef) {
	                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
	                                                    }
	                                                }
	                                                else {
	                                                    // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
	                                                    if (0xe01f0 <= code && code <= 0xe0fff) {
	                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        // unlisted code points are treated as a break property of "Other"
	        return boundaries_1.CLUSTER_BREAK.OTHER;
	    }
	    /**
	     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
	     * @param code {number} Unicode code point
	     * @returns {number}
	     */
	    static getEmojiProperty(code) {
	        // emoji property taken from:
	        // https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt
	        // and generated by
	        // node ./scripts/generate-emoji-extended-pictographic.js
	        if (code < 0x27b0) {
	            if (code < 0x2600) {
	                if (code < 0x2328) {
	                    if (code < 0x2122) {
	                        if (code < 0x203c) {
	                            // E0.6   [1] (©️)       copyright
	                            if (0xa9 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E0.6   [1] (®️)       registered
	                            if (0xae === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                        else {
	                            // E0.6   [1] (‼️)       double exclamation mark
	                            if (0x203c === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E0.6   [1] (⁉️)       exclamation question mark
	                            if (0x2049 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x2194) {
	                            // E0.6   [1] (™️)       trade mark
	                            if (0x2122 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E0.6   [1] (ℹ️)       information
	                            if (0x2139 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                        else {
	                            if (code < 0x21a9) {
	                                // E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow
	                                if (0x2194 <= code && code <= 0x2199) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x231a) {
	                                    // E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right
	                                    if (0x21a9 <= code && code <= 0x21aa) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.6   [2] (⌚..⌛)    watch..hourglass done
	                                    if (0x231a <= code && code <= 0x231b) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0x24c2) {
	                        if (code < 0x23cf) {
	                            // E1.0   [1] (⌨️)       keyboard
	                            if (0x2328 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E0.0   [1] (⎈)       HELM SYMBOL
	                            if (0x2388 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                        else {
	                            if (code < 0x23e9) {
	                                // E1.0   [1] (⏏️)       eject button
	                                if (0x23cf === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x23f8) {
	                                    // E0.6   [4] (⏩..⏬)    fast-forward button..fast down button
	                                    // E0.7   [2] (⏭️..⏮️)    next track button..last track button
	                                    // E1.0   [1] (⏯️)       play or pause button
	                                    // E0.6   [1] (⏰)       alarm clock
	                                    // E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock
	                                    // E0.6   [1] (⏳)       hourglass not done
	                                    if (0x23e9 <= code && code <= 0x23f3) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.7   [3] (⏸️..⏺️)    pause button..record button
	                                    if (0x23f8 <= code && code <= 0x23fa) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x25b6) {
	                            if (code < 0x25aa) {
	                                // E0.6   [1] (Ⓜ️)       circled M
	                                if (0x24c2 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [2] (▪️..▫️)    black small square..white small square
	                                if (0x25aa <= code && code <= 0x25ab) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x25c0) {
	                                // E0.6   [1] (▶️)       play button
	                                if (0x25b6 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x25fb) {
	                                    // E0.6   [1] (◀️)       reverse button
	                                    if (0x25c0 === code) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.6   [4] (◻️..◾)    white medium square..black medium-small square
	                                    if (0x25fb <= code && code <= 0x25fe) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            else {
	                if (code < 0x2733) {
	                    if (code < 0x2714) {
	                        if (code < 0x2614) {
	                            if (code < 0x2607) {
	                                // E0.6   [2] (☀️..☁️)    sun..cloud
	                                // E0.7   [2] (☂️..☃️)    umbrella..snowman
	                                // E1.0   [1] (☄️)       comet
	                                // E0.0   [1] (★)       BLACK STAR
	                                if (0x2600 <= code && code <= 0x2605) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.0   [7] (☇..☍)    LIGHTNING..OPPOSITION
	                                // E0.6   [1] (☎️)       telephone
	                                // E0.0   [2] (☏..☐)    WHITE TELEPHONE..BALLOT BOX
	                                // E0.6   [1] (☑️)       check box with check
	                                // E0.0   [1] (☒)       BALLOT BOX WITH X
	                                if (0x2607 <= code && code <= 0x2612) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x2690) {
	                                // E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage
	                                // E0.0   [2] (☖..☗)    WHITE SHOGI PIECE..BLACK SHOGI PIECE
	                                // E1.0   [1] (☘️)       shamrock
	                                // E0.0   [4] (☙..☜)    REVERSED ROTATED FLORAL HEART BULLET..WHITE LEFT POINTING INDEX
	                                // E0.6   [1] (☝️)       index pointing up
	                                // E0.0   [2] (☞..☟)    WHITE RIGHT POINTING INDEX..WHITE DOWN POINTING INDEX
	                                // E1.0   [1] (☠️)       skull and crossbones
	                                // E0.0   [1] (☡)       CAUTION SIGN
	                                // E1.0   [2] (☢️..☣️)    radioactive..biohazard
	                                // E0.0   [2] (☤..☥)    CADUCEUS..ANKH
	                                // E1.0   [1] (☦️)       orthodox cross
	                                // E0.0   [3] (☧..☩)    CHI RHO..CROSS OF JERUSALEM
	                                // E0.7   [1] (☪️)       star and crescent
	                                // E0.0   [3] (☫..☭)    FARSI SYMBOL..HAMMER AND SICKLE
	                                // E1.0   [1] (☮️)       peace symbol
	                                // E0.7   [1] (☯️)       yin yang
	                                // E0.0   [8] (☰..☷)    TRIGRAM FOR HEAVEN..TRIGRAM FOR EARTH
	                                // E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face
	                                // E0.6   [1] (☺️)       smiling face
	                                // E0.0   [5] (☻..☿)    BLACK SMILING FACE..MERCURY
	                                // E4.0   [1] (♀️)       female sign
	                                // E0.0   [1] (♁)       EARTH
	                                // E4.0   [1] (♂️)       male sign
	                                // E0.0   [5] (♃..♇)    JUPITER..PLUTO
	                                // E0.6  [12] (♈..♓)    Aries..Pisces
	                                // E0.0  [11] (♔..♞)    WHITE CHESS KING..BLACK CHESS KNIGHT
	                                // E11.0  [1] (♟️)       chess pawn
	                                // E0.6   [1] (♠️)       spade suit
	                                // E0.0   [2] (♡..♢)    WHITE HEART SUIT..WHITE DIAMOND SUIT
	                                // E0.6   [1] (♣️)       club suit
	                                // E0.0   [1] (♤)       WHITE SPADE SUIT
	                                // E0.6   [2] (♥️..♦️)    heart suit..diamond suit
	                                // E0.0   [1] (♧)       WHITE CLUB SUIT
	                                // E0.6   [1] (♨️)       hot springs
	                                // E0.0  [18] (♩..♺)    QUARTER NOTE..RECYCLING SYMBOL FOR GENERIC MATERIALS
	                                // E0.6   [1] (♻️)       recycling symbol
	                                // E0.0   [2] (♼..♽)    RECYCLED PAPER SYMBOL..PARTIALLY-RECYCLED PAPER SYMBOL
	                                // E11.0  [1] (♾️)       infinity
	                                // E0.6   [1] (♿)       wheelchair symbol
	                                // E0.0   [6] (⚀..⚅)    DIE FACE-1..DIE FACE-6
	                                if (0x2614 <= code && code <= 0x2685) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x2708) {
	                                    // E0.0   [2] (⚐..⚑)    WHITE FLAG..BLACK FLAG
	                                    // E1.0   [1] (⚒️)       hammer and pick
	                                    // E0.6   [1] (⚓)       anchor
	                                    // E1.0   [1] (⚔️)       crossed swords
	                                    // E4.0   [1] (⚕️)       medical symbol
	                                    // E1.0   [2] (⚖️..⚗️)    balance scale..alembic
	                                    // E0.0   [1] (⚘)       FLOWER
	                                    // E1.0   [1] (⚙️)       gear
	                                    // E0.0   [1] (⚚)       STAFF OF HERMES
	                                    // E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis
	                                    // E0.0   [3] (⚝..⚟)    OUTLINED WHITE STAR..THREE LINES CONVERGING LEFT
	                                    // E0.6   [2] (⚠️..⚡)    warning..high voltage
	                                    // E0.0   [5] (⚢..⚦)    DOUBLED FEMALE SIGN..MALE WITH STROKE SIGN
	                                    // E13.0  [1] (⚧️)       transgender symbol
	                                    // E0.0   [2] (⚨..⚩)    VERTICAL MALE WITH STROKE SIGN..HORIZONTAL MALE WITH STROKE SIGN
	                                    // E0.6   [2] (⚪..⚫)    white circle..black circle
	                                    // E0.0   [4] (⚬..⚯)    MEDIUM SMALL WHITE CIRCLE..UNMARRIED PARTNERSHIP SYMBOL
	                                    // E1.0   [2] (⚰️..⚱️)    coffin..funeral urn
	                                    // E0.0  [11] (⚲..⚼)    NEUTER..SESQUIQUADRATE
	                                    // E0.6   [2] (⚽..⚾)    soccer ball..baseball
	                                    // E0.0   [5] (⚿..⛃)    SQUARED KEY..BLACK DRAUGHTS KING
	                                    // E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud
	                                    // E0.0   [2] (⛆..⛇)    RAIN..BLACK SNOWMAN
	                                    // E0.7   [1] (⛈️)       cloud with lightning and rain
	                                    // E0.0   [5] (⛉..⛍)    TURNED WHITE SHOGI PIECE..DISABLED CAR
	                                    // E0.6   [1] (⛎)       Ophiuchus
	                                    // E0.7   [1] (⛏️)       pick
	                                    // E0.0   [1] (⛐)       CAR SLIDING
	                                    // E0.7   [1] (⛑️)       rescue worker’s helmet
	                                    // E0.0   [1] (⛒)       CIRCLED CROSSING LANES
	                                    // E0.7   [1] (⛓️)       chains
	                                    // E0.6   [1] (⛔)       no entry
	                                    // E0.0  [20] (⛕..⛨)    ALTERNATE ONE-WAY LEFT WAY TRAFFIC..BLACK CROSS ON SHIELD
	                                    // E0.7   [1] (⛩️)       shinto shrine
	                                    // E0.6   [1] (⛪)       church
	                                    // E0.0   [5] (⛫..⛯)    CASTLE..MAP SYMBOL FOR LIGHTHOUSE
	                                    // E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground
	                                    // E0.6   [2] (⛲..⛳)    fountain..flag in hole
	                                    // E0.7   [1] (⛴️)       ferry
	                                    // E0.6   [1] (⛵)       sailboat
	                                    // E0.0   [1] (⛶)       SQUARE FOUR CORNERS
	                                    // E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball
	                                    // E0.6   [1] (⛺)       tent
	                                    // E0.0   [2] (⛻..⛼)    JAPANESE BANK SYMBOL..HEADSTONE GRAVEYARD SYMBOL
	                                    // E0.6   [1] (⛽)       fuel pump
	                                    // E0.0   [4] (⛾..✁)    CUP ON BLACK SQUARE..UPPER BLADE SCISSORS
	                                    // E0.6   [1] (✂️)       scissors
	                                    // E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS
	                                    // E0.6   [1] (✅)       check mark button
	                                    if (0x2690 <= code && code <= 0x2705) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.6   [5] (✈️..✌️)    airplane..victory hand
	                                    // E0.7   [1] (✍️)       writing hand
	                                    // E0.0   [1] (✎)       LOWER RIGHT PENCIL
	                                    // E0.6   [1] (✏️)       pencil
	                                    // E0.0   [2] (✐..✑)    UPPER RIGHT PENCIL..WHITE NIB
	                                    // E0.6   [1] (✒️)       black nib
	                                    if (0x2708 <= code && code <= 0x2712) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x271d) {
	                            // E0.6   [1] (✔️)       check mark
	                            if (0x2714 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E0.6   [1] (✖️)       multiply
	                            if (0x2716 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                        else {
	                            if (code < 0x2721) {
	                                // E0.7   [1] (✝️)       latin cross
	                                if (0x271d === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.7   [1] (✡️)       star of David
	                                if (0x2721 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                                // E0.6   [1] (✨)       sparkles
	                                if (0x2728 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0x2753) {
	                        if (code < 0x2747) {
	                            if (code < 0x2744) {
	                                // E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star
	                                if (0x2733 <= code && code <= 0x2734) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [1] (❄️)       snowflake
	                                if (0x2744 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x274c) {
	                                // E0.6   [1] (❇️)       sparkle
	                                if (0x2747 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [1] (❌)       cross mark
	                                if (0x274c === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                                // E0.6   [1] (❎)       cross mark button
	                                if (0x274e === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x2763) {
	                            if (code < 0x2757) {
	                                // E0.6   [3] (❓..❕)    red question mark..white exclamation mark
	                                if (0x2753 <= code && code <= 0x2755) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [1] (❗)       red exclamation mark
	                                if (0x2757 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x2795) {
	                                // E1.0   [1] (❣️)       heart exclamation
	                                // E0.6   [1] (❤️)       red heart
	                                // E0.0   [3] (❥..❧)    ROTATED HEAVY BLACK HEART BULLET..ROTATED FLORAL HEART BULLET
	                                if (0x2763 <= code && code <= 0x2767) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x27a1) {
	                                    // E0.6   [3] (➕..➗)    plus..divide
	                                    if (0x2795 <= code && code <= 0x2797) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.6   [1] (➡️)       right arrow
	                                    if (0x27a1 === code) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        else {
	            if (code < 0x1f201) {
	                if (code < 0x3297) {
	                    if (code < 0x2b1b) {
	                        if (code < 0x2934) {
	                            // E0.6   [1] (➰)       curly loop
	                            if (0x27b0 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E1.0   [1] (➿)       double curly loop
	                            if (0x27bf === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                        else {
	                            if (code < 0x2b05) {
	                                // E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down
	                                if (0x2934 <= code && code <= 0x2935) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [3] (⬅️..⬇️)    left arrow..down arrow
	                                if (0x2b05 <= code && code <= 0x2b07) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x2b55) {
	                            if (code < 0x2b50) {
	                                // E0.6   [2] (⬛..⬜)    black large square..white large square
	                                if (0x2b1b <= code && code <= 0x2b1c) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [1] (⭐)       star
	                                if (0x2b50 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x3030) {
	                                // E0.6   [1] (⭕)       hollow red circle
	                                if (0x2b55 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [1] (〰️)       wavy dash
	                                if (0x3030 === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                                // E0.6   [1] (〽️)       part alternation mark
	                                if (0x303d === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0x1f16c) {
	                        if (code < 0x1f000) {
	                            // E0.6   [1] (㊗️)       Japanese “congratulations” button
	                            if (0x3297 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                            // E0.6   [1] (㊙️)       Japanese “secret” button
	                            if (0x3299 === code) {
	                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                            }
	                        }
	                        else {
	                            if (code < 0x1f10d) {
	                                // E0.0   [4] (🀀..🀃)    MAHJONG TILE EAST WIND..MAHJONG TILE NORTH WIND
	                                // E0.6   [1] (🀄)       mahjong red dragon
	                                // E0.0 [202] (🀅..🃎)    MAHJONG TILE GREEN DRAGON..PLAYING CARD KING OF DIAMONDS
	                                // E0.6   [1] (🃏)       joker
	                                // E0.0  [48] (🃐..🃿)    <reserved-1F0D0>..<reserved-1F0FF>
	                                if (0x1f000 <= code && code <= 0x1f0ff) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x1f12f) {
	                                    // E0.0   [3] (🄍..🄏)    CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH
	                                    if (0x1f10d <= code && code <= 0x1f10f) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.0   [1] (🄯)       COPYLEFT SYMBOL
	                                    if (0x1f12f === code) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x1f18e) {
	                            if (code < 0x1f17e) {
	                                // E0.0   [4] (🅬..🅯)    RAISED MR SIGN..CIRCLED HUMAN FIGURE
	                                // E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)
	                                if (0x1f16c <= code && code <= 0x1f171) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button
	                                if (0x1f17e <= code && code <= 0x1f17f) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1f191) {
	                                // E0.6   [1] (🆎)       AB button (blood type)
	                                if (0x1f18e === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x1f1ad) {
	                                    // E0.6  [10] (🆑..🆚)    CL button..VS button
	                                    if (0x1f191 <= code && code <= 0x1f19a) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.0  [57] (🆭..🇥)    MASK WORK SYMBOL..<reserved-1F1E5>
	                                    if (0x1f1ad <= code && code <= 0x1f1e5) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            else {
	                if (code < 0x1f7d5) {
	                    if (code < 0x1f249) {
	                        if (code < 0x1f22f) {
	                            if (code < 0x1f21a) {
	                                // E0.6   [2] (🈁..🈂️)    Japanese “here” button..Japanese “service charge” button
	                                // E0.0  [13] (🈃..🈏)    <reserved-1F203>..<reserved-1F20F>
	                                if (0x1f201 <= code && code <= 0x1f20f) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.6   [1] (🈚)       Japanese “free of charge” button
	                                if (0x1f21a === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1f232) {
	                                // E0.6   [1] (🈯)       Japanese “reserved” button
	                                if (0x1f22f === code) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x1f23c) {
	                                    // E0.6   [9] (🈲..🈺)    Japanese “prohibited” button..Japanese “open for business” button
	                                    if (0x1f232 <= code && code <= 0x1f23a) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.0   [4] (🈼..🈿)    <reserved-1F23C>..<reserved-1F23F>
	                                    if (0x1f23c <= code && code <= 0x1f23f) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x1f546) {
	                            if (code < 0x1f400) {
	                                // E0.0   [7] (🉉..🉏)    <reserved-1F249>..<reserved-1F24F>
	                                // E0.6   [2] (🉐..🉑)    Japanese “bargain” button..Japanese “acceptable” button
	                                // E0.0 [174] (🉒..🋿)    <reserved-1F252>..<reserved-1F2FF>
	                                // E0.6  [13] (🌀..🌌)    cyclone..milky way
	                                // E0.7   [2] (🌍..🌎)    globe showing Europe-Africa..globe showing Americas
	                                // E0.6   [1] (🌏)       globe showing Asia-Australia
	                                // E1.0   [1] (🌐)       globe with meridians
	                                // E0.6   [1] (🌑)       new moon
	                                // E1.0   [1] (🌒)       waxing crescent moon
	                                // E0.6   [3] (🌓..🌕)    first quarter moon..full moon
	                                // E1.0   [3] (🌖..🌘)    waning gibbous moon..waning crescent moon
	                                // E0.6   [1] (🌙)       crescent moon
	                                // E1.0   [1] (🌚)       new moon face
	                                // E0.6   [1] (🌛)       first quarter moon face
	                                // E0.7   [1] (🌜)       last quarter moon face
	                                // E1.0   [2] (🌝..🌞)    full moon face..sun with face
	                                // E0.6   [2] (🌟..🌠)    glowing star..shooting star
	                                // E0.7   [1] (🌡️)       thermometer
	                                // E0.0   [2] (🌢..🌣)    BLACK DROPLET..WHITE SUN
	                                // E0.7   [9] (🌤️..🌬️)    sun behind small cloud..wind face
	                                // E1.0   [3] (🌭..🌯)    hot dog..burrito
	                                // E0.6   [2] (🌰..🌱)    chestnut..seedling
	                                // E1.0   [2] (🌲..🌳)    evergreen tree..deciduous tree
	                                // E0.6   [2] (🌴..🌵)    palm tree..cactus
	                                // E0.7   [1] (🌶️)       hot pepper
	                                // E0.6  [20] (🌷..🍊)    tulip..tangerine
	                                // E1.0   [1] (🍋)       lemon
	                                // E0.6   [4] (🍌..🍏)    banana..green apple
	                                // E1.0   [1] (🍐)       pear
	                                // E0.6  [43] (🍑..🍻)    peach..clinking beer mugs
	                                // E1.0   [1] (🍼)       baby bottle
	                                // E0.7   [1] (🍽️)       fork and knife with plate
	                                // E1.0   [2] (🍾..🍿)    bottle with popping cork..popcorn
	                                // E0.6  [20] (🎀..🎓)    ribbon..graduation cap
	                                // E0.0   [2] (🎔..🎕)    HEART WITH TIP ON THE LEFT..BOUQUET OF FLOWERS
	                                // E0.7   [2] (🎖️..🎗️)    military medal..reminder ribbon
	                                // E0.0   [1] (🎘)       MUSICAL KEYBOARD WITH JACKS
	                                // E0.7   [3] (🎙️..🎛️)    studio microphone..control knobs
	                                // E0.0   [2] (🎜..🎝)    BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES
	                                // E0.7   [2] (🎞️..🎟️)    film frames..admission tickets
	                                // E0.6  [37] (🎠..🏄)    carousel horse..person surfing
	                                // E1.0   [1] (🏅)       sports medal
	                                // E0.6   [1] (🏆)       trophy
	                                // E1.0   [1] (🏇)       horse racing
	                                // E0.6   [1] (🏈)       american football
	                                // E1.0   [1] (🏉)       rugby football
	                                // E0.6   [1] (🏊)       person swimming
	                                // E0.7   [4] (🏋️..🏎️)    person lifting weights..racing car
	                                // E1.0   [5] (🏏..🏓)    cricket game..ping pong
	                                // E0.7  [12] (🏔️..🏟️)    snow-capped mountain..stadium
	                                // E0.6   [4] (🏠..🏣)    house..Japanese post office
	                                // E1.0   [1] (🏤)       post office
	                                // E0.6  [12] (🏥..🏰)    hospital..castle
	                                // E0.0   [2] (🏱..🏲)    WHITE PENNANT..BLACK PENNANT
	                                // E0.7   [1] (🏳️)       white flag
	                                // E1.0   [1] (🏴)       black flag
	                                // E0.7   [1] (🏵️)       rosette
	                                // E0.0   [1] (🏶)       BLACK ROSETTE
	                                // E0.7   [1] (🏷️)       label
	                                // E1.0   [3] (🏸..🏺)    badminton..amphora
	                                if (0x1f249 <= code && code <= 0x1f3fa) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E1.0   [8] (🐀..🐇)    rat..rabbit
	                                // E0.7   [1] (🐈)       cat
	                                // E1.0   [3] (🐉..🐋)    dragon..whale
	                                // E0.6   [3] (🐌..🐎)    snail..horse
	                                // E1.0   [2] (🐏..🐐)    ram..goat
	                                // E0.6   [2] (🐑..🐒)    ewe..monkey
	                                // E1.0   [1] (🐓)       rooster
	                                // E0.6   [1] (🐔)       chicken
	                                // E0.7   [1] (🐕)       dog
	                                // E1.0   [1] (🐖)       pig
	                                // E0.6  [19] (🐗..🐩)    boar..poodle
	                                // E1.0   [1] (🐪)       camel
	                                // E0.6  [20] (🐫..🐾)    two-hump camel..paw prints
	                                // E0.7   [1] (🐿️)       chipmunk
	                                // E0.6   [1] (👀)       eyes
	                                // E0.7   [1] (👁️)       eye
	                                // E0.6  [35] (👂..👤)    ear..bust in silhouette
	                                // E1.0   [1] (👥)       busts in silhouette
	                                // E0.6   [6] (👦..👫)    boy..woman and man holding hands
	                                // E1.0   [2] (👬..👭)    men holding hands..women holding hands
	                                // E0.6  [63] (👮..💬)    police officer..speech balloon
	                                // E1.0   [1] (💭)       thought balloon
	                                // E0.6   [8] (💮..💵)    white flower..dollar banknote
	                                // E1.0   [2] (💶..💷)    euro banknote..pound banknote
	                                // E0.6  [52] (💸..📫)    money with wings..closed mailbox with raised flag
	                                // E0.7   [2] (📬..📭)    open mailbox with raised flag..open mailbox with lowered flag
	                                // E0.6   [1] (📮)       postbox
	                                // E1.0   [1] (📯)       postal horn
	                                // E0.6   [5] (📰..📴)    newspaper..mobile phone off
	                                // E1.0   [1] (📵)       no mobile phones
	                                // E0.6   [2] (📶..📷)    antenna bars..camera
	                                // E1.0   [1] (📸)       camera with flash
	                                // E0.6   [4] (📹..📼)    video camera..videocassette
	                                // E0.7   [1] (📽️)       film projector
	                                // E0.0   [1] (📾)       PORTABLE STEREO
	                                // E1.0   [4] (📿..🔂)    prayer beads..repeat single button
	                                // E0.6   [1] (🔃)       clockwise vertical arrows
	                                // E1.0   [4] (🔄..🔇)    counterclockwise arrows button..muted speaker
	                                // E0.7   [1] (🔈)       speaker low volume
	                                // E1.0   [1] (🔉)       speaker medium volume
	                                // E0.6  [11] (🔊..🔔)    speaker high volume..bell
	                                // E1.0   [1] (🔕)       bell with slash
	                                // E0.6  [22] (🔖..🔫)    bookmark..water pistol
	                                // E1.0   [2] (🔬..🔭)    microscope..telescope
	                                // E0.6  [16] (🔮..🔽)    crystal ball..downwards button
	                                if (0x1f400 <= code && code <= 0x1f53d) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1f680) {
	                                // E0.0   [3] (🕆..🕈)    WHITE LATIN CROSS..CELTIC CROSS
	                                // E0.7   [2] (🕉️..🕊️)    om..dove
	                                // E1.0   [4] (🕋..🕎)    kaaba..menorah
	                                // E0.0   [1] (🕏)       BOWL OF HYGIEIA
	                                // E0.6  [12] (🕐..🕛)    one o’clock..twelve o’clock
	                                // E0.7  [12] (🕜..🕧)    one-thirty..twelve-thirty
	                                // E0.0   [7] (🕨..🕮)    RIGHT SPEAKER..BOOK
	                                // E0.7   [2] (🕯️..🕰️)    candle..mantelpiece clock
	                                // E0.0   [2] (🕱..🕲)    BLACK SKULL AND CROSSBONES..NO PIRACY
	                                // E0.7   [7] (🕳️..🕹️)    hole..joystick
	                                // E3.0   [1] (🕺)       man dancing
	                                // E0.0  [12] (🕻..🖆)    LEFT HAND TELEPHONE RECEIVER..PEN OVER STAMPED ENVELOPE
	                                // E0.7   [1] (🖇️)       linked paperclips
	                                // E0.0   [2] (🖈..🖉)    BLACK PUSHPIN..LOWER LEFT PENCIL
	                                // E0.7   [4] (🖊️..🖍️)    pen..crayon
	                                // E0.0   [2] (🖎..🖏)    LEFT WRITING HAND..TURNED OK HAND SIGN
	                                // E0.7   [1] (🖐️)       hand with fingers splayed
	                                // E0.0   [4] (🖑..🖔)    REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND
	                                // E1.0   [2] (🖕..🖖)    middle finger..vulcan salute
	                                // E0.0  [13] (🖗..🖣)    WHITE DOWN POINTING LEFT HAND INDEX..BLACK DOWN POINTING BACKHAND INDEX
	                                // E3.0   [1] (🖤)       black heart
	                                // E0.7   [1] (🖥️)       desktop computer
	                                // E0.0   [2] (🖦..🖧)    KEYBOARD AND MOUSE..THREE NETWORKED COMPUTERS
	                                // E0.7   [1] (🖨️)       printer
	                                // E0.0   [8] (🖩..🖰)    POCKET CALCULATOR..TWO BUTTON MOUSE
	                                // E0.7   [2] (🖱️..🖲️)    computer mouse..trackball
	                                // E0.0   [9] (🖳..🖻)    OLD PERSONAL COMPUTER..DOCUMENT WITH PICTURE
	                                // E0.7   [1] (🖼️)       framed picture
	                                // E0.0   [5] (🖽..🗁)    FRAME WITH TILES..OPEN FOLDER
	                                // E0.7   [3] (🗂️..🗄️)    card index dividers..file cabinet
	                                // E0.0  [12] (🗅..🗐)    EMPTY NOTE..PAGES
	                                // E0.7   [3] (🗑️..🗓️)    wastebasket..spiral calendar
	                                // E0.0   [8] (🗔..🗛)    DESKTOP WINDOW..DECREASE FONT SIZE SYMBOL
	                                // E0.7   [3] (🗜️..🗞️)    clamp..rolled-up newspaper
	                                // E0.0   [2] (🗟..🗠)    PAGE WITH CIRCLED TEXT..STOCK CHART
	                                // E0.7   [1] (🗡️)       dagger
	                                // E0.0   [1] (🗢)       LIPS
	                                // E0.7   [1] (🗣️)       speaking head
	                                // E0.0   [4] (🗤..🗧)    THREE RAYS ABOVE..THREE RAYS RIGHT
	                                // E2.0   [1] (🗨️)       left speech bubble
	                                // E0.0   [6] (🗩..🗮)    RIGHT SPEECH BUBBLE..LEFT ANGER BUBBLE
	                                // E0.7   [1] (🗯️)       right anger bubble
	                                // E0.0   [3] (🗰..🗲)    MOOD BUBBLE..LIGHTNING MOOD
	                                // E0.7   [1] (🗳️)       ballot box with ballot
	                                // E0.0   [6] (🗴..🗹)    BALLOT SCRIPT X..BALLOT BOX WITH BOLD CHECK
	                                // E0.7   [1] (🗺️)       world map
	                                // E0.6   [5] (🗻..🗿)    mount fuji..moai
	                                // E1.0   [1] (😀)       grinning face
	                                // E0.6   [6] (😁..😆)    beaming face with smiling eyes..grinning squinting face
	                                // E1.0   [2] (😇..😈)    smiling face with halo..smiling face with horns
	                                // E0.6   [5] (😉..😍)    winking face..smiling face with heart-eyes
	                                // E1.0   [1] (😎)       smiling face with sunglasses
	                                // E0.6   [1] (😏)       smirking face
	                                // E0.7   [1] (😐)       neutral face
	                                // E1.0   [1] (😑)       expressionless face
	                                // E0.6   [3] (😒..😔)    unamused face..pensive face
	                                // E1.0   [1] (😕)       confused face
	                                // E0.6   [1] (😖)       confounded face
	                                // E1.0   [1] (😗)       kissing face
	                                // E0.6   [1] (😘)       face blowing a kiss
	                                // E1.0   [1] (😙)       kissing face with smiling eyes
	                                // E0.6   [1] (😚)       kissing face with closed eyes
	                                // E1.0   [1] (😛)       face with tongue
	                                // E0.6   [3] (😜..😞)    winking face with tongue..disappointed face
	                                // E1.0   [1] (😟)       worried face
	                                // E0.6   [6] (😠..😥)    angry face..sad but relieved face
	                                // E1.0   [2] (😦..😧)    frowning face with open mouth..anguished face
	                                // E0.6   [4] (😨..😫)    fearful face..tired face
	                                // E1.0   [1] (😬)       grimacing face
	                                // E0.6   [1] (😭)       loudly crying face
	                                // E1.0   [2] (😮..😯)    face with open mouth..hushed face
	                                // E0.6   [4] (😰..😳)    anxious face with sweat..flushed face
	                                // E1.0   [1] (😴)       sleeping face
	                                // E0.6   [1] (😵)       face with crossed-out eyes
	                                // E1.0   [1] (😶)       face without mouth
	                                // E0.6  [10] (😷..🙀)    face with medical mask..weary cat
	                                // E1.0   [4] (🙁..🙄)    slightly frowning face..face with rolling eyes
	                                // E0.6  [11] (🙅..🙏)    person gesturing NO..folded hands
	                                if (0x1f546 <= code && code <= 0x1f64f) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x1f774) {
	                                    // E0.6   [1] (🚀)       rocket
	                                    // E1.0   [2] (🚁..🚂)    helicopter..locomotive
	                                    // E0.6   [3] (🚃..🚅)    railway car..bullet train
	                                    // E1.0   [1] (🚆)       train
	                                    // E0.6   [1] (🚇)       metro
	                                    // E1.0   [1] (🚈)       light rail
	                                    // E0.6   [1] (🚉)       station
	                                    // E1.0   [2] (🚊..🚋)    tram..tram car
	                                    // E0.6   [1] (🚌)       bus
	                                    // E0.7   [1] (🚍)       oncoming bus
	                                    // E1.0   [1] (🚎)       trolleybus
	                                    // E0.6   [1] (🚏)       bus stop
	                                    // E1.0   [1] (🚐)       minibus
	                                    // E0.6   [3] (🚑..🚓)    ambulance..police car
	                                    // E0.7   [1] (🚔)       oncoming police car
	                                    // E0.6   [1] (🚕)       taxi
	                                    // E1.0   [1] (🚖)       oncoming taxi
	                                    // E0.6   [1] (🚗)       automobile
	                                    // E0.7   [1] (🚘)       oncoming automobile
	                                    // E0.6   [2] (🚙..🚚)    sport utility vehicle..delivery truck
	                                    // E1.0   [7] (🚛..🚡)    articulated lorry..aerial tramway
	                                    // E0.6   [1] (🚢)       ship
	                                    // E1.0   [1] (🚣)       person rowing boat
	                                    // E0.6   [2] (🚤..🚥)    speedboat..horizontal traffic light
	                                    // E1.0   [1] (🚦)       vertical traffic light
	                                    // E0.6   [7] (🚧..🚭)    construction..no smoking
	                                    // E1.0   [4] (🚮..🚱)    litter in bin sign..non-potable water
	                                    // E0.6   [1] (🚲)       bicycle
	                                    // E1.0   [3] (🚳..🚵)    no bicycles..person mountain biking
	                                    // E0.6   [1] (🚶)       person walking
	                                    // E1.0   [2] (🚷..🚸)    no pedestrians..children crossing
	                                    // E0.6   [6] (🚹..🚾)    men’s room..water closet
	                                    // E1.0   [1] (🚿)       shower
	                                    // E0.6   [1] (🛀)       person taking bath
	                                    // E1.0   [5] (🛁..🛅)    bathtub..left luggage
	                                    // E0.0   [5] (🛆..🛊)    TRIANGLE WITH ROUNDED CORNERS..GIRLS SYMBOL
	                                    // E0.7   [1] (🛋️)       couch and lamp
	                                    // E1.0   [1] (🛌)       person in bed
	                                    // E0.7   [3] (🛍️..🛏️)    shopping bags..bed
	                                    // E1.0   [1] (🛐)       place of worship
	                                    // E3.0   [2] (🛑..🛒)    stop sign..shopping cart
	                                    // E0.0   [2] (🛓..🛔)    STUPA..PAGODA
	                                    // E12.0  [1] (🛕)       hindu temple
	                                    // E13.0  [2] (🛖..🛗)    hut..elevator
	                                    // E0.0   [4] (🛘..🛛)    <reserved-1F6D8>..<reserved-1F6DB>
	                                    // E15.0  [1] (🛜)       wireless
	                                    // E14.0  [3] (🛝..🛟)    playground slide..ring buoy
	                                    // E0.7   [6] (🛠️..🛥️)    hammer and wrench..motor boat
	                                    // E0.0   [3] (🛦..🛨)    UP-POINTING MILITARY AIRPLANE..UP-POINTING SMALL AIRPLANE
	                                    // E0.7   [1] (🛩️)       small airplane
	                                    // E0.0   [1] (🛪)       NORTHEAST-POINTING AIRPLANE
	                                    // E1.0   [2] (🛫..🛬)    airplane departure..airplane arrival
	                                    // E0.0   [3] (🛭..🛯)    <reserved-1F6ED>..<reserved-1F6EF>
	                                    // E0.7   [1] (🛰️)       satellite
	                                    // E0.0   [2] (🛱..🛲)    ONCOMING FIRE ENGINE..DIESEL LOCOMOTIVE
	                                    // E0.7   [1] (🛳️)       passenger ship
	                                    // E3.0   [3] (🛴..🛶)    kick scooter..canoe
	                                    // E5.0   [2] (🛷..🛸)    sled..flying saucer
	                                    // E11.0  [1] (🛹)       skateboard
	                                    // E12.0  [1] (🛺)       auto rickshaw
	                                    // E13.0  [2] (🛻..🛼)    pickup truck..roller skate
	                                    // E0.0   [3] (🛽..🛿)    <reserved-1F6FD>..<reserved-1F6FF>
	                                    if (0x1f680 <= code && code <= 0x1f6ff) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.0  [12] (🝴..🝿)    LOT OF FORTUNE..ORCUS
	                                    if (0x1f774 <= code && code <= 0x1f77f) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (code < 0x1f8ae) {
	                        if (code < 0x1f848) {
	                            if (code < 0x1f80c) {
	                                // E0.0  [11] (🟕..🟟)    CIRCLED TRIANGLE..<reserved-1F7DF>
	                                // E12.0 [12] (🟠..🟫)    orange circle..brown square
	                                // E0.0   [4] (🟬..🟯)    <reserved-1F7EC>..<reserved-1F7EF>
	                                // E14.0  [1] (🟰)       heavy equals sign
	                                // E0.0  [15] (🟱..🟿)    <reserved-1F7F1>..<reserved-1F7FF>
	                                if (0x1f7d5 <= code && code <= 0x1f7ff) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E0.0   [4] (🠌..🠏)    <reserved-1F80C>..<reserved-1F80F>
	                                if (0x1f80c <= code && code <= 0x1f80f) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1f85a) {
	                                // E0.0   [8] (🡈..🡏)    <reserved-1F848>..<reserved-1F84F>
	                                if (0x1f848 <= code && code <= 0x1f84f) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x1f888) {
	                                    // E0.0   [6] (🡚..🡟)    <reserved-1F85A>..<reserved-1F85F>
	                                    if (0x1f85a <= code && code <= 0x1f85f) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.0   [8] (🢈..🢏)    <reserved-1F888>..<reserved-1F88F>
	                                    if (0x1f888 <= code && code <= 0x1f88f) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        if (code < 0x1f93c) {
	                            if (code < 0x1f90c) {
	                                // E0.0  [82] (🢮..🣿)    <reserved-1F8AE>..<reserved-1F8FF>
	                                if (0x1f8ae <= code && code <= 0x1f8ff) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                // E13.0  [1] (🤌)       pinched fingers
	                                // E12.0  [3] (🤍..🤏)    white heart..pinching hand
	                                // E1.0   [9] (🤐..🤘)    zipper-mouth face..sign of the horns
	                                // E3.0   [6] (🤙..🤞)    call me hand..crossed fingers
	                                // E5.0   [1] (🤟)       love-you gesture
	                                // E3.0   [8] (🤠..🤧)    cowboy hat face..sneezing face
	                                // E5.0   [8] (🤨..🤯)    face with raised eyebrow..exploding head
	                                // E3.0   [1] (🤰)       pregnant woman
	                                // E5.0   [2] (🤱..🤲)    breast-feeding..palms up together
	                                // E3.0   [8] (🤳..🤺)    selfie..person fencing
	                                if (0x1f90c <= code && code <= 0x1f93a) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                        }
	                        else {
	                            if (code < 0x1f947) {
	                                // E3.0   [3] (🤼..🤾)    people wrestling..person playing handball
	                                // E12.0  [1] (🤿)       diving mask
	                                // E3.0   [6] (🥀..🥅)    wilted flower..goal net
	                                if (0x1f93c <= code && code <= 0x1f945) {
	                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                }
	                            }
	                            else {
	                                if (code < 0x1fc00) {
	                                    // E3.0   [5] (🥇..🥋)    1st place medal..martial arts uniform
	                                    // E5.0   [1] (🥌)       curling stone
	                                    // E11.0  [3] (🥍..🥏)    lacrosse..flying disc
	                                    // E3.0  [15] (🥐..🥞)    croissant..pancakes
	                                    // E5.0  [13] (🥟..🥫)    dumpling..canned food
	                                    // E11.0  [5] (🥬..🥰)    leafy green..smiling face with hearts
	                                    // E12.0  [1] (🥱)       yawning face
	                                    // E13.0  [1] (🥲)       smiling face with tear
	                                    // E11.0  [4] (🥳..🥶)    partying face..cold face
	                                    // E13.0  [2] (🥷..🥸)    ninja..disguised face
	                                    // E14.0  [1] (🥹)       face holding back tears
	                                    // E11.0  [1] (🥺)       pleading face
	                                    // E12.0  [1] (🥻)       sari
	                                    // E11.0  [4] (🥼..🥿)    lab coat..flat shoe
	                                    // E1.0   [5] (🦀..🦄)    crab..unicorn
	                                    // E3.0  [13] (🦅..🦑)    eagle..squid
	                                    // E5.0   [6] (🦒..🦗)    giraffe..cricket
	                                    // E11.0 [11] (🦘..🦢)    kangaroo..swan
	                                    // E13.0  [2] (🦣..🦤)    mammoth..dodo
	                                    // E12.0  [6] (🦥..🦪)    sloth..oyster
	                                    // E13.0  [3] (🦫..🦭)    beaver..seal
	                                    // E12.0  [2] (🦮..🦯)    guide dog..white cane
	                                    // E11.0 [10] (🦰..🦹)    red hair..supervillain
	                                    // E12.0  [6] (🦺..🦿)    safety vest..mechanical leg
	                                    // E1.0   [1] (🧀)       cheese wedge
	                                    // E11.0  [2] (🧁..🧂)    cupcake..salt
	                                    // E12.0  [8] (🧃..🧊)    beverage box..ice
	                                    // E13.0  [1] (🧋)       bubble tea
	                                    // E14.0  [1] (🧌)       troll
	                                    // E12.0  [3] (🧍..🧏)    person standing..deaf person
	                                    // E5.0  [23] (🧐..🧦)    face with monocle..socks
	                                    // E11.0 [25] (🧧..🧿)    red envelope..nazar amulet
	                                    // E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>
	                                    // E12.0  [4] (🩰..🩳)    ballet shoes..shorts
	                                    // E13.0  [1] (🩴)       thong sandal
	                                    // E15.0  [3] (🩵..🩷)    light blue heart..pink heart
	                                    // E12.0  [3] (🩸..🩺)    drop of blood..stethoscope
	                                    // E14.0  [2] (🩻..🩼)    x-ray..crutch
	                                    // E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>
	                                    // E12.0  [3] (🪀..🪂)    yo-yo..parachute
	                                    // E13.0  [4] (🪃..🪆)    boomerang..nesting dolls
	                                    // E15.0  [2] (🪇..🪈)    maracas..flute
	                                    // E0.0   [7] (🪉..🪏)    <reserved-1FA89>..<reserved-1FA8F>
	                                    // E12.0  [6] (🪐..🪕)    ringed planet..banjo
	                                    // E13.0 [19] (🪖..🪨)    military helmet..rock
	                                    // E14.0  [4] (🪩..🪬)    mirror ball..hamsa
	                                    // E15.0  [3] (🪭..🪯)    folding hand fan..khanda
	                                    // E13.0  [7] (🪰..🪶)    fly..feather
	                                    // E14.0  [4] (🪷..🪺)    lotus..nest with eggs
	                                    // E15.0  [3] (🪻..🪽)    hyacinth..wing
	                                    // E0.0   [1] (🪾)       <reserved-1FABE>
	                                    // E15.0  [1] (🪿)       goose
	                                    // E13.0  [3] (🫀..🫂)    anatomical heart..people hugging
	                                    // E14.0  [3] (🫃..🫅)    pregnant man..person with crown
	                                    // E0.0   [8] (🫆..🫍)    <reserved-1FAC6>..<reserved-1FACD>
	                                    // E15.0  [2] (🫎..🫏)    moose..donkey
	                                    // E13.0  [7] (🫐..🫖)    blueberries..teapot
	                                    // E14.0  [3] (🫗..🫙)    pouring liquid..jar
	                                    // E15.0  [2] (🫚..🫛)    ginger root..pea pod
	                                    // E0.0   [4] (🫜..🫟)    <reserved-1FADC>..<reserved-1FADF>
	                                    // E14.0  [8] (🫠..🫧)    melting face..bubbles
	                                    // E15.0  [1] (🫨)       shaking face
	                                    // E0.0   [7] (🫩..🫯)    <reserved-1FAE9>..<reserved-1FAEF>
	                                    // E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands
	                                    // E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand
	                                    // E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>
	                                    if (0x1f947 <= code && code <= 0x1faff) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                                else {
	                                    // E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>
	                                    if (0x1fc00 <= code && code <= 0x1fffd) {
	                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        // unlisted code points are treated as a break property of "Other"
	        return boundaries_1.CLUSTER_BREAK.OTHER;
	    }
	};
	Graphemer.default = Graphemer$1;
	return Graphemer;
}

var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	var __importDefault = (lib && lib.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib, "__esModule", { value: true });
	const Graphemer_1 = __importDefault(requireGraphemer());
	lib.default = Graphemer_1.default;
	return lib;
}

var hasRequiredStrings;

function requireStrings () {
	if (hasRequiredStrings) return strings;
	hasRequiredStrings = 1;
	var __createBinding = (strings && strings.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (strings && strings.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (strings && strings.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (strings && strings.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(strings, "__esModule", { value: true });
	strings.validateLanguage = strings.parseLanguage = strings.b64UrlToUtf8 = strings.utf8ToB64Url = strings.graphemeLen = strings.utf8Len = void 0;
	const graphemer_1 = __importDefault(requireLib());
	const ui8 = __importStar(requireSrc());
	// counts the number of bytes in a utf8 string
	const utf8Len = (str) => {
	    return new TextEncoder().encode(str).byteLength;
	};
	strings.utf8Len = utf8Len;
	// counts the number of graphemes (user-displayed characters) in a string
	const graphemeLen = (str) => {
	    const splitter = new graphemer_1.default();
	    return splitter.countGraphemes(str);
	};
	strings.graphemeLen = graphemeLen;
	const utf8ToB64Url = (utf8) => {
	    return ui8.toString(ui8.fromString(utf8, 'utf8'), 'base64url');
	};
	strings.utf8ToB64Url = utf8ToB64Url;
	const b64UrlToUtf8 = (b64) => {
	    return ui8.toString(ui8.fromString(b64, 'base64url'), 'utf8');
	};
	strings.b64UrlToUtf8 = b64UrlToUtf8;
	const parseLanguage = (langTag) => {
	    const parsed = langTag.match(bcp47Regexp);
	    if (!parsed?.groups)
	        return null;
	    const parts = parsed.groups;
	    return {
	        grandfathered: parts.grandfathered,
	        language: parts.language,
	        extlang: parts.extlang,
	        script: parts.script,
	        region: parts.region,
	        variant: parts.variant,
	        extension: parts.extension,
	        privateUse: parts.privateUseA || parts.privateUseB,
	    };
	};
	strings.parseLanguage = parseLanguage;
	const validateLanguage = (langTag) => {
	    return bcp47Regexp.test(langTag);
	};
	strings.validateLanguage = validateLanguage;
	// Validates well-formed BCP 47 syntax: https://www.rfc-editor.org/rfc/rfc5646.html#section-2.1
	const bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
	
	return strings;
}

var didDoc = {};

var hasRequiredDidDoc;

function requireDidDoc () {
	if (hasRequiredDidDoc) return didDoc;
	hasRequiredDidDoc = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
		const zod_1 = /*@__PURE__*/ requireLib$1();
		// Parsing atproto data
		// --------
		const isValidDidDoc = (doc) => {
		    return exports.didDocument.safeParse(doc).success;
		};
		exports.isValidDidDoc = isValidDidDoc;
		const getDid = (doc) => {
		    const id = doc.id;
		    if (typeof id !== 'string') {
		        throw new Error('No `id` on document');
		    }
		    return id;
		};
		exports.getDid = getDid;
		const getHandle = (doc) => {
		    const aka = doc.alsoKnownAs;
		    if (aka) {
		        for (let i = 0; i < aka.length; i++) {
		            const alias = aka[i];
		            if (alias.startsWith('at://')) {
		                // strip off "at://" prefix
		                return alias.slice(5);
		            }
		        }
		    }
		    return undefined;
		};
		exports.getHandle = getHandle;
		// @NOTE we parse to type/publicKeyMultibase to avoid the dependency on @atproto/crypto
		const getSigningKey = (doc) => {
		    return (0, exports.getVerificationMaterial)(doc, 'atproto');
		};
		exports.getSigningKey = getSigningKey;
		const getVerificationMaterial = (doc, keyId) => {
		    // /!\ Hot path
		    const key = findItemById(doc, 'verificationMethod', `#${keyId}`);
		    if (!key) {
		        return undefined;
		    }
		    if (!key.publicKeyMultibase) {
		        return undefined;
		    }
		    return {
		        type: key.type,
		        publicKeyMultibase: key.publicKeyMultibase,
		    };
		};
		exports.getVerificationMaterial = getVerificationMaterial;
		const getSigningDidKey = (doc) => {
		    const parsed = (0, exports.getSigningKey)(doc);
		    if (!parsed)
		        return;
		    return `did:key:${parsed.publicKeyMultibase}`;
		};
		exports.getSigningDidKey = getSigningDidKey;
		const getPdsEndpoint = (doc) => {
		    return (0, exports.getServiceEndpoint)(doc, {
		        id: '#atproto_pds',
		        type: 'AtprotoPersonalDataServer',
		    });
		};
		exports.getPdsEndpoint = getPdsEndpoint;
		const getFeedGenEndpoint = (doc) => {
		    return (0, exports.getServiceEndpoint)(doc, {
		        id: '#bsky_fg',
		        type: 'BskyFeedGenerator',
		    });
		};
		exports.getFeedGenEndpoint = getFeedGenEndpoint;
		const getNotifEndpoint = (doc) => {
		    return (0, exports.getServiceEndpoint)(doc, {
		        id: '#bsky_notif',
		        type: 'BskyNotificationService',
		    });
		};
		exports.getNotifEndpoint = getNotifEndpoint;
		const getServiceEndpoint = (doc, opts) => {
		    // /!\ Hot path
		    const service = findItemById(doc, 'service', opts.id);
		    if (!service) {
		        return undefined;
		    }
		    if (opts.type && service.type !== opts.type) {
		        return undefined;
		    }
		    if (typeof service.serviceEndpoint !== 'string') {
		        return undefined;
		    }
		    return validateUrl(service.serviceEndpoint);
		};
		exports.getServiceEndpoint = getServiceEndpoint;
		function findItemById(doc, type, id) {
		    // /!\ Hot path
		    const items = doc[type];
		    if (items) {
		        for (let i = 0; i < items.length; i++) {
		            const item = items[i];
		            const itemId = item.id;
		            if (itemId[0] === '#'
		                ? itemId === id
		                : // Optimized version of: itemId === `${doc.id}${id}`
		                    itemId.length === doc.id.length + id.length &&
		                        itemId[doc.id.length] === '#' &&
		                        itemId.endsWith(id) &&
		                        itemId.startsWith(doc.id) // <== We could probably skip this check
		            ) {
		                return item;
		            }
		        }
		    }
		    return undefined;
		}
		// Check protocol and hostname to prevent potential SSRF
		const validateUrl = (urlStr) => {
		    if (!urlStr.startsWith('http://') && !urlStr.startsWith('https://')) {
		        return undefined;
		    }
		    if (!canParseUrl(urlStr)) {
		        return undefined;
		    }
		    return urlStr;
		};
		const canParseUrl = URL.canParse ??
		    // URL.canParse is not available in Node.js < 18.17.0
		    ((urlStr) => {
		        try {
		            new URL(urlStr);
		            return true;
		        }
		        catch {
		            return false;
		        }
		    });
		// Types
		// --------
		const verificationMethod = zod_1.z.object({
		    id: zod_1.z.string(),
		    type: zod_1.z.string(),
		    controller: zod_1.z.string(),
		    publicKeyMultibase: zod_1.z.string().optional(),
		});
		const service = zod_1.z.object({
		    id: zod_1.z.string(),
		    type: zod_1.z.string(),
		    serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())]),
		});
		exports.didDocument = zod_1.z.object({
		    id: zod_1.z.string(),
		    alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
		    verificationMethod: zod_1.z.array(verificationMethod).optional(),
		    service: zod_1.z.array(service).optional(),
		});
		
	} (didDoc));
	return didDoc;
}

var hasRequiredDist$4;

function requireDist$4 () {
	if (hasRequiredDist$4) return dist$2;
	hasRequiredDist$4 = 1;
	(function (exports) {
		var __createBinding = (dist$2 && dist$2.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (dist$2 && dist$2.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (dist$2 && dist$2.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		var __exportStar = (dist$2 && dist$2.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.util = exports.check = void 0;
		exports.check = __importStar(requireCheck());
		exports.util = __importStar(requireUtil$5());
		__exportStar(requireArrays(), exports);
		__exportStar(requireAsync(), exports);
		__exportStar(requireUtil$5(), exports);
		__exportStar(requireTid(), exports);
		__exportStar(requireIpld(), exports);
		__exportStar(requireRetry(), exports);
		__exportStar(requireTypes$3(), exports);
		__exportStar(requireTimes(), exports);
		__exportStar(requireStrings(), exports);
		__exportStar(requireDidDoc(), exports);
		
	} (dist$2));
	return dist$2;
}

var hasRequiredBlobRefs;

function requireBlobRefs () {
	if (hasRequiredBlobRefs) return blobRefs;
	hasRequiredBlobRefs = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
		const cid_1 = requireCid();
		const zod_1 = /*@__PURE__*/ requireLib$1();
		const common_web_1 = requireDist$4();
		exports.typedJsonBlobRef = zod_1.z
		    .object({
		    $type: zod_1.z.literal('blob'),
		    ref: common_web_1.schema.cid,
		    mimeType: zod_1.z.string(),
		    size: zod_1.z.number(),
		})
		    .strict();
		exports.untypedJsonBlobRef = zod_1.z
		    .object({
		    cid: zod_1.z.string(),
		    mimeType: zod_1.z.string(),
		})
		    .strict();
		exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
		class BlobRef {
		    constructor(ref, mimeType, size, original) {
		        Object.defineProperty(this, "ref", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: ref
		        });
		        Object.defineProperty(this, "mimeType", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: mimeType
		        });
		        Object.defineProperty(this, "size", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: size
		        });
		        Object.defineProperty(this, "original", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        this.original = original ?? {
		            $type: 'blob',
		            ref,
		            mimeType,
		            size,
		        };
		    }
		    static asBlobRef(obj) {
		        if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
		            return BlobRef.fromJsonRef(obj);
		        }
		        return null;
		    }
		    static fromJsonRef(json) {
		        if (common_web_1.check.is(json, exports.typedJsonBlobRef)) {
		            return new BlobRef(json.ref, json.mimeType, json.size);
		        }
		        else {
		            return new BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
		        }
		    }
		    ipld() {
		        return {
		            $type: 'blob',
		            ref: this.ref,
		            mimeType: this.mimeType,
		            size: this.size,
		        };
		    }
		    toJSON() {
		        return (0, common_web_1.ipldToJson)(this.ipld());
		    }
		}
		exports.BlobRef = BlobRef;
		
	} (blobRefs));
	return blobRefs;
}

var hasRequiredBlob;

function requireBlob () {
	if (hasRequiredBlob) return blob;
	hasRequiredBlob = 1;
	Object.defineProperty(blob, "__esModule", { value: true });
	blob.blob = blob$1;
	const blob_refs_1 = requireBlobRefs();
	const types_1 = requireTypes$4();
	function blob$1(lexicons, path, def, value) {
	    // check
	    if (!value || !(value instanceof blob_refs_1.BlobRef)) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} should be a blob ref`),
	        };
	    }
	    return { success: true, value };
	}
	
	return blob;
}

var primitives = {};

var formats = {};

var dist$1 = {};

var hasRequiredDist$3;

function requireDist$3 () {
	if (hasRequiredDist$3) return dist$1;
	hasRequiredDist$3 = 1;
	(function (exports) {
		(()=>{var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:true,get:r[n]});},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:true});}},t={};function r(e,t){return void 0===t&&(t="-"),new RegExp("^(?!0{4}"+t+"0{2}"+t+"0{2})((?=[0-9]{4}"+t+"(((0[^2])|1[0-2])|02(?="+t+"(([0-1][0-9])|2[0-8])))"+t+"[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))"+t+"02"+t+"29))([0-9]{4})"+t+"(?!((0[469])|11)"+t+"31)((0[1,3-9]|1[0-2])|(02(?!"+t+"3)))"+t+"(0[1-9]|[1-2][0-9]|3[0-1])$").test(e)}function n(e){var t=/\D/.exec(e);return t?t[0]:""}function i(e,t,r){ void 0===t&&(t=":"),void 0===r&&(r=false);var i=new RegExp("^([0-1]|2(?=([0-3])|4"+t+"00))[0-9]"+t+"[0-5][0-9]("+t+"([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");if(!r||!/[Z+\-]/.test(e))return i.test(e);if(/Z$/.test(e))return i.test(e.replace("Z",""));var o=e.includes("+"),a=e.split(/[+-]/),u=a[0],d=a[1];return i.test(u)&&function(e,t,r){return void 0===r&&(r=":"),new RegExp(t?"^(0(?!(2"+r+"4)|0"+r+"3)|1(?=([0-1]|2(?="+r+"[04])|[34](?="+r+"0))))([03469](?="+r+"[03])|[17](?="+r+"0)|2(?="+r+"[04])|5(?="+r+"[034])|8(?="+r+"[04]))"+r+"([03](?=0)|4(?=5))[05]$":"^(0(?=[^0])|1(?=[0-2]))([39](?="+r+"[03])|[0-24-8](?="+r+"00))"+r+"[03]0$").test(e)}(d,o,n(d))}function o(e){var t=e.split("T"),o=t[0],a=t[1],u=r(o,n(o));if(!a)return  false;var d,s=(d=a.match(/([^Z+\-\d])(?=\d+\1)/),Array.isArray(d)?d[0]:"");return u&&i(a,s,true)}function a(e,t){return void 0===t&&(t="-"),new RegExp("^[0-9]{4}"+t+"(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e)}e.r(t),e.d(t,{isValidDate:()=>r,isValidISODateString:()=>o,isValidTime:()=>i,isValidYearMonth:()=>a});var u=exports;for(var d in t)u[d]=t[d];t.__esModule&&Object.defineProperty(u,"__esModule",{value:true});})(); 
	} (dist$1));
	return dist$1;
}

var hasRequiredFormats;

function requireFormats () {
	if (hasRequiredFormats) return formats;
	hasRequiredFormats = 1;
	Object.defineProperty(formats, "__esModule", { value: true });
	formats.datetime = datetime;
	formats.uri = uri;
	formats.atUri = atUri;
	formats.did = did;
	formats.handle = handle;
	formats.atIdentifier = atIdentifier;
	formats.nsid = nsid;
	formats.cid = cid;
	formats.language = language;
	formats.tid = tid;
	formats.recordKey = recordKey;
	const iso_datestring_validator_1 = requireDist$3();
	const cid_1 = requireCid();
	const common_web_1 = requireDist$4();
	const syntax_1 = requireDist$5();
	const types_1 = requireTypes$4();
	function datetime(path, value) {
	    try {
	        if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
	            throw new Error();
	        }
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`),
	        };
	    }
	    return { success: true, value };
	}
	function uri(path, value) {
	    const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
	    if (!isUri) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a uri`),
	        };
	    }
	    return { success: true, value };
	}
	function atUri(path, value) {
	    try {
	        (0, syntax_1.ensureValidAtUri)(value);
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a valid at-uri`),
	        };
	    }
	    return { success: true, value };
	}
	function did(path, value) {
	    try {
	        (0, syntax_1.ensureValidDid)(value);
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a valid did`),
	        };
	    }
	    return { success: true, value };
	}
	function handle(path, value) {
	    try {
	        (0, syntax_1.ensureValidHandle)(value);
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a valid handle`),
	        };
	    }
	    return { success: true, value };
	}
	function atIdentifier(path, value) {
	    // We can discriminate based on the "did:" prefix
	    if (value.startsWith('did:')) {
	        const didResult = did(path, value);
	        if (didResult.success)
	            return didResult;
	    }
	    else {
	        const handleResult = handle(path, value);
	        if (handleResult.success)
	            return handleResult;
	    }
	    return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a valid did or a handle`),
	    };
	}
	function nsid(path, value) {
	    try {
	        (0, syntax_1.ensureValidNsid)(value);
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a valid nsid`),
	        };
	    }
	    return { success: true, value };
	}
	function cid(path, value) {
	    try {
	        cid_1.CID.parse(value);
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a cid string`),
	        };
	    }
	    return { success: true, value };
	}
	// The language format validates well-formed BCP 47 language tags: https://www.rfc-editor.org/info/bcp47
	function language(path, value) {
	    if ((0, common_web_1.validateLanguage)(value)) {
	        return { success: true, value };
	    }
	    return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`),
	    };
	}
	function tid(path, value) {
	    if ((0, syntax_1.isValidTid)(value)) {
	        return { success: true, value };
	    }
	    return {
	        success: false,
	        error: new types_1.ValidationError(`${path} must be a valid TID`),
	    };
	}
	function recordKey(path, value) {
	    try {
	        (0, syntax_1.ensureValidRecordKey)(value);
	    }
	    catch {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a valid Record Key`),
	        };
	    }
	    return { success: true, value };
	}
	
	return formats;
}

var hasRequiredPrimitives;

function requirePrimitives () {
	if (hasRequiredPrimitives) return primitives;
	hasRequiredPrimitives = 1;
	var __createBinding = (primitives && primitives.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (primitives && primitives.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (primitives && primitives.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(primitives, "__esModule", { value: true });
	primitives.validate = validate;
	const cid_1 = requireCid();
	const common_web_1 = requireDist$4();
	const types_1 = requireTypes$4();
	const formats = __importStar(requireFormats());
	function validate(lexicons, path, def, value) {
	    switch (def.type) {
	        case 'boolean':
	            return boolean(lexicons, path, def, value);
	        case 'integer':
	            return integer(lexicons, path, def, value);
	        case 'string':
	            return string(lexicons, path, def, value);
	        case 'bytes':
	            return bytes(lexicons, path, def, value);
	        case 'cid-link':
	            return cidLink(lexicons, path, def, value);
	        case 'unknown':
	            return unknown(lexicons, path, def, value);
	        default:
	            return {
	                success: false,
	                error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`),
	            };
	    }
	}
	function boolean(lexicons, path, def, value) {
	    def = def;
	    // type
	    const type = typeof value;
	    if (type === 'undefined') {
	        if (typeof def.default === 'boolean') {
	            return { success: true, value: def.default };
	        }
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a boolean`),
	        };
	    }
	    else if (type !== 'boolean') {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a boolean`),
	        };
	    }
	    // const
	    if (typeof def.const === 'boolean') {
	        if (value !== def.const) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must be ${def.const}`),
	            };
	        }
	    }
	    return { success: true, value };
	}
	function integer(lexicons, path, def, value) {
	    def = def;
	    // type
	    const type = typeof value;
	    if (type === 'undefined') {
	        if (typeof def.default === 'number') {
	            return { success: true, value: def.default };
	        }
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be an integer`),
	        };
	    }
	    else if (!Number.isInteger(value)) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be an integer`),
	        };
	    }
	    // const
	    if (typeof def.const === 'number') {
	        if (value !== def.const) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must be ${def.const}`),
	            };
	        }
	    }
	    // enum
	    if (Array.isArray(def.enum)) {
	        if (!def.enum.includes(value)) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`),
	            };
	        }
	    }
	    // maximum
	    if (typeof def.maximum === 'number') {
	        if (value > def.maximum) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`),
	            };
	        }
	    }
	    // minimum
	    if (typeof def.minimum === 'number') {
	        if (value < def.minimum) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`),
	            };
	        }
	    }
	    return { success: true, value };
	}
	function string(lexicons, path, def, value) {
	    def = def;
	    // type
	    if (typeof value === 'undefined') {
	        if (typeof def.default === 'string') {
	            return { success: true, value: def.default };
	        }
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a string`),
	        };
	    }
	    else if (typeof value !== 'string') {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a string`),
	        };
	    }
	    // const
	    if (typeof def.const === 'string') {
	        if (value !== def.const) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must be ${def.const}`),
	            };
	        }
	    }
	    // enum
	    if (Array.isArray(def.enum)) {
	        if (!def.enum.includes(value)) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`),
	            };
	        }
	    }
	    // maxLength and minLength
	    if (typeof def.minLength === 'number' || typeof def.maxLength === 'number') {
	        // If the JavaScript string length * 3 is below the maximum limit,
	        // its UTF8 length (which <= .length * 3) will also be below.
	        if (typeof def.minLength === 'number' && value.length * 3 < def.minLength) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`),
	            };
	        }
	        // If the JavaScript string length * 3 is within the maximum limit,
	        // its UTF8 length (which <= .length * 3) will also be within.
	        // When there's no minimal length, this lets us skip the UTF8 length check.
	        let canSkipUtf8LenChecks = false;
	        if (typeof def.minLength === 'undefined' &&
	            typeof def.maxLength === 'number' &&
	            value.length * 3 <= def.maxLength) {
	            canSkipUtf8LenChecks = true;
	        }
	        if (!canSkipUtf8LenChecks) {
	            const len = (0, common_web_1.utf8Len)(value);
	            if (typeof def.maxLength === 'number') {
	                if (len > def.maxLength) {
	                    return {
	                        success: false,
	                        error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`),
	                    };
	                }
	            }
	            if (typeof def.minLength === 'number') {
	                if (len < def.minLength) {
	                    return {
	                        success: false,
	                        error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`),
	                    };
	                }
	            }
	        }
	    }
	    // maxGraphemes and minGraphemes
	    if (typeof def.maxGraphemes === 'number' ||
	        typeof def.minGraphemes === 'number') {
	        let needsMaxGraphemesCheck = false;
	        let needsMinGraphemesCheck = false;
	        if (typeof def.maxGraphemes === 'number') {
	            if (value.length <= def.maxGraphemes) {
	                // If the JavaScript string length (UTF-16) is within the maximum limit,
	                // its grapheme length (which <= .length) will also be within.
	                needsMaxGraphemesCheck = false;
	            }
	            else {
	                needsMaxGraphemesCheck = true;
	            }
	        }
	        if (typeof def.minGraphemes === 'number') {
	            if (value.length < def.minGraphemes) {
	                // If the JavaScript string length (UTF-16) is below the minimal limit,
	                // its grapheme length (which <= .length) will also be below.
	                // Fail early.
	                return {
	                    success: false,
	                    error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`),
	                };
	            }
	            else {
	                needsMinGraphemesCheck = true;
	            }
	        }
	        if (needsMaxGraphemesCheck || needsMinGraphemesCheck) {
	            const len = (0, common_web_1.graphemeLen)(value);
	            if (typeof def.maxGraphemes === 'number') {
	                if (len > def.maxGraphemes) {
	                    return {
	                        success: false,
	                        error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`),
	                    };
	                }
	            }
	            if (typeof def.minGraphemes === 'number') {
	                if (len < def.minGraphemes) {
	                    return {
	                        success: false,
	                        error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`),
	                    };
	                }
	            }
	        }
	    }
	    if (typeof def.format === 'string') {
	        switch (def.format) {
	            case 'datetime':
	                return formats.datetime(path, value);
	            case 'uri':
	                return formats.uri(path, value);
	            case 'at-uri':
	                return formats.atUri(path, value);
	            case 'did':
	                return formats.did(path, value);
	            case 'handle':
	                return formats.handle(path, value);
	            case 'at-identifier':
	                return formats.atIdentifier(path, value);
	            case 'nsid':
	                return formats.nsid(path, value);
	            case 'cid':
	                return formats.cid(path, value);
	            case 'language':
	                return formats.language(path, value);
	            case 'tid':
	                return formats.tid(path, value);
	            case 'record-key':
	                return formats.recordKey(path, value);
	        }
	    }
	    return { success: true, value };
	}
	function bytes(lexicons, path, def, value) {
	    def = def;
	    if (!value || !(value instanceof Uint8Array)) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a byte array`),
	        };
	    }
	    // maxLength
	    if (typeof def.maxLength === 'number') {
	        if (value.byteLength > def.maxLength) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`),
	            };
	        }
	    }
	    // minLength
	    if (typeof def.minLength === 'number') {
	        if (value.byteLength < def.minLength) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`),
	            };
	        }
	    }
	    return { success: true, value };
	}
	function cidLink(lexicons, path, def, value) {
	    if (cid_1.CID.asCID(value) === null) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be a CID`),
	        };
	    }
	    return { success: true, value };
	}
	function unknown(lexicons, path, def, value) {
	    // type
	    if (!value || typeof value !== 'object') {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be an object`),
	        };
	    }
	    return { success: true, value };
	}
	
	return primitives;
}

var hasRequiredComplex;

function requireComplex () {
	if (hasRequiredComplex) return complex;
	hasRequiredComplex = 1;
	Object.defineProperty(complex, "__esModule", { value: true });
	complex.validate = validate;
	complex.array = array;
	complex.object = object;
	complex.validateOneOf = validateOneOf;
	const types_1 = requireTypes$4();
	const util_1 = requireUtil$6();
	const blob_1 = requireBlob();
	const primitives_1 = requirePrimitives();
	function validate(lexicons, path, def, value) {
	    switch (def.type) {
	        case 'object':
	            return object(lexicons, path, def, value);
	        case 'array':
	            return array(lexicons, path, def, value);
	        case 'blob':
	            return (0, blob_1.blob)(lexicons, path, def, value);
	        default:
	            return (0, primitives_1.validate)(lexicons, path, def, value);
	    }
	}
	function array(lexicons, path, def, value) {
	    // type
	    if (!Array.isArray(value)) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be an array`),
	        };
	    }
	    // maxLength
	    if (typeof def.maxLength === 'number') {
	        if (value.length > def.maxLength) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`),
	            };
	        }
	    }
	    // minLength
	    if (typeof def.minLength === 'number') {
	        if (value.length < def.minLength) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`),
	            };
	        }
	    }
	    // items
	    const itemsDef = def.items;
	    for (let i = 0; i < value.length; i++) {
	        const itemValue = value[i];
	        const itemPath = `${path}/${i}`;
	        const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue);
	        if (!res.success) {
	            return res;
	        }
	    }
	    return { success: true, value };
	}
	function object(lexicons, path, def, value) {
	    // type
	    if (!(0, types_1.isObj)(value)) {
	        return {
	            success: false,
	            error: new types_1.ValidationError(`${path} must be an object`),
	        };
	    }
	    // properties
	    let resultValue = value;
	    if ('properties' in def && def.properties != null) {
	        for (const key in def.properties) {
	            const keyValue = value[key];
	            if (keyValue === null && def.nullable?.includes(key)) {
	                continue;
	            }
	            const propDef = def.properties[key];
	            if (keyValue === undefined && !def.required?.includes(key)) {
	                // Fast path for non-required undefined props.
	                if (propDef.type === 'integer' ||
	                    propDef.type === 'boolean' ||
	                    propDef.type === 'string') {
	                    if (propDef.default === undefined) {
	                        continue;
	                    }
	                }
	                else {
	                    // Other types have no defaults.
	                    continue;
	                }
	            }
	            const propPath = `${path}/${key}`;
	            const validated = validateOneOf(lexicons, propPath, propDef, keyValue);
	            const propValue = validated.success ? validated.value : keyValue;
	            // Return error for bad validation, giving required rule precedence
	            if (propValue === undefined) {
	                if (def.required?.includes(key)) {
	                    return {
	                        success: false,
	                        error: new types_1.ValidationError(`${path} must have the property "${key}"`),
	                    };
	                }
	            }
	            else {
	                if (!validated.success) {
	                    return validated;
	                }
	            }
	            // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
	            if (propValue !== keyValue) {
	                if (resultValue === value) {
	                    // Lazy shallow clone
	                    resultValue = { ...value };
	                }
	                resultValue[key] = propValue;
	            }
	        }
	    }
	    return { success: true, value: resultValue };
	}
	function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
	    let concreteDef;
	    if (def.type === 'union') {
	        if (!(0, types_1.isDiscriminatedObject)(value)) {
	            return {
	                success: false,
	                error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`),
	            };
	        }
	        if (!refsContainType(def.refs, value.$type)) {
	            if (def.closed) {
	                return {
	                    success: false,
	                    error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(', ')}`),
	                };
	            }
	            return { success: true, value };
	        }
	        else {
	            concreteDef = lexicons.getDefOrThrow(value.$type);
	        }
	    }
	    else if (def.type === 'ref') {
	        concreteDef = lexicons.getDefOrThrow(def.ref);
	    }
	    else {
	        concreteDef = def;
	    }
	    return mustBeObj
	        ? object(lexicons, path, concreteDef, value)
	        : validate(lexicons, path, concreteDef, value);
	}
	// to avoid bugs like #0189 this needs to handle both
	// explicit and implicit #main
	const refsContainType = (refs, type) => {
	    const lexUri = (0, util_1.toLexUri)(type);
	    if (refs.includes(lexUri)) {
	        return true;
	    }
	    if (lexUri.endsWith('#main')) {
	        return refs.includes(lexUri.slice(0, -5));
	    }
	    else {
	        return !lexUri.includes('#') && refs.includes(`${lexUri}#main`);
	    }
	};
	
	return complex;
}

var xrpc = {};

var hasRequiredXrpc;

function requireXrpc () {
	if (hasRequiredXrpc) return xrpc;
	hasRequiredXrpc = 1;
	var __createBinding = (xrpc && xrpc.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (xrpc && xrpc.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (xrpc && xrpc.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(xrpc, "__esModule", { value: true });
	xrpc.params = params;
	const types_1 = requireTypes$4();
	const complex_1 = requireComplex();
	const PrimitiveValidators = __importStar(requirePrimitives());
	function params(lexicons, path, def, val) {
	    // type
	    const value = val && typeof val === 'object' ? val : {};
	    const requiredProps = new Set(def.required ?? []);
	    // properties
	    let resultValue = value;
	    if (typeof def.properties === 'object') {
	        for (const key in def.properties) {
	            const propDef = def.properties[key];
	            const validated = propDef.type === 'array'
	                ? (0, complex_1.array)(lexicons, key, propDef, value[key])
	                : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
	            const propValue = validated.success ? validated.value : value[key];
	            const propIsUndefined = typeof propValue === 'undefined';
	            // Return error for bad validation, giving required rule precedence
	            if (propIsUndefined && requiredProps.has(key)) {
	                return {
	                    success: false,
	                    error: new types_1.ValidationError(`${path} must have the property "${key}"`),
	                };
	            }
	            else if (!propIsUndefined && !validated.success) {
	                return validated;
	            }
	            // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
	            if (propValue !== value[key]) {
	                if (resultValue === value) {
	                    // Lazy shallow clone
	                    resultValue = { ...value };
	                }
	                resultValue[key] = propValue;
	            }
	        }
	    }
	    return { success: true, value: resultValue };
	}
	
	return xrpc;
}

var hasRequiredValidation;

function requireValidation () {
	if (hasRequiredValidation) return validation;
	hasRequiredValidation = 1;
	Object.defineProperty(validation, "__esModule", { value: true });
	validation.assertValidRecord = assertValidRecord;
	validation.assertValidXrpcParams = assertValidXrpcParams;
	validation.assertValidXrpcInput = assertValidXrpcInput;
	validation.assertValidXrpcOutput = assertValidXrpcOutput;
	validation.assertValidXrpcMessage = assertValidXrpcMessage;
	const complex_1 = requireComplex();
	const xrpc_1 = requireXrpc();
	function assertValidRecord(lexicons, def, value) {
	    const res = (0, complex_1.object)(lexicons, 'Record', def.record, value);
	    if (!res.success)
	        throw res.error;
	    return res.value;
	}
	function assertValidXrpcParams(lexicons, def, value) {
	    if (def.parameters) {
	        const res = (0, xrpc_1.params)(lexicons, 'Params', def.parameters, value);
	        if (!res.success)
	            throw res.error;
	        return res.value;
	    }
	}
	function assertValidXrpcInput(lexicons, def, value) {
	    if (def.input?.schema) {
	        // loop: all input schema definitions
	        return assertValidOneOf(lexicons, 'Input', def.input.schema, value, true);
	    }
	}
	function assertValidXrpcOutput(lexicons, def, value) {
	    if (def.output?.schema) {
	        // loop: all output schema definitions
	        return assertValidOneOf(lexicons, 'Output', def.output.schema, value, true);
	    }
	}
	function assertValidXrpcMessage(lexicons, def, value) {
	    if (def.message?.schema) {
	        // loop: all output schema definitions
	        return assertValidOneOf(lexicons, 'Message', def.message.schema, value, true);
	    }
	}
	function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
	    const res = (0, complex_1.validateOneOf)(lexicons, path, def, value, mustBeObj);
	    if (!res.success)
	        throw res.error;
	    return res.value;
	}
	
	return validation;
}

var hasRequiredLexicons$1;

function requireLexicons$1 () {
	if (hasRequiredLexicons$1) return lexicons$1;
	hasRequiredLexicons$1 = 1;
	Object.defineProperty(lexicons$1, "__esModule", { value: true });
	lexicons$1.Lexicons = void 0;
	const types_1 = requireTypes$4();
	const util_1 = requireUtil$6();
	const validation_1 = requireValidation();
	const complex_1 = requireComplex();
	/**
	 * A collection of compiled lexicons.
	 */
	class Lexicons {
	    constructor(docs) {
	        Object.defineProperty(this, "docs", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new Map()
	        });
	        Object.defineProperty(this, "defs", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new Map()
	        });
	        if (docs) {
	            for (const doc of docs) {
	                this.add(doc);
	            }
	        }
	    }
	    /**
	     * @example clone a lexicon:
	     * ```ts
	     * const clone = new Lexicons(originalLexicon)
	     * ```
	     *
	     * @example get docs array:
	     * ```ts
	     * const docs = Array.from(lexicons)
	     * ```
	     */
	    [Symbol.iterator]() {
	        return this.docs.values();
	    }
	    /**
	     * Add a lexicon doc.
	     */
	    add(doc) {
	        const uri = (0, util_1.toLexUri)(doc.id);
	        if (this.docs.has(uri)) {
	            throw new Error(`${uri} has already been registered`);
	        }
	        // WARNING
	        // mutates the object
	        // -prf
	        resolveRefUris(doc, uri);
	        this.docs.set(uri, doc);
	        for (const [defUri, def] of iterDefs(doc)) {
	            this.defs.set(defUri, def);
	        }
	    }
	    /**
	     * Remove a lexicon doc.
	     */
	    remove(uri) {
	        uri = (0, util_1.toLexUri)(uri);
	        const doc = this.docs.get(uri);
	        if (!doc) {
	            throw new Error(`Unable to remove "${uri}": does not exist`);
	        }
	        for (const [defUri, _def] of iterDefs(doc)) {
	            this.defs.delete(defUri);
	        }
	        this.docs.delete(uri);
	    }
	    /**
	     * Get a lexicon doc.
	     */
	    get(uri) {
	        uri = (0, util_1.toLexUri)(uri);
	        return this.docs.get(uri);
	    }
	    /**
	     * Get a definition.
	     */
	    getDef(uri) {
	        uri = (0, util_1.toLexUri)(uri);
	        return this.defs.get(uri);
	    }
	    getDefOrThrow(uri, types) {
	        const def = this.getDef(uri);
	        if (!def) {
	            throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
	        }
	        if (types && !types.includes(def.type)) {
	            throw new types_1.InvalidLexiconError(`Not a ${types.join(' or ')} lexicon: ${uri}`);
	        }
	        return def;
	    }
	    /**
	     * Validate a record or object.
	     */
	    validate(lexUri, value) {
	        if (!(0, types_1.isObj)(value)) {
	            throw new types_1.ValidationError(`Value must be an object`);
	        }
	        const lexUriNormalized = (0, util_1.toLexUri)(lexUri);
	        const def = this.getDefOrThrow(lexUriNormalized, ['record', 'object']);
	        if (def.type === 'record') {
	            return (0, complex_1.object)(this, 'Record', def.record, value);
	        }
	        else if (def.type === 'object') {
	            return (0, complex_1.object)(this, 'Object', def, value);
	        }
	        else {
	            // shouldn't happen
	            throw new types_1.InvalidLexiconError('Definition must be a record or object');
	        }
	    }
	    /**
	     * Validate a record and throw on any error.
	     */
	    assertValidRecord(lexUri, value) {
	        if (!(0, types_1.isObj)(value)) {
	            throw new types_1.ValidationError(`Record must be an object`);
	        }
	        if (!('$type' in value)) {
	            throw new types_1.ValidationError(`Record/$type must be a string`);
	        }
	        const { $type } = value;
	        if (typeof $type !== 'string') {
	            throw new types_1.ValidationError(`Record/$type must be a string`);
	        }
	        const lexUriNormalized = (0, util_1.toLexUri)(lexUri);
	        if ((0, util_1.toLexUri)($type) !== lexUriNormalized) {
	            throw new types_1.ValidationError(`Invalid $type: must be ${lexUriNormalized}, got ${$type}`);
	        }
	        const def = this.getDefOrThrow(lexUriNormalized, ['record']);
	        return (0, validation_1.assertValidRecord)(this, def, value);
	    }
	    /**
	     * Validate xrpc query params and throw on any error.
	     */
	    assertValidXrpcParams(lexUri, value) {
	        lexUri = (0, util_1.toLexUri)(lexUri);
	        const def = this.getDefOrThrow(lexUri, [
	            'query',
	            'procedure',
	            'subscription',
	        ]);
	        return (0, validation_1.assertValidXrpcParams)(this, def, value);
	    }
	    /**
	     * Validate xrpc input body and throw on any error.
	     */
	    assertValidXrpcInput(lexUri, value) {
	        lexUri = (0, util_1.toLexUri)(lexUri);
	        const def = this.getDefOrThrow(lexUri, ['procedure']);
	        return (0, validation_1.assertValidXrpcInput)(this, def, value);
	    }
	    /**
	     * Validate xrpc output body and throw on any error.
	     */
	    assertValidXrpcOutput(lexUri, value) {
	        lexUri = (0, util_1.toLexUri)(lexUri);
	        const def = this.getDefOrThrow(lexUri, ['query', 'procedure']);
	        return (0, validation_1.assertValidXrpcOutput)(this, def, value);
	    }
	    /**
	     * Validate xrpc subscription message and throw on any error.
	     */
	    assertValidXrpcMessage(lexUri, value) {
	        lexUri = (0, util_1.toLexUri)(lexUri);
	        const def = this.getDefOrThrow(lexUri, ['subscription']);
	        return (0, validation_1.assertValidXrpcMessage)(this, def, value);
	    }
	    /**
	     * Resolve a lex uri given a ref
	     */
	    resolveLexUri(lexUri, ref) {
	        lexUri = (0, util_1.toLexUri)(lexUri);
	        return (0, util_1.toLexUri)(ref, lexUri);
	    }
	}
	lexicons$1.Lexicons = Lexicons;
	function* iterDefs(doc) {
	    for (const defId in doc.defs) {
	        yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
	        if (defId === 'main') {
	            yield [`lex:${doc.id}`, doc.defs[defId]];
	        }
	    }
	}
	// WARNING
	// this method mutates objects
	// -prf
	function resolveRefUris(obj, baseUri) {
	    for (const k in obj) {
	        if (obj.type === 'ref') {
	            obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
	        }
	        else if (obj.type === 'union') {
	            obj.refs = obj.refs.map((ref) => (0, util_1.toLexUri)(ref, baseUri));
	        }
	        else if (Array.isArray(obj[k])) {
	            obj[k] = obj[k].map((item) => {
	                if (typeof item === 'string') {
	                    return item.startsWith('#') ? (0, util_1.toLexUri)(item, baseUri) : item;
	                }
	                else if (item && typeof item === 'object') {
	                    return resolveRefUris(item, baseUri);
	                }
	                return item;
	            });
	        }
	        else if (obj[k] && typeof obj[k] === 'object') {
	            obj[k] = resolveRefUris(obj[k], baseUri);
	        }
	    }
	    return obj;
	}
	
	return lexicons$1;
}

var serialize = {};

var hasRequiredSerialize;

function requireSerialize () {
	if (hasRequiredSerialize) return serialize;
	hasRequiredSerialize = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
		const cid_1 = requireCid();
		const common_web_1 = requireDist$4();
		const blob_refs_1 = requireBlobRefs();
		// @NOTE avoiding use of check.is() here only because it makes
		// these implementations slow, and they often live in hot paths.
		const lexToIpld = (val) => {
		    // walk arrays
		    if (Array.isArray(val)) {
		        return val.map((item) => (0, exports.lexToIpld)(item));
		    }
		    // objects
		    if (val && typeof val === 'object') {
		        // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode
		        if (val instanceof blob_refs_1.BlobRef) {
		            return val.original;
		        }
		        // retain cids & bytes
		        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
		            return val;
		        }
		        // walk plain objects
		        const toReturn = {};
		        for (const key of Object.keys(val)) {
		            toReturn[key] = (0, exports.lexToIpld)(val[key]);
		        }
		        return toReturn;
		    }
		    // pass through
		    return val;
		};
		exports.lexToIpld = lexToIpld;
		const ipldToLex = (val) => {
		    // map arrays
		    if (Array.isArray(val)) {
		        return val.map((item) => (0, exports.ipldToLex)(item));
		    }
		    // objects
		    if (val && typeof val === 'object') {
		        // convert blobs, using hints to avoid expensive is() check
		        if ((val['$type'] === 'blob' ||
		            (typeof val['cid'] === 'string' &&
		                typeof val['mimeType'] === 'string')) &&
		            common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
		            return blob_refs_1.BlobRef.fromJsonRef(val);
		        }
		        // retain cids, bytes
		        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
		            return val;
		        }
		        // map plain objects
		        const toReturn = {};
		        for (const key of Object.keys(val)) {
		            toReturn[key] = (0, exports.ipldToLex)(val[key]);
		        }
		        return toReturn;
		    }
		    // pass through
		    return val;
		};
		exports.ipldToLex = ipldToLex;
		const lexToJson = (val) => {
		    return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
		};
		exports.lexToJson = lexToJson;
		const stringifyLex = (val) => {
		    return JSON.stringify((0, exports.lexToJson)(val));
		};
		exports.stringifyLex = stringifyLex;
		const jsonToLex = (val) => {
		    return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
		};
		exports.jsonToLex = jsonToLex;
		const jsonStringToLex = (val) => {
		    return (0, exports.jsonToLex)(JSON.parse(val));
		};
		exports.jsonStringToLex = jsonStringToLex;
		
	} (serialize));
	return serialize;
}

var hasRequiredDist$2;

function requireDist$2 () {
	if (hasRequiredDist$2) return dist$4;
	hasRequiredDist$2 = 1;
	(function (exports) {
		var __createBinding = (dist$4 && dist$4.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (dist$4 && dist$4.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireTypes$4(), exports);
		__exportStar(requireLexicons$1(), exports);
		__exportStar(requireBlobRefs(), exports);
		__exportStar(requireSerialize(), exports);
		
	} (dist$4));
	return dist$4;
}

var lexicons = {};

var util$4 = {};

var hasRequiredUtil$4;

function requireUtil$4 () {
	if (hasRequiredUtil$4) return util$4;
	hasRequiredUtil$4 = 1;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	Object.defineProperty(util$4, "__esModule", { value: true });
	util$4.is$typed = is$typed;
	util$4.maybe$typed = maybe$typed;
	util$4.asPredicate = asPredicate;
	function isObject(v) {
	    return v != null && typeof v === 'object';
	}
	function is$type($type, id, hash) {
	    return hash === 'main'
	        ? $type === id
	        : // $type === `${id}#${hash}`
	            typeof $type === 'string' &&
	                $type.length === id.length + 1 + hash.length &&
	                $type.charCodeAt(id.length) === 35 /* '#' */ &&
	                $type.startsWith(id) &&
	                $type.endsWith(hash);
	}
	function is$typed(v, id, hash) {
	    return isObject(v) && '$type' in v && is$type(v.$type, id, hash);
	}
	function maybe$typed(v, id, hash) {
	    return (isObject(v) &&
	        ('$type' in v ? v.$type === undefined || is$type(v.$type, id, hash) : true));
	}
	/**
	 * Utility function that allows to convert a "validate*" utility function into a
	 * type predicate.
	 */
	function asPredicate(validate) {
	    return function (v) {
	        return validate(v).success;
	    };
	}
	
	return util$4;
}

var hasRequiredLexicons;

function requireLexicons () {
	if (hasRequiredLexicons) return lexicons;
	hasRequiredLexicons = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
		exports.validate = validate;
		/**
		 * GENERATED CODE - DO NOT MODIFY
		 */
		const lexicon_1 = requireDist$2();
		const util_js_1 = requireUtil$4();
		exports.schemaDict = {
		    ComAtprotoAdminDefs: {
		        lexicon: 1,
		        id: 'com.atproto.admin.defs',
		        defs: {
		            statusAttr: {
		                type: 'object',
		                required: ['applied'],
		                properties: {
		                    applied: {
		                        type: 'boolean',
		                    },
		                    ref: {
		                        type: 'string',
		                    },
		                },
		            },
		            accountView: {
		                type: 'object',
		                required: ['did', 'handle', 'indexedAt'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    email: {
		                        type: 'string',
		                    },
		                    relatedRecords: {
		                        type: 'array',
		                        items: {
		                            type: 'unknown',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    invitedBy: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.server.defs#inviteCode',
		                    },
		                    invites: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.server.defs#inviteCode',
		                        },
		                    },
		                    invitesDisabled: {
		                        type: 'boolean',
		                    },
		                    emailConfirmedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    inviteNote: {
		                        type: 'string',
		                    },
		                    deactivatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    threatSignatures: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.admin.defs#threatSignature',
		                        },
		                    },
		                },
		            },
		            repoRef: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            repoBlobRef: {
		                type: 'object',
		                required: ['did', 'cid'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    recordUri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            threatSignature: {
		                type: 'object',
		                required: ['property', 'value'],
		                properties: {
		                    property: {
		                        type: 'string',
		                    },
		                    value: {
		                        type: 'string',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminDeleteAccount: {
		        lexicon: 1,
		        id: 'com.atproto.admin.deleteAccount',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete a user account as an administrator.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminDisableAccountInvites: {
		        lexicon: 1,
		        id: 'com.atproto.admin.disableAccountInvites',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Disable an account from receiving new invite codes, but does not invalidate existing codes.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['account'],
		                        properties: {
		                            account: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            note: {
		                                type: 'string',
		                                description: 'Optional reason for disabled invites.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminDisableInviteCodes: {
		        lexicon: 1,
		        id: 'com.atproto.admin.disableInviteCodes',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Disable some set of codes and/or all codes associated with a set of users.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            codes: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            accounts: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminEnableAccountInvites: {
		        lexicon: 1,
		        id: 'com.atproto.admin.enableAccountInvites',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Re-enable an account's ability to receive invite codes.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['account'],
		                        properties: {
		                            account: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            note: {
		                                type: 'string',
		                                description: 'Optional reason for enabled invites.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminGetAccountInfo: {
		        lexicon: 1,
		        id: 'com.atproto.admin.getAccountInfo',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about an account.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.admin.defs#accountView',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminGetAccountInfos: {
		        lexicon: 1,
		        id: 'com.atproto.admin.getAccountInfos',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about some accounts.',
		                parameters: {
		                    type: 'params',
		                    required: ['dids'],
		                    properties: {
		                        dids: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['infos'],
		                        properties: {
		                            infos: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.admin.defs#accountView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminGetInviteCodes: {
		        lexicon: 1,
		        id: 'com.atproto.admin.getInviteCodes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get an admin view of invite codes.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        sort: {
		                            type: 'string',
		                            knownValues: ['recent', 'usage'],
		                            default: 'recent',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 500,
		                            default: 100,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['codes'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            codes: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.server.defs#inviteCode',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminGetSubjectStatus: {
		        lexicon: 1,
		        id: 'com.atproto.admin.getSubjectStatus',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get the service-specific admin status of a subject (account, record, or blob).',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                        uri: {
		                            type: 'string',
		                            format: 'at-uri',
		                        },
		                        blob: {
		                            type: 'string',
		                            format: 'cid',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject'],
		                        properties: {
		                            subject: {
		                                type: 'union',
		                                refs: [
		                                    'lex:com.atproto.admin.defs#repoRef',
		                                    'lex:com.atproto.repo.strongRef',
		                                    'lex:com.atproto.admin.defs#repoBlobRef',
		                                ],
		                            },
		                            takedown: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.admin.defs#statusAttr',
		                            },
		                            deactivated: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.admin.defs#statusAttr',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminSearchAccounts: {
		        lexicon: 1,
		        id: 'com.atproto.admin.searchAccounts',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get list of accounts that matches your search query.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        email: {
		                            type: 'string',
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['accounts'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            accounts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.admin.defs#accountView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminSendEmail: {
		        lexicon: 1,
		        id: 'com.atproto.admin.sendEmail',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Send email to a user's account email address.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['recipientDid', 'content', 'senderDid'],
		                        properties: {
		                            recipientDid: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            content: {
		                                type: 'string',
		                            },
		                            subject: {
		                                type: 'string',
		                            },
		                            senderDid: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            comment: {
		                                type: 'string',
		                                description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers",
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['sent'],
		                        properties: {
		                            sent: {
		                                type: 'boolean',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminUpdateAccountEmail: {
		        lexicon: 1,
		        id: 'com.atproto.admin.updateAccountEmail',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Administrative action to update an account's email.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['account', 'email'],
		                        properties: {
		                            account: {
		                                type: 'string',
		                                format: 'at-identifier',
		                                description: 'The handle or DID of the repo.',
		                            },
		                            email: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminUpdateAccountHandle: {
		        lexicon: 1,
		        id: 'com.atproto.admin.updateAccountHandle',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Administrative action to update an account's handle.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'handle'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminUpdateAccountPassword: {
		        lexicon: 1,
		        id: 'com.atproto.admin.updateAccountPassword',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Update the password for a user account as an administrator.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'password'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            password: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminUpdateAccountSigningKey: {
		        lexicon: 1,
		        id: 'com.atproto.admin.updateAccountSigningKey',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Administrative action to update an account's signing key in their Did document.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'signingKey'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            signingKey: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'Did-key formatted public key',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoAdminUpdateSubjectStatus: {
		        lexicon: 1,
		        id: 'com.atproto.admin.updateSubjectStatus',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Update the service-specific admin status of a subject (account, record, or blob).',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject'],
		                        properties: {
		                            subject: {
		                                type: 'union',
		                                refs: [
		                                    'lex:com.atproto.admin.defs#repoRef',
		                                    'lex:com.atproto.repo.strongRef',
		                                    'lex:com.atproto.admin.defs#repoBlobRef',
		                                ],
		                            },
		                            takedown: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.admin.defs#statusAttr',
		                            },
		                            deactivated: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.admin.defs#statusAttr',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject'],
		                        properties: {
		                            subject: {
		                                type: 'union',
		                                refs: [
		                                    'lex:com.atproto.admin.defs#repoRef',
		                                    'lex:com.atproto.repo.strongRef',
		                                    'lex:com.atproto.admin.defs#repoBlobRef',
		                                ],
		                            },
		                            takedown: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.admin.defs#statusAttr',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoIdentityDefs: {
		        lexicon: 1,
		        id: 'com.atproto.identity.defs',
		        defs: {
		            identityInfo: {
		                type: 'object',
		                required: ['did', 'handle', 'didDoc'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                        description: "The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document.",
		                    },
		                    didDoc: {
		                        type: 'unknown',
		                        description: 'The complete DID document for the identity.',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoIdentityGetRecommendedDidCredentials: {
		        lexicon: 1,
		        id: 'com.atproto.identity.getRecommendedDidCredentials',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Describe the credentials that should be included in the DID doc of an account that is migrating to this service.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            rotationKeys: {
		                                description: 'Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.',
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            alsoKnownAs: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            verificationMethods: {
		                                type: 'unknown',
		                            },
		                            services: {
		                                type: 'unknown',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoIdentityRefreshIdentity: {
		        lexicon: 1,
		        id: 'com.atproto.identity.refreshIdentity',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Request that the server re-resolve an identity (DID and handle). The server may ignore this request, or require authentication, depending on the role, implementation, and policy of the server.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['identifier'],
		                        properties: {
		                            identifier: {
		                                type: 'string',
		                                format: 'at-identifier',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.identity.defs#identityInfo',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'HandleNotFound',
		                        description: 'The resolution process confirmed that the handle does not resolve to any DID.',
		                    },
		                    {
		                        name: 'DidNotFound',
		                        description: 'The DID resolution process confirmed that there is no current DID.',
		                    },
		                    {
		                        name: 'DidDeactivated',
		                        description: 'The DID previously existed, but has been deactivated.',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoIdentityRequestPlcOperationSignature: {
		        lexicon: 1,
		        id: 'com.atproto.identity.requestPlcOperationSignature',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Request an email with a code to in order to request a signed PLC operation. Requires Auth.',
		            },
		        },
		    },
		    ComAtprotoIdentityResolveDid: {
		        lexicon: 1,
		        id: 'com.atproto.identity.resolveDid',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Resolves DID to DID document. Does not bi-directionally verify handle.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID to resolve.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['didDoc'],
		                        properties: {
		                            didDoc: {
		                                type: 'unknown',
		                                description: 'The complete DID document for the identity.',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'DidNotFound',
		                        description: 'The DID resolution process confirmed that there is no current DID.',
		                    },
		                    {
		                        name: 'DidDeactivated',
		                        description: 'The DID previously existed, but has been deactivated.',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoIdentityResolveHandle: {
		        lexicon: 1,
		        id: 'com.atproto.identity.resolveHandle',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Resolves an atproto handle (hostname) to a DID. Does not necessarily bi-directionally verify against the the DID document.',
		                parameters: {
		                    type: 'params',
		                    required: ['handle'],
		                    properties: {
		                        handle: {
		                            type: 'string',
		                            format: 'handle',
		                            description: 'The handle to resolve.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'HandleNotFound',
		                        description: 'The resolution process confirmed that the handle does not resolve to any DID.',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoIdentityResolveIdentity: {
		        lexicon: 1,
		        id: 'com.atproto.identity.resolveIdentity',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Resolves an identity (DID or Handle) to a full identity (DID document and verified handle).',
		                parameters: {
		                    type: 'params',
		                    required: ['identifier'],
		                    properties: {
		                        identifier: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Handle or DID to resolve.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.identity.defs#identityInfo',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'HandleNotFound',
		                        description: 'The resolution process confirmed that the handle does not resolve to any DID.',
		                    },
		                    {
		                        name: 'DidNotFound',
		                        description: 'The DID resolution process confirmed that there is no current DID.',
		                    },
		                    {
		                        name: 'DidDeactivated',
		                        description: 'The DID previously existed, but has been deactivated.',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoIdentitySignPlcOperation: {
		        lexicon: 1,
		        id: 'com.atproto.identity.signPlcOperation',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            token: {
		                                description: 'A token received through com.atproto.identity.requestPlcOperationSignature',
		                                type: 'string',
		                            },
		                            rotationKeys: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            alsoKnownAs: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            verificationMethods: {
		                                type: 'unknown',
		                            },
		                            services: {
		                                type: 'unknown',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['operation'],
		                        properties: {
		                            operation: {
		                                type: 'unknown',
		                                description: 'A signed DID PLC operation.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoIdentitySubmitPlcOperation: {
		        lexicon: 1,
		        id: 'com.atproto.identity.submitPlcOperation',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['operation'],
		                        properties: {
		                            operation: {
		                                type: 'unknown',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoIdentityUpdateHandle: {
		        lexicon: 1,
		        id: 'com.atproto.identity.updateHandle',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['handle'],
		                        properties: {
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                                description: 'The new handle.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoLabelDefs: {
		        lexicon: 1,
		        id: 'com.atproto.label.defs',
		        defs: {
		            label: {
		                type: 'object',
		                description: 'Metadata tag on an atproto resource (eg, repo or record).',
		                required: ['src', 'uri', 'val', 'cts'],
		                properties: {
		                    ver: {
		                        type: 'integer',
		                        description: 'The AT Protocol version of the label object.',
		                    },
		                    src: {
		                        type: 'string',
		                        format: 'did',
		                        description: 'DID of the actor who created this label.',
		                    },
		                    uri: {
		                        type: 'string',
		                        format: 'uri',
		                        description: 'AT URI of the record, repository (account), or other resource that this label applies to.',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                        description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to.",
		                    },
		                    val: {
		                        type: 'string',
		                        maxLength: 128,
		                        description: 'The short string name of the value or type of this label.',
		                    },
		                    neg: {
		                        type: 'boolean',
		                        description: 'If true, this is a negation label, overwriting a previous label.',
		                    },
		                    cts: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp when this label was created.',
		                    },
		                    exp: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp at which this label expires (no longer applies).',
		                    },
		                    sig: {
		                        type: 'bytes',
		                        description: 'Signature of dag-cbor encoded label.',
		                    },
		                },
		            },
		            selfLabels: {
		                type: 'object',
		                description: 'Metadata tags on an atproto record, published by the author within the record.',
		                required: ['values'],
		                properties: {
		                    values: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#selfLabel',
		                        },
		                        maxLength: 10,
		                    },
		                },
		            },
		            selfLabel: {
		                type: 'object',
		                description: 'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',
		                required: ['val'],
		                properties: {
		                    val: {
		                        type: 'string',
		                        maxLength: 128,
		                        description: 'The short string name of the value or type of this label.',
		                    },
		                },
		            },
		            labelValueDefinition: {
		                type: 'object',
		                description: 'Declares a label value and its expected interpretations and behaviors.',
		                required: ['identifier', 'severity', 'blurs', 'locales'],
		                properties: {
		                    identifier: {
		                        type: 'string',
		                        description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
		                        maxLength: 100,
		                        maxGraphemes: 100,
		                    },
		                    severity: {
		                        type: 'string',
		                        description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
		                        knownValues: ['inform', 'alert', 'none'],
		                    },
		                    blurs: {
		                        type: 'string',
		                        description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
		                        knownValues: ['content', 'media', 'none'],
		                    },
		                    defaultSetting: {
		                        type: 'string',
		                        description: 'The default setting for this label.',
		                        knownValues: ['ignore', 'warn', 'hide'],
		                        default: 'warn',
		                    },
		                    adultOnly: {
		                        type: 'boolean',
		                        description: 'Does the user need to have adult content enabled in order to configure this label?',
		                    },
		                    locales: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#labelValueDefinitionStrings',
		                        },
		                    },
		                },
		            },
		            labelValueDefinitionStrings: {
		                type: 'object',
		                description: 'Strings which describe the label in the UI, localized into a specific language.',
		                required: ['lang', 'name', 'description'],
		                properties: {
		                    lang: {
		                        type: 'string',
		                        description: 'The code of the language these strings are written in.',
		                        format: 'language',
		                    },
		                    name: {
		                        type: 'string',
		                        description: 'A short human-readable name for the label.',
		                        maxGraphemes: 64,
		                        maxLength: 640,
		                    },
		                    description: {
		                        type: 'string',
		                        description: 'A longer description of what the label means and why it might be applied.',
		                        maxGraphemes: 10000,
		                        maxLength: 100000,
		                    },
		                },
		            },
		            labelValue: {
		                type: 'string',
		                knownValues: [
		                    '!hide',
		                    '!no-promote',
		                    '!warn',
		                    '!no-unauthenticated',
		                    'dmca-violation',
		                    'doxxing',
		                    'porn',
		                    'sexual',
		                    'nudity',
		                    'nsfl',
		                    'gore',
		                ],
		            },
		        },
		    },
		    ComAtprotoLabelQueryLabels: {
		        lexicon: 1,
		        id: 'com.atproto.label.queryLabels',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['uriPatterns'],
		                    properties: {
		                        uriPatterns: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.",
		                        },
		                        sources: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            description: 'Optional list of label sources (DIDs) to filter on.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 250,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['labels'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            labels: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.label.defs#label',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoLabelSubscribeLabels: {
		        lexicon: 1,
		        id: 'com.atproto.label.subscribeLabels',
		        defs: {
		            main: {
		                type: 'subscription',
		                description: 'Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        cursor: {
		                            type: 'integer',
		                            description: 'The last known event seq number to backfill from.',
		                        },
		                    },
		                },
		                message: {
		                    schema: {
		                        type: 'union',
		                        refs: [
		                            'lex:com.atproto.label.subscribeLabels#labels',
		                            'lex:com.atproto.label.subscribeLabels#info',
		                        ],
		                    },
		                },
		                errors: [
		                    {
		                        name: 'FutureCursor',
		                    },
		                ],
		            },
		            labels: {
		                type: 'object',
		                required: ['seq', 'labels'],
		                properties: {
		                    seq: {
		                        type: 'integer',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                },
		            },
		            info: {
		                type: 'object',
		                required: ['name'],
		                properties: {
		                    name: {
		                        type: 'string',
		                        knownValues: ['OutdatedCursor'],
		                    },
		                    message: {
		                        type: 'string',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoLexiconSchema: {
		        lexicon: 1,
		        id: 'com.atproto.lexicon.schema',
		        defs: {
		            main: {
		                type: 'record',
		                description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).",
		                key: 'nsid',
		                record: {
		                    type: 'object',
		                    required: ['lexicon'],
		                    properties: {
		                        lexicon: {
		                            type: 'integer',
		                            description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system.",
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoModerationCreateReport: {
		        lexicon: 1,
		        id: 'com.atproto.moderation.createReport',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['reasonType', 'subject'],
		                        properties: {
		                            reasonType: {
		                                type: 'ref',
		                                description: 'Indicates the broad category of violation the report is for.',
		                                ref: 'lex:com.atproto.moderation.defs#reasonType',
		                            },
		                            reason: {
		                                type: 'string',
		                                maxGraphemes: 2000,
		                                maxLength: 20000,
		                                description: 'Additional context about the content and violation.',
		                            },
		                            subject: {
		                                type: 'union',
		                                refs: [
		                                    'lex:com.atproto.admin.defs#repoRef',
		                                    'lex:com.atproto.repo.strongRef',
		                                ],
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: [
		                            'id',
		                            'reasonType',
		                            'subject',
		                            'reportedBy',
		                            'createdAt',
		                        ],
		                        properties: {
		                            id: {
		                                type: 'integer',
		                            },
		                            reasonType: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.moderation.defs#reasonType',
		                            },
		                            reason: {
		                                type: 'string',
		                                maxGraphemes: 2000,
		                                maxLength: 20000,
		                            },
		                            subject: {
		                                type: 'union',
		                                refs: [
		                                    'lex:com.atproto.admin.defs#repoRef',
		                                    'lex:com.atproto.repo.strongRef',
		                                ],
		                            },
		                            reportedBy: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            createdAt: {
		                                type: 'string',
		                                format: 'datetime',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoModerationDefs: {
		        lexicon: 1,
		        id: 'com.atproto.moderation.defs',
		        defs: {
		            reasonType: {
		                type: 'string',
		                knownValues: [
		                    'com.atproto.moderation.defs#reasonSpam',
		                    'com.atproto.moderation.defs#reasonViolation',
		                    'com.atproto.moderation.defs#reasonMisleading',
		                    'com.atproto.moderation.defs#reasonSexual',
		                    'com.atproto.moderation.defs#reasonRude',
		                    'com.atproto.moderation.defs#reasonOther',
		                    'com.atproto.moderation.defs#reasonAppeal',
		                ],
		            },
		            reasonSpam: {
		                type: 'token',
		                description: 'Spam: frequent unwanted promotion, replies, mentions',
		            },
		            reasonViolation: {
		                type: 'token',
		                description: 'Direct violation of server rules, laws, terms of service',
		            },
		            reasonMisleading: {
		                type: 'token',
		                description: 'Misleading identity, affiliation, or content',
		            },
		            reasonSexual: {
		                type: 'token',
		                description: 'Unwanted or mislabeled sexual content',
		            },
		            reasonRude: {
		                type: 'token',
		                description: 'Rude, harassing, explicit, or otherwise unwelcoming behavior',
		            },
		            reasonOther: {
		                type: 'token',
		                description: 'Other: reports not falling under another report category',
		            },
		            reasonAppeal: {
		                type: 'token',
		                description: 'Appeal: appeal a previously taken moderation action',
		            },
		            subjectType: {
		                type: 'string',
		                description: 'Tag describing a type of subject that might be reported.',
		                knownValues: ['account', 'record', 'chat'],
		            },
		        },
		    },
		    ComAtprotoRepoApplyWrites: {
		        lexicon: 1,
		        id: 'com.atproto.repo.applyWrites',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repo', 'writes'],
		                        properties: {
		                            repo: {
		                                type: 'string',
		                                format: 'at-identifier',
		                                description: 'The handle or DID of the repo (aka, current account).',
		                            },
		                            validate: {
		                                type: 'boolean',
		                                description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons.",
		                            },
		                            writes: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:com.atproto.repo.applyWrites#create',
		                                        'lex:com.atproto.repo.applyWrites#update',
		                                        'lex:com.atproto.repo.applyWrites#delete',
		                                    ],
		                                    closed: true,
		                                },
		                            },
		                            swapCommit: {
		                                type: 'string',
		                                description: 'If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.',
		                                format: 'cid',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: [],
		                        properties: {
		                            commit: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.repo.defs#commitMeta',
		                            },
		                            results: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:com.atproto.repo.applyWrites#createResult',
		                                        'lex:com.atproto.repo.applyWrites#updateResult',
		                                        'lex:com.atproto.repo.applyWrites#deleteResult',
		                                    ],
		                                    closed: true,
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'InvalidSwap',
		                        description: "Indicates that the 'swapCommit' parameter did not match current commit.",
		                    },
		                ],
		            },
		            create: {
		                type: 'object',
		                description: 'Operation which creates a new record.',
		                required: ['collection', 'value'],
		                properties: {
		                    collection: {
		                        type: 'string',
		                        format: 'nsid',
		                    },
		                    rkey: {
		                        type: 'string',
		                        maxLength: 512,
		                        format: 'record-key',
		                        description: 'NOTE: maxLength is redundant with record-key format. Keeping it temporarily to ensure backwards compatibility.',
		                    },
		                    value: {
		                        type: 'unknown',
		                    },
		                },
		            },
		            update: {
		                type: 'object',
		                description: 'Operation which updates an existing record.',
		                required: ['collection', 'rkey', 'value'],
		                properties: {
		                    collection: {
		                        type: 'string',
		                        format: 'nsid',
		                    },
		                    rkey: {
		                        type: 'string',
		                        format: 'record-key',
		                    },
		                    value: {
		                        type: 'unknown',
		                    },
		                },
		            },
		            delete: {
		                type: 'object',
		                description: 'Operation which deletes an existing record.',
		                required: ['collection', 'rkey'],
		                properties: {
		                    collection: {
		                        type: 'string',
		                        format: 'nsid',
		                    },
		                    rkey: {
		                        type: 'string',
		                        format: 'record-key',
		                    },
		                },
		            },
		            createResult: {
		                type: 'object',
		                required: ['uri', 'cid'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    validationStatus: {
		                        type: 'string',
		                        knownValues: ['valid', 'unknown'],
		                    },
		                },
		            },
		            updateResult: {
		                type: 'object',
		                required: ['uri', 'cid'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    validationStatus: {
		                        type: 'string',
		                        knownValues: ['valid', 'unknown'],
		                    },
		                },
		            },
		            deleteResult: {
		                type: 'object',
		                required: [],
		                properties: {},
		            },
		        },
		    },
		    ComAtprotoRepoCreateRecord: {
		        lexicon: 1,
		        id: 'com.atproto.repo.createRecord',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create a single new repository record. Requires auth, implemented by PDS.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repo', 'collection', 'record'],
		                        properties: {
		                            repo: {
		                                type: 'string',
		                                format: 'at-identifier',
		                                description: 'The handle or DID of the repo (aka, current account).',
		                            },
		                            collection: {
		                                type: 'string',
		                                format: 'nsid',
		                                description: 'The NSID of the record collection.',
		                            },
		                            rkey: {
		                                type: 'string',
		                                format: 'record-key',
		                                description: 'The Record Key.',
		                                maxLength: 512,
		                            },
		                            validate: {
		                                type: 'boolean',
		                                description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.",
		                            },
		                            record: {
		                                type: 'unknown',
		                                description: 'The record itself. Must contain a $type field.',
		                            },
		                            swapCommit: {
		                                type: 'string',
		                                format: 'cid',
		                                description: 'Compare and swap with the previous commit by CID.',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uri', 'cid'],
		                        properties: {
		                            uri: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            commit: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.repo.defs#commitMeta',
		                            },
		                            validationStatus: {
		                                type: 'string',
		                                knownValues: ['valid', 'unknown'],
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'InvalidSwap',
		                        description: "Indicates that 'swapCommit' didn't match current repo commit.",
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoRepoDefs: {
		        lexicon: 1,
		        id: 'com.atproto.repo.defs',
		        defs: {
		            commitMeta: {
		                type: 'object',
		                required: ['cid', 'rev'],
		                properties: {
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    rev: {
		                        type: 'string',
		                        format: 'tid',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoRepoDeleteRecord: {
		        lexicon: 1,
		        id: 'com.atproto.repo.deleteRecord',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repo', 'collection', 'rkey'],
		                        properties: {
		                            repo: {
		                                type: 'string',
		                                format: 'at-identifier',
		                                description: 'The handle or DID of the repo (aka, current account).',
		                            },
		                            collection: {
		                                type: 'string',
		                                format: 'nsid',
		                                description: 'The NSID of the record collection.',
		                            },
		                            rkey: {
		                                type: 'string',
		                                format: 'record-key',
		                                description: 'The Record Key.',
		                            },
		                            swapRecord: {
		                                type: 'string',
		                                format: 'cid',
		                                description: 'Compare and swap with the previous record by CID.',
		                            },
		                            swapCommit: {
		                                type: 'string',
		                                format: 'cid',
		                                description: 'Compare and swap with the previous commit by CID.',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            commit: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.repo.defs#commitMeta',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'InvalidSwap',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoRepoDescribeRepo: {
		        lexicon: 1,
		        id: 'com.atproto.repo.describeRepo',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get information about an account and repository, including the list of collections. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['repo'],
		                    properties: {
		                        repo: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'The handle or DID of the repo.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: [
		                            'handle',
		                            'did',
		                            'didDoc',
		                            'collections',
		                            'handleIsCorrect',
		                        ],
		                        properties: {
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            didDoc: {
		                                type: 'unknown',
		                                description: 'The complete DID document for this account.',
		                            },
		                            collections: {
		                                type: 'array',
		                                description: 'List of all the collections (NSIDs) for which this repo contains at least one record.',
		                                items: {
		                                    type: 'string',
		                                    format: 'nsid',
		                                },
		                            },
		                            handleIsCorrect: {
		                                type: 'boolean',
		                                description: 'Indicates if handle is currently valid (resolves bi-directionally)',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoRepoGetRecord: {
		        lexicon: 1,
		        id: 'com.atproto.repo.getRecord',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a single record from a repository. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['repo', 'collection', 'rkey'],
		                    properties: {
		                        repo: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'The handle or DID of the repo.',
		                        },
		                        collection: {
		                            type: 'string',
		                            format: 'nsid',
		                            description: 'The NSID of the record collection.',
		                        },
		                        rkey: {
		                            type: 'string',
		                            description: 'The Record Key.',
		                            format: 'record-key',
		                        },
		                        cid: {
		                            type: 'string',
		                            format: 'cid',
		                            description: 'The CID of the version of the record. If not specified, then return the most recent version.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uri', 'value'],
		                        properties: {
		                            uri: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            value: {
		                                type: 'unknown',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'RecordNotFound',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoRepoImportRepo: {
		        lexicon: 1,
		        id: 'com.atproto.repo.importRepo',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.',
		                input: {
		                    encoding: 'application/vnd.ipld.car',
		                },
		            },
		        },
		    },
		    ComAtprotoRepoListMissingBlobs: {
		        lexicon: 1,
		        id: 'com.atproto.repo.listMissingBlobs',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 1000,
		                            default: 500,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['blobs'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            blobs: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.repo.listMissingBlobs#recordBlob',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            recordBlob: {
		                type: 'object',
		                required: ['cid', 'recordUri'],
		                properties: {
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    recordUri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoRepoListRecords: {
		        lexicon: 1,
		        id: 'com.atproto.repo.listRecords',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List a range of records in a repository, matching a specific collection. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['repo', 'collection'],
		                    properties: {
		                        repo: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'The handle or DID of the repo.',
		                        },
		                        collection: {
		                            type: 'string',
		                            format: 'nsid',
		                            description: 'The NSID of the record type.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                            description: 'The number of records to return.',
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        reverse: {
		                            type: 'boolean',
		                            description: 'Flag to reverse the order of the returned records.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['records'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            records: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.repo.listRecords#record',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            record: {
		                type: 'object',
		                required: ['uri', 'cid', 'value'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    value: {
		                        type: 'unknown',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoRepoPutRecord: {
		        lexicon: 1,
		        id: 'com.atproto.repo.putRecord',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repo', 'collection', 'rkey', 'record'],
		                        nullable: ['swapRecord'],
		                        properties: {
		                            repo: {
		                                type: 'string',
		                                format: 'at-identifier',
		                                description: 'The handle or DID of the repo (aka, current account).',
		                            },
		                            collection: {
		                                type: 'string',
		                                format: 'nsid',
		                                description: 'The NSID of the record collection.',
		                            },
		                            rkey: {
		                                type: 'string',
		                                format: 'record-key',
		                                description: 'The Record Key.',
		                                maxLength: 512,
		                            },
		                            validate: {
		                                type: 'boolean',
		                                description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.",
		                            },
		                            record: {
		                                type: 'unknown',
		                                description: 'The record to write.',
		                            },
		                            swapRecord: {
		                                type: 'string',
		                                format: 'cid',
		                                description: 'Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation',
		                            },
		                            swapCommit: {
		                                type: 'string',
		                                format: 'cid',
		                                description: 'Compare and swap with the previous commit by CID.',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uri', 'cid'],
		                        properties: {
		                            uri: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            commit: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.repo.defs#commitMeta',
		                            },
		                            validationStatus: {
		                                type: 'string',
		                                knownValues: ['valid', 'unknown'],
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'InvalidSwap',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoRepoStrongRef: {
		        lexicon: 1,
		        id: 'com.atproto.repo.strongRef',
		        description: 'A URI with a content-hash fingerprint.',
		        defs: {
		            main: {
		                type: 'object',
		                required: ['uri', 'cid'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoRepoUploadBlob: {
		        lexicon: 1,
		        id: 'com.atproto.repo.uploadBlob',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.',
		                input: {
		                    encoding: '*/*',
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['blob'],
		                        properties: {
		                            blob: {
		                                type: 'blob',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerActivateAccount: {
		        lexicon: 1,
		        id: 'com.atproto.server.activateAccount',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup.",
		            },
		        },
		    },
		    ComAtprotoServerCheckAccountStatus: {
		        lexicon: 1,
		        id: 'com.atproto.server.checkAccountStatus',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: [
		                            'activated',
		                            'validDid',
		                            'repoCommit',
		                            'repoRev',
		                            'repoBlocks',
		                            'indexedRecords',
		                            'privateStateValues',
		                            'expectedBlobs',
		                            'importedBlobs',
		                        ],
		                        properties: {
		                            activated: {
		                                type: 'boolean',
		                            },
		                            validDid: {
		                                type: 'boolean',
		                            },
		                            repoCommit: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            repoRev: {
		                                type: 'string',
		                            },
		                            repoBlocks: {
		                                type: 'integer',
		                            },
		                            indexedRecords: {
		                                type: 'integer',
		                            },
		                            privateStateValues: {
		                                type: 'integer',
		                            },
		                            expectedBlobs: {
		                                type: 'integer',
		                            },
		                            importedBlobs: {
		                                type: 'integer',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerConfirmEmail: {
		        lexicon: 1,
		        id: 'com.atproto.server.confirmEmail',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['email', 'token'],
		                        properties: {
		                            email: {
		                                type: 'string',
		                            },
		                            token: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'AccountNotFound',
		                    },
		                    {
		                        name: 'ExpiredToken',
		                    },
		                    {
		                        name: 'InvalidToken',
		                    },
		                    {
		                        name: 'InvalidEmail',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerCreateAccount: {
		        lexicon: 1,
		        id: 'com.atproto.server.createAccount',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create an account. Implemented by PDS.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['handle'],
		                        properties: {
		                            email: {
		                                type: 'string',
		                            },
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                                description: 'Requested handle for the account.',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'Pre-existing atproto DID, being imported to a new account.',
		                            },
		                            inviteCode: {
		                                type: 'string',
		                            },
		                            verificationCode: {
		                                type: 'string',
		                            },
		                            verificationPhone: {
		                                type: 'string',
		                            },
		                            password: {
		                                type: 'string',
		                                description: 'Initial account password. May need to meet instance-specific password strength requirements.',
		                            },
		                            recoveryKey: {
		                                type: 'string',
		                                description: 'DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.',
		                            },
		                            plcOp: {
		                                type: 'unknown',
		                                description: 'A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        description: 'Account login session returned on successful account creation.',
		                        required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
		                        properties: {
		                            accessJwt: {
		                                type: 'string',
		                            },
		                            refreshJwt: {
		                                type: 'string',
		                            },
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'The DID of the new account.',
		                            },
		                            didDoc: {
		                                type: 'unknown',
		                                description: 'Complete DID document.',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'InvalidHandle',
		                    },
		                    {
		                        name: 'InvalidPassword',
		                    },
		                    {
		                        name: 'InvalidInviteCode',
		                    },
		                    {
		                        name: 'HandleNotAvailable',
		                    },
		                    {
		                        name: 'UnsupportedDomain',
		                    },
		                    {
		                        name: 'UnresolvableDid',
		                    },
		                    {
		                        name: 'IncompatibleDidDoc',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerCreateAppPassword: {
		        lexicon: 1,
		        id: 'com.atproto.server.createAppPassword',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create an App Password.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['name'],
		                        properties: {
		                            name: {
		                                type: 'string',
		                                description: 'A short name for the App Password, to help distinguish them.',
		                            },
		                            privileged: {
		                                type: 'boolean',
		                                description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.",
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.server.createAppPassword#appPassword',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'AccountTakedown',
		                    },
		                ],
		            },
		            appPassword: {
		                type: 'object',
		                required: ['name', 'password', 'createdAt'],
		                properties: {
		                    name: {
		                        type: 'string',
		                    },
		                    password: {
		                        type: 'string',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    privileged: {
		                        type: 'boolean',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerCreateInviteCode: {
		        lexicon: 1,
		        id: 'com.atproto.server.createInviteCode',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create an invite code.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['useCount'],
		                        properties: {
		                            useCount: {
		                                type: 'integer',
		                            },
		                            forAccount: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['code'],
		                        properties: {
		                            code: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerCreateInviteCodes: {
		        lexicon: 1,
		        id: 'com.atproto.server.createInviteCodes',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create invite codes.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['codeCount', 'useCount'],
		                        properties: {
		                            codeCount: {
		                                type: 'integer',
		                                default: 1,
		                            },
		                            useCount: {
		                                type: 'integer',
		                            },
		                            forAccounts: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                    format: 'did',
		                                },
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['codes'],
		                        properties: {
		                            codes: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.server.createInviteCodes#accountCodes',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            accountCodes: {
		                type: 'object',
		                required: ['account', 'codes'],
		                properties: {
		                    account: {
		                        type: 'string',
		                    },
		                    codes: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerCreateSession: {
		        lexicon: 1,
		        id: 'com.atproto.server.createSession',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create an authentication session.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['identifier', 'password'],
		                        properties: {
		                            identifier: {
		                                type: 'string',
		                                description: 'Handle or other identifier supported by the server for the authenticating user.',
		                            },
		                            password: {
		                                type: 'string',
		                            },
		                            authFactorToken: {
		                                type: 'string',
		                            },
		                            allowTakendown: {
		                                type: 'boolean',
		                                description: 'When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
		                        properties: {
		                            accessJwt: {
		                                type: 'string',
		                            },
		                            refreshJwt: {
		                                type: 'string',
		                            },
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            didDoc: {
		                                type: 'unknown',
		                            },
		                            email: {
		                                type: 'string',
		                            },
		                            emailConfirmed: {
		                                type: 'boolean',
		                            },
		                            emailAuthFactor: {
		                                type: 'boolean',
		                            },
		                            active: {
		                                type: 'boolean',
		                            },
		                            status: {
		                                type: 'string',
		                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
		                                knownValues: ['takendown', 'suspended', 'deactivated'],
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'AccountTakedown',
		                    },
		                    {
		                        name: 'AuthFactorTokenRequired',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerDeactivateAccount: {
		        lexicon: 1,
		        id: 'com.atproto.server.deactivateAccount',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            deleteAfter: {
		                                type: 'string',
		                                format: 'datetime',
		                                description: 'A recommendation to server as to how long they should hold onto the deactivated account before deleting.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerDefs: {
		        lexicon: 1,
		        id: 'com.atproto.server.defs',
		        defs: {
		            inviteCode: {
		                type: 'object',
		                required: [
		                    'code',
		                    'available',
		                    'disabled',
		                    'forAccount',
		                    'createdBy',
		                    'createdAt',
		                    'uses',
		                ],
		                properties: {
		                    code: {
		                        type: 'string',
		                    },
		                    available: {
		                        type: 'integer',
		                    },
		                    disabled: {
		                        type: 'boolean',
		                    },
		                    forAccount: {
		                        type: 'string',
		                    },
		                    createdBy: {
		                        type: 'string',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    uses: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.server.defs#inviteCodeUse',
		                        },
		                    },
		                },
		            },
		            inviteCodeUse: {
		                type: 'object',
		                required: ['usedBy', 'usedAt'],
		                properties: {
		                    usedBy: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    usedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerDeleteAccount: {
		        lexicon: 1,
		        id: 'com.atproto.server.deleteAccount',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'password', 'token'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            password: {
		                                type: 'string',
		                            },
		                            token: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'ExpiredToken',
		                    },
		                    {
		                        name: 'InvalidToken',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerDeleteSession: {
		        lexicon: 1,
		        id: 'com.atproto.server.deleteSession',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete the current session. Requires auth.',
		            },
		        },
		    },
		    ComAtprotoServerDescribeServer: {
		        lexicon: 1,
		        id: 'com.atproto.server.describeServer',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'availableUserDomains'],
		                        properties: {
		                            inviteCodeRequired: {
		                                type: 'boolean',
		                                description: 'If true, an invite code must be supplied to create an account on this instance.',
		                            },
		                            phoneVerificationRequired: {
		                                type: 'boolean',
		                                description: 'If true, a phone verification token must be supplied to create an account on this instance.',
		                            },
		                            availableUserDomains: {
		                                type: 'array',
		                                description: 'List of domain suffixes that can be used in account handles.',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            links: {
		                                type: 'ref',
		                                description: 'URLs of service policy documents.',
		                                ref: 'lex:com.atproto.server.describeServer#links',
		                            },
		                            contact: {
		                                type: 'ref',
		                                description: 'Contact information',
		                                ref: 'lex:com.atproto.server.describeServer#contact',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		            },
		            links: {
		                type: 'object',
		                properties: {
		                    privacyPolicy: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    termsOfService: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                },
		            },
		            contact: {
		                type: 'object',
		                properties: {
		                    email: {
		                        type: 'string',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerGetAccountInviteCodes: {
		        lexicon: 1,
		        id: 'com.atproto.server.getAccountInviteCodes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get all invite codes for the current account. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        includeUsed: {
		                            type: 'boolean',
		                            default: true,
		                        },
		                        createAvailable: {
		                            type: 'boolean',
		                            default: true,
		                            description: "Controls whether any new 'earned' but not 'created' invites should be created.",
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['codes'],
		                        properties: {
		                            codes: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.server.defs#inviteCode',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'DuplicateCreate',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerGetServiceAuth: {
		        lexicon: 1,
		        id: 'com.atproto.server.getServiceAuth',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a signed token on behalf of the requesting DID for the requested service.',
		                parameters: {
		                    type: 'params',
		                    required: ['aud'],
		                    properties: {
		                        aud: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the service that the token will be used to authenticate with',
		                        },
		                        exp: {
		                            type: 'integer',
		                            description: 'The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.',
		                        },
		                        lxm: {
		                            type: 'string',
		                            format: 'nsid',
		                            description: 'Lexicon (XRPC) method to bind the requested token to',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['token'],
		                        properties: {
		                            token: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BadExpiration',
		                        description: 'Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerGetSession: {
		        lexicon: 1,
		        id: 'com.atproto.server.getSession',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get information about the current auth session. Requires auth.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['handle', 'did'],
		                        properties: {
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            email: {
		                                type: 'string',
		                            },
		                            emailConfirmed: {
		                                type: 'boolean',
		                            },
		                            emailAuthFactor: {
		                                type: 'boolean',
		                            },
		                            didDoc: {
		                                type: 'unknown',
		                            },
		                            active: {
		                                type: 'boolean',
		                            },
		                            status: {
		                                type: 'string',
		                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
		                                knownValues: ['takendown', 'suspended', 'deactivated'],
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerListAppPasswords: {
		        lexicon: 1,
		        id: 'com.atproto.server.listAppPasswords',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List all App Passwords.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['passwords'],
		                        properties: {
		                            passwords: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.server.listAppPasswords#appPassword',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'AccountTakedown',
		                    },
		                ],
		            },
		            appPassword: {
		                type: 'object',
		                required: ['name', 'createdAt'],
		                properties: {
		                    name: {
		                        type: 'string',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    privileged: {
		                        type: 'boolean',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerRefreshSession: {
		        lexicon: 1,
		        id: 'com.atproto.server.refreshSession',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
		                        properties: {
		                            accessJwt: {
		                                type: 'string',
		                            },
		                            refreshJwt: {
		                                type: 'string',
		                            },
		                            handle: {
		                                type: 'string',
		                                format: 'handle',
		                            },
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            didDoc: {
		                                type: 'unknown',
		                            },
		                            active: {
		                                type: 'boolean',
		                            },
		                            status: {
		                                type: 'string',
		                                description: "Hosting status of the account. If not specified, then assume 'active'.",
		                                knownValues: ['takendown', 'suspended', 'deactivated'],
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'AccountTakedown',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerRequestAccountDelete: {
		        lexicon: 1,
		        id: 'com.atproto.server.requestAccountDelete',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Initiate a user account deletion via email.',
		            },
		        },
		    },
		    ComAtprotoServerRequestEmailConfirmation: {
		        lexicon: 1,
		        id: 'com.atproto.server.requestEmailConfirmation',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Request an email with a code to confirm ownership of email.',
		            },
		        },
		    },
		    ComAtprotoServerRequestEmailUpdate: {
		        lexicon: 1,
		        id: 'com.atproto.server.requestEmailUpdate',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Request a token in order to update email.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['tokenRequired'],
		                        properties: {
		                            tokenRequired: {
		                                type: 'boolean',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerRequestPasswordReset: {
		        lexicon: 1,
		        id: 'com.atproto.server.requestPasswordReset',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Initiate a user account password reset via email.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['email'],
		                        properties: {
		                            email: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerReserveSigningKey: {
		        lexicon: 1,
		        id: 'com.atproto.server.reserveSigningKey',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'The DID to reserve a key for.',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['signingKey'],
		                        properties: {
		                            signingKey: {
		                                type: 'string',
		                                description: 'The public key for the reserved signing key, in did:key serialization.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerResetPassword: {
		        lexicon: 1,
		        id: 'com.atproto.server.resetPassword',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Reset a user account password using a token.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['token', 'password'],
		                        properties: {
		                            token: {
		                                type: 'string',
		                            },
		                            password: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'ExpiredToken',
		                    },
		                    {
		                        name: 'InvalidToken',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoServerRevokeAppPassword: {
		        lexicon: 1,
		        id: 'com.atproto.server.revokeAppPassword',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Revoke an App Password by name.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['name'],
		                        properties: {
		                            name: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoServerUpdateEmail: {
		        lexicon: 1,
		        id: 'com.atproto.server.updateEmail',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Update an account's email.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['email'],
		                        properties: {
		                            email: {
		                                type: 'string',
		                            },
		                            emailAuthFactor: {
		                                type: 'boolean',
		                            },
		                            token: {
		                                type: 'string',
		                                description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.",
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'ExpiredToken',
		                    },
		                    {
		                        name: 'InvalidToken',
		                    },
		                    {
		                        name: 'TokenRequired',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncDefs: {
		        lexicon: 1,
		        id: 'com.atproto.sync.defs',
		        defs: {
		            hostStatus: {
		                type: 'string',
		                knownValues: ['active', 'idle', 'offline', 'throttled', 'banned'],
		            },
		        },
		    },
		    ComAtprotoSyncGetBlob: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getBlob',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.',
		                parameters: {
		                    type: 'params',
		                    required: ['did', 'cid'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the account.',
		                        },
		                        cid: {
		                            type: 'string',
		                            format: 'cid',
		                            description: 'The CID of the blob to fetch',
		                        },
		                    },
		                },
		                output: {
		                    encoding: '*/*',
		                },
		                errors: [
		                    {
		                        name: 'BlobNotFound',
		                    },
		                    {
		                        name: 'RepoNotFound',
		                    },
		                    {
		                        name: 'RepoTakendown',
		                    },
		                    {
		                        name: 'RepoSuspended',
		                    },
		                    {
		                        name: 'RepoDeactivated',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetBlocks: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getBlocks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.',
		                parameters: {
		                    type: 'params',
		                    required: ['did', 'cids'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                        cids: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/vnd.ipld.car',
		                },
		                errors: [
		                    {
		                        name: 'BlockNotFound',
		                    },
		                    {
		                        name: 'RepoNotFound',
		                    },
		                    {
		                        name: 'RepoTakendown',
		                    },
		                    {
		                        name: 'RepoSuspended',
		                    },
		                    {
		                        name: 'RepoDeactivated',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetCheckout: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getCheckout',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'DEPRECATED - please use com.atproto.sync.getRepo instead',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/vnd.ipld.car',
		                },
		            },
		        },
		    },
		    ComAtprotoSyncGetHead: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getHead',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['root'],
		                        properties: {
		                            root: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'HeadNotFound',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetHostStatus: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getHostStatus',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Returns information about a specified upstream host, as consumed by the server. Implemented by relays.',
		                parameters: {
		                    type: 'params',
		                    required: ['hostname'],
		                    properties: {
		                        hostname: {
		                            type: 'string',
		                            description: 'Hostname of the host (eg, PDS or relay) being queried.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['hostname'],
		                        properties: {
		                            hostname: {
		                                type: 'string',
		                            },
		                            seq: {
		                                type: 'integer',
		                                description: 'Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).',
		                            },
		                            accountCount: {
		                                type: 'integer',
		                                description: 'Number of accounts on the server which are associated with the upstream host. Note that the upstream may actually have more accounts.',
		                            },
		                            status: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.sync.defs#hostStatus',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'HostNotFound',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetLatestCommit: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getLatestCommit',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get the current commit CID & revision of the specified repo. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['cid', 'rev'],
		                        properties: {
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            rev: {
		                                type: 'string',
		                                format: 'tid',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'RepoNotFound',
		                    },
		                    {
		                        name: 'RepoTakendown',
		                    },
		                    {
		                        name: 'RepoSuspended',
		                    },
		                    {
		                        name: 'RepoDeactivated',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetRecord: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getRecord',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['did', 'collection', 'rkey'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                        collection: {
		                            type: 'string',
		                            format: 'nsid',
		                        },
		                        rkey: {
		                            type: 'string',
		                            description: 'Record Key',
		                            format: 'record-key',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/vnd.ipld.car',
		                },
		                errors: [
		                    {
		                        name: 'RecordNotFound',
		                    },
		                    {
		                        name: 'RepoNotFound',
		                    },
		                    {
		                        name: 'RepoTakendown',
		                    },
		                    {
		                        name: 'RepoSuspended',
		                    },
		                    {
		                        name: 'RepoDeactivated',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetRepo: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getRepo',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                        since: {
		                            type: 'string',
		                            format: 'tid',
		                            description: "The revision ('rev') of the repo to create a diff from.",
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/vnd.ipld.car',
		                },
		                errors: [
		                    {
		                        name: 'RepoNotFound',
		                    },
		                    {
		                        name: 'RepoTakendown',
		                    },
		                    {
		                        name: 'RepoSuspended',
		                    },
		                    {
		                        name: 'RepoDeactivated',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncGetRepoStatus: {
		        lexicon: 1,
		        id: 'com.atproto.sync.getRepoStatus',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'active'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            active: {
		                                type: 'boolean',
		                            },
		                            status: {
		                                type: 'string',
		                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
		                                knownValues: [
		                                    'takendown',
		                                    'suspended',
		                                    'deleted',
		                                    'deactivated',
		                                    'desynchronized',
		                                    'throttled',
		                                ],
		                            },
		                            rev: {
		                                type: 'string',
		                                format: 'tid',
		                                description: 'Optional field, the current rev of the repo, if active=true',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'RepoNotFound',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncListBlobs: {
		        lexicon: 1,
		        id: 'com.atproto.sync.listBlobs',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The DID of the repo.',
		                        },
		                        since: {
		                            type: 'string',
		                            format: 'tid',
		                            description: 'Optional revision of the repo to list blobs since.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 1000,
		                            default: 500,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['cids'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            cids: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                    format: 'cid',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'RepoNotFound',
		                    },
		                    {
		                        name: 'RepoTakendown',
		                    },
		                    {
		                        name: 'RepoSuspended',
		                    },
		                    {
		                        name: 'RepoDeactivated',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncListHosts: {
		        lexicon: 1,
		        id: 'com.atproto.sync.listHosts',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates upstream hosts (eg, PDS or relay instances) that this service consumes from. Implemented by relays.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 1000,
		                            default: 200,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['hosts'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            hosts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.sync.listHosts#host',
		                                },
		                                description: 'Sort order is not formally specified. Recommended order is by time host was first seen by the server, with oldest first.',
		                            },
		                        },
		                    },
		                },
		            },
		            host: {
		                type: 'object',
		                required: ['hostname'],
		                properties: {
		                    hostname: {
		                        type: 'string',
		                        description: 'hostname of server; not a URL (no scheme)',
		                    },
		                    seq: {
		                        type: 'integer',
		                        description: 'Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).',
		                    },
		                    accountCount: {
		                        type: 'integer',
		                    },
		                    status: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.sync.defs#hostStatus',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoSyncListRepos: {
		        lexicon: 1,
		        id: 'com.atproto.sync.listRepos',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 1000,
		                            default: 500,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repos'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            repos: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.sync.listRepos#repo',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            repo: {
		                type: 'object',
		                required: ['did', 'head', 'rev'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    head: {
		                        type: 'string',
		                        format: 'cid',
		                        description: 'Current repo commit CID',
		                    },
		                    rev: {
		                        type: 'string',
		                        format: 'tid',
		                    },
		                    active: {
		                        type: 'boolean',
		                    },
		                    status: {
		                        type: 'string',
		                        description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
		                        knownValues: [
		                            'takendown',
		                            'suspended',
		                            'deleted',
		                            'deactivated',
		                            'desynchronized',
		                            'throttled',
		                        ],
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoSyncListReposByCollection: {
		        lexicon: 1,
		        id: 'com.atproto.sync.listReposByCollection',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates all the DIDs which have records with the given collection NSID.',
		                parameters: {
		                    type: 'params',
		                    required: ['collection'],
		                    properties: {
		                        collection: {
		                            type: 'string',
		                            format: 'nsid',
		                        },
		                        limit: {
		                            type: 'integer',
		                            description: 'Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.',
		                            minimum: 1,
		                            maximum: 2000,
		                            default: 500,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repos'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            repos: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.sync.listReposByCollection#repo',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            repo: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoSyncNotifyOfUpdate: {
		        lexicon: 1,
		        id: 'com.atproto.sync.notifyOfUpdate',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay. DEPRECATED: just use com.atproto.sync.requestCrawl',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['hostname'],
		                        properties: {
		                            hostname: {
		                                type: 'string',
		                                description: 'Hostname of the current service (usually a PDS) that is notifying of update.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoSyncRequestCrawl: {
		        lexicon: 1,
		        id: 'com.atproto.sync.requestCrawl',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['hostname'],
		                        properties: {
		                            hostname: {
		                                type: 'string',
		                                description: 'Hostname of the current service (eg, PDS) that is requesting to be crawled.',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'HostBanned',
		                    },
		                ],
		            },
		        },
		    },
		    ComAtprotoSyncSubscribeRepos: {
		        lexicon: 1,
		        id: 'com.atproto.sync.subscribeRepos',
		        defs: {
		            main: {
		                type: 'subscription',
		                description: 'Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        cursor: {
		                            type: 'integer',
		                            description: 'The last known event seq number to backfill from.',
		                        },
		                    },
		                },
		                message: {
		                    schema: {
		                        type: 'union',
		                        refs: [
		                            'lex:com.atproto.sync.subscribeRepos#commit',
		                            'lex:com.atproto.sync.subscribeRepos#sync',
		                            'lex:com.atproto.sync.subscribeRepos#identity',
		                            'lex:com.atproto.sync.subscribeRepos#account',
		                            'lex:com.atproto.sync.subscribeRepos#info',
		                        ],
		                    },
		                },
		                errors: [
		                    {
		                        name: 'FutureCursor',
		                    },
		                    {
		                        name: 'ConsumerTooSlow',
		                        description: 'If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.',
		                    },
		                ],
		            },
		            commit: {
		                type: 'object',
		                description: 'Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.',
		                required: [
		                    'seq',
		                    'rebase',
		                    'tooBig',
		                    'repo',
		                    'commit',
		                    'rev',
		                    'since',
		                    'blocks',
		                    'ops',
		                    'blobs',
		                    'time',
		                ],
		                nullable: ['since'],
		                properties: {
		                    seq: {
		                        type: 'integer',
		                        description: 'The stream sequence number of this message.',
		                    },
		                    rebase: {
		                        type: 'boolean',
		                        description: 'DEPRECATED -- unused',
		                    },
		                    tooBig: {
		                        type: 'boolean',
		                        description: 'DEPRECATED -- replaced by #sync event and data limits. Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.',
		                    },
		                    repo: {
		                        type: 'string',
		                        format: 'did',
		                        description: "The repo this event comes from. Note that all other message types name this field 'did'.",
		                    },
		                    commit: {
		                        type: 'cid-link',
		                        description: 'Repo commit object CID.',
		                    },
		                    rev: {
		                        type: 'string',
		                        format: 'tid',
		                        description: 'The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.',
		                    },
		                    since: {
		                        type: 'string',
		                        format: 'tid',
		                        description: 'The rev of the last emitted commit from this repo (if any).',
		                    },
		                    blocks: {
		                        type: 'bytes',
		                        description: "CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.",
		                        maxLength: 2000000,
		                    },
		                    ops: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.sync.subscribeRepos#repoOp',
		                            description: 'List of repo mutation operations in this commit (eg, records created, updated, or deleted).',
		                        },
		                        maxLength: 200,
		                    },
		                    blobs: {
		                        type: 'array',
		                        items: {
		                            type: 'cid-link',
		                            description: 'DEPRECATED -- will soon always be empty. List of new blobs (by CID) referenced by records in this commit.',
		                        },
		                    },
		                    prevData: {
		                        type: 'cid-link',
		                        description: "The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose.",
		                    },
		                    time: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp of when this message was originally broadcast.',
		                    },
		                },
		            },
		            sync: {
		                type: 'object',
		                description: 'Updates the repo to a new state, without necessarily including that state on the firehose. Used to recover from broken commit streams, data loss incidents, or in situations where upstream host does not know recent state of the repository.',
		                required: ['seq', 'did', 'blocks', 'rev', 'time'],
		                properties: {
		                    seq: {
		                        type: 'integer',
		                        description: 'The stream sequence number of this message.',
		                    },
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                        description: 'The account this repo event corresponds to. Must match that in the commit object.',
		                    },
		                    blocks: {
		                        type: 'bytes',
		                        description: "CAR file containing the commit, as a block. The CAR header must include the commit block CID as the first 'root'.",
		                        maxLength: 10000,
		                    },
		                    rev: {
		                        type: 'string',
		                        description: 'The rev of the commit. This value must match that in the commit object.',
		                    },
		                    time: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp of when this message was originally broadcast.',
		                    },
		                },
		            },
		            identity: {
		                type: 'object',
		                description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
		                required: ['seq', 'did', 'time'],
		                properties: {
		                    seq: {
		                        type: 'integer',
		                    },
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    time: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                        description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details.",
		                    },
		                },
		            },
		            account: {
		                type: 'object',
		                description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",
		                required: ['seq', 'did', 'time', 'active'],
		                properties: {
		                    seq: {
		                        type: 'integer',
		                    },
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    time: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    active: {
		                        type: 'boolean',
		                        description: 'Indicates that the account has a repository which can be fetched from the host that emitted this event.',
		                    },
		                    status: {
		                        type: 'string',
		                        description: 'If active=false, this optional field indicates a reason for why the account is not active.',
		                        knownValues: [
		                            'takendown',
		                            'suspended',
		                            'deleted',
		                            'deactivated',
		                            'desynchronized',
		                            'throttled',
		                        ],
		                    },
		                },
		            },
		            info: {
		                type: 'object',
		                required: ['name'],
		                properties: {
		                    name: {
		                        type: 'string',
		                        knownValues: ['OutdatedCursor'],
		                    },
		                    message: {
		                        type: 'string',
		                    },
		                },
		            },
		            repoOp: {
		                type: 'object',
		                description: 'A repo operation, ie a mutation of a single record.',
		                required: ['action', 'path', 'cid'],
		                nullable: ['cid'],
		                properties: {
		                    action: {
		                        type: 'string',
		                        knownValues: ['create', 'update', 'delete'],
		                    },
		                    path: {
		                        type: 'string',
		                    },
		                    cid: {
		                        type: 'cid-link',
		                        description: 'For creates and updates, the new record CID. For deletions, null.',
		                    },
		                    prev: {
		                        type: 'cid-link',
		                        description: 'For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined.',
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoTempAddReservedHandle: {
		        lexicon: 1,
		        id: 'com.atproto.temp.addReservedHandle',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Add a handle to the set of reserved handles.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['handle'],
		                        properties: {
		                            handle: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {},
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoTempCheckSignupQueue: {
		        lexicon: 1,
		        id: 'com.atproto.temp.checkSignupQueue',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Check accounts location in signup queue.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['activated'],
		                        properties: {
		                            activated: {
		                                type: 'boolean',
		                            },
		                            placeInQueue: {
		                                type: 'integer',
		                            },
		                            estimatedTimeMs: {
		                                type: 'integer',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoTempFetchLabels: {
		        lexicon: 1,
		        id: 'com.atproto.temp.fetchLabels',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        since: {
		                            type: 'integer',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 250,
		                            default: 50,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['labels'],
		                        properties: {
		                            labels: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.label.defs#label',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ComAtprotoTempRequestPhoneVerification: {
		        lexicon: 1,
		        id: 'com.atproto.temp.requestPhoneVerification',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Request a verification code to be sent to the supplied phone number',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['phoneNumber'],
		                        properties: {
		                            phoneNumber: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorDefs: {
		        lexicon: 1,
		        id: 'app.bsky.actor.defs',
		        defs: {
		            profileViewBasic: {
		                type: 'object',
		                required: ['did', 'handle'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    displayName: {
		                        type: 'string',
		                        maxGraphemes: 64,
		                        maxLength: 640,
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    associated: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileAssociated',
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#viewerState',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    verification: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#verificationState',
		                    },
		                },
		            },
		            profileView: {
		                type: 'object',
		                required: ['did', 'handle'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    displayName: {
		                        type: 'string',
		                        maxGraphemes: 64,
		                        maxLength: 640,
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 256,
		                        maxLength: 2560,
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    associated: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileAssociated',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#viewerState',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    verification: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#verificationState',
		                    },
		                },
		            },
		            profileViewDetailed: {
		                type: 'object',
		                required: ['did', 'handle'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    displayName: {
		                        type: 'string',
		                        maxGraphemes: 64,
		                        maxLength: 640,
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 256,
		                        maxLength: 2560,
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    banner: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    followersCount: {
		                        type: 'integer',
		                    },
		                    followsCount: {
		                        type: 'integer',
		                    },
		                    postsCount: {
		                        type: 'integer',
		                    },
		                    associated: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileAssociated',
		                    },
		                    joinedViaStarterPack: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#starterPackViewBasic',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#viewerState',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    pinnedPost: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.repo.strongRef',
		                    },
		                    verification: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#verificationState',
		                    },
		                },
		            },
		            profileAssociated: {
		                type: 'object',
		                properties: {
		                    lists: {
		                        type: 'integer',
		                    },
		                    feedgens: {
		                        type: 'integer',
		                    },
		                    starterPacks: {
		                        type: 'integer',
		                    },
		                    labeler: {
		                        type: 'boolean',
		                    },
		                    chat: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileAssociatedChat',
		                    },
		                },
		            },
		            profileAssociatedChat: {
		                type: 'object',
		                required: ['allowIncoming'],
		                properties: {
		                    allowIncoming: {
		                        type: 'string',
		                        knownValues: ['all', 'none', 'following'],
		                    },
		                },
		            },
		            viewerState: {
		                type: 'object',
		                description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
		                properties: {
		                    muted: {
		                        type: 'boolean',
		                    },
		                    mutedByList: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listViewBasic',
		                    },
		                    blockedBy: {
		                        type: 'boolean',
		                    },
		                    blocking: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    blockingByList: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listViewBasic',
		                    },
		                    following: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    followedBy: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    knownFollowers: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#knownFollowers',
		                    },
		                },
		            },
		            knownFollowers: {
		                type: 'object',
		                description: "The subject's followers whom you also follow",
		                required: ['count', 'followers'],
		                properties: {
		                    count: {
		                        type: 'integer',
		                    },
		                    followers: {
		                        type: 'array',
		                        minLength: 0,
		                        maxLength: 5,
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                        },
		                    },
		                },
		            },
		            verificationState: {
		                type: 'object',
		                description: 'Represents the verification information about the user this object is attached to.',
		                required: ['verifications', 'verifiedStatus', 'trustedVerifierStatus'],
		                properties: {
		                    verifications: {
		                        type: 'array',
		                        description: 'All verifications issued by trusted verifiers on behalf of this user. Verifications by untrusted verifiers are not included.',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#verificationView',
		                        },
		                    },
		                    verifiedStatus: {
		                        type: 'string',
		                        description: "The user's status as a verified account.",
		                        knownValues: ['valid', 'invalid', 'none'],
		                    },
		                    trustedVerifierStatus: {
		                        type: 'string',
		                        description: "The user's status as a trusted verifier.",
		                        knownValues: ['valid', 'invalid', 'none'],
		                    },
		                },
		            },
		            verificationView: {
		                type: 'object',
		                description: 'An individual verification for an associated subject.',
		                required: ['issuer', 'uri', 'isValid', 'createdAt'],
		                properties: {
		                    issuer: {
		                        type: 'string',
		                        description: 'The user who issued this verification.',
		                        format: 'did',
		                    },
		                    uri: {
		                        type: 'string',
		                        description: 'The AT-URI of the verification record.',
		                        format: 'at-uri',
		                    },
		                    isValid: {
		                        type: 'boolean',
		                        description: 'True if the verification passes validation, otherwise false.',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        description: 'Timestamp when the verification was created.',
		                        format: 'datetime',
		                    },
		                },
		            },
		            preferences: {
		                type: 'array',
		                items: {
		                    type: 'union',
		                    refs: [
		                        'lex:app.bsky.actor.defs#adultContentPref',
		                        'lex:app.bsky.actor.defs#contentLabelPref',
		                        'lex:app.bsky.actor.defs#savedFeedsPref',
		                        'lex:app.bsky.actor.defs#savedFeedsPrefV2',
		                        'lex:app.bsky.actor.defs#personalDetailsPref',
		                        'lex:app.bsky.actor.defs#feedViewPref',
		                        'lex:app.bsky.actor.defs#threadViewPref',
		                        'lex:app.bsky.actor.defs#interestsPref',
		                        'lex:app.bsky.actor.defs#mutedWordsPref',
		                        'lex:app.bsky.actor.defs#hiddenPostsPref',
		                        'lex:app.bsky.actor.defs#bskyAppStatePref',
		                        'lex:app.bsky.actor.defs#labelersPref',
		                        'lex:app.bsky.actor.defs#postInteractionSettingsPref',
		                        'lex:app.bsky.actor.defs#verificationPrefs',
		                    ],
		                },
		            },
		            adultContentPref: {
		                type: 'object',
		                required: ['enabled'],
		                properties: {
		                    enabled: {
		                        type: 'boolean',
		                        default: false,
		                    },
		                },
		            },
		            contentLabelPref: {
		                type: 'object',
		                required: ['label', 'visibility'],
		                properties: {
		                    labelerDid: {
		                        type: 'string',
		                        description: 'Which labeler does this preference apply to? If undefined, applies globally.',
		                        format: 'did',
		                    },
		                    label: {
		                        type: 'string',
		                    },
		                    visibility: {
		                        type: 'string',
		                        knownValues: ['ignore', 'show', 'warn', 'hide'],
		                    },
		                },
		            },
		            savedFeed: {
		                type: 'object',
		                required: ['id', 'type', 'value', 'pinned'],
		                properties: {
		                    id: {
		                        type: 'string',
		                    },
		                    type: {
		                        type: 'string',
		                        knownValues: ['feed', 'list', 'timeline'],
		                    },
		                    value: {
		                        type: 'string',
		                    },
		                    pinned: {
		                        type: 'boolean',
		                    },
		                },
		            },
		            savedFeedsPrefV2: {
		                type: 'object',
		                required: ['items'],
		                properties: {
		                    items: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#savedFeed',
		                        },
		                    },
		                },
		            },
		            savedFeedsPref: {
		                type: 'object',
		                required: ['pinned', 'saved'],
		                properties: {
		                    pinned: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                            format: 'at-uri',
		                        },
		                    },
		                    saved: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                            format: 'at-uri',
		                        },
		                    },
		                    timelineIndex: {
		                        type: 'integer',
		                    },
		                },
		            },
		            personalDetailsPref: {
		                type: 'object',
		                properties: {
		                    birthDate: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'The birth date of account owner.',
		                    },
		                },
		            },
		            feedViewPref: {
		                type: 'object',
		                required: ['feed'],
		                properties: {
		                    feed: {
		                        type: 'string',
		                        description: 'The URI of the feed, or an identifier which describes the feed.',
		                    },
		                    hideReplies: {
		                        type: 'boolean',
		                        description: 'Hide replies in the feed.',
		                    },
		                    hideRepliesByUnfollowed: {
		                        type: 'boolean',
		                        description: 'Hide replies in the feed if they are not by followed users.',
		                        default: true,
		                    },
		                    hideRepliesByLikeCount: {
		                        type: 'integer',
		                        description: 'Hide replies in the feed if they do not have this number of likes.',
		                    },
		                    hideReposts: {
		                        type: 'boolean',
		                        description: 'Hide reposts in the feed.',
		                    },
		                    hideQuotePosts: {
		                        type: 'boolean',
		                        description: 'Hide quote posts in the feed.',
		                    },
		                },
		            },
		            threadViewPref: {
		                type: 'object',
		                properties: {
		                    sort: {
		                        type: 'string',
		                        description: 'Sorting mode for threads.',
		                        knownValues: [
		                            'oldest',
		                            'newest',
		                            'most-likes',
		                            'random',
		                            'hotness',
		                        ],
		                    },
		                    prioritizeFollowedUsers: {
		                        type: 'boolean',
		                        description: 'Show followed users at the top of all replies.',
		                    },
		                },
		            },
		            interestsPref: {
		                type: 'object',
		                required: ['tags'],
		                properties: {
		                    tags: {
		                        type: 'array',
		                        maxLength: 100,
		                        items: {
		                            type: 'string',
		                            maxLength: 640,
		                            maxGraphemes: 64,
		                        },
		                        description: "A list of tags which describe the account owner's interests gathered during onboarding.",
		                    },
		                },
		            },
		            mutedWordTarget: {
		                type: 'string',
		                knownValues: ['content', 'tag'],
		                maxLength: 640,
		                maxGraphemes: 64,
		            },
		            mutedWord: {
		                type: 'object',
		                description: 'A word that the account owner has muted.',
		                required: ['value', 'targets'],
		                properties: {
		                    id: {
		                        type: 'string',
		                    },
		                    value: {
		                        type: 'string',
		                        description: 'The muted word itself.',
		                        maxLength: 10000,
		                        maxGraphemes: 1000,
		                    },
		                    targets: {
		                        type: 'array',
		                        description: 'The intended targets of the muted word.',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#mutedWordTarget',
		                        },
		                    },
		                    actorTarget: {
		                        type: 'string',
		                        description: 'Groups of users to apply the muted word to. If undefined, applies to all users.',
		                        knownValues: ['all', 'exclude-following'],
		                        default: 'all',
		                    },
		                    expiresAt: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'The date and time at which the muted word will expire and no longer be applied.',
		                    },
		                },
		            },
		            mutedWordsPref: {
		                type: 'object',
		                required: ['items'],
		                properties: {
		                    items: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#mutedWord',
		                        },
		                        description: 'A list of words the account owner has muted.',
		                    },
		                },
		            },
		            hiddenPostsPref: {
		                type: 'object',
		                required: ['items'],
		                properties: {
		                    items: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                            format: 'at-uri',
		                        },
		                        description: 'A list of URIs of posts the account owner has hidden.',
		                    },
		                },
		            },
		            labelersPref: {
		                type: 'object',
		                required: ['labelers'],
		                properties: {
		                    labelers: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#labelerPrefItem',
		                        },
		                    },
		                },
		            },
		            labelerPrefItem: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            bskyAppStatePref: {
		                description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",
		                type: 'object',
		                properties: {
		                    activeProgressGuide: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#bskyAppProgressGuide',
		                    },
		                    queuedNudges: {
		                        description: 'An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.',
		                        type: 'array',
		                        maxLength: 1000,
		                        items: {
		                            type: 'string',
		                            maxLength: 100,
		                        },
		                    },
		                    nuxs: {
		                        description: 'Storage for NUXs the user has encountered.',
		                        type: 'array',
		                        maxLength: 100,
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#nux',
		                        },
		                    },
		                },
		            },
		            bskyAppProgressGuide: {
		                description: 'If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.',
		                type: 'object',
		                required: ['guide'],
		                properties: {
		                    guide: {
		                        type: 'string',
		                        maxLength: 100,
		                    },
		                },
		            },
		            nux: {
		                type: 'object',
		                description: 'A new user experiences (NUX) storage object',
		                required: ['id', 'completed'],
		                properties: {
		                    id: {
		                        type: 'string',
		                        maxLength: 100,
		                    },
		                    completed: {
		                        type: 'boolean',
		                        default: false,
		                    },
		                    data: {
		                        description: 'Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.',
		                        type: 'string',
		                        maxLength: 3000,
		                        maxGraphemes: 300,
		                    },
		                    expiresAt: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'The date and time at which the NUX will expire and should be considered completed.',
		                    },
		                },
		            },
		            verificationPrefs: {
		                type: 'object',
		                description: 'Preferences for how verified accounts appear in the app.',
		                required: [],
		                properties: {
		                    hideBadges: {
		                        description: 'Hide the blue check badges for verified accounts and trusted verifiers.',
		                        type: 'boolean',
		                        default: false,
		                    },
		                },
		            },
		            postInteractionSettingsPref: {
		                type: 'object',
		                description: 'Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.',
		                required: [],
		                properties: {
		                    threadgateAllowRules: {
		                        description: 'Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.',
		                        type: 'array',
		                        maxLength: 5,
		                        items: {
		                            type: 'union',
		                            refs: [
		                                'lex:app.bsky.feed.threadgate#mentionRule',
		                                'lex:app.bsky.feed.threadgate#followerRule',
		                                'lex:app.bsky.feed.threadgate#followingRule',
		                                'lex:app.bsky.feed.threadgate#listRule',
		                            ],
		                        },
		                    },
		                    postgateEmbeddingRules: {
		                        description: 'Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.',
		                        type: 'array',
		                        maxLength: 5,
		                        items: {
		                            type: 'union',
		                            refs: ['lex:app.bsky.feed.postgate#disableRule'],
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorGetPreferences: {
		        lexicon: 1,
		        id: 'app.bsky.actor.getPreferences',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {},
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['preferences'],
		                        properties: {
		                            preferences: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.actor.defs#preferences',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorGetProfile: {
		        lexicon: 1,
		        id: 'app.bsky.actor.getProfile',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Handle or DID of account to fetch profile of.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewDetailed',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorGetProfiles: {
		        lexicon: 1,
		        id: 'app.bsky.actor.getProfiles',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get detailed profile views of multiple actors.',
		                parameters: {
		                    type: 'params',
		                    required: ['actors'],
		                    properties: {
		                        actors: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'at-identifier',
		                            },
		                            maxLength: 25,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['profiles'],
		                        properties: {
		                            profiles: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileViewDetailed',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorGetSuggestions: {
		        lexicon: 1,
		        id: 'app.bsky.actor.getSuggestions',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actors'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            actors: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                            recId: {
		                                type: 'integer',
		                                description: 'Snowflake for this recommendation, use when submitting recommendation events.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorProfile: {
		        lexicon: 1,
		        id: 'app.bsky.actor.profile',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'A declaration of a Bluesky account profile.',
		                key: 'literal:self',
		                record: {
		                    type: 'object',
		                    properties: {
		                        displayName: {
		                            type: 'string',
		                            maxGraphemes: 64,
		                            maxLength: 640,
		                        },
		                        description: {
		                            type: 'string',
		                            description: 'Free-form profile description text.',
		                            maxGraphemes: 256,
		                            maxLength: 2560,
		                        },
		                        avatar: {
		                            type: 'blob',
		                            description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
		                            accept: ['image/png', 'image/jpeg'],
		                            maxSize: 1000000,
		                        },
		                        banner: {
		                            type: 'blob',
		                            description: 'Larger horizontal image to display behind profile view.',
		                            accept: ['image/png', 'image/jpeg'],
		                            maxSize: 1000000,
		                        },
		                        labels: {
		                            type: 'union',
		                            description: 'Self-label values, specific to the Bluesky application, on the overall account.',
		                            refs: ['lex:com.atproto.label.defs#selfLabels'],
		                        },
		                        joinedViaStarterPack: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.repo.strongRef',
		                        },
		                        pinnedPost: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.repo.strongRef',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorPutPreferences: {
		        lexicon: 1,
		        id: 'app.bsky.actor.putPreferences',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Set the private preferences attached to the account.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['preferences'],
		                        properties: {
		                            preferences: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.actor.defs#preferences',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorSearchActors: {
		        lexicon: 1,
		        id: 'app.bsky.actor.searchActors',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find actors (profiles) matching search criteria. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        term: {
		                            type: 'string',
		                            description: "DEPRECATED: use 'q' instead.",
		                        },
		                        q: {
		                            type: 'string',
		                            description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 25,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actors'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            actors: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyActorSearchActorsTypeahead: {
		        lexicon: 1,
		        id: 'app.bsky.actor.searchActorsTypeahead',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        term: {
		                            type: 'string',
		                            description: "DEPRECATED: use 'q' instead.",
		                        },
		                        q: {
		                            type: 'string',
		                            description: 'Search query prefix; not a full query string.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actors'],
		                        properties: {
		                            actors: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyEmbedDefs: {
		        lexicon: 1,
		        id: 'app.bsky.embed.defs',
		        defs: {
		            aspectRatio: {
		                type: 'object',
		                description: 'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',
		                required: ['width', 'height'],
		                properties: {
		                    width: {
		                        type: 'integer',
		                        minimum: 1,
		                    },
		                    height: {
		                        type: 'integer',
		                        minimum: 1,
		                    },
		                },
		            },
		        },
		    },
		    AppBskyEmbedExternal: {
		        lexicon: 1,
		        id: 'app.bsky.embed.external',
		        defs: {
		            main: {
		                type: 'object',
		                description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
		                required: ['external'],
		                properties: {
		                    external: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.external#external',
		                    },
		                },
		            },
		            external: {
		                type: 'object',
		                required: ['uri', 'title', 'description'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    title: {
		                        type: 'string',
		                    },
		                    description: {
		                        type: 'string',
		                    },
		                    thumb: {
		                        type: 'blob',
		                        accept: ['image/*'],
		                        maxSize: 1000000,
		                    },
		                },
		            },
		            view: {
		                type: 'object',
		                required: ['external'],
		                properties: {
		                    external: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.external#viewExternal',
		                    },
		                },
		            },
		            viewExternal: {
		                type: 'object',
		                required: ['uri', 'title', 'description'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    title: {
		                        type: 'string',
		                    },
		                    description: {
		                        type: 'string',
		                    },
		                    thumb: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyEmbedImages: {
		        lexicon: 1,
		        id: 'app.bsky.embed.images',
		        description: 'A set of images embedded in a Bluesky record (eg, a post).',
		        defs: {
		            main: {
		                type: 'object',
		                required: ['images'],
		                properties: {
		                    images: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.embed.images#image',
		                        },
		                        maxLength: 4,
		                    },
		                },
		            },
		            image: {
		                type: 'object',
		                required: ['image', 'alt'],
		                properties: {
		                    image: {
		                        type: 'blob',
		                        accept: ['image/*'],
		                        maxSize: 1000000,
		                    },
		                    alt: {
		                        type: 'string',
		                        description: 'Alt text description of the image, for accessibility.',
		                    },
		                    aspectRatio: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.defs#aspectRatio',
		                    },
		                },
		            },
		            view: {
		                type: 'object',
		                required: ['images'],
		                properties: {
		                    images: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.embed.images#viewImage',
		                        },
		                        maxLength: 4,
		                    },
		                },
		            },
		            viewImage: {
		                type: 'object',
		                required: ['thumb', 'fullsize', 'alt'],
		                properties: {
		                    thumb: {
		                        type: 'string',
		                        format: 'uri',
		                        description: 'Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.',
		                    },
		                    fullsize: {
		                        type: 'string',
		                        format: 'uri',
		                        description: 'Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.',
		                    },
		                    alt: {
		                        type: 'string',
		                        description: 'Alt text description of the image, for accessibility.',
		                    },
		                    aspectRatio: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.defs#aspectRatio',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyEmbedRecord: {
		        lexicon: 1,
		        id: 'app.bsky.embed.record',
		        description: 'A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.',
		        defs: {
		            main: {
		                type: 'object',
		                required: ['record'],
		                properties: {
		                    record: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.repo.strongRef',
		                    },
		                },
		            },
		            view: {
		                type: 'object',
		                required: ['record'],
		                properties: {
		                    record: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.embed.record#viewRecord',
		                            'lex:app.bsky.embed.record#viewNotFound',
		                            'lex:app.bsky.embed.record#viewBlocked',
		                            'lex:app.bsky.embed.record#viewDetached',
		                            'lex:app.bsky.feed.defs#generatorView',
		                            'lex:app.bsky.graph.defs#listView',
		                            'lex:app.bsky.labeler.defs#labelerView',
		                            'lex:app.bsky.graph.defs#starterPackViewBasic',
		                        ],
		                    },
		                },
		            },
		            viewRecord: {
		                type: 'object',
		                required: ['uri', 'cid', 'author', 'value', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    author: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                    },
		                    value: {
		                        type: 'unknown',
		                        description: 'The record data itself.',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    replyCount: {
		                        type: 'integer',
		                    },
		                    repostCount: {
		                        type: 'integer',
		                    },
		                    likeCount: {
		                        type: 'integer',
		                    },
		                    quoteCount: {
		                        type: 'integer',
		                    },
		                    embeds: {
		                        type: 'array',
		                        items: {
		                            type: 'union',
		                            refs: [
		                                'lex:app.bsky.embed.images#view',
		                                'lex:app.bsky.embed.video#view',
		                                'lex:app.bsky.embed.external#view',
		                                'lex:app.bsky.embed.record#view',
		                                'lex:app.bsky.embed.recordWithMedia#view',
		                            ],
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            viewNotFound: {
		                type: 'object',
		                required: ['uri', 'notFound'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    notFound: {
		                        type: 'boolean',
		                        const: true,
		                    },
		                },
		            },
		            viewBlocked: {
		                type: 'object',
		                required: ['uri', 'blocked', 'author'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    blocked: {
		                        type: 'boolean',
		                        const: true,
		                    },
		                    author: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#blockedAuthor',
		                    },
		                },
		            },
		            viewDetached: {
		                type: 'object',
		                required: ['uri', 'detached'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    detached: {
		                        type: 'boolean',
		                        const: true,
		                    },
		                },
		            },
		        },
		    },
		    AppBskyEmbedRecordWithMedia: {
		        lexicon: 1,
		        id: 'app.bsky.embed.recordWithMedia',
		        description: 'A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.',
		        defs: {
		            main: {
		                type: 'object',
		                required: ['record', 'media'],
		                properties: {
		                    record: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.record',
		                    },
		                    media: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.embed.images',
		                            'lex:app.bsky.embed.video',
		                            'lex:app.bsky.embed.external',
		                        ],
		                    },
		                },
		            },
		            view: {
		                type: 'object',
		                required: ['record', 'media'],
		                properties: {
		                    record: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.record#view',
		                    },
		                    media: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.embed.images#view',
		                            'lex:app.bsky.embed.video#view',
		                            'lex:app.bsky.embed.external#view',
		                        ],
		                    },
		                },
		            },
		        },
		    },
		    AppBskyEmbedVideo: {
		        lexicon: 1,
		        id: 'app.bsky.embed.video',
		        description: 'A video embedded in a Bluesky record (eg, a post).',
		        defs: {
		            main: {
		                type: 'object',
		                required: ['video'],
		                properties: {
		                    video: {
		                        type: 'blob',
		                        description: 'The mp4 video file. May be up to 100mb, formerly limited to 50mb.',
		                        accept: ['video/mp4'],
		                        maxSize: 100000000,
		                    },
		                    captions: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.embed.video#caption',
		                        },
		                        maxLength: 20,
		                    },
		                    alt: {
		                        type: 'string',
		                        description: 'Alt text description of the video, for accessibility.',
		                        maxGraphemes: 1000,
		                        maxLength: 10000,
		                    },
		                    aspectRatio: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.defs#aspectRatio',
		                    },
		                },
		            },
		            caption: {
		                type: 'object',
		                required: ['lang', 'file'],
		                properties: {
		                    lang: {
		                        type: 'string',
		                        format: 'language',
		                    },
		                    file: {
		                        type: 'blob',
		                        accept: ['text/vtt'],
		                        maxSize: 20000,
		                    },
		                },
		            },
		            view: {
		                type: 'object',
		                required: ['cid', 'playlist'],
		                properties: {
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    playlist: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    thumbnail: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    alt: {
		                        type: 'string',
		                        maxGraphemes: 1000,
		                        maxLength: 10000,
		                    },
		                    aspectRatio: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.embed.defs#aspectRatio',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedDefs: {
		        lexicon: 1,
		        id: 'app.bsky.feed.defs',
		        defs: {
		            postView: {
		                type: 'object',
		                required: ['uri', 'cid', 'author', 'record', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    author: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                    },
		                    record: {
		                        type: 'unknown',
		                    },
		                    embed: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.embed.images#view',
		                            'lex:app.bsky.embed.video#view',
		                            'lex:app.bsky.embed.external#view',
		                            'lex:app.bsky.embed.record#view',
		                            'lex:app.bsky.embed.recordWithMedia#view',
		                        ],
		                    },
		                    replyCount: {
		                        type: 'integer',
		                    },
		                    repostCount: {
		                        type: 'integer',
		                    },
		                    likeCount: {
		                        type: 'integer',
		                    },
		                    quoteCount: {
		                        type: 'integer',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#viewerState',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    threadgate: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#threadgateView',
		                    },
		                },
		            },
		            viewerState: {
		                type: 'object',
		                description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
		                properties: {
		                    repost: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    like: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    threadMuted: {
		                        type: 'boolean',
		                    },
		                    replyDisabled: {
		                        type: 'boolean',
		                    },
		                    embeddingDisabled: {
		                        type: 'boolean',
		                    },
		                    pinned: {
		                        type: 'boolean',
		                    },
		                },
		            },
		            threadContext: {
		                type: 'object',
		                description: 'Metadata about this post within the context of the thread it is in.',
		                properties: {
		                    rootAuthorLike: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            feedViewPost: {
		                type: 'object',
		                required: ['post'],
		                properties: {
		                    post: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#postView',
		                    },
		                    reply: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#replyRef',
		                    },
		                    reason: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.feed.defs#reasonRepost',
		                            'lex:app.bsky.feed.defs#reasonPin',
		                        ],
		                    },
		                    feedContext: {
		                        type: 'string',
		                        description: 'Context provided by feed generator that may be passed back alongside interactions.',
		                        maxLength: 2000,
		                    },
		                },
		            },
		            replyRef: {
		                type: 'object',
		                required: ['root', 'parent'],
		                properties: {
		                    root: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.feed.defs#postView',
		                            'lex:app.bsky.feed.defs#notFoundPost',
		                            'lex:app.bsky.feed.defs#blockedPost',
		                        ],
		                    },
		                    parent: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.feed.defs#postView',
		                            'lex:app.bsky.feed.defs#notFoundPost',
		                            'lex:app.bsky.feed.defs#blockedPost',
		                        ],
		                    },
		                    grandparentAuthor: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                        description: 'When parent is a reply to another post, this is the author of that post.',
		                    },
		                },
		            },
		            reasonRepost: {
		                type: 'object',
		                required: ['by', 'indexedAt'],
		                properties: {
		                    by: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            reasonPin: {
		                type: 'object',
		                properties: {},
		            },
		            threadViewPost: {
		                type: 'object',
		                required: ['post'],
		                properties: {
		                    post: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#postView',
		                    },
		                    parent: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.feed.defs#threadViewPost',
		                            'lex:app.bsky.feed.defs#notFoundPost',
		                            'lex:app.bsky.feed.defs#blockedPost',
		                        ],
		                    },
		                    replies: {
		                        type: 'array',
		                        items: {
		                            type: 'union',
		                            refs: [
		                                'lex:app.bsky.feed.defs#threadViewPost',
		                                'lex:app.bsky.feed.defs#notFoundPost',
		                                'lex:app.bsky.feed.defs#blockedPost',
		                            ],
		                        },
		                    },
		                    threadContext: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#threadContext',
		                    },
		                },
		            },
		            notFoundPost: {
		                type: 'object',
		                required: ['uri', 'notFound'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    notFound: {
		                        type: 'boolean',
		                        const: true,
		                    },
		                },
		            },
		            blockedPost: {
		                type: 'object',
		                required: ['uri', 'blocked', 'author'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    blocked: {
		                        type: 'boolean',
		                        const: true,
		                    },
		                    author: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#blockedAuthor',
		                    },
		                },
		            },
		            blockedAuthor: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#viewerState',
		                    },
		                },
		            },
		            generatorView: {
		                type: 'object',
		                required: ['uri', 'cid', 'did', 'creator', 'displayName', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    creator: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                    displayName: {
		                        type: 'string',
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 300,
		                        maxLength: 3000,
		                    },
		                    descriptionFacets: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.richtext.facet',
		                        },
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    likeCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    acceptsInteractions: {
		                        type: 'boolean',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.defs#generatorViewerState',
		                    },
		                    contentMode: {
		                        type: 'string',
		                        knownValues: [
		                            'app.bsky.feed.defs#contentModeUnspecified',
		                            'app.bsky.feed.defs#contentModeVideo',
		                        ],
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            generatorViewerState: {
		                type: 'object',
		                properties: {
		                    like: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            skeletonFeedPost: {
		                type: 'object',
		                required: ['post'],
		                properties: {
		                    post: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    reason: {
		                        type: 'union',
		                        refs: [
		                            'lex:app.bsky.feed.defs#skeletonReasonRepost',
		                            'lex:app.bsky.feed.defs#skeletonReasonPin',
		                        ],
		                    },
		                    feedContext: {
		                        type: 'string',
		                        description: 'Context that will be passed through to client and may be passed to feed generator back alongside interactions.',
		                        maxLength: 2000,
		                    },
		                },
		            },
		            skeletonReasonRepost: {
		                type: 'object',
		                required: ['repost'],
		                properties: {
		                    repost: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            skeletonReasonPin: {
		                type: 'object',
		                properties: {},
		            },
		            threadgateView: {
		                type: 'object',
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    record: {
		                        type: 'unknown',
		                    },
		                    lists: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.graph.defs#listViewBasic',
		                        },
		                    },
		                },
		            },
		            interaction: {
		                type: 'object',
		                properties: {
		                    item: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    event: {
		                        type: 'string',
		                        knownValues: [
		                            'app.bsky.feed.defs#requestLess',
		                            'app.bsky.feed.defs#requestMore',
		                            'app.bsky.feed.defs#clickthroughItem',
		                            'app.bsky.feed.defs#clickthroughAuthor',
		                            'app.bsky.feed.defs#clickthroughReposter',
		                            'app.bsky.feed.defs#clickthroughEmbed',
		                            'app.bsky.feed.defs#interactionSeen',
		                            'app.bsky.feed.defs#interactionLike',
		                            'app.bsky.feed.defs#interactionRepost',
		                            'app.bsky.feed.defs#interactionReply',
		                            'app.bsky.feed.defs#interactionQuote',
		                            'app.bsky.feed.defs#interactionShare',
		                        ],
		                    },
		                    feedContext: {
		                        type: 'string',
		                        description: 'Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.',
		                        maxLength: 2000,
		                    },
		                },
		            },
		            requestLess: {
		                type: 'token',
		                description: 'Request that less content like the given feed item be shown in the feed',
		            },
		            requestMore: {
		                type: 'token',
		                description: 'Request that more content like the given feed item be shown in the feed',
		            },
		            clickthroughItem: {
		                type: 'token',
		                description: 'User clicked through to the feed item',
		            },
		            clickthroughAuthor: {
		                type: 'token',
		                description: 'User clicked through to the author of the feed item',
		            },
		            clickthroughReposter: {
		                type: 'token',
		                description: 'User clicked through to the reposter of the feed item',
		            },
		            clickthroughEmbed: {
		                type: 'token',
		                description: 'User clicked through to the embedded content of the feed item',
		            },
		            contentModeUnspecified: {
		                type: 'token',
		                description: 'Declares the feed generator returns any types of posts.',
		            },
		            contentModeVideo: {
		                type: 'token',
		                description: 'Declares the feed generator returns posts containing app.bsky.embed.video embeds.',
		            },
		            interactionSeen: {
		                type: 'token',
		                description: 'Feed item was seen by user',
		            },
		            interactionLike: {
		                type: 'token',
		                description: 'User liked the feed item',
		            },
		            interactionRepost: {
		                type: 'token',
		                description: 'User reposted the feed item',
		            },
		            interactionReply: {
		                type: 'token',
		                description: 'User replied to the feed item',
		            },
		            interactionQuote: {
		                type: 'token',
		                description: 'User quoted the feed item',
		            },
		            interactionShare: {
		                type: 'token',
		                description: 'User shared the feed item',
		            },
		        },
		    },
		    AppBskyFeedDescribeFeedGenerator: {
		        lexicon: 1,
		        id: 'app.bsky.feed.describeFeedGenerator',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'feeds'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.describeFeedGenerator#feed',
		                                },
		                            },
		                            links: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.feed.describeFeedGenerator#links',
		                            },
		                        },
		                    },
		                },
		            },
		            feed: {
		                type: 'object',
		                required: ['uri'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            links: {
		                type: 'object',
		                properties: {
		                    privacyPolicy: {
		                        type: 'string',
		                    },
		                    termsOfService: {
		                        type: 'string',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGenerator: {
		        lexicon: 1,
		        id: 'app.bsky.feed.generator',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.',
		                key: 'any',
		                record: {
		                    type: 'object',
		                    required: ['did', 'displayName', 'createdAt'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                        displayName: {
		                            type: 'string',
		                            maxGraphemes: 24,
		                            maxLength: 240,
		                        },
		                        description: {
		                            type: 'string',
		                            maxGraphemes: 300,
		                            maxLength: 3000,
		                        },
		                        descriptionFacets: {
		                            type: 'array',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.richtext.facet',
		                            },
		                        },
		                        avatar: {
		                            type: 'blob',
		                            accept: ['image/png', 'image/jpeg'],
		                            maxSize: 1000000,
		                        },
		                        acceptsInteractions: {
		                            type: 'boolean',
		                            description: 'Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions',
		                        },
		                        labels: {
		                            type: 'union',
		                            description: 'Self-label values',
		                            refs: ['lex:com.atproto.label.defs#selfLabels'],
		                        },
		                        contentMode: {
		                            type: 'string',
		                            knownValues: [
		                                'app.bsky.feed.defs#contentModeUnspecified',
		                                'app.bsky.feed.defs#contentModeVideo',
		                            ],
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetActorFeeds: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getActorFeeds',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feeds'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#generatorView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetActorLikes: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getActorLikes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feed'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feed: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#feedViewPost',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BlockedActor',
		                    },
		                    {
		                        name: 'BlockedByActor',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedGetAuthorFeed: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getAuthorFeed',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        filter: {
		                            type: 'string',
		                            description: 'Combinations of post/repost types to include in response.',
		                            knownValues: [
		                                'posts_with_replies',
		                                'posts_no_replies',
		                                'posts_with_media',
		                                'posts_and_author_threads',
		                                'posts_with_video',
		                            ],
		                            default: 'posts_with_replies',
		                        },
		                        includePins: {
		                            type: 'boolean',
		                            default: false,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feed'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feed: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#feedViewPost',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BlockedActor',
		                    },
		                    {
		                        name: 'BlockedByActor',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedGetFeed: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getFeed',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
		                parameters: {
		                    type: 'params',
		                    required: ['feed'],
		                    properties: {
		                        feed: {
		                            type: 'string',
		                            format: 'at-uri',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feed'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feed: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#feedViewPost',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'UnknownFeed',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedGetFeedGenerator: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getFeedGenerator',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get information about a feed generator. Implemented by AppView.',
		                parameters: {
		                    type: 'params',
		                    required: ['feed'],
		                    properties: {
		                        feed: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'AT-URI of the feed generator record.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['view', 'isOnline', 'isValid'],
		                        properties: {
		                            view: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.feed.defs#generatorView',
		                            },
		                            isOnline: {
		                                type: 'boolean',
		                                description: 'Indicates whether the feed generator service has been online recently, or else seems to be inactive.',
		                            },
		                            isValid: {
		                                type: 'boolean',
		                                description: 'Indicates whether the feed generator service is compatible with the record declaration.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetFeedGenerators: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getFeedGenerators',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get information about a list of feed generators.',
		                parameters: {
		                    type: 'params',
		                    required: ['feeds'],
		                    properties: {
		                        feeds: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feeds'],
		                        properties: {
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#generatorView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetFeedSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getFeedSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.',
		                parameters: {
		                    type: 'params',
		                    required: ['feed'],
		                    properties: {
		                        feed: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference to feed generator record describing the specific feed being requested.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feed'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feed: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#skeletonFeedPost',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'UnknownFeed',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedGetLikes: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getLikes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get like records which reference a subject (by AT-URI and CID).',
		                parameters: {
		                    type: 'params',
		                    required: ['uri'],
		                    properties: {
		                        uri: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'AT-URI of the subject (eg, a post record).',
		                        },
		                        cid: {
		                            type: 'string',
		                            format: 'cid',
		                            description: 'CID of the subject record (aka, specific version of record), to filter likes.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uri', 'likes'],
		                        properties: {
		                            uri: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                            likes: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.getLikes#like',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            like: {
		                type: 'object',
		                required: ['indexedAt', 'createdAt', 'actor'],
		                properties: {
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    actor: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetListFeed: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getListFeed',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['list'],
		                    properties: {
		                        list: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to the list record.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feed'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feed: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#feedViewPost',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'UnknownList',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedGetPostThread: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getPostThread',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.',
		                parameters: {
		                    type: 'params',
		                    required: ['uri'],
		                    properties: {
		                        uri: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to post record.',
		                        },
		                        depth: {
		                            type: 'integer',
		                            description: 'How many levels of reply depth should be included in response.',
		                            default: 6,
		                            minimum: 0,
		                            maximum: 1000,
		                        },
		                        parentHeight: {
		                            type: 'integer',
		                            description: 'How many levels of parent (and grandparent, etc) post to include.',
		                            default: 80,
		                            minimum: 0,
		                            maximum: 1000,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['thread'],
		                        properties: {
		                            thread: {
		                                type: 'union',
		                                refs: [
		                                    'lex:app.bsky.feed.defs#threadViewPost',
		                                    'lex:app.bsky.feed.defs#notFoundPost',
		                                    'lex:app.bsky.feed.defs#blockedPost',
		                                ],
		                            },
		                            threadgate: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.feed.defs#threadgateView',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'NotFound',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedGetPosts: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getPosts',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
		                parameters: {
		                    type: 'params',
		                    required: ['uris'],
		                    properties: {
		                        uris: {
		                            type: 'array',
		                            description: 'List of post AT-URIs to return hydrated views for.',
		                            items: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            maxLength: 25,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['posts'],
		                        properties: {
		                            posts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#postView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetQuotes: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getQuotes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of quotes for a given post.',
		                parameters: {
		                    type: 'params',
		                    required: ['uri'],
		                    properties: {
		                        uri: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) of post record',
		                        },
		                        cid: {
		                            type: 'string',
		                            format: 'cid',
		                            description: 'If supplied, filters to quotes of specific version (by CID) of the post record.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uri', 'posts'],
		                        properties: {
		                            uri: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                            posts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#postView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetRepostedBy: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getRepostedBy',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of reposts for a given post.',
		                parameters: {
		                    type: 'params',
		                    required: ['uri'],
		                    properties: {
		                        uri: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) of post record',
		                        },
		                        cid: {
		                            type: 'string',
		                            format: 'cid',
		                            description: 'If supplied, filters to reposts of specific version (by CID) of the post record.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uri', 'repostedBy'],
		                        properties: {
		                            uri: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            cid: {
		                                type: 'string',
		                                format: 'cid',
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                            repostedBy: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetSuggestedFeeds: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getSuggestedFeeds',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of suggested feeds (feed generators) for the requesting account.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feeds'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#generatorView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedGetTimeline: {
		        lexicon: 1,
		        id: 'app.bsky.feed.getTimeline',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        algorithm: {
		                            type: 'string',
		                            description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism.",
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feed'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feed: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#feedViewPost',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedLike: {
		        lexicon: 1,
		        id: 'app.bsky.feed.like',
		        defs: {
		            main: {
		                type: 'record',
		                description: "Record declaring a 'like' of a piece of subject content.",
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'createdAt'],
		                    properties: {
		                        subject: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.repo.strongRef',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedPost: {
		        lexicon: 1,
		        id: 'app.bsky.feed.post',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'Record containing a Bluesky post.',
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['text', 'createdAt'],
		                    properties: {
		                        text: {
		                            type: 'string',
		                            maxLength: 3000,
		                            maxGraphemes: 300,
		                            description: 'The primary post content. May be an empty string, if there are embeds.',
		                        },
		                        entities: {
		                            type: 'array',
		                            description: 'DEPRECATED: replaced by app.bsky.richtext.facet.',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.feed.post#entity',
		                            },
		                        },
		                        facets: {
		                            type: 'array',
		                            description: 'Annotations of text (mentions, URLs, hashtags, etc)',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.richtext.facet',
		                            },
		                        },
		                        reply: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.feed.post#replyRef',
		                        },
		                        embed: {
		                            type: 'union',
		                            refs: [
		                                'lex:app.bsky.embed.images',
		                                'lex:app.bsky.embed.video',
		                                'lex:app.bsky.embed.external',
		                                'lex:app.bsky.embed.record',
		                                'lex:app.bsky.embed.recordWithMedia',
		                            ],
		                        },
		                        langs: {
		                            type: 'array',
		                            description: 'Indicates human language of post primary text content.',
		                            maxLength: 3,
		                            items: {
		                                type: 'string',
		                                format: 'language',
		                            },
		                        },
		                        labels: {
		                            type: 'union',
		                            description: 'Self-label values for this post. Effectively content warnings.',
		                            refs: ['lex:com.atproto.label.defs#selfLabels'],
		                        },
		                        tags: {
		                            type: 'array',
		                            description: 'Additional hashtags, in addition to any included in post text and facets.',
		                            maxLength: 8,
		                            items: {
		                                type: 'string',
		                                maxLength: 640,
		                                maxGraphemes: 64,
		                            },
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Client-declared timestamp when this post was originally created.',
		                        },
		                    },
		                },
		            },
		            replyRef: {
		                type: 'object',
		                required: ['root', 'parent'],
		                properties: {
		                    root: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.repo.strongRef',
		                    },
		                    parent: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.repo.strongRef',
		                    },
		                },
		            },
		            entity: {
		                type: 'object',
		                description: 'Deprecated: use facets instead.',
		                required: ['index', 'type', 'value'],
		                properties: {
		                    index: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.feed.post#textSlice',
		                    },
		                    type: {
		                        type: 'string',
		                        description: "Expected values are 'mention' and 'link'.",
		                    },
		                    value: {
		                        type: 'string',
		                    },
		                },
		            },
		            textSlice: {
		                type: 'object',
		                description: 'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',
		                required: ['start', 'end'],
		                properties: {
		                    start: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    end: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedPostgate: {
		        lexicon: 1,
		        id: 'app.bsky.feed.postgate',
		        defs: {
		            main: {
		                type: 'record',
		                key: 'tid',
		                description: 'Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.',
		                record: {
		                    type: 'object',
		                    required: ['post', 'createdAt'],
		                    properties: {
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                        post: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to the post record.',
		                        },
		                        detachedEmbeddingUris: {
		                            type: 'array',
		                            maxLength: 50,
		                            items: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            description: 'List of AT-URIs embedding this post that the author has detached from.',
		                        },
		                        embeddingRules: {
		                            description: 'List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.',
		                            type: 'array',
		                            maxLength: 5,
		                            items: {
		                                type: 'union',
		                                refs: ['lex:app.bsky.feed.postgate#disableRule'],
		                            },
		                        },
		                    },
		                },
		            },
		            disableRule: {
		                type: 'object',
		                description: 'Disables embedding of this post.',
		                properties: {},
		            },
		        },
		    },
		    AppBskyFeedRepost: {
		        lexicon: 1,
		        id: 'app.bsky.feed.repost',
		        defs: {
		            main: {
		                description: "Record representing a 'repost' of an existing Bluesky post.",
		                type: 'record',
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'createdAt'],
		                    properties: {
		                        subject: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.repo.strongRef',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedSearchPosts: {
		        lexicon: 1,
		        id: 'app.bsky.feed.searchPosts',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find posts matching search criteria, returning views of those posts.',
		                parameters: {
		                    type: 'params',
		                    required: ['q'],
		                    properties: {
		                        q: {
		                            type: 'string',
		                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',
		                        },
		                        sort: {
		                            type: 'string',
		                            knownValues: ['top', 'latest'],
		                            default: 'latest',
		                            description: 'Specifies the ranking order of results.',
		                        },
		                        since: {
		                            type: 'string',
		                            description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).",
		                        },
		                        until: {
		                            type: 'string',
		                            description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).",
		                        },
		                        mentions: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.',
		                        },
		                        author: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.',
		                        },
		                        lang: {
		                            type: 'string',
		                            format: 'language',
		                            description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.',
		                        },
		                        domain: {
		                            type: 'string',
		                            description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.',
		                        },
		                        url: {
		                            type: 'string',
		                            format: 'uri',
		                            description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.',
		                        },
		                        tag: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                maxLength: 640,
		                                maxGraphemes: 64,
		                            },
		                            description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.",
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 25,
		                        },
		                        cursor: {
		                            type: 'string',
		                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['posts'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            hitsTotal: {
		                                type: 'integer',
		                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',
		                            },
		                            posts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#postView',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BadQueryString',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyFeedSendInteractions: {
		        lexicon: 1,
		        id: 'app.bsky.feed.sendInteractions',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Send information about interactions with feed items back to the feed generator that served them.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['interactions'],
		                        properties: {
		                            interactions: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#interaction',
		                                },
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {},
		                    },
		                },
		            },
		        },
		    },
		    AppBskyFeedThreadgate: {
		        lexicon: 1,
		        id: 'app.bsky.feed.threadgate',
		        defs: {
		            main: {
		                type: 'record',
		                key: 'tid',
		                description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",
		                record: {
		                    type: 'object',
		                    required: ['post', 'createdAt'],
		                    properties: {
		                        post: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to the post record.',
		                        },
		                        allow: {
		                            description: 'List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply.',
		                            type: 'array',
		                            maxLength: 5,
		                            items: {
		                                type: 'union',
		                                refs: [
		                                    'lex:app.bsky.feed.threadgate#mentionRule',
		                                    'lex:app.bsky.feed.threadgate#followerRule',
		                                    'lex:app.bsky.feed.threadgate#followingRule',
		                                    'lex:app.bsky.feed.threadgate#listRule',
		                                ],
		                            },
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                        hiddenReplies: {
		                            type: 'array',
		                            maxLength: 50,
		                            items: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            description: 'List of hidden reply URIs.',
		                        },
		                    },
		                },
		            },
		            mentionRule: {
		                type: 'object',
		                description: 'Allow replies from actors mentioned in your post.',
		                properties: {},
		            },
		            followerRule: {
		                type: 'object',
		                description: 'Allow replies from actors who follow you.',
		                properties: {},
		            },
		            followingRule: {
		                type: 'object',
		                description: 'Allow replies from actors you follow.',
		                properties: {},
		            },
		            listRule: {
		                type: 'object',
		                description: 'Allow replies from actors on a list.',
		                required: ['list'],
		                properties: {
		                    list: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphBlock: {
		        lexicon: 1,
		        id: 'app.bsky.graph.block',
		        defs: {
		            main: {
		                type: 'record',
		                description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'createdAt'],
		                    properties: {
		                        subject: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account to be blocked.',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphDefs: {
		        lexicon: 1,
		        id: 'app.bsky.graph.defs',
		        defs: {
		            listViewBasic: {
		                type: 'object',
		                required: ['uri', 'cid', 'name', 'purpose'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    name: {
		                        type: 'string',
		                        maxLength: 64,
		                        minLength: 1,
		                    },
		                    purpose: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listPurpose',
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    listItemCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listViewerState',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            listView: {
		                type: 'object',
		                required: ['uri', 'cid', 'creator', 'name', 'purpose', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    creator: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                    name: {
		                        type: 'string',
		                        maxLength: 64,
		                        minLength: 1,
		                    },
		                    purpose: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listPurpose',
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 300,
		                        maxLength: 3000,
		                    },
		                    descriptionFacets: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.richtext.facet',
		                        },
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    listItemCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listViewerState',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            listItemView: {
		                type: 'object',
		                required: ['uri', 'subject'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    subject: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                },
		            },
		            starterPackView: {
		                type: 'object',
		                required: ['uri', 'cid', 'record', 'creator', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    record: {
		                        type: 'unknown',
		                    },
		                    creator: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                    },
		                    list: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.graph.defs#listViewBasic',
		                    },
		                    listItemsSample: {
		                        type: 'array',
		                        maxLength: 12,
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.graph.defs#listItemView',
		                        },
		                    },
		                    feeds: {
		                        type: 'array',
		                        maxLength: 3,
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.feed.defs#generatorView',
		                        },
		                    },
		                    joinedWeekCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    joinedAllTimeCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            starterPackViewBasic: {
		                type: 'object',
		                required: ['uri', 'cid', 'record', 'creator', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    record: {
		                        type: 'unknown',
		                    },
		                    creator: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                    },
		                    listItemCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    joinedWeekCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    joinedAllTimeCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            listPurpose: {
		                type: 'string',
		                knownValues: [
		                    'app.bsky.graph.defs#modlist',
		                    'app.bsky.graph.defs#curatelist',
		                    'app.bsky.graph.defs#referencelist',
		                ],
		            },
		            modlist: {
		                type: 'token',
		                description: 'A list of actors to apply an aggregate moderation action (mute/block) on.',
		            },
		            curatelist: {
		                type: 'token',
		                description: 'A list of actors used for curation purposes such as list feeds or interaction gating.',
		            },
		            referencelist: {
		                type: 'token',
		                description: 'A list of actors used for only for reference purposes such as within a starter pack.',
		            },
		            listViewerState: {
		                type: 'object',
		                properties: {
		                    muted: {
		                        type: 'boolean',
		                    },
		                    blocked: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            notFoundActor: {
		                type: 'object',
		                description: 'indicates that a handle or DID could not be resolved',
		                required: ['actor', 'notFound'],
		                properties: {
		                    actor: {
		                        type: 'string',
		                        format: 'at-identifier',
		                    },
		                    notFound: {
		                        type: 'boolean',
		                        const: true,
		                    },
		                },
		            },
		            relationship: {
		                type: 'object',
		                description: 'lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    following: {
		                        type: 'string',
		                        format: 'at-uri',
		                        description: 'if the actor follows this DID, this is the AT-URI of the follow record',
		                    },
		                    followedBy: {
		                        type: 'string',
		                        format: 'at-uri',
		                        description: 'if the actor is followed by this DID, contains the AT-URI of the follow record',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphFollow: {
		        lexicon: 1,
		        id: 'app.bsky.graph.follow',
		        defs: {
		            main: {
		                type: 'record',
		                description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'createdAt'],
		                    properties: {
		                        subject: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetActorStarterPacks: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getActorStarterPacks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of starter packs created by the actor.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPacks'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            starterPacks: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetBlocks: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getBlocks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates which accounts the requesting account is currently blocking. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['blocks'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            blocks: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetFollowers: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getFollowers',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates accounts which follow a specified account (actor).',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject', 'followers'],
		                        properties: {
		                            subject: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.actor.defs#profileView',
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                            followers: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetFollows: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getFollows',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates accounts which a specified account (actor) follows.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject', 'follows'],
		                        properties: {
		                            subject: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.actor.defs#profileView',
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                            follows: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetKnownFollowers: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getKnownFollowers',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates accounts which follow a specified account (actor) and are followed by the viewer.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject', 'followers'],
		                        properties: {
		                            subject: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.actor.defs#profileView',
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                            followers: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetList: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getList',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Gets a 'view' (with additional context) of a specified list.",
		                parameters: {
		                    type: 'params',
		                    required: ['list'],
		                    properties: {
		                        list: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) of the list record to hydrate.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['list', 'items'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            list: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.graph.defs#listView',
		                            },
		                            items: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#listItemView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetListBlocks: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getListBlocks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get mod lists that the requesting account (actor) is blocking. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['lists'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            lists: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#listView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetListMutes: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getListMutes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['lists'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            lists: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#listView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetLists: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getLists',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates the lists created by a specified account (actor).',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'The account (actor) to enumerate lists from.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['lists'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            lists: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#listView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetMutes: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getMutes',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['mutes'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            mutes: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetRelationships: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getRelationships',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates public relationships between one account, and a list of other accounts. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Primary account requesting relationships for.',
		                        },
		                        others: {
		                            type: 'array',
		                            description: "List of 'other' accounts to be related back to the primary.",
		                            maxLength: 30,
		                            items: {
		                                type: 'string',
		                                format: 'at-identifier',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['relationships'],
		                        properties: {
		                            actor: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            relationships: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:app.bsky.graph.defs#relationship',
		                                        'lex:app.bsky.graph.defs#notFoundActor',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'ActorNotFound',
		                        description: 'the primary actor at-identifier could not be resolved',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyGraphGetStarterPack: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getStarterPack',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Gets a view of a starter pack.',
		                parameters: {
		                    type: 'params',
		                    required: ['starterPack'],
		                    properties: {
		                        starterPack: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) of the starter pack record.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPack'],
		                        properties: {
		                            starterPack: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.graph.defs#starterPackView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetStarterPacks: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getStarterPacks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get views for a list of starter packs.',
		                parameters: {
		                    type: 'params',
		                    required: ['uris'],
		                    properties: {
		                        uris: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                            maxLength: 25,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPacks'],
		                        properties: {
		                            starterPacks: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphGetSuggestedFollowsByActor: {
		        lexicon: 1,
		        id: 'app.bsky.graph.getSuggestedFollowsByActor',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'at-identifier',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['suggestions'],
		                        properties: {
		                            suggestions: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                            isFallback: {
		                                type: 'boolean',
		                                description: 'If true, response has fallen-back to generic results, and is not scoped using relativeToDid',
		                                default: false,
		                            },
		                            recId: {
		                                type: 'integer',
		                                description: 'Snowflake for this recommendation, use when submitting recommendation events.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphList: {
		        lexicon: 1,
		        id: 'app.bsky.graph.list',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.',
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['name', 'purpose', 'createdAt'],
		                    properties: {
		                        purpose: {
		                            type: 'ref',
		                            description: 'Defines the purpose of the list (aka, moderation-oriented or curration-oriented)',
		                            ref: 'lex:app.bsky.graph.defs#listPurpose',
		                        },
		                        name: {
		                            type: 'string',
		                            maxLength: 64,
		                            minLength: 1,
		                            description: 'Display name for list; can not be empty.',
		                        },
		                        description: {
		                            type: 'string',
		                            maxGraphemes: 300,
		                            maxLength: 3000,
		                        },
		                        descriptionFacets: {
		                            type: 'array',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.richtext.facet',
		                            },
		                        },
		                        avatar: {
		                            type: 'blob',
		                            accept: ['image/png', 'image/jpeg'],
		                            maxSize: 1000000,
		                        },
		                        labels: {
		                            type: 'union',
		                            refs: ['lex:com.atproto.label.defs#selfLabels'],
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphListblock: {
		        lexicon: 1,
		        id: 'app.bsky.graph.listblock',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'Record representing a block relationship against an entire an entire list of accounts (actors).',
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'createdAt'],
		                    properties: {
		                        subject: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to the mod list record.',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphListitem: {
		        lexicon: 1,
		        id: 'app.bsky.graph.listitem',
		        defs: {
		            main: {
		                type: 'record',
		                description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'list', 'createdAt'],
		                    properties: {
		                        subject: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'The account which is included on the list.',
		                        },
		                        list: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to the list record (app.bsky.graph.list).',
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphMuteActor: {
		        lexicon: 1,
		        id: 'app.bsky.graph.muteActor',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actor'],
		                        properties: {
		                            actor: {
		                                type: 'string',
		                                format: 'at-identifier',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphMuteActorList: {
		        lexicon: 1,
		        id: 'app.bsky.graph.muteActorList',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['list'],
		                        properties: {
		                            list: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphMuteThread: {
		        lexicon: 1,
		        id: 'app.bsky.graph.muteThread',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['root'],
		                        properties: {
		                            root: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphSearchStarterPacks: {
		        lexicon: 1,
		        id: 'app.bsky.graph.searchStarterPacks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find starter packs matching search criteria. Does not require auth.',
		                parameters: {
		                    type: 'params',
		                    required: ['q'],
		                    properties: {
		                        q: {
		                            type: 'string',
		                            description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 25,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPacks'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            starterPacks: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphStarterpack: {
		        lexicon: 1,
		        id: 'app.bsky.graph.starterpack',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'Record defining a starter pack of actors and feeds for new users.',
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['name', 'list', 'createdAt'],
		                    properties: {
		                        name: {
		                            type: 'string',
		                            maxGraphemes: 50,
		                            maxLength: 500,
		                            minLength: 1,
		                            description: 'Display name for starter pack; can not be empty.',
		                        },
		                        description: {
		                            type: 'string',
		                            maxGraphemes: 300,
		                            maxLength: 3000,
		                        },
		                        descriptionFacets: {
		                            type: 'array',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.richtext.facet',
		                            },
		                        },
		                        list: {
		                            type: 'string',
		                            format: 'at-uri',
		                            description: 'Reference (AT-URI) to the list record.',
		                        },
		                        feeds: {
		                            type: 'array',
		                            maxLength: 3,
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.graph.starterpack#feedItem',
		                            },
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		            feedItem: {
		                type: 'object',
		                required: ['uri'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphUnmuteActor: {
		        lexicon: 1,
		        id: 'app.bsky.graph.unmuteActor',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Unmutes the specified account. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actor'],
		                        properties: {
		                            actor: {
		                                type: 'string',
		                                format: 'at-identifier',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphUnmuteActorList: {
		        lexicon: 1,
		        id: 'app.bsky.graph.unmuteActorList',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Unmutes the specified list of accounts. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['list'],
		                        properties: {
		                            list: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphUnmuteThread: {
		        lexicon: 1,
		        id: 'app.bsky.graph.unmuteThread',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Unmutes the specified thread. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['root'],
		                        properties: {
		                            root: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyGraphVerification: {
		        lexicon: 1,
		        id: 'app.bsky.graph.verification',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'Record declaring a verification relationship between two accounts. Verifications are only considered valid by an app if issued by an account the app considers trusted.',
		                key: 'tid',
		                record: {
		                    type: 'object',
		                    required: ['subject', 'handle', 'displayName', 'createdAt'],
		                    properties: {
		                        subject: {
		                            description: 'DID of the subject the verification applies to.',
		                            type: 'string',
		                            format: 'did',
		                        },
		                        handle: {
		                            description: 'Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.',
		                            type: 'string',
		                            format: 'handle',
		                        },
		                        displayName: {
		                            description: 'Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.',
		                            type: 'string',
		                        },
		                        createdAt: {
		                            description: 'Date of when the verification was created.',
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyLabelerDefs: {
		        lexicon: 1,
		        id: 'app.bsky.labeler.defs',
		        defs: {
		            labelerView: {
		                type: 'object',
		                required: ['uri', 'cid', 'creator', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    creator: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                    likeCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.labeler.defs#labelerViewerState',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                },
		            },
		            labelerViewDetailed: {
		                type: 'object',
		                required: ['uri', 'cid', 'creator', 'policies', 'indexedAt'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    creator: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                    policies: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.labeler.defs#labelerPolicies',
		                    },
		                    likeCount: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.labeler.defs#labelerViewerState',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    reasonTypes: {
		                        description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.",
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.moderation.defs#reasonType',
		                        },
		                    },
		                    subjectTypes: {
		                        description: 'The set of subject types (account, record, etc) this service accepts reports on.',
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.moderation.defs#subjectType',
		                        },
		                    },
		                    subjectCollections: {
		                        type: 'array',
		                        description: 'Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.',
		                        items: {
		                            type: 'string',
		                            format: 'nsid',
		                        },
		                    },
		                },
		            },
		            labelerViewerState: {
		                type: 'object',
		                properties: {
		                    like: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            labelerPolicies: {
		                type: 'object',
		                required: ['labelValues'],
		                properties: {
		                    labelValues: {
		                        type: 'array',
		                        description: 'The label values which this labeler publishes. May include global or custom labels.',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#labelValue',
		                        },
		                    },
		                    labelValueDefinitions: {
		                        type: 'array',
		                        description: 'Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#labelValueDefinition',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyLabelerGetServices: {
		        lexicon: 1,
		        id: 'app.bsky.labeler.getServices',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get information about a list of labeler services.',
		                parameters: {
		                    type: 'params',
		                    required: ['dids'],
		                    properties: {
		                        dids: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                        detailed: {
		                            type: 'boolean',
		                            default: false,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['views'],
		                        properties: {
		                            views: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:app.bsky.labeler.defs#labelerView',
		                                        'lex:app.bsky.labeler.defs#labelerViewDetailed',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyLabelerService: {
		        lexicon: 1,
		        id: 'app.bsky.labeler.service',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'A declaration of the existence of labeler service.',
		                key: 'literal:self',
		                record: {
		                    type: 'object',
		                    required: ['policies', 'createdAt'],
		                    properties: {
		                        policies: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.labeler.defs#labelerPolicies',
		                        },
		                        labels: {
		                            type: 'union',
		                            refs: ['lex:com.atproto.label.defs#selfLabels'],
		                        },
		                        createdAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                        reasonTypes: {
		                            description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.",
		                            type: 'array',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.moderation.defs#reasonType',
		                            },
		                        },
		                        subjectTypes: {
		                            description: 'The set of subject types (account, record, etc) this service accepts reports on.',
		                            type: 'array',
		                            items: {
		                                type: 'ref',
		                                ref: 'lex:com.atproto.moderation.defs#subjectType',
		                            },
		                        },
		                        subjectCollections: {
		                            type: 'array',
		                            description: 'Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.',
		                            items: {
		                                type: 'string',
		                                format: 'nsid',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyNotificationDefs: {
		        lexicon: 1,
		        id: 'app.bsky.notification.defs',
		        defs: {
		            recordDeleted: {
		                type: 'object',
		                properties: {},
		            },
		        },
		    },
		    AppBskyNotificationGetUnreadCount: {
		        lexicon: 1,
		        id: 'app.bsky.notification.getUnreadCount',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Count the number of unread notifications for the requesting account. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        priority: {
		                            type: 'boolean',
		                        },
		                        seenAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['count'],
		                        properties: {
		                            count: {
		                                type: 'integer',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyNotificationListNotifications: {
		        lexicon: 1,
		        id: 'app.bsky.notification.listNotifications',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Enumerate notifications for the requesting account. Requires auth.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        reasons: {
		                            description: 'Notification reasons to include in response.',
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                description: 'A reason that matches the reason property of #notification.',
		                            },
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        priority: {
		                            type: 'boolean',
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        seenAt: {
		                            type: 'string',
		                            format: 'datetime',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['notifications'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            notifications: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.notification.listNotifications#notification',
		                                },
		                            },
		                            priority: {
		                                type: 'boolean',
		                            },
		                            seenAt: {
		                                type: 'string',
		                                format: 'datetime',
		                            },
		                        },
		                    },
		                },
		            },
		            notification: {
		                type: 'object',
		                required: [
		                    'uri',
		                    'cid',
		                    'author',
		                    'reason',
		                    'record',
		                    'isRead',
		                    'indexedAt',
		                ],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    author: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileView',
		                    },
		                    reason: {
		                        type: 'string',
		                        description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', 'starterpack-joined', 'verified', and 'unverified'.",
		                        knownValues: [
		                            'like',
		                            'repost',
		                            'follow',
		                            'mention',
		                            'reply',
		                            'quote',
		                            'starterpack-joined',
		                            'verified',
		                            'unverified',
		                        ],
		                    },
		                    reasonSubject: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    record: {
		                        type: 'unknown',
		                    },
		                    isRead: {
		                        type: 'boolean',
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyNotificationPutPreferences: {
		        lexicon: 1,
		        id: 'app.bsky.notification.putPreferences',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Set notification-related preferences for an account. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['priority'],
		                        properties: {
		                            priority: {
		                                type: 'boolean',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyNotificationRegisterPush: {
		        lexicon: 1,
		        id: 'app.bsky.notification.registerPush',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Register to receive push notifications, via a specified service, for the requesting account. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['serviceDid', 'token', 'platform', 'appId'],
		                        properties: {
		                            serviceDid: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            token: {
		                                type: 'string',
		                            },
		                            platform: {
		                                type: 'string',
		                                knownValues: ['ios', 'android', 'web'],
		                            },
		                            appId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyNotificationUpdateSeen: {
		        lexicon: 1,
		        id: 'app.bsky.notification.updateSeen',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Notify server that the requesting account has seen notifications. Requires auth.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['seenAt'],
		                        properties: {
		                            seenAt: {
		                                type: 'string',
		                                format: 'datetime',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyRichtextFacet: {
		        lexicon: 1,
		        id: 'app.bsky.richtext.facet',
		        defs: {
		            main: {
		                type: 'object',
		                description: 'Annotation of a sub-string within rich text.',
		                required: ['index', 'features'],
		                properties: {
		                    index: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.richtext.facet#byteSlice',
		                    },
		                    features: {
		                        type: 'array',
		                        items: {
		                            type: 'union',
		                            refs: [
		                                'lex:app.bsky.richtext.facet#mention',
		                                'lex:app.bsky.richtext.facet#link',
		                                'lex:app.bsky.richtext.facet#tag',
		                            ],
		                        },
		                    },
		                },
		            },
		            mention: {
		                type: 'object',
		                description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            link: {
		                type: 'object',
		                description: 'Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.',
		                required: ['uri'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                },
		            },
		            tag: {
		                type: 'object',
		                description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
		                required: ['tag'],
		                properties: {
		                    tag: {
		                        type: 'string',
		                        maxLength: 640,
		                        maxGraphemes: 64,
		                    },
		                },
		            },
		            byteSlice: {
		                type: 'object',
		                description: 'Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.',
		                required: ['byteStart', 'byteEnd'],
		                properties: {
		                    byteStart: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                    byteEnd: {
		                        type: 'integer',
		                        minimum: 0,
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedDefs: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.defs',
		        defs: {
		            skeletonSearchPost: {
		                type: 'object',
		                required: ['uri'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            skeletonSearchActor: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            skeletonSearchStarterPack: {
		                type: 'object',
		                required: ['uri'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            trendingTopic: {
		                type: 'object',
		                required: ['topic', 'link'],
		                properties: {
		                    topic: {
		                        type: 'string',
		                    },
		                    displayName: {
		                        type: 'string',
		                    },
		                    description: {
		                        type: 'string',
		                    },
		                    link: {
		                        type: 'string',
		                    },
		                },
		            },
		            skeletonTrend: {
		                type: 'object',
		                required: [
		                    'topic',
		                    'displayName',
		                    'link',
		                    'startedAt',
		                    'postCount',
		                    'dids',
		                ],
		                properties: {
		                    topic: {
		                        type: 'string',
		                    },
		                    displayName: {
		                        type: 'string',
		                    },
		                    link: {
		                        type: 'string',
		                    },
		                    startedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    postCount: {
		                        type: 'integer',
		                    },
		                    status: {
		                        type: 'string',
		                        knownValues: ['hot'],
		                    },
		                    category: {
		                        type: 'string',
		                    },
		                    dids: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                    },
		                },
		            },
		            trendView: {
		                type: 'object',
		                required: [
		                    'topic',
		                    'displayName',
		                    'link',
		                    'startedAt',
		                    'postCount',
		                    'actors',
		                ],
		                properties: {
		                    topic: {
		                        type: 'string',
		                    },
		                    displayName: {
		                        type: 'string',
		                    },
		                    link: {
		                        type: 'string',
		                    },
		                    startedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    postCount: {
		                        type: 'integer',
		                    },
		                    status: {
		                        type: 'string',
		                        knownValues: ['hot'],
		                    },
		                    category: {
		                        type: 'string',
		                    },
		                    actors: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.actor.defs#profileViewBasic',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetConfig: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getConfig',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get miscellaneous runtime configuration.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: [],
		                        properties: {
		                            checkEmailConfirmed: {
		                                type: 'boolean',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetPopularFeedGenerators: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getPopularFeedGenerators',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'An unspecced view of globally popular feed generators.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        query: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feeds'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#generatorView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestedFeeds: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestedFeeds',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of suggested feeds',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feeds'],
		                        properties: {
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.feed.defs#generatorView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestedFeedsSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestedFeedsSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a skeleton of suggested feeds. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedFeeds',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries).',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['feeds'],
		                        properties: {
		                            feeds: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                    format: 'at-uri',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestedStarterPacks: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestedStarterPacks',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of suggested starterpacks',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPacks'],
		                        properties: {
		                            starterPacks: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.graph.defs#starterPackView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestedStarterPacksSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestedStarterPacksSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a skeleton of suggested starterpacks. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedStarterpacks',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries).',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPacks'],
		                        properties: {
		                            starterPacks: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                    format: 'at-uri',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestedUsers: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestedUsers',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of suggested users',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        category: {
		                            type: 'string',
		                            description: 'Category of users to get suggestions for.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 50,
		                            default: 25,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actors'],
		                        properties: {
		                            actors: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.actor.defs#profileView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestedUsersSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestedUsersSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a skeleton of suggested users. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedUsers',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries).',
		                        },
		                        category: {
		                            type: 'string',
		                            description: 'Category of users to get suggestions for.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 50,
		                            default: 25,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['dids'],
		                        properties: {
		                            dids: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                    format: 'did',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetSuggestionsSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getSuggestionsSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        relativeToDid: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actors'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            actors: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor',
		                                },
		                            },
		                            relativeToDid: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer.',
		                            },
		                            recId: {
		                                type: 'integer',
		                                description: 'Snowflake for this recommendation, use when submitting recommendation events.',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetTaggedSuggestions: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getTaggedSuggestions',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of suggestions (feeds and users) tagged with categories',
		                parameters: {
		                    type: 'params',
		                    properties: {},
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['suggestions'],
		                        properties: {
		                            suggestions: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.getTaggedSuggestions#suggestion',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            suggestion: {
		                type: 'object',
		                required: ['tag', 'subjectType', 'subject'],
		                properties: {
		                    tag: {
		                        type: 'string',
		                    },
		                    subjectType: {
		                        type: 'string',
		                        knownValues: ['actor', 'feed'],
		                    },
		                    subject: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetTrendingTopics: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getTrendingTopics',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a list of trending topics',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['topics', 'suggested'],
		                        properties: {
		                            topics: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#trendingTopic',
		                                },
		                            },
		                            suggested: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#trendingTopic',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetTrends: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getTrends',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get the current trends on the network',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['trends'],
		                        properties: {
		                            trends: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#trendView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedGetTrendsSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.getTrendsSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get the skeleton of trends on the network. Intended to be called and then hydrated through app.bsky.unspecced.getTrends',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries).',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 25,
		                            default: 10,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['trends'],
		                        properties: {
		                            trends: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#skeletonTrend',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyUnspeccedSearchActorsSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.searchActorsSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Backend Actors (profile) search, returns only skeleton.',
		                parameters: {
		                    type: 'params',
		                    required: ['q'],
		                    properties: {
		                        q: {
		                            type: 'string',
		                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.',
		                        },
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.',
		                        },
		                        typeahead: {
		                            type: 'boolean',
		                            description: "If true, acts as fast/simple 'typeahead' query.",
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 25,
		                        },
		                        cursor: {
		                            type: 'string',
		                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actors'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            hitsTotal: {
		                                type: 'integer',
		                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',
		                            },
		                            actors: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BadQueryString',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyUnspeccedSearchPostsSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.searchPostsSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Backend Posts search, returns only skeleton',
		                parameters: {
		                    type: 'params',
		                    required: ['q'],
		                    properties: {
		                        q: {
		                            type: 'string',
		                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',
		                        },
		                        sort: {
		                            type: 'string',
		                            knownValues: ['top', 'latest'],
		                            default: 'latest',
		                            description: 'Specifies the ranking order of results.',
		                        },
		                        since: {
		                            type: 'string',
		                            description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).",
		                        },
		                        until: {
		                            type: 'string',
		                            description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).",
		                        },
		                        mentions: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.',
		                        },
		                        author: {
		                            type: 'string',
		                            format: 'at-identifier',
		                            description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.',
		                        },
		                        lang: {
		                            type: 'string',
		                            format: 'language',
		                            description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.',
		                        },
		                        domain: {
		                            type: 'string',
		                            description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.',
		                        },
		                        url: {
		                            type: 'string',
		                            format: 'uri',
		                            description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.',
		                        },
		                        tag: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                maxLength: 640,
		                                maxGraphemes: 64,
		                            },
		                            description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.",
		                        },
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries.",
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 25,
		                        },
		                        cursor: {
		                            type: 'string',
		                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['posts'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            hitsTotal: {
		                                type: 'integer',
		                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',
		                            },
		                            posts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchPost',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BadQueryString',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyUnspeccedSearchStarterPacksSkeleton: {
		        lexicon: 1,
		        id: 'app.bsky.unspecced.searchStarterPacksSkeleton',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Backend Starter Pack search, returns only skeleton.',
		                parameters: {
		                    type: 'params',
		                    required: ['q'],
		                    properties: {
		                        q: {
		                            type: 'string',
		                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',
		                        },
		                        viewer: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'DID of the account making the request (not included for public/unauthenticated queries).',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 25,
		                        },
		                        cursor: {
		                            type: 'string',
		                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['starterPacks'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            hitsTotal: {
		                                type: 'integer',
		                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',
		                            },
		                            starterPacks: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchStarterPack',
		                                },
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'BadQueryString',
		                    },
		                ],
		            },
		        },
		    },
		    AppBskyVideoDefs: {
		        lexicon: 1,
		        id: 'app.bsky.video.defs',
		        defs: {
		            jobStatus: {
		                type: 'object',
		                required: ['jobId', 'did', 'state'],
		                properties: {
		                    jobId: {
		                        type: 'string',
		                    },
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    state: {
		                        type: 'string',
		                        description: 'The state of the video processing job. All values not listed as a known value indicate that the job is in process.',
		                        knownValues: ['JOB_STATE_COMPLETED', 'JOB_STATE_FAILED'],
		                    },
		                    progress: {
		                        type: 'integer',
		                        minimum: 0,
		                        maximum: 100,
		                        description: 'Progress within the current processing state.',
		                    },
		                    blob: {
		                        type: 'blob',
		                    },
		                    error: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'string',
		                    },
		                },
		            },
		        },
		    },
		    AppBskyVideoGetJobStatus: {
		        lexicon: 1,
		        id: 'app.bsky.video.getJobStatus',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get status details for a video processing job.',
		                parameters: {
		                    type: 'params',
		                    required: ['jobId'],
		                    properties: {
		                        jobId: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['jobStatus'],
		                        properties: {
		                            jobStatus: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.video.defs#jobStatus',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyVideoGetUploadLimits: {
		        lexicon: 1,
		        id: 'app.bsky.video.getUploadLimits',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get video upload limits for the authenticated user.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['canUpload'],
		                        properties: {
		                            canUpload: {
		                                type: 'boolean',
		                            },
		                            remainingDailyVideos: {
		                                type: 'integer',
		                            },
		                            remainingDailyBytes: {
		                                type: 'integer',
		                            },
		                            message: {
		                                type: 'string',
		                            },
		                            error: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    AppBskyVideoUploadVideo: {
		        lexicon: 1,
		        id: 'app.bsky.video.uploadVideo',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Upload a video to be processed then stored on the PDS.',
		                input: {
		                    encoding: 'video/mp4',
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['jobStatus'],
		                        properties: {
		                            jobStatus: {
		                                type: 'ref',
		                                ref: 'lex:app.bsky.video.defs#jobStatus',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyActorDeclaration: {
		        lexicon: 1,
		        id: 'chat.bsky.actor.declaration',
		        defs: {
		            main: {
		                type: 'record',
		                description: 'A declaration of a Bluesky chat account.',
		                key: 'literal:self',
		                record: {
		                    type: 'object',
		                    required: ['allowIncoming'],
		                    properties: {
		                        allowIncoming: {
		                            type: 'string',
		                            knownValues: ['all', 'none', 'following'],
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyActorDefs: {
		        lexicon: 1,
		        id: 'chat.bsky.actor.defs',
		        defs: {
		            profileViewBasic: {
		                type: 'object',
		                required: ['did', 'handle'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    displayName: {
		                        type: 'string',
		                        maxGraphemes: 64,
		                        maxLength: 640,
		                    },
		                    avatar: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    associated: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileAssociated',
		                    },
		                    viewer: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#viewerState',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    chatDisabled: {
		                        type: 'boolean',
		                        description: 'Set to true when the actor cannot actively participate in conversations',
		                    },
		                    verification: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#verificationState',
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyActorDeleteAccount: {
		        lexicon: 1,
		        id: 'chat.bsky.actor.deleteAccount',
		        defs: {
		            main: {
		                type: 'procedure',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {},
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyActorExportAccountData: {
		        lexicon: 1,
		        id: 'chat.bsky.actor.exportAccountData',
		        defs: {
		            main: {
		                type: 'query',
		                output: {
		                    encoding: 'application/jsonl',
		                },
		            },
		        },
		    },
		    ChatBskyConvoAcceptConvo: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.acceptConvo',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            rev: {
		                                description: 'Rev when the convo was accepted. If not present, the convo was already accepted.',
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoAddReaction: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.addReaction',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Adds an emoji reaction to a message. Requires authentication. It is idempotent, so multiple calls from the same user with the same emoji result in a single reaction.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId', 'messageId', 'value'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                            messageId: {
		                                type: 'string',
		                            },
		                            value: {
		                                type: 'string',
		                                minLength: 1,
		                                maxLength: 64,
		                                minGraphemes: 1,
		                                maxGraphemes: 1,
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['message'],
		                        properties: {
		                            message: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#messageView',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'ReactionMessageDeleted',
		                        description: 'Indicates that the message has been deleted and reactions can no longer be added/removed.',
		                    },
		                    {
		                        name: 'ReactionLimitReached',
		                        description: "Indicates that the message has the maximum number of reactions allowed for a single user, and the requested reaction wasn't yet present. If it was already present, the request will not fail since it is idempotent.",
		                    },
		                    {
		                        name: 'ReactionInvalidValue',
		                        description: 'Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji.',
		                    },
		                ],
		            },
		        },
		    },
		    ChatBskyConvoDefs: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.defs',
		        defs: {
		            messageRef: {
		                type: 'object',
		                required: ['did', 'messageId', 'convoId'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                    messageId: {
		                        type: 'string',
		                    },
		                },
		            },
		            messageInput: {
		                type: 'object',
		                required: ['text'],
		                properties: {
		                    text: {
		                        type: 'string',
		                        maxLength: 10000,
		                        maxGraphemes: 1000,
		                    },
		                    facets: {
		                        type: 'array',
		                        description: 'Annotations of text (mentions, URLs, hashtags, etc)',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.richtext.facet',
		                        },
		                    },
		                    embed: {
		                        type: 'union',
		                        refs: ['lex:app.bsky.embed.record'],
		                    },
		                },
		            },
		            messageView: {
		                type: 'object',
		                required: ['id', 'rev', 'text', 'sender', 'sentAt'],
		                properties: {
		                    id: {
		                        type: 'string',
		                    },
		                    rev: {
		                        type: 'string',
		                    },
		                    text: {
		                        type: 'string',
		                        maxLength: 10000,
		                        maxGraphemes: 1000,
		                    },
		                    facets: {
		                        type: 'array',
		                        description: 'Annotations of text (mentions, URLs, hashtags, etc)',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:app.bsky.richtext.facet',
		                        },
		                    },
		                    embed: {
		                        type: 'union',
		                        refs: ['lex:app.bsky.embed.record#view'],
		                    },
		                    reactions: {
		                        type: 'array',
		                        description: 'Reactions to this message, in ascending order of creation time.',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:chat.bsky.convo.defs#reactionView',
		                        },
		                    },
		                    sender: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#messageViewSender',
		                    },
		                    sentAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            deletedMessageView: {
		                type: 'object',
		                required: ['id', 'rev', 'sender', 'sentAt'],
		                properties: {
		                    id: {
		                        type: 'string',
		                    },
		                    rev: {
		                        type: 'string',
		                    },
		                    sender: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#messageViewSender',
		                    },
		                    sentAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            messageViewSender: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            reactionView: {
		                type: 'object',
		                required: ['value', 'sender', 'createdAt'],
		                properties: {
		                    value: {
		                        type: 'string',
		                    },
		                    sender: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#reactionViewSender',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            reactionViewSender: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            messageAndReactionView: {
		                type: 'object',
		                required: ['message', 'reaction'],
		                properties: {
		                    message: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#messageView',
		                    },
		                    reaction: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#reactionView',
		                    },
		                },
		            },
		            convoView: {
		                type: 'object',
		                required: ['id', 'rev', 'members', 'muted', 'unreadCount'],
		                properties: {
		                    id: {
		                        type: 'string',
		                    },
		                    rev: {
		                        type: 'string',
		                    },
		                    members: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:chat.bsky.actor.defs#profileViewBasic',
		                        },
		                    },
		                    lastMessage: {
		                        type: 'union',
		                        refs: [
		                            'lex:chat.bsky.convo.defs#messageView',
		                            'lex:chat.bsky.convo.defs#deletedMessageView',
		                        ],
		                    },
		                    lastReaction: {
		                        type: 'union',
		                        refs: ['lex:chat.bsky.convo.defs#messageAndReactionView'],
		                    },
		                    muted: {
		                        type: 'boolean',
		                    },
		                    status: {
		                        type: 'string',
		                        knownValues: ['request', 'accepted'],
		                    },
		                    unreadCount: {
		                        type: 'integer',
		                    },
		                },
		            },
		            logBeginConvo: {
		                type: 'object',
		                required: ['rev', 'convoId'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                },
		            },
		            logAcceptConvo: {
		                type: 'object',
		                required: ['rev', 'convoId'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                },
		            },
		            logLeaveConvo: {
		                type: 'object',
		                required: ['rev', 'convoId'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                },
		            },
		            logMuteConvo: {
		                type: 'object',
		                required: ['rev', 'convoId'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                },
		            },
		            logUnmuteConvo: {
		                type: 'object',
		                required: ['rev', 'convoId'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                },
		            },
		            logCreateMessage: {
		                type: 'object',
		                required: ['rev', 'convoId', 'message'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'union',
		                        refs: [
		                            'lex:chat.bsky.convo.defs#messageView',
		                            'lex:chat.bsky.convo.defs#deletedMessageView',
		                        ],
		                    },
		                },
		            },
		            logDeleteMessage: {
		                type: 'object',
		                required: ['rev', 'convoId', 'message'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'union',
		                        refs: [
		                            'lex:chat.bsky.convo.defs#messageView',
		                            'lex:chat.bsky.convo.defs#deletedMessageView',
		                        ],
		                    },
		                },
		            },
		            logReadMessage: {
		                type: 'object',
		                required: ['rev', 'convoId', 'message'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'union',
		                        refs: [
		                            'lex:chat.bsky.convo.defs#messageView',
		                            'lex:chat.bsky.convo.defs#deletedMessageView',
		                        ],
		                    },
		                },
		            },
		            logAddReaction: {
		                type: 'object',
		                required: ['rev', 'convoId', 'message', 'reaction'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'union',
		                        refs: [
		                            'lex:chat.bsky.convo.defs#messageView',
		                            'lex:chat.bsky.convo.defs#deletedMessageView',
		                        ],
		                    },
		                    reaction: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#reactionView',
		                    },
		                },
		            },
		            logRemoveReaction: {
		                type: 'object',
		                required: ['rev', 'convoId', 'message', 'reaction'],
		                properties: {
		                    rev: {
		                        type: 'string',
		                    },
		                    convoId: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'union',
		                        refs: [
		                            'lex:chat.bsky.convo.defs#messageView',
		                            'lex:chat.bsky.convo.defs#deletedMessageView',
		                        ],
		                    },
		                    reaction: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#reactionView',
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoDeleteMessageForSelf: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.deleteMessageForSelf',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId', 'messageId'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                            messageId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#deletedMessageView',
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoGetConvo: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.getConvo',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    required: ['convoId'],
		                    properties: {
		                        convoId: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convo'],
		                        properties: {
		                            convo: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#convoView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoGetConvoAvailability: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.getConvoAvailability',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get whether the requester and the other members can chat. If an existing convo is found for these members, it is returned.',
		                parameters: {
		                    type: 'params',
		                    required: ['members'],
		                    properties: {
		                        members: {
		                            type: 'array',
		                            minLength: 1,
		                            maxLength: 10,
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['canChat'],
		                        properties: {
		                            canChat: {
		                                type: 'boolean',
		                            },
		                            convo: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#convoView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoGetConvoForMembers: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.getConvoForMembers',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    required: ['members'],
		                    properties: {
		                        members: {
		                            type: 'array',
		                            minLength: 1,
		                            maxLength: 10,
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convo'],
		                        properties: {
		                            convo: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#convoView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoGetLog: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.getLog',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    required: [],
		                    properties: {
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['logs'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            logs: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:chat.bsky.convo.defs#logBeginConvo',
		                                        'lex:chat.bsky.convo.defs#logAcceptConvo',
		                                        'lex:chat.bsky.convo.defs#logLeaveConvo',
		                                        'lex:chat.bsky.convo.defs#logMuteConvo',
		                                        'lex:chat.bsky.convo.defs#logUnmuteConvo',
		                                        'lex:chat.bsky.convo.defs#logCreateMessage',
		                                        'lex:chat.bsky.convo.defs#logDeleteMessage',
		                                        'lex:chat.bsky.convo.defs#logReadMessage',
		                                        'lex:chat.bsky.convo.defs#logAddReaction',
		                                        'lex:chat.bsky.convo.defs#logRemoveReaction',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoGetMessages: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.getMessages',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    required: ['convoId'],
		                    properties: {
		                        convoId: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['messages'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            messages: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:chat.bsky.convo.defs#messageView',
		                                        'lex:chat.bsky.convo.defs#deletedMessageView',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoLeaveConvo: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.leaveConvo',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId', 'rev'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                            rev: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoListConvos: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.listConvos',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        readState: {
		                            type: 'string',
		                            knownValues: ['unread'],
		                        },
		                        status: {
		                            type: 'string',
		                            knownValues: ['request', 'accepted'],
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convos'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            convos: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:chat.bsky.convo.defs#convoView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoMuteConvo: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.muteConvo',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convo'],
		                        properties: {
		                            convo: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#convoView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoRemoveReaction: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.removeReaction',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: "Removes an emoji reaction from a message. Requires authentication. It is idempotent, so multiple calls from the same user with the same emoji result in that reaction not being present, even if it already wasn't.",
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId', 'messageId', 'value'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                            messageId: {
		                                type: 'string',
		                            },
		                            value: {
		                                type: 'string',
		                                minLength: 1,
		                                maxLength: 64,
		                                minGraphemes: 1,
		                                maxGraphemes: 1,
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['message'],
		                        properties: {
		                            message: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#messageView',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'ReactionMessageDeleted',
		                        description: 'Indicates that the message has been deleted and reactions can no longer be added/removed.',
		                    },
		                    {
		                        name: 'ReactionInvalidValue',
		                        description: 'Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji.',
		                    },
		                ],
		            },
		        },
		    },
		    ChatBskyConvoSendMessage: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.sendMessage',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId', 'message'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                            message: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#messageInput',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#messageView',
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoSendMessageBatch: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.sendMessageBatch',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['items'],
		                        properties: {
		                            items: {
		                                type: 'array',
		                                maxLength: 100,
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:chat.bsky.convo.sendMessageBatch#batchItem',
		                                },
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['items'],
		                        properties: {
		                            items: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:chat.bsky.convo.defs#messageView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            batchItem: {
		                type: 'object',
		                required: ['convoId', 'message'],
		                properties: {
		                    convoId: {
		                        type: 'string',
		                    },
		                    message: {
		                        type: 'ref',
		                        ref: 'lex:chat.bsky.convo.defs#messageInput',
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoUnmuteConvo: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.unmuteConvo',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convo'],
		                        properties: {
		                            convo: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#convoView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoUpdateAllRead: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.updateAllRead',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            status: {
		                                type: 'string',
		                                knownValues: ['request', 'accepted'],
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['updatedCount'],
		                        properties: {
		                            updatedCount: {
		                                description: 'The count of updated convos.',
		                                type: 'integer',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyConvoUpdateRead: {
		        lexicon: 1,
		        id: 'chat.bsky.convo.updateRead',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convoId'],
		                        properties: {
		                            convoId: {
		                                type: 'string',
		                            },
		                            messageId: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['convo'],
		                        properties: {
		                            convo: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.convo.defs#convoView',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyModerationGetActorMetadata: {
		        lexicon: 1,
		        id: 'chat.bsky.moderation.getActorMetadata',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    required: ['actor'],
		                    properties: {
		                        actor: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['day', 'month', 'all'],
		                        properties: {
		                            day: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata',
		                            },
		                            month: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata',
		                            },
		                            all: {
		                                type: 'ref',
		                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata',
		                            },
		                        },
		                    },
		                },
		            },
		            metadata: {
		                type: 'object',
		                required: [
		                    'messagesSent',
		                    'messagesReceived',
		                    'convos',
		                    'convosStarted',
		                ],
		                properties: {
		                    messagesSent: {
		                        type: 'integer',
		                    },
		                    messagesReceived: {
		                        type: 'integer',
		                    },
		                    convos: {
		                        type: 'integer',
		                    },
		                    convosStarted: {
		                        type: 'integer',
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyModerationGetMessageContext: {
		        lexicon: 1,
		        id: 'chat.bsky.moderation.getMessageContext',
		        defs: {
		            main: {
		                type: 'query',
		                parameters: {
		                    type: 'params',
		                    required: ['messageId'],
		                    properties: {
		                        convoId: {
		                            type: 'string',
		                            description: 'Conversation that the message is from. NOTE: this field will eventually be required.',
		                        },
		                        messageId: {
		                            type: 'string',
		                        },
		                        before: {
		                            type: 'integer',
		                            default: 5,
		                        },
		                        after: {
		                            type: 'integer',
		                            default: 5,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['messages'],
		                        properties: {
		                            messages: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:chat.bsky.convo.defs#messageView',
		                                        'lex:chat.bsky.convo.defs#deletedMessageView',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ChatBskyModerationUpdateActorAccess: {
		        lexicon: 1,
		        id: 'chat.bsky.moderation.updateActorAccess',
		        defs: {
		            main: {
		                type: 'procedure',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['actor', 'allowAccess'],
		                        properties: {
		                            actor: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            allowAccess: {
		                                type: 'boolean',
		                            },
		                            ref: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneCommunicationCreateTemplate: {
		        lexicon: 1,
		        id: 'tools.ozone.communication.createTemplate',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Administrative action to create a new, re-usable communication (email for now) template.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subject', 'contentMarkdown', 'name'],
		                        properties: {
		                            name: {
		                                type: 'string',
		                                description: 'Name of the template.',
		                            },
		                            contentMarkdown: {
		                                type: 'string',
		                                description: 'Content of the template, markdown supported, can contain variable placeholders.',
		                            },
		                            subject: {
		                                type: 'string',
		                                description: 'Subject of the message, used in emails.',
		                            },
		                            lang: {
		                                type: 'string',
		                                format: 'language',
		                                description: 'Message language.',
		                            },
		                            createdBy: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'DID of the user who is creating the template.',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.communication.defs#templateView',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'DuplicateTemplateName',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneCommunicationDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.communication.defs',
		        defs: {
		            templateView: {
		                type: 'object',
		                required: [
		                    'id',
		                    'name',
		                    'contentMarkdown',
		                    'disabled',
		                    'lastUpdatedBy',
		                    'createdAt',
		                    'updatedAt',
		                ],
		                properties: {
		                    id: {
		                        type: 'string',
		                    },
		                    name: {
		                        type: 'string',
		                        description: 'Name of the template.',
		                    },
		                    subject: {
		                        type: 'string',
		                        description: 'Content of the template, can contain markdown and variable placeholders.',
		                    },
		                    contentMarkdown: {
		                        type: 'string',
		                        description: 'Subject of the message, used in emails.',
		                    },
		                    disabled: {
		                        type: 'boolean',
		                    },
		                    lang: {
		                        type: 'string',
		                        format: 'language',
		                        description: 'Message language.',
		                    },
		                    lastUpdatedBy: {
		                        type: 'string',
		                        format: 'did',
		                        description: 'DID of the user who last updated the template.',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneCommunicationDeleteTemplate: {
		        lexicon: 1,
		        id: 'tools.ozone.communication.deleteTemplate',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete a communication template.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['id'],
		                        properties: {
		                            id: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneCommunicationListTemplates: {
		        lexicon: 1,
		        id: 'tools.ozone.communication.listTemplates',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get list of all communication templates.',
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['communicationTemplates'],
		                        properties: {
		                            communicationTemplates: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.communication.defs#templateView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneCommunicationUpdateTemplate: {
		        lexicon: 1,
		        id: 'tools.ozone.communication.updateTemplate',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['id'],
		                        properties: {
		                            id: {
		                                type: 'string',
		                                description: 'ID of the template to be updated.',
		                            },
		                            name: {
		                                type: 'string',
		                                description: 'Name of the template.',
		                            },
		                            lang: {
		                                type: 'string',
		                                format: 'language',
		                                description: 'Message language.',
		                            },
		                            contentMarkdown: {
		                                type: 'string',
		                                description: 'Content of the template, markdown supported, can contain variable placeholders.',
		                            },
		                            subject: {
		                                type: 'string',
		                                description: 'Subject of the message, used in emails.',
		                            },
		                            updatedBy: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'DID of the user who is updating the template.',
		                            },
		                            disabled: {
		                                type: 'boolean',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.communication.defs#templateView',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'DuplicateTemplateName',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneHostingGetAccountHistory: {
		        lexicon: 1,
		        id: 'tools.ozone.hosting.getAccountHistory',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get account history, e.g. log of updated email addresses or other identity information.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                        events: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                knownValues: [
		                                    'accountCreated',
		                                    'emailUpdated',
		                                    'emailConfirmed',
		                                    'passwordUpdated',
		                                    'handleUpdated',
		                                ],
		                            },
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['events'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            events: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.hosting.getAccountHistory#event',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            event: {
		                type: 'object',
		                required: ['details', 'createdBy', 'createdAt'],
		                properties: {
		                    details: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.hosting.getAccountHistory#accountCreated',
		                            'lex:tools.ozone.hosting.getAccountHistory#emailUpdated',
		                            'lex:tools.ozone.hosting.getAccountHistory#emailConfirmed',
		                            'lex:tools.ozone.hosting.getAccountHistory#passwordUpdated',
		                            'lex:tools.ozone.hosting.getAccountHistory#handleUpdated',
		                        ],
		                    },
		                    createdBy: {
		                        type: 'string',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            accountCreated: {
		                type: 'object',
		                required: [],
		                properties: {
		                    email: {
		                        type: 'string',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                },
		            },
		            emailUpdated: {
		                type: 'object',
		                required: ['email'],
		                properties: {
		                    email: {
		                        type: 'string',
		                    },
		                },
		            },
		            emailConfirmed: {
		                type: 'object',
		                required: ['email'],
		                properties: {
		                    email: {
		                        type: 'string',
		                    },
		                },
		            },
		            passwordUpdated: {
		                type: 'object',
		                required: [],
		                properties: {},
		            },
		            handleUpdated: {
		                type: 'object',
		                required: ['handle'],
		                properties: {
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.defs',
		        defs: {
		            modEventView: {
		                type: 'object',
		                required: [
		                    'id',
		                    'event',
		                    'subject',
		                    'subjectBlobCids',
		                    'createdBy',
		                    'createdAt',
		                ],
		                properties: {
		                    id: {
		                        type: 'integer',
		                    },
		                    event: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#modEventTakedown',
		                            'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
		                            'lex:tools.ozone.moderation.defs#modEventComment',
		                            'lex:tools.ozone.moderation.defs#modEventReport',
		                            'lex:tools.ozone.moderation.defs#modEventLabel',
		                            'lex:tools.ozone.moderation.defs#modEventAcknowledge',
		                            'lex:tools.ozone.moderation.defs#modEventEscalate',
		                            'lex:tools.ozone.moderation.defs#modEventMute',
		                            'lex:tools.ozone.moderation.defs#modEventUnmute',
		                            'lex:tools.ozone.moderation.defs#modEventMuteReporter',
		                            'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
		                            'lex:tools.ozone.moderation.defs#modEventEmail',
		                            'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
		                            'lex:tools.ozone.moderation.defs#modEventDivert',
		                            'lex:tools.ozone.moderation.defs#modEventTag',
		                            'lex:tools.ozone.moderation.defs#accountEvent',
		                            'lex:tools.ozone.moderation.defs#identityEvent',
		                            'lex:tools.ozone.moderation.defs#recordEvent',
		                            'lex:tools.ozone.moderation.defs#modEventPriorityScore',
		                        ],
		                    },
		                    subject: {
		                        type: 'union',
		                        refs: [
		                            'lex:com.atproto.admin.defs#repoRef',
		                            'lex:com.atproto.repo.strongRef',
		                            'lex:chat.bsky.convo.defs#messageRef',
		                        ],
		                    },
		                    subjectBlobCids: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                    },
		                    createdBy: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    creatorHandle: {
		                        type: 'string',
		                    },
		                    subjectHandle: {
		                        type: 'string',
		                    },
		                },
		            },
		            modEventViewDetail: {
		                type: 'object',
		                required: [
		                    'id',
		                    'event',
		                    'subject',
		                    'subjectBlobs',
		                    'createdBy',
		                    'createdAt',
		                ],
		                properties: {
		                    id: {
		                        type: 'integer',
		                    },
		                    event: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#modEventTakedown',
		                            'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
		                            'lex:tools.ozone.moderation.defs#modEventComment',
		                            'lex:tools.ozone.moderation.defs#modEventReport',
		                            'lex:tools.ozone.moderation.defs#modEventLabel',
		                            'lex:tools.ozone.moderation.defs#modEventAcknowledge',
		                            'lex:tools.ozone.moderation.defs#modEventEscalate',
		                            'lex:tools.ozone.moderation.defs#modEventMute',
		                            'lex:tools.ozone.moderation.defs#modEventUnmute',
		                            'lex:tools.ozone.moderation.defs#modEventMuteReporter',
		                            'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
		                            'lex:tools.ozone.moderation.defs#modEventEmail',
		                            'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
		                            'lex:tools.ozone.moderation.defs#modEventDivert',
		                            'lex:tools.ozone.moderation.defs#modEventTag',
		                            'lex:tools.ozone.moderation.defs#accountEvent',
		                            'lex:tools.ozone.moderation.defs#identityEvent',
		                            'lex:tools.ozone.moderation.defs#recordEvent',
		                            'lex:tools.ozone.moderation.defs#modEventPriorityScore',
		                        ],
		                    },
		                    subject: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#repoView',
		                            'lex:tools.ozone.moderation.defs#repoViewNotFound',
		                            'lex:tools.ozone.moderation.defs#recordView',
		                            'lex:tools.ozone.moderation.defs#recordViewNotFound',
		                        ],
		                    },
		                    subjectBlobs: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:tools.ozone.moderation.defs#blobView',
		                        },
		                    },
		                    createdBy: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            subjectStatusView: {
		                type: 'object',
		                required: ['id', 'subject', 'createdAt', 'updatedAt', 'reviewState'],
		                properties: {
		                    id: {
		                        type: 'integer',
		                    },
		                    subject: {
		                        type: 'union',
		                        refs: [
		                            'lex:com.atproto.admin.defs#repoRef',
		                            'lex:com.atproto.repo.strongRef',
		                        ],
		                    },
		                    hosting: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#accountHosting',
		                            'lex:tools.ozone.moderation.defs#recordHosting',
		                        ],
		                    },
		                    subjectBlobCids: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                            format: 'cid',
		                        },
		                    },
		                    subjectRepoHandle: {
		                        type: 'string',
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp referencing when the last update was made to the moderation status of the subject',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp referencing the first moderation status impacting event was emitted on the subject',
		                    },
		                    reviewState: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#subjectReviewState',
		                    },
		                    comment: {
		                        type: 'string',
		                        description: 'Sticky comment on the subject.',
		                    },
		                    priorityScore: {
		                        type: 'integer',
		                        description: 'Numeric value representing the level of priority. Higher score means higher priority.',
		                        minimum: 0,
		                        maximum: 100,
		                    },
		                    muteUntil: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    muteReportingUntil: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    lastReviewedBy: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    lastReviewedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    lastReportedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    lastAppealedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                        description: 'Timestamp referencing when the author of the subject appealed a moderation action',
		                    },
		                    takendown: {
		                        type: 'boolean',
		                    },
		                    appealed: {
		                        type: 'boolean',
		                        description: 'True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.',
		                    },
		                    suspendUntil: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    tags: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                    },
		                    accountStats: {
		                        description: 'Statistics related to the account subject',
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#accountStats',
		                    },
		                    recordsStats: {
		                        description: "Statistics related to the record subjects authored by the subject's account",
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#recordsStats',
		                    },
		                },
		            },
		            subjectView: {
		                description: "Detailed view of a subject. For record subjects, the author's repo and profile will be returned.",
		                type: 'object',
		                required: ['type', 'subject'],
		                properties: {
		                    type: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.moderation.defs#subjectType',
		                    },
		                    subject: {
		                        type: 'string',
		                    },
		                    status: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView',
		                    },
		                    repo: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#repoViewDetail',
		                    },
		                    profile: {
		                        type: 'union',
		                        refs: [],
		                    },
		                    record: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#recordViewDetail',
		                    },
		                },
		            },
		            accountStats: {
		                description: 'Statistics about a particular account subject',
		                type: 'object',
		                properties: {
		                    reportCount: {
		                        description: 'Total number of reports on the account',
		                        type: 'integer',
		                    },
		                    appealCount: {
		                        description: 'Total number of appeals against a moderation action on the account',
		                        type: 'integer',
		                    },
		                    suspendCount: {
		                        description: 'Number of times the account was suspended',
		                        type: 'integer',
		                    },
		                    escalateCount: {
		                        description: 'Number of times the account was escalated',
		                        type: 'integer',
		                    },
		                    takedownCount: {
		                        description: 'Number of times the account was taken down',
		                        type: 'integer',
		                    },
		                },
		            },
		            recordsStats: {
		                description: 'Statistics about a set of record subject items',
		                type: 'object',
		                properties: {
		                    totalReports: {
		                        description: 'Cumulative sum of the number of reports on the items in the set',
		                        type: 'integer',
		                    },
		                    reportedCount: {
		                        description: 'Number of items that were reported at least once',
		                        type: 'integer',
		                    },
		                    escalatedCount: {
		                        description: 'Number of items that were escalated at least once',
		                        type: 'integer',
		                    },
		                    appealedCount: {
		                        description: 'Number of items that were appealed at least once',
		                        type: 'integer',
		                    },
		                    subjectCount: {
		                        description: 'Total number of item in the set',
		                        type: 'integer',
		                    },
		                    pendingCount: {
		                        description: 'Number of item currently in "reviewOpen" or "reviewEscalated" state',
		                        type: 'integer',
		                    },
		                    processedCount: {
		                        description: 'Number of item currently in "reviewNone" or "reviewClosed" state',
		                        type: 'integer',
		                    },
		                    takendownCount: {
		                        description: 'Number of item currently taken down',
		                        type: 'integer',
		                    },
		                },
		            },
		            subjectReviewState: {
		                type: 'string',
		                knownValues: [
		                    'lex:tools.ozone.moderation.defs#reviewOpen',
		                    'lex:tools.ozone.moderation.defs#reviewEscalated',
		                    'lex:tools.ozone.moderation.defs#reviewClosed',
		                    'lex:tools.ozone.moderation.defs#reviewNone',
		                ],
		            },
		            reviewOpen: {
		                type: 'token',
		                description: 'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator',
		            },
		            reviewEscalated: {
		                type: 'token',
		                description: 'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator',
		            },
		            reviewClosed: {
		                type: 'token',
		                description: 'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator',
		            },
		            reviewNone: {
		                type: 'token',
		                description: 'Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it',
		            },
		            modEventTakedown: {
		                type: 'object',
		                description: 'Take down a subject permanently or temporarily',
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    durationInHours: {
		                        type: 'integer',
		                        description: 'Indicates how long the takedown should be in effect before automatically expiring.',
		                    },
		                    acknowledgeAccountSubjects: {
		                        type: 'boolean',
		                        description: 'If true, all other reports on content authored by this account will be resolved (acknowledged).',
		                    },
		                    policies: {
		                        type: 'array',
		                        maxLength: 5,
		                        items: {
		                            type: 'string',
		                        },
		                        description: 'Names/Keywords of the policies that drove the decision.',
		                    },
		                },
		            },
		            modEventReverseTakedown: {
		                type: 'object',
		                description: 'Revert take down action on a subject',
		                properties: {
		                    comment: {
		                        type: 'string',
		                        description: 'Describe reasoning behind the reversal.',
		                    },
		                },
		            },
		            modEventResolveAppeal: {
		                type: 'object',
		                description: 'Resolve appeal on a subject',
		                properties: {
		                    comment: {
		                        type: 'string',
		                        description: 'Describe resolution.',
		                    },
		                },
		            },
		            modEventComment: {
		                type: 'object',
		                description: 'Add a comment to a subject. An empty comment will clear any previously set sticky comment.',
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    sticky: {
		                        type: 'boolean',
		                        description: 'Make the comment persistent on the subject',
		                    },
		                },
		            },
		            modEventReport: {
		                type: 'object',
		                description: 'Report a subject',
		                required: ['reportType'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    isReporterMuted: {
		                        type: 'boolean',
		                        description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject.",
		                    },
		                    reportType: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.moderation.defs#reasonType',
		                    },
		                },
		            },
		            modEventLabel: {
		                type: 'object',
		                description: 'Apply/Negate labels on a subject',
		                required: ['createLabelVals', 'negateLabelVals'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    createLabelVals: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                    },
		                    negateLabelVals: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                    },
		                    durationInHours: {
		                        type: 'integer',
		                        description: 'Indicates how long the label will remain on the subject. Only applies on labels that are being added.',
		                    },
		                },
		            },
		            modEventPriorityScore: {
		                type: 'object',
		                description: 'Set priority score of the subject. Higher score means higher priority.',
		                required: ['score'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    score: {
		                        type: 'integer',
		                        minimum: 0,
		                        maximum: 100,
		                    },
		                },
		            },
		            modEventAcknowledge: {
		                type: 'object',
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    acknowledgeAccountSubjects: {
		                        type: 'boolean',
		                        description: 'If true, all other reports on content authored by this account will be resolved (acknowledged).',
		                    },
		                },
		            },
		            modEventEscalate: {
		                type: 'object',
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                },
		            },
		            modEventMute: {
		                type: 'object',
		                description: 'Mute incoming reports on a subject',
		                required: ['durationInHours'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    durationInHours: {
		                        type: 'integer',
		                        description: 'Indicates how long the subject should remain muted.',
		                    },
		                },
		            },
		            modEventUnmute: {
		                type: 'object',
		                description: 'Unmute action on a subject',
		                properties: {
		                    comment: {
		                        type: 'string',
		                        description: 'Describe reasoning behind the reversal.',
		                    },
		                },
		            },
		            modEventMuteReporter: {
		                type: 'object',
		                description: 'Mute incoming reports from an account',
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    durationInHours: {
		                        type: 'integer',
		                        description: 'Indicates how long the account should remain muted. Falsy value here means a permanent mute.',
		                    },
		                },
		            },
		            modEventUnmuteReporter: {
		                type: 'object',
		                description: 'Unmute incoming reports from an account',
		                properties: {
		                    comment: {
		                        type: 'string',
		                        description: 'Describe reasoning behind the reversal.',
		                    },
		                },
		            },
		            modEventEmail: {
		                type: 'object',
		                description: 'Keep a log of outgoing email to a user',
		                required: ['subjectLine'],
		                properties: {
		                    subjectLine: {
		                        type: 'string',
		                        description: 'The subject line of the email sent to the user.',
		                    },
		                    content: {
		                        type: 'string',
		                        description: 'The content of the email sent to the user.',
		                    },
		                    comment: {
		                        type: 'string',
		                        description: 'Additional comment about the outgoing comm.',
		                    },
		                },
		            },
		            modEventDivert: {
		                type: 'object',
		                description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                },
		            },
		            modEventTag: {
		                type: 'object',
		                description: 'Add/Remove a tag on a subject',
		                required: ['add', 'remove'],
		                properties: {
		                    add: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                        description: "Tags to be added to the subject. If already exists, won't be duplicated.",
		                    },
		                    remove: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                        },
		                        description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated.",
		                    },
		                    comment: {
		                        type: 'string',
		                        description: 'Additional comment about added/removed tags.',
		                    },
		                },
		            },
		            accountEvent: {
		                type: 'object',
		                description: 'Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
		                required: ['timestamp', 'active'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    active: {
		                        type: 'boolean',
		                        description: 'Indicates that the account has a repository which can be fetched from the host that emitted this event.',
		                    },
		                    status: {
		                        type: 'string',
		                        knownValues: [
		                            'unknown',
		                            'deactivated',
		                            'deleted',
		                            'takendown',
		                            'suspended',
		                            'tombstoned',
		                        ],
		                    },
		                    timestamp: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            identityEvent: {
		                type: 'object',
		                description: 'Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
		                required: ['timestamp'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    pdsHost: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                    tombstone: {
		                        type: 'boolean',
		                    },
		                    timestamp: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            recordEvent: {
		                type: 'object',
		                description: 'Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
		                required: ['timestamp', 'op'],
		                properties: {
		                    comment: {
		                        type: 'string',
		                    },
		                    op: {
		                        type: 'string',
		                        knownValues: ['create', 'update', 'delete'],
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    timestamp: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            repoView: {
		                type: 'object',
		                required: [
		                    'did',
		                    'handle',
		                    'relatedRecords',
		                    'indexedAt',
		                    'moderation',
		                ],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    email: {
		                        type: 'string',
		                    },
		                    relatedRecords: {
		                        type: 'array',
		                        items: {
		                            type: 'unknown',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    moderation: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#moderation',
		                    },
		                    invitedBy: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.server.defs#inviteCode',
		                    },
		                    invitesDisabled: {
		                        type: 'boolean',
		                    },
		                    inviteNote: {
		                        type: 'string',
		                    },
		                    deactivatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    threatSignatures: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.admin.defs#threatSignature',
		                        },
		                    },
		                },
		            },
		            repoViewDetail: {
		                type: 'object',
		                required: [
		                    'did',
		                    'handle',
		                    'relatedRecords',
		                    'indexedAt',
		                    'moderation',
		                ],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        format: 'handle',
		                    },
		                    email: {
		                        type: 'string',
		                    },
		                    relatedRecords: {
		                        type: 'array',
		                        items: {
		                            type: 'unknown',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    moderation: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#moderationDetail',
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    invitedBy: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.server.defs#inviteCode',
		                    },
		                    invites: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.server.defs#inviteCode',
		                        },
		                    },
		                    invitesDisabled: {
		                        type: 'boolean',
		                    },
		                    inviteNote: {
		                        type: 'string',
		                    },
		                    emailConfirmedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    deactivatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    threatSignatures: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.admin.defs#threatSignature',
		                        },
		                    },
		                },
		            },
		            repoViewNotFound: {
		                type: 'object',
		                required: ['did'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		            recordView: {
		                type: 'object',
		                required: [
		                    'uri',
		                    'cid',
		                    'value',
		                    'blobCids',
		                    'indexedAt',
		                    'moderation',
		                    'repo',
		                ],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    value: {
		                        type: 'unknown',
		                    },
		                    blobCids: {
		                        type: 'array',
		                        items: {
		                            type: 'string',
		                            format: 'cid',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    moderation: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#moderation',
		                    },
		                    repo: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#repoView',
		                    },
		                },
		            },
		            recordViewDetail: {
		                type: 'object',
		                required: [
		                    'uri',
		                    'cid',
		                    'value',
		                    'blobs',
		                    'indexedAt',
		                    'moderation',
		                    'repo',
		                ],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    value: {
		                        type: 'unknown',
		                    },
		                    blobs: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:tools.ozone.moderation.defs#blobView',
		                        },
		                    },
		                    labels: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:com.atproto.label.defs#label',
		                        },
		                    },
		                    indexedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    moderation: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#moderationDetail',
		                    },
		                    repo: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#repoView',
		                    },
		                },
		            },
		            recordViewNotFound: {
		                type: 'object',
		                required: ['uri'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        format: 'at-uri',
		                    },
		                },
		            },
		            moderation: {
		                type: 'object',
		                properties: {
		                    subjectStatus: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView',
		                    },
		                },
		            },
		            moderationDetail: {
		                type: 'object',
		                properties: {
		                    subjectStatus: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView',
		                    },
		                },
		            },
		            blobView: {
		                type: 'object',
		                required: ['cid', 'mimeType', 'size', 'createdAt'],
		                properties: {
		                    cid: {
		                        type: 'string',
		                        format: 'cid',
		                    },
		                    mimeType: {
		                        type: 'string',
		                    },
		                    size: {
		                        type: 'integer',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    details: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#imageDetails',
		                            'lex:tools.ozone.moderation.defs#videoDetails',
		                        ],
		                    },
		                    moderation: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#moderation',
		                    },
		                },
		            },
		            imageDetails: {
		                type: 'object',
		                required: ['width', 'height'],
		                properties: {
		                    width: {
		                        type: 'integer',
		                    },
		                    height: {
		                        type: 'integer',
		                    },
		                },
		            },
		            videoDetails: {
		                type: 'object',
		                required: ['width', 'height', 'length'],
		                properties: {
		                    width: {
		                        type: 'integer',
		                    },
		                    height: {
		                        type: 'integer',
		                    },
		                    length: {
		                        type: 'integer',
		                    },
		                },
		            },
		            accountHosting: {
		                type: 'object',
		                required: ['status'],
		                properties: {
		                    status: {
		                        type: 'string',
		                        knownValues: [
		                            'takendown',
		                            'suspended',
		                            'deleted',
		                            'deactivated',
		                            'unknown',
		                        ],
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    deletedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    deactivatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    reactivatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            recordHosting: {
		                type: 'object',
		                required: ['status'],
		                properties: {
		                    status: {
		                        type: 'string',
		                        knownValues: ['deleted', 'unknown'],
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    deletedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		            reporterStats: {
		                type: 'object',
		                required: [
		                    'did',
		                    'accountReportCount',
		                    'recordReportCount',
		                    'reportedAccountCount',
		                    'reportedRecordCount',
		                    'takendownAccountCount',
		                    'takendownRecordCount',
		                    'labeledAccountCount',
		                    'labeledRecordCount',
		                ],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    accountReportCount: {
		                        type: 'integer',
		                        description: 'The total number of reports made by the user on accounts.',
		                    },
		                    recordReportCount: {
		                        type: 'integer',
		                        description: 'The total number of reports made by the user on records.',
		                    },
		                    reportedAccountCount: {
		                        type: 'integer',
		                        description: 'The total number of accounts reported by the user.',
		                    },
		                    reportedRecordCount: {
		                        type: 'integer',
		                        description: 'The total number of records reported by the user.',
		                    },
		                    takendownAccountCount: {
		                        type: 'integer',
		                        description: "The total number of accounts taken down as a result of the user's reports.",
		                    },
		                    takendownRecordCount: {
		                        type: 'integer',
		                        description: "The total number of records taken down as a result of the user's reports.",
		                    },
		                    labeledAccountCount: {
		                        type: 'integer',
		                        description: "The total number of accounts labeled as a result of the user's reports.",
		                    },
		                    labeledRecordCount: {
		                        type: 'integer',
		                        description: "The total number of records labeled as a result of the user's reports.",
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationEmitEvent: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.emitEvent',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Take a moderation action on an actor.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['event', 'subject', 'createdBy'],
		                        properties: {
		                            event: {
		                                type: 'union',
		                                refs: [
		                                    'lex:tools.ozone.moderation.defs#modEventTakedown',
		                                    'lex:tools.ozone.moderation.defs#modEventAcknowledge',
		                                    'lex:tools.ozone.moderation.defs#modEventEscalate',
		                                    'lex:tools.ozone.moderation.defs#modEventComment',
		                                    'lex:tools.ozone.moderation.defs#modEventLabel',
		                                    'lex:tools.ozone.moderation.defs#modEventReport',
		                                    'lex:tools.ozone.moderation.defs#modEventMute',
		                                    'lex:tools.ozone.moderation.defs#modEventUnmute',
		                                    'lex:tools.ozone.moderation.defs#modEventMuteReporter',
		                                    'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
		                                    'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
		                                    'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
		                                    'lex:tools.ozone.moderation.defs#modEventEmail',
		                                    'lex:tools.ozone.moderation.defs#modEventDivert',
		                                    'lex:tools.ozone.moderation.defs#modEventTag',
		                                    'lex:tools.ozone.moderation.defs#accountEvent',
		                                    'lex:tools.ozone.moderation.defs#identityEvent',
		                                    'lex:tools.ozone.moderation.defs#recordEvent',
		                                    'lex:tools.ozone.moderation.defs#modEventPriorityScore',
		                                ],
		                            },
		                            subject: {
		                                type: 'union',
		                                refs: [
		                                    'lex:com.atproto.admin.defs#repoRef',
		                                    'lex:com.atproto.repo.strongRef',
		                                ],
		                            },
		                            subjectBlobCids: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                    format: 'cid',
		                                },
		                            },
		                            createdBy: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#modEventView',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'SubjectHasAction',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneModerationGetEvent: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getEvent',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about a moderation event.',
		                parameters: {
		                    type: 'params',
		                    required: ['id'],
		                    properties: {
		                        id: {
		                            type: 'integer',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#modEventViewDetail',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationGetRecord: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getRecord',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about a record.',
		                parameters: {
		                    type: 'params',
		                    required: ['uri'],
		                    properties: {
		                        uri: {
		                            type: 'string',
		                            format: 'at-uri',
		                        },
		                        cid: {
		                            type: 'string',
		                            format: 'cid',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#recordViewDetail',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'RecordNotFound',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneModerationGetRecords: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getRecords',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about some records.',
		                parameters: {
		                    type: 'params',
		                    required: ['uris'],
		                    properties: {
		                        uris: {
		                            type: 'array',
		                            maxLength: 100,
		                            items: {
		                                type: 'string',
		                                format: 'at-uri',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['records'],
		                        properties: {
		                            records: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:tools.ozone.moderation.defs#recordViewDetail',
		                                        'lex:tools.ozone.moderation.defs#recordViewNotFound',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationGetRepo: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getRepo',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about a repository.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.moderation.defs#repoViewDetail',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'RepoNotFound',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneModerationGetReporterStats: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getReporterStats',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get reporter stats for a list of users.',
		                parameters: {
		                    type: 'params',
		                    required: ['dids'],
		                    properties: {
		                        dids: {
		                            type: 'array',
		                            maxLength: 100,
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['stats'],
		                        properties: {
		                            stats: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.moderation.defs#reporterStats',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationGetRepos: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getRepos',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about some repositories.',
		                parameters: {
		                    type: 'params',
		                    required: ['dids'],
		                    properties: {
		                        dids: {
		                            type: 'array',
		                            maxLength: 100,
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repos'],
		                        properties: {
		                            repos: {
		                                type: 'array',
		                                items: {
		                                    type: 'union',
		                                    refs: [
		                                        'lex:tools.ozone.moderation.defs#repoViewDetail',
		                                        'lex:tools.ozone.moderation.defs#repoViewNotFound',
		                                    ],
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationGetSubjects: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.getSubjects',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get details about subjects.',
		                parameters: {
		                    type: 'params',
		                    required: ['subjects'],
		                    properties: {
		                        subjects: {
		                            type: 'array',
		                            maxLength: 100,
		                            minLength: 1,
		                            items: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subjects'],
		                        properties: {
		                            subjects: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.moderation.defs#subjectView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationQueryEvents: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.queryEvents',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List moderation events related to a subject.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        types: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: 'The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.',
		                        },
		                        createdBy: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                        sortDirection: {
		                            type: 'string',
		                            default: 'desc',
		                            enum: ['asc', 'desc'],
		                            description: 'Sort direction for the events. Defaults to descending order of created at timestamp.',
		                        },
		                        createdAfter: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Retrieve events created after a given timestamp',
		                        },
		                        createdBefore: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Retrieve events created before a given timestamp',
		                        },
		                        subject: {
		                            type: 'string',
		                            format: 'uri',
		                        },
		                        collections: {
		                            type: 'array',
		                            maxLength: 20,
		                            description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
		                            items: {
		                                type: 'string',
		                                format: 'nsid',
		                            },
		                        },
		                        subjectType: {
		                            type: 'string',
		                            description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
		                            knownValues: ['account', 'record'],
		                        },
		                        includeAllUserRecords: {
		                            type: 'boolean',
		                            default: false,
		                            description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned.",
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        hasComment: {
		                            type: 'boolean',
		                            description: 'If true, only events with comments are returned',
		                        },
		                        comment: {
		                            type: 'string',
		                            description: 'If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.',
		                        },
		                        addedLabels: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: 'If specified, only events where all of these labels were added are returned',
		                        },
		                        removedLabels: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: 'If specified, only events where all of these labels were removed are returned',
		                        },
		                        addedTags: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: 'If specified, only events where all of these tags were added are returned',
		                        },
		                        removedTags: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: 'If specified, only events where all of these tags were removed are returned',
		                        },
		                        reportTypes: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                        },
		                        policies: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                description: 'If specified, only events where the action policies match any of the given policies are returned',
		                            },
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['events'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            events: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.moderation.defs#modEventView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationQueryStatuses: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.queryStatuses',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'View moderation statuses of subjects (record or repo).',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        queueCount: {
		                            type: 'integer',
		                            description: 'Number of queues being used by moderators. Subjects will be split among all queues.',
		                        },
		                        queueIndex: {
		                            type: 'integer',
		                            description: 'Index of the queue to fetch subjects from. Works only when queueCount value is specified.',
		                        },
		                        queueSeed: {
		                            type: 'string',
		                            description: 'A seeder to shuffle/balance the queue items.',
		                        },
		                        includeAllUserRecords: {
		                            type: 'boolean',
		                            description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned.",
		                        },
		                        subject: {
		                            type: 'string',
		                            format: 'uri',
		                            description: 'The subject to get the status for.',
		                        },
		                        comment: {
		                            type: 'string',
		                            description: 'Search subjects by keyword from comments',
		                        },
		                        reportedAfter: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects reported after a given timestamp',
		                        },
		                        reportedBefore: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects reported before a given timestamp',
		                        },
		                        reviewedAfter: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects reviewed after a given timestamp',
		                        },
		                        hostingDeletedAfter: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects where the associated record/account was deleted after a given timestamp',
		                        },
		                        hostingDeletedBefore: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects where the associated record/account was deleted before a given timestamp',
		                        },
		                        hostingUpdatedAfter: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects where the associated record/account was updated after a given timestamp',
		                        },
		                        hostingUpdatedBefore: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects where the associated record/account was updated before a given timestamp',
		                        },
		                        hostingStatuses: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                            description: 'Search subjects by the status of the associated record/account',
		                        },
		                        reviewedBefore: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Search subjects reviewed before a given timestamp',
		                        },
		                        includeMuted: {
		                            type: 'boolean',
		                            description: "By default, we don't include muted subjects in the results. Set this to true to include them.",
		                        },
		                        onlyMuted: {
		                            type: 'boolean',
		                            description: 'When set to true, only muted subjects and reporters will be returned.',
		                        },
		                        reviewState: {
		                            type: 'string',
		                            description: 'Specify when fetching subjects in a certain state',
		                        },
		                        ignoreSubjects: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'uri',
		                            },
		                        },
		                        lastReviewedBy: {
		                            type: 'string',
		                            format: 'did',
		                            description: 'Get all subject statuses that were reviewed by a specific moderator',
		                        },
		                        sortField: {
		                            type: 'string',
		                            default: 'lastReportedAt',
		                            enum: [
		                                'lastReviewedAt',
		                                'lastReportedAt',
		                                'reportedRecordsCount',
		                                'takendownRecordsCount',
		                                'priorityScore',
		                            ],
		                        },
		                        sortDirection: {
		                            type: 'string',
		                            default: 'desc',
		                            enum: ['asc', 'desc'],
		                        },
		                        takendown: {
		                            type: 'boolean',
		                            description: 'Get subjects that were taken down',
		                        },
		                        appealed: {
		                            type: 'boolean',
		                            description: 'Get subjects in unresolved appealed status',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        tags: {
		                            type: 'array',
		                            maxLength: 25,
		                            items: {
		                                type: 'string',
		                                description: 'Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters',
		                            },
		                        },
		                        excludeTags: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        collections: {
		                            type: 'array',
		                            maxLength: 20,
		                            description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
		                            items: {
		                                type: 'string',
		                                format: 'nsid',
		                            },
		                        },
		                        subjectType: {
		                            type: 'string',
		                            description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
		                            knownValues: ['account', 'record'],
		                        },
		                        minAccountSuspendCount: {
		                            type: 'integer',
		                            description: 'If specified, only subjects that belong to an account that has at least this many suspensions will be returned.',
		                        },
		                        minReportedRecordsCount: {
		                            type: 'integer',
		                            description: 'If specified, only subjects that belong to an account that has at least this many reported records will be returned.',
		                        },
		                        minTakendownRecordsCount: {
		                            type: 'integer',
		                            description: 'If specified, only subjects that belong to an account that has at least this many taken down records will be returned.',
		                        },
		                        minPriorityScore: {
		                            minimum: 0,
		                            maximum: 100,
		                            type: 'integer',
		                            description: 'If specified, only subjects that have priority score value above the given value will be returned.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['subjectStatuses'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            subjectStatuses: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.moderation.defs#subjectStatusView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneModerationSearchRepos: {
		        lexicon: 1,
		        id: 'tools.ozone.moderation.searchRepos',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find repositories based on a search term.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        term: {
		                            type: 'string',
		                            description: "DEPRECATED: use 'q' instead",
		                        },
		                        q: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['repos'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            repos: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.moderation.defs#repoView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneServerGetConfig: {
		        lexicon: 1,
		        id: 'tools.ozone.server.getConfig',
		        defs: {
		            main: {
		                type: 'query',
		                description: "Get details about ozone's server configuration.",
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {
		                            appview: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig',
		                            },
		                            pds: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig',
		                            },
		                            blobDivert: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig',
		                            },
		                            chat: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig',
		                            },
		                            viewer: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.server.getConfig#viewerConfig',
		                            },
		                            verifierDid: {
		                                type: 'string',
		                                format: 'did',
		                                description: 'The did of the verifier used for verification.',
		                            },
		                        },
		                    },
		                },
		            },
		            serviceConfig: {
		                type: 'object',
		                properties: {
		                    url: {
		                        type: 'string',
		                        format: 'uri',
		                    },
		                },
		            },
		            viewerConfig: {
		                type: 'object',
		                properties: {
		                    role: {
		                        type: 'string',
		                        knownValues: [
		                            'tools.ozone.team.defs#roleAdmin',
		                            'tools.ozone.team.defs#roleModerator',
		                            'tools.ozone.team.defs#roleTriage',
		                            'tools.ozone.team.defs#roleVerifier',
		                        ],
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSetAddValues: {
		        lexicon: 1,
		        id: 'tools.ozone.set.addValues',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['name', 'values'],
		                        properties: {
		                            name: {
		                                type: 'string',
		                                description: 'Name of the set to add values to',
		                            },
		                            values: {
		                                type: 'array',
		                                minLength: 1,
		                                maxLength: 1000,
		                                items: {
		                                    type: 'string',
		                                },
		                                description: 'Array of string values to add to the set',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSetDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.set.defs',
		        defs: {
		            set: {
		                type: 'object',
		                required: ['name'],
		                properties: {
		                    name: {
		                        type: 'string',
		                        minLength: 3,
		                        maxLength: 128,
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 1024,
		                        maxLength: 10240,
		                    },
		                },
		            },
		            setView: {
		                type: 'object',
		                required: ['name', 'setSize', 'createdAt', 'updatedAt'],
		                properties: {
		                    name: {
		                        type: 'string',
		                        minLength: 3,
		                        maxLength: 128,
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 1024,
		                        maxLength: 10240,
		                    },
		                    setSize: {
		                        type: 'integer',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSetDeleteSet: {
		        lexicon: 1,
		        id: 'tools.ozone.set.deleteSet',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete an entire set. Attempting to delete a set that does not exist will result in an error.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['name'],
		                        properties: {
		                            name: {
		                                type: 'string',
		                                description: 'Name of the set to delete',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {},
		                    },
		                },
		                errors: [
		                    {
		                        name: 'SetNotFound',
		                        description: 'set with the given name does not exist',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneSetDeleteValues: {
		        lexicon: 1,
		        id: 'tools.ozone.set.deleteValues',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['name', 'values'],
		                        properties: {
		                            name: {
		                                type: 'string',
		                                description: 'Name of the set to delete values from',
		                            },
		                            values: {
		                                type: 'array',
		                                minLength: 1,
		                                items: {
		                                    type: 'string',
		                                },
		                                description: 'Array of string values to delete from the set',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'SetNotFound',
		                        description: 'set with the given name does not exist',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneSetGetValues: {
		        lexicon: 1,
		        id: 'tools.ozone.set.getValues',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get a specific set and its values',
		                parameters: {
		                    type: 'params',
		                    required: ['name'],
		                    properties: {
		                        name: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 1000,
		                            default: 100,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['set', 'values'],
		                        properties: {
		                            set: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.set.defs#setView',
		                            },
		                            values: {
		                                type: 'array',
		                                items: {
		                                    type: 'string',
		                                },
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'SetNotFound',
		                        description: 'set with the given name does not exist',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneSetQuerySets: {
		        lexicon: 1,
		        id: 'tools.ozone.set.querySets',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Query available sets',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        namePrefix: {
		                            type: 'string',
		                        },
		                        sortBy: {
		                            type: 'string',
		                            enum: ['name', 'createdAt', 'updatedAt'],
		                            default: 'name',
		                        },
		                        sortDirection: {
		                            type: 'string',
		                            default: 'asc',
		                            enum: ['asc', 'desc'],
		                            description: 'Defaults to ascending order of name field.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['sets'],
		                        properties: {
		                            sets: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.set.defs#setView',
		                                },
		                            },
		                            cursor: {
		                                type: 'string',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSetUpsertSet: {
		        lexicon: 1,
		        id: 'tools.ozone.set.upsertSet',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create or update set metadata',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.set.defs#set',
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.set.defs#setView',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSettingDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.setting.defs',
		        defs: {
		            option: {
		                type: 'object',
		                required: [
		                    'key',
		                    'value',
		                    'did',
		                    'scope',
		                    'createdBy',
		                    'lastUpdatedBy',
		                ],
		                properties: {
		                    key: {
		                        type: 'string',
		                        format: 'nsid',
		                    },
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    value: {
		                        type: 'unknown',
		                    },
		                    description: {
		                        type: 'string',
		                        maxGraphemes: 1024,
		                        maxLength: 10240,
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    managerRole: {
		                        type: 'string',
		                        knownValues: [
		                            'tools.ozone.team.defs#roleModerator',
		                            'tools.ozone.team.defs#roleTriage',
		                            'tools.ozone.team.defs#roleAdmin',
		                            'tools.ozone.team.defs#roleVerifier',
		                        ],
		                    },
		                    scope: {
		                        type: 'string',
		                        knownValues: ['instance', 'personal'],
		                    },
		                    createdBy: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    lastUpdatedBy: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSettingListOptions: {
		        lexicon: 1,
		        id: 'tools.ozone.setting.listOptions',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List settings with optional filtering',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        scope: {
		                            type: 'string',
		                            knownValues: ['instance', 'personal'],
		                            default: 'instance',
		                        },
		                        prefix: {
		                            type: 'string',
		                            description: 'Filter keys by prefix',
		                        },
		                        keys: {
		                            type: 'array',
		                            maxLength: 100,
		                            items: {
		                                type: 'string',
		                                format: 'nsid',
		                            },
		                            description: 'Filter for only the specified keys. Ignored if prefix is provided',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['options'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            options: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.setting.defs#option',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSettingRemoveOptions: {
		        lexicon: 1,
		        id: 'tools.ozone.setting.removeOptions',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete settings by key',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['keys', 'scope'],
		                        properties: {
		                            keys: {
		                                type: 'array',
		                                minLength: 1,
		                                maxLength: 200,
		                                items: {
		                                    type: 'string',
		                                    format: 'nsid',
		                                },
		                            },
		                            scope: {
		                                type: 'string',
		                                knownValues: ['instance', 'personal'],
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        properties: {},
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSettingUpsertOption: {
		        lexicon: 1,
		        id: 'tools.ozone.setting.upsertOption',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Create or update setting option',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['key', 'scope', 'value'],
		                        properties: {
		                            key: {
		                                type: 'string',
		                                format: 'nsid',
		                            },
		                            scope: {
		                                type: 'string',
		                                knownValues: ['instance', 'personal'],
		                            },
		                            value: {
		                                type: 'unknown',
		                            },
		                            description: {
		                                type: 'string',
		                                maxLength: 2000,
		                            },
		                            managerRole: {
		                                type: 'string',
		                                knownValues: [
		                                    'tools.ozone.team.defs#roleModerator',
		                                    'tools.ozone.team.defs#roleTriage',
		                                    'tools.ozone.team.defs#roleVerifier',
		                                    'tools.ozone.team.defs#roleAdmin',
		                                ],
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['option'],
		                        properties: {
		                            option: {
		                                type: 'ref',
		                                ref: 'lex:tools.ozone.setting.defs#option',
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSignatureDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.signature.defs',
		        defs: {
		            sigDetail: {
		                type: 'object',
		                required: ['property', 'value'],
		                properties: {
		                    property: {
		                        type: 'string',
		                    },
		                    value: {
		                        type: 'string',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSignatureFindCorrelation: {
		        lexicon: 1,
		        id: 'tools.ozone.signature.findCorrelation',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Find all correlated threat signatures between 2 or more accounts.',
		                parameters: {
		                    type: 'params',
		                    required: ['dids'],
		                    properties: {
		                        dids: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['details'],
		                        properties: {
		                            details: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.signature.defs#sigDetail',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSignatureFindRelatedAccounts: {
		        lexicon: 1,
		        id: 'tools.ozone.signature.findRelatedAccounts',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Get accounts that share some matching threat signatures with the root account.',
		                parameters: {
		                    type: 'params',
		                    required: ['did'],
		                    properties: {
		                        did: {
		                            type: 'string',
		                            format: 'did',
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['accounts'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            accounts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.signature.findRelatedAccounts#relatedAccount',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            relatedAccount: {
		                type: 'object',
		                required: ['account'],
		                properties: {
		                    account: {
		                        type: 'ref',
		                        ref: 'lex:com.atproto.admin.defs#accountView',
		                    },
		                    similarities: {
		                        type: 'array',
		                        items: {
		                            type: 'ref',
		                            ref: 'lex:tools.ozone.signature.defs#sigDetail',
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneSignatureSearchAccounts: {
		        lexicon: 1,
		        id: 'tools.ozone.signature.searchAccounts',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'Search for accounts that match one or more threat signature values.',
		                parameters: {
		                    type: 'params',
		                    required: ['values'],
		                    properties: {
		                        values: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['accounts'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            accounts: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:com.atproto.admin.defs#accountView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneTeamAddMember: {
		        lexicon: 1,
		        id: 'tools.ozone.team.addMember',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Add a member to the ozone team. Requires admin role.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did', 'role'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            role: {
		                                type: 'string',
		                                knownValues: [
		                                    'tools.ozone.team.defs#roleAdmin',
		                                    'tools.ozone.team.defs#roleModerator',
		                                    'tools.ozone.team.defs#roleVerifier',
		                                    'tools.ozone.team.defs#roleTriage',
		                                ],
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.team.defs#member',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'MemberAlreadyExists',
		                        description: 'Member already exists in the team.',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneTeamDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.team.defs',
		        defs: {
		            member: {
		                type: 'object',
		                required: ['did', 'role'],
		                properties: {
		                    did: {
		                        type: 'string',
		                        format: 'did',
		                    },
		                    disabled: {
		                        type: 'boolean',
		                    },
		                    profile: {
		                        type: 'ref',
		                        ref: 'lex:app.bsky.actor.defs#profileViewDetailed',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    updatedAt: {
		                        type: 'string',
		                        format: 'datetime',
		                    },
		                    lastUpdatedBy: {
		                        type: 'string',
		                    },
		                    role: {
		                        type: 'string',
		                        knownValues: [
		                            'lex:tools.ozone.team.defs#roleAdmin',
		                            'lex:tools.ozone.team.defs#roleModerator',
		                            'lex:tools.ozone.team.defs#roleTriage',
		                            'lex:tools.ozone.team.defs#roleVerifier',
		                        ],
		                    },
		                },
		            },
		            roleAdmin: {
		                type: 'token',
		                description: 'Admin role. Highest level of access, can perform all actions.',
		            },
		            roleModerator: {
		                type: 'token',
		                description: 'Moderator role. Can perform most actions.',
		            },
		            roleTriage: {
		                type: 'token',
		                description: 'Triage role. Mostly intended for monitoring and escalating issues.',
		            },
		            roleVerifier: {
		                type: 'token',
		                description: 'Verifier role. Only allowed to issue verifications.',
		            },
		        },
		    },
		    ToolsOzoneTeamDeleteMember: {
		        lexicon: 1,
		        id: 'tools.ozone.team.deleteMember',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Delete a member from ozone team. Requires admin role.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                    },
		                },
		                errors: [
		                    {
		                        name: 'MemberNotFound',
		                        description: 'The member being deleted does not exist',
		                    },
		                    {
		                        name: 'CannotDeleteSelf',
		                        description: 'You can not delete yourself from the team',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneTeamListMembers: {
		        lexicon: 1,
		        id: 'tools.ozone.team.listMembers',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List all members with access to the ozone service.',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        q: {
		                            type: 'string',
		                        },
		                        disabled: {
		                            type: 'boolean',
		                        },
		                        roles: {
		                            type: 'array',
		                            items: {
		                                type: 'string',
		                            },
		                        },
		                        limit: {
		                            type: 'integer',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        cursor: {
		                            type: 'string',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['members'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            members: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.team.defs#member',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneTeamUpdateMember: {
		        lexicon: 1,
		        id: 'tools.ozone.team.updateMember',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Update a member in the ozone service. Requires admin role.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['did'],
		                        properties: {
		                            did: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                            disabled: {
		                                type: 'boolean',
		                            },
		                            role: {
		                                type: 'string',
		                                knownValues: [
		                                    'tools.ozone.team.defs#roleAdmin',
		                                    'tools.ozone.team.defs#roleModerator',
		                                    'tools.ozone.team.defs#roleVerifier',
		                                    'tools.ozone.team.defs#roleTriage',
		                                ],
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'ref',
		                        ref: 'lex:tools.ozone.team.defs#member',
		                    },
		                },
		                errors: [
		                    {
		                        name: 'MemberNotFound',
		                        description: 'The member being updated does not exist in the team',
		                    },
		                ],
		            },
		        },
		    },
		    ToolsOzoneVerificationDefs: {
		        lexicon: 1,
		        id: 'tools.ozone.verification.defs',
		        defs: {
		            verificationView: {
		                type: 'object',
		                description: 'Verification data for the associated subject.',
		                required: [
		                    'issuer',
		                    'uri',
		                    'subject',
		                    'handle',
		                    'displayName',
		                    'createdAt',
		                ],
		                properties: {
		                    issuer: {
		                        type: 'string',
		                        description: 'The user who issued this verification.',
		                        format: 'did',
		                    },
		                    uri: {
		                        type: 'string',
		                        description: 'The AT-URI of the verification record.',
		                        format: 'at-uri',
		                    },
		                    subject: {
		                        type: 'string',
		                        format: 'did',
		                        description: 'The subject of the verification.',
		                    },
		                    handle: {
		                        type: 'string',
		                        description: 'Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.',
		                        format: 'handle',
		                    },
		                    displayName: {
		                        type: 'string',
		                        description: 'Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        description: 'Timestamp when the verification was created.',
		                        format: 'datetime',
		                    },
		                    revokeReason: {
		                        type: 'string',
		                        description: 'Describes the reason for revocation, also indicating that the verification is no longer valid.',
		                    },
		                    revokedAt: {
		                        type: 'string',
		                        description: 'Timestamp when the verification was revoked.',
		                        format: 'datetime',
		                    },
		                    revokedBy: {
		                        type: 'string',
		                        description: 'The user who revoked this verification.',
		                        format: 'did',
		                    },
		                    subjectProfile: {
		                        type: 'union',
		                        refs: [],
		                    },
		                    issuerProfile: {
		                        type: 'union',
		                        refs: [],
		                    },
		                    subjectRepo: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#repoViewDetail',
		                            'lex:tools.ozone.moderation.defs#repoViewNotFound',
		                        ],
		                    },
		                    issuerRepo: {
		                        type: 'union',
		                        refs: [
		                            'lex:tools.ozone.moderation.defs#repoViewDetail',
		                            'lex:tools.ozone.moderation.defs#repoViewNotFound',
		                        ],
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneVerificationGrantVerifications: {
		        lexicon: 1,
		        id: 'tools.ozone.verification.grantVerifications',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Grant verifications to multiple subjects. Allows batch processing of up to 100 verifications at once.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['verifications'],
		                        properties: {
		                            verifications: {
		                                type: 'array',
		                                description: 'Array of verification requests to process',
		                                maxLength: 100,
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.verification.grantVerifications#verificationInput',
		                                },
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['verifications', 'failedVerifications'],
		                        properties: {
		                            verifications: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.verification.defs#verificationView',
		                                },
		                            },
		                            failedVerifications: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.verification.grantVerifications#grantError',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            verificationInput: {
		                type: 'object',
		                required: ['subject', 'handle', 'displayName'],
		                properties: {
		                    subject: {
		                        type: 'string',
		                        description: 'The did of the subject being verified',
		                        format: 'did',
		                    },
		                    handle: {
		                        type: 'string',
		                        description: 'Handle of the subject the verification applies to at the moment of verifying.',
		                        format: 'handle',
		                    },
		                    displayName: {
		                        type: 'string',
		                        description: 'Display name of the subject the verification applies to at the moment of verifying.',
		                    },
		                    createdAt: {
		                        type: 'string',
		                        description: 'Timestamp for verification record. Defaults to current time when not specified.',
		                    },
		                },
		            },
		            grantError: {
		                type: 'object',
		                description: 'Error object for failed verifications.',
		                required: ['error', 'subject'],
		                properties: {
		                    error: {
		                        type: 'string',
		                        description: 'Error message describing the reason for failure.',
		                    },
		                    subject: {
		                        type: 'string',
		                        description: 'The did of the subject being verified',
		                        format: 'did',
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneVerificationListVerifications: {
		        lexicon: 1,
		        id: 'tools.ozone.verification.listVerifications',
		        defs: {
		            main: {
		                type: 'query',
		                description: 'List verifications',
		                parameters: {
		                    type: 'params',
		                    properties: {
		                        cursor: {
		                            type: 'string',
		                            description: 'Pagination cursor',
		                        },
		                        limit: {
		                            type: 'integer',
		                            description: 'Maximum number of results to return',
		                            minimum: 1,
		                            maximum: 100,
		                            default: 50,
		                        },
		                        createdAfter: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Filter to verifications created after this timestamp',
		                        },
		                        createdBefore: {
		                            type: 'string',
		                            format: 'datetime',
		                            description: 'Filter to verifications created before this timestamp',
		                        },
		                        issuers: {
		                            type: 'array',
		                            maxLength: 100,
		                            description: 'Filter to verifications from specific issuers',
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                        subjects: {
		                            type: 'array',
		                            description: 'Filter to specific verified DIDs',
		                            maxLength: 100,
		                            items: {
		                                type: 'string',
		                                format: 'did',
		                            },
		                        },
		                        sortDirection: {
		                            type: 'string',
		                            description: 'Sort direction for creation date',
		                            enum: ['asc', 'desc'],
		                            default: 'desc',
		                        },
		                        isRevoked: {
		                            type: 'boolean',
		                            description: 'Filter to verifications that are revoked or not. By default, includes both.',
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['verifications'],
		                        properties: {
		                            cursor: {
		                                type: 'string',
		                            },
		                            verifications: {
		                                type: 'array',
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.verification.defs#verificationView',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		        },
		    },
		    ToolsOzoneVerificationRevokeVerifications: {
		        lexicon: 1,
		        id: 'tools.ozone.verification.revokeVerifications',
		        defs: {
		            main: {
		                type: 'procedure',
		                description: 'Revoke previously granted verifications in batches of up to 100.',
		                input: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['uris'],
		                        properties: {
		                            uris: {
		                                type: 'array',
		                                description: 'Array of verification record uris to revoke',
		                                maxLength: 100,
		                                items: {
		                                    type: 'string',
		                                    description: 'The AT-URI of the verification record to revoke.',
		                                    format: 'at-uri',
		                                },
		                            },
		                            revokeReason: {
		                                type: 'string',
		                                description: 'Reason for revoking the verification. This is optional and can be omitted if not needed.',
		                                maxLength: 1000,
		                            },
		                        },
		                    },
		                },
		                output: {
		                    encoding: 'application/json',
		                    schema: {
		                        type: 'object',
		                        required: ['revokedVerifications', 'failedRevocations'],
		                        properties: {
		                            revokedVerifications: {
		                                type: 'array',
		                                description: 'List of verification uris successfully revoked',
		                                items: {
		                                    type: 'string',
		                                    format: 'at-uri',
		                                },
		                            },
		                            failedRevocations: {
		                                type: 'array',
		                                description: "List of verification uris that couldn't be revoked, including failure reasons",
		                                items: {
		                                    type: 'ref',
		                                    ref: 'lex:tools.ozone.verification.revokeVerifications#revokeError',
		                                },
		                            },
		                        },
		                    },
		                },
		            },
		            revokeError: {
		                type: 'object',
		                description: 'Error object for failed revocations',
		                required: ['uri', 'error'],
		                properties: {
		                    uri: {
		                        type: 'string',
		                        description: 'The AT-URI of the verification record that failed to revoke.',
		                        format: 'at-uri',
		                    },
		                    error: {
		                        type: 'string',
		                        description: 'Description of the error that occurred during revocation.',
		                    },
		                },
		            },
		        },
		    },
		};
		exports.schemas = Object.values(exports.schemaDict);
		exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
		function validate(v, id, hash, requiredType) {
		    return (requiredType ? util_js_1.is$typed : util_js_1.maybe$typed)(v, id, hash)
		        ? exports.lexicons.validate(`${id}#${hash}`, v)
		        : {
		            success: false,
		            error: new lexicon_1.ValidationError(`Must be an object with "${hash === 'main' ? id : `${id}#${hash}`}" $type property`),
		        };
		}
		exports.ids = {
		    ComAtprotoAdminDefs: 'com.atproto.admin.defs',
		    ComAtprotoAdminDeleteAccount: 'com.atproto.admin.deleteAccount',
		    ComAtprotoAdminDisableAccountInvites: 'com.atproto.admin.disableAccountInvites',
		    ComAtprotoAdminDisableInviteCodes: 'com.atproto.admin.disableInviteCodes',
		    ComAtprotoAdminEnableAccountInvites: 'com.atproto.admin.enableAccountInvites',
		    ComAtprotoAdminGetAccountInfo: 'com.atproto.admin.getAccountInfo',
		    ComAtprotoAdminGetAccountInfos: 'com.atproto.admin.getAccountInfos',
		    ComAtprotoAdminGetInviteCodes: 'com.atproto.admin.getInviteCodes',
		    ComAtprotoAdminGetSubjectStatus: 'com.atproto.admin.getSubjectStatus',
		    ComAtprotoAdminSearchAccounts: 'com.atproto.admin.searchAccounts',
		    ComAtprotoAdminSendEmail: 'com.atproto.admin.sendEmail',
		    ComAtprotoAdminUpdateAccountEmail: 'com.atproto.admin.updateAccountEmail',
		    ComAtprotoAdminUpdateAccountHandle: 'com.atproto.admin.updateAccountHandle',
		    ComAtprotoAdminUpdateAccountPassword: 'com.atproto.admin.updateAccountPassword',
		    ComAtprotoAdminUpdateAccountSigningKey: 'com.atproto.admin.updateAccountSigningKey',
		    ComAtprotoAdminUpdateSubjectStatus: 'com.atproto.admin.updateSubjectStatus',
		    ComAtprotoIdentityDefs: 'com.atproto.identity.defs',
		    ComAtprotoIdentityGetRecommendedDidCredentials: 'com.atproto.identity.getRecommendedDidCredentials',
		    ComAtprotoIdentityRefreshIdentity: 'com.atproto.identity.refreshIdentity',
		    ComAtprotoIdentityRequestPlcOperationSignature: 'com.atproto.identity.requestPlcOperationSignature',
		    ComAtprotoIdentityResolveDid: 'com.atproto.identity.resolveDid',
		    ComAtprotoIdentityResolveHandle: 'com.atproto.identity.resolveHandle',
		    ComAtprotoIdentityResolveIdentity: 'com.atproto.identity.resolveIdentity',
		    ComAtprotoIdentitySignPlcOperation: 'com.atproto.identity.signPlcOperation',
		    ComAtprotoIdentitySubmitPlcOperation: 'com.atproto.identity.submitPlcOperation',
		    ComAtprotoIdentityUpdateHandle: 'com.atproto.identity.updateHandle',
		    ComAtprotoLabelDefs: 'com.atproto.label.defs',
		    ComAtprotoLabelQueryLabels: 'com.atproto.label.queryLabels',
		    ComAtprotoLabelSubscribeLabels: 'com.atproto.label.subscribeLabels',
		    ComAtprotoLexiconSchema: 'com.atproto.lexicon.schema',
		    ComAtprotoModerationCreateReport: 'com.atproto.moderation.createReport',
		    ComAtprotoModerationDefs: 'com.atproto.moderation.defs',
		    ComAtprotoRepoApplyWrites: 'com.atproto.repo.applyWrites',
		    ComAtprotoRepoCreateRecord: 'com.atproto.repo.createRecord',
		    ComAtprotoRepoDefs: 'com.atproto.repo.defs',
		    ComAtprotoRepoDeleteRecord: 'com.atproto.repo.deleteRecord',
		    ComAtprotoRepoDescribeRepo: 'com.atproto.repo.describeRepo',
		    ComAtprotoRepoGetRecord: 'com.atproto.repo.getRecord',
		    ComAtprotoRepoImportRepo: 'com.atproto.repo.importRepo',
		    ComAtprotoRepoListMissingBlobs: 'com.atproto.repo.listMissingBlobs',
		    ComAtprotoRepoListRecords: 'com.atproto.repo.listRecords',
		    ComAtprotoRepoPutRecord: 'com.atproto.repo.putRecord',
		    ComAtprotoRepoStrongRef: 'com.atproto.repo.strongRef',
		    ComAtprotoRepoUploadBlob: 'com.atproto.repo.uploadBlob',
		    ComAtprotoServerActivateAccount: 'com.atproto.server.activateAccount',
		    ComAtprotoServerCheckAccountStatus: 'com.atproto.server.checkAccountStatus',
		    ComAtprotoServerConfirmEmail: 'com.atproto.server.confirmEmail',
		    ComAtprotoServerCreateAccount: 'com.atproto.server.createAccount',
		    ComAtprotoServerCreateAppPassword: 'com.atproto.server.createAppPassword',
		    ComAtprotoServerCreateInviteCode: 'com.atproto.server.createInviteCode',
		    ComAtprotoServerCreateInviteCodes: 'com.atproto.server.createInviteCodes',
		    ComAtprotoServerCreateSession: 'com.atproto.server.createSession',
		    ComAtprotoServerDeactivateAccount: 'com.atproto.server.deactivateAccount',
		    ComAtprotoServerDefs: 'com.atproto.server.defs',
		    ComAtprotoServerDeleteAccount: 'com.atproto.server.deleteAccount',
		    ComAtprotoServerDeleteSession: 'com.atproto.server.deleteSession',
		    ComAtprotoServerDescribeServer: 'com.atproto.server.describeServer',
		    ComAtprotoServerGetAccountInviteCodes: 'com.atproto.server.getAccountInviteCodes',
		    ComAtprotoServerGetServiceAuth: 'com.atproto.server.getServiceAuth',
		    ComAtprotoServerGetSession: 'com.atproto.server.getSession',
		    ComAtprotoServerListAppPasswords: 'com.atproto.server.listAppPasswords',
		    ComAtprotoServerRefreshSession: 'com.atproto.server.refreshSession',
		    ComAtprotoServerRequestAccountDelete: 'com.atproto.server.requestAccountDelete',
		    ComAtprotoServerRequestEmailConfirmation: 'com.atproto.server.requestEmailConfirmation',
		    ComAtprotoServerRequestEmailUpdate: 'com.atproto.server.requestEmailUpdate',
		    ComAtprotoServerRequestPasswordReset: 'com.atproto.server.requestPasswordReset',
		    ComAtprotoServerReserveSigningKey: 'com.atproto.server.reserveSigningKey',
		    ComAtprotoServerResetPassword: 'com.atproto.server.resetPassword',
		    ComAtprotoServerRevokeAppPassword: 'com.atproto.server.revokeAppPassword',
		    ComAtprotoServerUpdateEmail: 'com.atproto.server.updateEmail',
		    ComAtprotoSyncDefs: 'com.atproto.sync.defs',
		    ComAtprotoSyncGetBlob: 'com.atproto.sync.getBlob',
		    ComAtprotoSyncGetBlocks: 'com.atproto.sync.getBlocks',
		    ComAtprotoSyncGetCheckout: 'com.atproto.sync.getCheckout',
		    ComAtprotoSyncGetHead: 'com.atproto.sync.getHead',
		    ComAtprotoSyncGetHostStatus: 'com.atproto.sync.getHostStatus',
		    ComAtprotoSyncGetLatestCommit: 'com.atproto.sync.getLatestCommit',
		    ComAtprotoSyncGetRecord: 'com.atproto.sync.getRecord',
		    ComAtprotoSyncGetRepo: 'com.atproto.sync.getRepo',
		    ComAtprotoSyncGetRepoStatus: 'com.atproto.sync.getRepoStatus',
		    ComAtprotoSyncListBlobs: 'com.atproto.sync.listBlobs',
		    ComAtprotoSyncListHosts: 'com.atproto.sync.listHosts',
		    ComAtprotoSyncListRepos: 'com.atproto.sync.listRepos',
		    ComAtprotoSyncListReposByCollection: 'com.atproto.sync.listReposByCollection',
		    ComAtprotoSyncNotifyOfUpdate: 'com.atproto.sync.notifyOfUpdate',
		    ComAtprotoSyncRequestCrawl: 'com.atproto.sync.requestCrawl',
		    ComAtprotoSyncSubscribeRepos: 'com.atproto.sync.subscribeRepos',
		    ComAtprotoTempAddReservedHandle: 'com.atproto.temp.addReservedHandle',
		    ComAtprotoTempCheckSignupQueue: 'com.atproto.temp.checkSignupQueue',
		    ComAtprotoTempFetchLabels: 'com.atproto.temp.fetchLabels',
		    ComAtprotoTempRequestPhoneVerification: 'com.atproto.temp.requestPhoneVerification',
		    AppBskyActorDefs: 'app.bsky.actor.defs',
		    AppBskyActorGetPreferences: 'app.bsky.actor.getPreferences',
		    AppBskyActorGetProfile: 'app.bsky.actor.getProfile',
		    AppBskyActorGetProfiles: 'app.bsky.actor.getProfiles',
		    AppBskyActorGetSuggestions: 'app.bsky.actor.getSuggestions',
		    AppBskyActorProfile: 'app.bsky.actor.profile',
		    AppBskyActorPutPreferences: 'app.bsky.actor.putPreferences',
		    AppBskyActorSearchActors: 'app.bsky.actor.searchActors',
		    AppBskyActorSearchActorsTypeahead: 'app.bsky.actor.searchActorsTypeahead',
		    AppBskyEmbedDefs: 'app.bsky.embed.defs',
		    AppBskyEmbedExternal: 'app.bsky.embed.external',
		    AppBskyEmbedImages: 'app.bsky.embed.images',
		    AppBskyEmbedRecord: 'app.bsky.embed.record',
		    AppBskyEmbedRecordWithMedia: 'app.bsky.embed.recordWithMedia',
		    AppBskyEmbedVideo: 'app.bsky.embed.video',
		    AppBskyFeedDefs: 'app.bsky.feed.defs',
		    AppBskyFeedDescribeFeedGenerator: 'app.bsky.feed.describeFeedGenerator',
		    AppBskyFeedGenerator: 'app.bsky.feed.generator',
		    AppBskyFeedGetActorFeeds: 'app.bsky.feed.getActorFeeds',
		    AppBskyFeedGetActorLikes: 'app.bsky.feed.getActorLikes',
		    AppBskyFeedGetAuthorFeed: 'app.bsky.feed.getAuthorFeed',
		    AppBskyFeedGetFeed: 'app.bsky.feed.getFeed',
		    AppBskyFeedGetFeedGenerator: 'app.bsky.feed.getFeedGenerator',
		    AppBskyFeedGetFeedGenerators: 'app.bsky.feed.getFeedGenerators',
		    AppBskyFeedGetFeedSkeleton: 'app.bsky.feed.getFeedSkeleton',
		    AppBskyFeedGetLikes: 'app.bsky.feed.getLikes',
		    AppBskyFeedGetListFeed: 'app.bsky.feed.getListFeed',
		    AppBskyFeedGetPostThread: 'app.bsky.feed.getPostThread',
		    AppBskyFeedGetPosts: 'app.bsky.feed.getPosts',
		    AppBskyFeedGetQuotes: 'app.bsky.feed.getQuotes',
		    AppBskyFeedGetRepostedBy: 'app.bsky.feed.getRepostedBy',
		    AppBskyFeedGetSuggestedFeeds: 'app.bsky.feed.getSuggestedFeeds',
		    AppBskyFeedGetTimeline: 'app.bsky.feed.getTimeline',
		    AppBskyFeedLike: 'app.bsky.feed.like',
		    AppBskyFeedPost: 'app.bsky.feed.post',
		    AppBskyFeedPostgate: 'app.bsky.feed.postgate',
		    AppBskyFeedRepost: 'app.bsky.feed.repost',
		    AppBskyFeedSearchPosts: 'app.bsky.feed.searchPosts',
		    AppBskyFeedSendInteractions: 'app.bsky.feed.sendInteractions',
		    AppBskyFeedThreadgate: 'app.bsky.feed.threadgate',
		    AppBskyGraphBlock: 'app.bsky.graph.block',
		    AppBskyGraphDefs: 'app.bsky.graph.defs',
		    AppBskyGraphFollow: 'app.bsky.graph.follow',
		    AppBskyGraphGetActorStarterPacks: 'app.bsky.graph.getActorStarterPacks',
		    AppBskyGraphGetBlocks: 'app.bsky.graph.getBlocks',
		    AppBskyGraphGetFollowers: 'app.bsky.graph.getFollowers',
		    AppBskyGraphGetFollows: 'app.bsky.graph.getFollows',
		    AppBskyGraphGetKnownFollowers: 'app.bsky.graph.getKnownFollowers',
		    AppBskyGraphGetList: 'app.bsky.graph.getList',
		    AppBskyGraphGetListBlocks: 'app.bsky.graph.getListBlocks',
		    AppBskyGraphGetListMutes: 'app.bsky.graph.getListMutes',
		    AppBskyGraphGetLists: 'app.bsky.graph.getLists',
		    AppBskyGraphGetMutes: 'app.bsky.graph.getMutes',
		    AppBskyGraphGetRelationships: 'app.bsky.graph.getRelationships',
		    AppBskyGraphGetStarterPack: 'app.bsky.graph.getStarterPack',
		    AppBskyGraphGetStarterPacks: 'app.bsky.graph.getStarterPacks',
		    AppBskyGraphGetSuggestedFollowsByActor: 'app.bsky.graph.getSuggestedFollowsByActor',
		    AppBskyGraphList: 'app.bsky.graph.list',
		    AppBskyGraphListblock: 'app.bsky.graph.listblock',
		    AppBskyGraphListitem: 'app.bsky.graph.listitem',
		    AppBskyGraphMuteActor: 'app.bsky.graph.muteActor',
		    AppBskyGraphMuteActorList: 'app.bsky.graph.muteActorList',
		    AppBskyGraphMuteThread: 'app.bsky.graph.muteThread',
		    AppBskyGraphSearchStarterPacks: 'app.bsky.graph.searchStarterPacks',
		    AppBskyGraphStarterpack: 'app.bsky.graph.starterpack',
		    AppBskyGraphUnmuteActor: 'app.bsky.graph.unmuteActor',
		    AppBskyGraphUnmuteActorList: 'app.bsky.graph.unmuteActorList',
		    AppBskyGraphUnmuteThread: 'app.bsky.graph.unmuteThread',
		    AppBskyGraphVerification: 'app.bsky.graph.verification',
		    AppBskyLabelerDefs: 'app.bsky.labeler.defs',
		    AppBskyLabelerGetServices: 'app.bsky.labeler.getServices',
		    AppBskyLabelerService: 'app.bsky.labeler.service',
		    AppBskyNotificationDefs: 'app.bsky.notification.defs',
		    AppBskyNotificationGetUnreadCount: 'app.bsky.notification.getUnreadCount',
		    AppBskyNotificationListNotifications: 'app.bsky.notification.listNotifications',
		    AppBskyNotificationPutPreferences: 'app.bsky.notification.putPreferences',
		    AppBskyNotificationRegisterPush: 'app.bsky.notification.registerPush',
		    AppBskyNotificationUpdateSeen: 'app.bsky.notification.updateSeen',
		    AppBskyRichtextFacet: 'app.bsky.richtext.facet',
		    AppBskyUnspeccedDefs: 'app.bsky.unspecced.defs',
		    AppBskyUnspeccedGetConfig: 'app.bsky.unspecced.getConfig',
		    AppBskyUnspeccedGetPopularFeedGenerators: 'app.bsky.unspecced.getPopularFeedGenerators',
		    AppBskyUnspeccedGetSuggestedFeeds: 'app.bsky.unspecced.getSuggestedFeeds',
		    AppBskyUnspeccedGetSuggestedFeedsSkeleton: 'app.bsky.unspecced.getSuggestedFeedsSkeleton',
		    AppBskyUnspeccedGetSuggestedStarterPacks: 'app.bsky.unspecced.getSuggestedStarterPacks',
		    AppBskyUnspeccedGetSuggestedStarterPacksSkeleton: 'app.bsky.unspecced.getSuggestedStarterPacksSkeleton',
		    AppBskyUnspeccedGetSuggestedUsers: 'app.bsky.unspecced.getSuggestedUsers',
		    AppBskyUnspeccedGetSuggestedUsersSkeleton: 'app.bsky.unspecced.getSuggestedUsersSkeleton',
		    AppBskyUnspeccedGetSuggestionsSkeleton: 'app.bsky.unspecced.getSuggestionsSkeleton',
		    AppBskyUnspeccedGetTaggedSuggestions: 'app.bsky.unspecced.getTaggedSuggestions',
		    AppBskyUnspeccedGetTrendingTopics: 'app.bsky.unspecced.getTrendingTopics',
		    AppBskyUnspeccedGetTrends: 'app.bsky.unspecced.getTrends',
		    AppBskyUnspeccedGetTrendsSkeleton: 'app.bsky.unspecced.getTrendsSkeleton',
		    AppBskyUnspeccedSearchActorsSkeleton: 'app.bsky.unspecced.searchActorsSkeleton',
		    AppBskyUnspeccedSearchPostsSkeleton: 'app.bsky.unspecced.searchPostsSkeleton',
		    AppBskyUnspeccedSearchStarterPacksSkeleton: 'app.bsky.unspecced.searchStarterPacksSkeleton',
		    AppBskyVideoDefs: 'app.bsky.video.defs',
		    AppBskyVideoGetJobStatus: 'app.bsky.video.getJobStatus',
		    AppBskyVideoGetUploadLimits: 'app.bsky.video.getUploadLimits',
		    AppBskyVideoUploadVideo: 'app.bsky.video.uploadVideo',
		    ChatBskyActorDeclaration: 'chat.bsky.actor.declaration',
		    ChatBskyActorDefs: 'chat.bsky.actor.defs',
		    ChatBskyActorDeleteAccount: 'chat.bsky.actor.deleteAccount',
		    ChatBskyActorExportAccountData: 'chat.bsky.actor.exportAccountData',
		    ChatBskyConvoAcceptConvo: 'chat.bsky.convo.acceptConvo',
		    ChatBskyConvoAddReaction: 'chat.bsky.convo.addReaction',
		    ChatBskyConvoDefs: 'chat.bsky.convo.defs',
		    ChatBskyConvoDeleteMessageForSelf: 'chat.bsky.convo.deleteMessageForSelf',
		    ChatBskyConvoGetConvo: 'chat.bsky.convo.getConvo',
		    ChatBskyConvoGetConvoAvailability: 'chat.bsky.convo.getConvoAvailability',
		    ChatBskyConvoGetConvoForMembers: 'chat.bsky.convo.getConvoForMembers',
		    ChatBskyConvoGetLog: 'chat.bsky.convo.getLog',
		    ChatBskyConvoGetMessages: 'chat.bsky.convo.getMessages',
		    ChatBskyConvoLeaveConvo: 'chat.bsky.convo.leaveConvo',
		    ChatBskyConvoListConvos: 'chat.bsky.convo.listConvos',
		    ChatBskyConvoMuteConvo: 'chat.bsky.convo.muteConvo',
		    ChatBskyConvoRemoveReaction: 'chat.bsky.convo.removeReaction',
		    ChatBskyConvoSendMessage: 'chat.bsky.convo.sendMessage',
		    ChatBskyConvoSendMessageBatch: 'chat.bsky.convo.sendMessageBatch',
		    ChatBskyConvoUnmuteConvo: 'chat.bsky.convo.unmuteConvo',
		    ChatBskyConvoUpdateAllRead: 'chat.bsky.convo.updateAllRead',
		    ChatBskyConvoUpdateRead: 'chat.bsky.convo.updateRead',
		    ChatBskyModerationGetActorMetadata: 'chat.bsky.moderation.getActorMetadata',
		    ChatBskyModerationGetMessageContext: 'chat.bsky.moderation.getMessageContext',
		    ChatBskyModerationUpdateActorAccess: 'chat.bsky.moderation.updateActorAccess',
		    ToolsOzoneCommunicationCreateTemplate: 'tools.ozone.communication.createTemplate',
		    ToolsOzoneCommunicationDefs: 'tools.ozone.communication.defs',
		    ToolsOzoneCommunicationDeleteTemplate: 'tools.ozone.communication.deleteTemplate',
		    ToolsOzoneCommunicationListTemplates: 'tools.ozone.communication.listTemplates',
		    ToolsOzoneCommunicationUpdateTemplate: 'tools.ozone.communication.updateTemplate',
		    ToolsOzoneHostingGetAccountHistory: 'tools.ozone.hosting.getAccountHistory',
		    ToolsOzoneModerationDefs: 'tools.ozone.moderation.defs',
		    ToolsOzoneModerationEmitEvent: 'tools.ozone.moderation.emitEvent',
		    ToolsOzoneModerationGetEvent: 'tools.ozone.moderation.getEvent',
		    ToolsOzoneModerationGetRecord: 'tools.ozone.moderation.getRecord',
		    ToolsOzoneModerationGetRecords: 'tools.ozone.moderation.getRecords',
		    ToolsOzoneModerationGetRepo: 'tools.ozone.moderation.getRepo',
		    ToolsOzoneModerationGetReporterStats: 'tools.ozone.moderation.getReporterStats',
		    ToolsOzoneModerationGetRepos: 'tools.ozone.moderation.getRepos',
		    ToolsOzoneModerationGetSubjects: 'tools.ozone.moderation.getSubjects',
		    ToolsOzoneModerationQueryEvents: 'tools.ozone.moderation.queryEvents',
		    ToolsOzoneModerationQueryStatuses: 'tools.ozone.moderation.queryStatuses',
		    ToolsOzoneModerationSearchRepos: 'tools.ozone.moderation.searchRepos',
		    ToolsOzoneServerGetConfig: 'tools.ozone.server.getConfig',
		    ToolsOzoneSetAddValues: 'tools.ozone.set.addValues',
		    ToolsOzoneSetDefs: 'tools.ozone.set.defs',
		    ToolsOzoneSetDeleteSet: 'tools.ozone.set.deleteSet',
		    ToolsOzoneSetDeleteValues: 'tools.ozone.set.deleteValues',
		    ToolsOzoneSetGetValues: 'tools.ozone.set.getValues',
		    ToolsOzoneSetQuerySets: 'tools.ozone.set.querySets',
		    ToolsOzoneSetUpsertSet: 'tools.ozone.set.upsertSet',
		    ToolsOzoneSettingDefs: 'tools.ozone.setting.defs',
		    ToolsOzoneSettingListOptions: 'tools.ozone.setting.listOptions',
		    ToolsOzoneSettingRemoveOptions: 'tools.ozone.setting.removeOptions',
		    ToolsOzoneSettingUpsertOption: 'tools.ozone.setting.upsertOption',
		    ToolsOzoneSignatureDefs: 'tools.ozone.signature.defs',
		    ToolsOzoneSignatureFindCorrelation: 'tools.ozone.signature.findCorrelation',
		    ToolsOzoneSignatureFindRelatedAccounts: 'tools.ozone.signature.findRelatedAccounts',
		    ToolsOzoneSignatureSearchAccounts: 'tools.ozone.signature.searchAccounts',
		    ToolsOzoneTeamAddMember: 'tools.ozone.team.addMember',
		    ToolsOzoneTeamDefs: 'tools.ozone.team.defs',
		    ToolsOzoneTeamDeleteMember: 'tools.ozone.team.deleteMember',
		    ToolsOzoneTeamListMembers: 'tools.ozone.team.listMembers',
		    ToolsOzoneTeamUpdateMember: 'tools.ozone.team.updateMember',
		    ToolsOzoneVerificationDefs: 'tools.ozone.verification.defs',
		    ToolsOzoneVerificationGrantVerifications: 'tools.ozone.verification.grantVerifications',
		    ToolsOzoneVerificationListVerifications: 'tools.ozone.verification.listVerifications',
		    ToolsOzoneVerificationRevokeVerifications: 'tools.ozone.verification.revokeVerifications',
		};
		
	} (lexicons));
	return lexicons;
}

var types$2 = {};

var hasRequiredTypes$2;

function requireTypes$2 () {
	if (hasRequiredTypes$2) return types$2;
	hasRequiredTypes$2 = 1;
	Object.defineProperty(types$2, "__esModule", { value: true });
	
	return types$2;
}

var _const = {};

var hasRequired_const;

function require_const () {
	if (hasRequired_const) return _const;
	hasRequired_const = 1;
	Object.defineProperty(_const, "__esModule", { value: true });
	_const.BSKY_LABELER_DID = void 0;
	_const.BSKY_LABELER_DID = 'did:plc:ar7c4by46qjdydhdevvrndac';
	
	return _const;
}

var util$3 = {};

var hasRequiredUtil$3;

function requireUtil$3 () {
	if (hasRequiredUtil$3) return util$3;
	hasRequiredUtil$3 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.nuxSchema = exports.asDid = exports.isDid = void 0;
		exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
		exports.savedFeedsToUriArrays = savedFeedsToUriArrays;
		exports.getSavedFeedType = getSavedFeedType;
		exports.validateSavedFeed = validateSavedFeed;
		exports.validateNux = validateNux;
		const zod_1 = /*@__PURE__*/ requireLib$1();
		const common_web_1 = requireDist$4();
		const syntax_1 = requireDist$5();
		function sanitizeMutedWordValue(value) {
		    return (value
		        .trim()
		        .replace(/^#(?!\ufe0f)/, '')
		        // eslint-disable-next-line no-misleading-character-class
		        .replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, ''));
		}
		function savedFeedsToUriArrays(savedFeeds) {
		    const pinned = [];
		    const saved = [];
		    for (const feed of savedFeeds) {
		        if (feed.pinned) {
		            pinned.push(feed.value);
		            // saved in v1 includes pinned
		            saved.push(feed.value);
		        }
		        else {
		            saved.push(feed.value);
		        }
		    }
		    return {
		        pinned,
		        saved,
		    };
		}
		/**
		 * Get the type of a saved feed, used by deprecated methods for backwards
		 * compat. Should not be used moving forward. *Invalid URIs will throw.*
		 *
		 * @param uri - The AT URI of the saved feed
		 */
		function getSavedFeedType(uri) {
		    const urip = new syntax_1.AtUri(uri);
		    switch (urip.collection) {
		        case 'app.bsky.feed.generator':
		            return 'feed';
		        case 'app.bsky.graph.list':
		            return 'list';
		        default:
		            return 'unknown';
		    }
		}
		function validateSavedFeed(savedFeed) {
		    new common_web_1.TID(savedFeed.id);
		    if (['feed', 'list'].includes(savedFeed.type)) {
		        const uri = new syntax_1.AtUri(savedFeed.value);
		        const isFeed = uri.collection === 'app.bsky.feed.generator';
		        const isList = uri.collection === 'app.bsky.graph.list';
		        if (savedFeed.type === 'feed' && !isFeed) {
		            throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
		        }
		        if (savedFeed.type === 'list' && !isList) {
		            throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
		        }
		    }
		}
		// @TODO use tools from @atproto/did
		const isDid = (str) => typeof str === 'string' &&
		    str.startsWith('did:') &&
		    str.includes(':', 4) &&
		    str.length > 8 &&
		    str.length <= 2048;
		exports.isDid = isDid;
		const asDid = (value) => {
		    if ((0, exports.isDid)(value))
		        return value;
		    throw new TypeError(`Invalid DID: ${value}`);
		};
		exports.asDid = asDid;
		exports.nuxSchema = zod_1.z
		    .object({
		    id: zod_1.z.string().max(64),
		    completed: zod_1.z.boolean(),
		    data: zod_1.z.string().max(300).optional(),
		    expiresAt: zod_1.z.string().datetime().optional(),
		})
		    .strict();
		function validateNux(nux) {
		    exports.nuxSchema.parse(nux);
		}
		
	} (util$3));
	return util$3;
}

var client$1 = {};

var dist = {};

var client = {};

var util$2 = {};

var types$1 = {};

var hasRequiredTypes$1;

function requireTypes$1 () {
	if (hasRequiredTypes$1) return types$1;
	hasRequiredTypes$1 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseTypeNames = exports.ResponseType = exports.errorResponseBody = void 0;
		exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
		exports.httpResponseCodeToName = httpResponseCodeToName;
		exports.httpResponseCodeToString = httpResponseCodeToString;
		const zod_1 = /*@__PURE__*/ requireLib$1();
		exports.errorResponseBody = zod_1.z.object({
		    error: zod_1.z.string().optional(),
		    message: zod_1.z.string().optional(),
		});
		var ResponseType;
		(function (ResponseType) {
		    ResponseType[ResponseType["Unknown"] = 1] = "Unknown";
		    ResponseType[ResponseType["InvalidResponse"] = 2] = "InvalidResponse";
		    ResponseType[ResponseType["Success"] = 200] = "Success";
		    ResponseType[ResponseType["InvalidRequest"] = 400] = "InvalidRequest";
		    ResponseType[ResponseType["AuthRequired"] = 401] = "AuthRequired";
		    ResponseType[ResponseType["Forbidden"] = 403] = "Forbidden";
		    ResponseType[ResponseType["XRPCNotSupported"] = 404] = "XRPCNotSupported";
		    ResponseType[ResponseType["NotAcceptable"] = 406] = "NotAcceptable";
		    ResponseType[ResponseType["PayloadTooLarge"] = 413] = "PayloadTooLarge";
		    ResponseType[ResponseType["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
		    ResponseType[ResponseType["RateLimitExceeded"] = 429] = "RateLimitExceeded";
		    ResponseType[ResponseType["InternalServerError"] = 500] = "InternalServerError";
		    ResponseType[ResponseType["MethodNotImplemented"] = 501] = "MethodNotImplemented";
		    ResponseType[ResponseType["UpstreamFailure"] = 502] = "UpstreamFailure";
		    ResponseType[ResponseType["NotEnoughResources"] = 503] = "NotEnoughResources";
		    ResponseType[ResponseType["UpstreamTimeout"] = 504] = "UpstreamTimeout";
		})(ResponseType || (exports.ResponseType = ResponseType = {}));
		function httpResponseCodeToEnum(status) {
		    if (status in ResponseType) {
		        return status;
		    }
		    else if (status >= 100 && status < 200) {
		        return ResponseType.XRPCNotSupported;
		    }
		    else if (status >= 200 && status < 300) {
		        return ResponseType.Success;
		    }
		    else if (status >= 300 && status < 400) {
		        return ResponseType.XRPCNotSupported;
		    }
		    else if (status >= 400 && status < 500) {
		        return ResponseType.InvalidRequest;
		    }
		    else {
		        return ResponseType.InternalServerError;
		    }
		}
		exports.ResponseTypeNames = {
		    [ResponseType.Unknown]: 'Unknown',
		    [ResponseType.InvalidResponse]: 'InvalidResponse',
		    [ResponseType.Success]: 'Success',
		    [ResponseType.InvalidRequest]: 'InvalidRequest',
		    [ResponseType.AuthRequired]: 'AuthenticationRequired',
		    [ResponseType.Forbidden]: 'Forbidden',
		    [ResponseType.XRPCNotSupported]: 'XRPCNotSupported',
		    [ResponseType.PayloadTooLarge]: 'PayloadTooLarge',
		    [ResponseType.UnsupportedMediaType]: 'UnsupportedMediaType',
		    [ResponseType.RateLimitExceeded]: 'RateLimitExceeded',
		    [ResponseType.InternalServerError]: 'InternalServerError',
		    [ResponseType.MethodNotImplemented]: 'MethodNotImplemented',
		    [ResponseType.UpstreamFailure]: 'UpstreamFailure',
		    [ResponseType.NotEnoughResources]: 'NotEnoughResources',
		    [ResponseType.UpstreamTimeout]: 'UpstreamTimeout',
		};
		function httpResponseCodeToName(status) {
		    return exports.ResponseTypeNames[httpResponseCodeToEnum(status)];
		}
		exports.ResponseTypeStrings = {
		    [ResponseType.Unknown]: 'Unknown',
		    [ResponseType.InvalidResponse]: 'Invalid Response',
		    [ResponseType.Success]: 'Success',
		    [ResponseType.InvalidRequest]: 'Invalid Request',
		    [ResponseType.AuthRequired]: 'Authentication Required',
		    [ResponseType.Forbidden]: 'Forbidden',
		    [ResponseType.XRPCNotSupported]: 'XRPC Not Supported',
		    [ResponseType.PayloadTooLarge]: 'Payload Too Large',
		    [ResponseType.UnsupportedMediaType]: 'Unsupported Media Type',
		    [ResponseType.RateLimitExceeded]: 'Rate Limit Exceeded',
		    [ResponseType.InternalServerError]: 'Internal Server Error',
		    [ResponseType.MethodNotImplemented]: 'Method Not Implemented',
		    [ResponseType.UpstreamFailure]: 'Upstream Failure',
		    [ResponseType.NotEnoughResources]: 'Not Enough Resources',
		    [ResponseType.UpstreamTimeout]: 'Upstream Timeout',
		};
		function httpResponseCodeToString(status) {
		    return exports.ResponseTypeStrings[httpResponseCodeToEnum(status)];
		}
		class XRPCResponse {
		    constructor(data, headers) {
		        Object.defineProperty(this, "data", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: data
		        });
		        Object.defineProperty(this, "headers", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: headers
		        });
		        Object.defineProperty(this, "success", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: true
		        });
		    }
		}
		exports.XRPCResponse = XRPCResponse;
		class XRPCError extends Error {
		    constructor(statusCode, error = httpResponseCodeToName(statusCode), message, headers, options) {
		        super(message || error || httpResponseCodeToString(statusCode), options);
		        Object.defineProperty(this, "error", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: error
		        });
		        Object.defineProperty(this, "headers", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: headers
		        });
		        Object.defineProperty(this, "success", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: false
		        });
		        Object.defineProperty(this, "status", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: void 0
		        });
		        this.status = httpResponseCodeToEnum(statusCode);
		        // Pre 2022 runtimes won't handle the "options" constructor argument
		        const cause = options?.cause;
		        if (this.cause === undefined && cause !== undefined) {
		            this.cause = cause;
		        }
		    }
		    static from(cause, fallbackStatus) {
		        if (cause instanceof XRPCError) {
		            return cause;
		        }
		        // Type cast the cause to an Error if it is one
		        const causeErr = cause instanceof Error ? cause : undefined;
		        // Try and find a Response object in the cause
		        const causeResponse = cause instanceof Response
		            ? cause
		            : cause?.['response'] instanceof Response
		                ? cause['response']
		                : undefined;
		        const statusCode = 
		        // Extract status code from "http-errors" like errors
		        causeErr?.['statusCode'] ??
		            causeErr?.['status'] ??
		            // Use the status code from the response object as fallback
		            causeResponse?.status;
		        // Convert the status code to a ResponseType
		        const status = typeof statusCode === 'number'
		            ? httpResponseCodeToEnum(statusCode)
		            : fallbackStatus ?? ResponseType.Unknown;
		        const message = causeErr?.message ?? String(cause);
		        const headers = causeResponse
		            ? Object.fromEntries(causeResponse.headers.entries())
		            : undefined;
		        return new XRPCError(status, undefined, message, headers, { cause });
		    }
		}
		exports.XRPCError = XRPCError;
		class XRPCInvalidResponseError extends XRPCError {
		    constructor(lexiconNsid, validationError, responseBody) {
		        super(ResponseType.InvalidResponse, exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`, undefined, { cause: validationError });
		        Object.defineProperty(this, "lexiconNsid", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: lexiconNsid
		        });
		        Object.defineProperty(this, "validationError", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: validationError
		        });
		        Object.defineProperty(this, "responseBody", {
		            enumerable: true,
		            configurable: true,
		            writable: true,
		            value: responseBody
		        });
		    }
		}
		exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
		
	} (types$1));
	return types$1;
}

var hasRequiredUtil$2;

function requireUtil$2 () {
	if (hasRequiredUtil$2) return util$2;
	hasRequiredUtil$2 = 1;
	Object.defineProperty(util$2, "__esModule", { value: true });
	util$2.isErrorResponseBody = isErrorResponseBody;
	util$2.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
	util$2.constructMethodCallUri = constructMethodCallUri;
	util$2.constructMethodCallUrl = constructMethodCallUrl;
	util$2.encodeQueryParam = encodeQueryParam;
	util$2.constructMethodCallHeaders = constructMethodCallHeaders;
	util$2.combineHeaders = combineHeaders;
	util$2.isBodyInit = isBodyInit;
	util$2.isIterable = isIterable;
	util$2.encodeMethodCallBody = encodeMethodCallBody;
	util$2.httpResponseBodyParse = httpResponseBodyParse;
	const lexicon_1 = requireDist$2();
	const types_1 = requireTypes$1();
	const ReadableStream = globalThis.ReadableStream ||
	    class {
	        constructor() {
	            // This anonymous class will never pass any "instanceof" check and cannot
	            // be instantiated.
	            throw new Error('ReadableStream is not supported in this environment');
	        }
	    };
	function isErrorResponseBody(v) {
	    return types_1.errorResponseBody.safeParse(v).success;
	}
	function getMethodSchemaHTTPMethod(schema) {
	    if (schema.type === 'procedure') {
	        return 'post';
	    }
	    return 'get';
	}
	function constructMethodCallUri(nsid, schema, serviceUri, params) {
	    const uri = new URL(constructMethodCallUrl(nsid, schema, params), serviceUri);
	    return uri.toString();
	}
	function constructMethodCallUrl(nsid, schema, params) {
	    const pathname = `/xrpc/${encodeURIComponent(nsid)}`;
	    if (!params)
	        return pathname;
	    const searchParams = [];
	    for (const [key, value] of Object.entries(params)) {
	        const paramSchema = schema.parameters?.properties?.[key];
	        if (!paramSchema) {
	            throw new Error(`Invalid query parameter: ${key}`);
	        }
	        if (value !== undefined) {
	            if (paramSchema.type === 'array') {
	                const values = Array.isArray(value) ? value : [value];
	                for (const val of values) {
	                    searchParams.push([
	                        key,
	                        encodeQueryParam(paramSchema.items.type, val),
	                    ]);
	                }
	            }
	            else {
	                searchParams.push([key, encodeQueryParam(paramSchema.type, value)]);
	            }
	        }
	    }
	    if (!searchParams.length)
	        return pathname;
	    return `${pathname}?${new URLSearchParams(searchParams).toString()}`;
	}
	function encodeQueryParam(type, value) {
	    if (type === 'string' || type === 'unknown') {
	        return String(value);
	    }
	    if (type === 'float') {
	        return String(Number(value));
	    }
	    else if (type === 'integer') {
	        return String(Number(value) | 0);
	    }
	    else if (type === 'boolean') {
	        return value ? 'true' : 'false';
	    }
	    else if (type === 'datetime') {
	        if (value instanceof Date) {
	            return value.toISOString();
	        }
	        return String(value);
	    }
	    throw new Error(`Unsupported query param type: ${type}`);
	}
	function constructMethodCallHeaders(schema, data, opts) {
	    // Not using `new Headers(opts?.headers)` to avoid duplicating headers values
	    // due to inconsistent casing in headers name. In case of multiple headers
	    // with the same name (but using a different case), the last one will be used.
	    // new Headers({ 'content-type': 'foo', 'Content-Type': 'bar' }).get('content-type')
	    // => 'foo, bar'
	    const headers = new Headers();
	    if (opts?.headers) {
	        for (const name in opts.headers) {
	            if (headers.has(name)) {
	                throw new TypeError(`Duplicate header: ${name}`);
	            }
	            const value = opts.headers[name];
	            if (value != null) {
	                headers.set(name, value);
	            }
	        }
	    }
	    if (schema.type === 'procedure') {
	        if (opts?.encoding) {
	            headers.set('content-type', opts.encoding);
	        }
	        else if (!headers.has('content-type') && typeof data !== 'undefined') {
	            // Special handling of BodyInit types before falling back to JSON encoding
	            if (data instanceof ArrayBuffer ||
	                data instanceof ReadableStream ||
	                ArrayBuffer.isView(data)) {
	                headers.set('content-type', 'application/octet-stream');
	            }
	            else if (data instanceof FormData) {
	                // Note: The multipart form data boundary is missing from the header
	                // we set here, making that header invalid. This special case will be
	                // handled in encodeMethodCallBody()
	                headers.set('content-type', 'multipart/form-data');
	            }
	            else if (data instanceof URLSearchParams) {
	                headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	            else if (isBlobLike(data)) {
	                headers.set('content-type', data.type || 'application/octet-stream');
	            }
	            else if (typeof data === 'string') {
	                headers.set('content-type', 'text/plain;charset=UTF-8');
	            }
	            // At this point, data is not a valid BodyInit type.
	            else if (isIterable(data)) {
	                headers.set('content-type', 'application/octet-stream');
	            }
	            else if (typeof data === 'boolean' ||
	                typeof data === 'number' ||
	                typeof data === 'string' ||
	                typeof data === 'object' // covers "null"
	            ) {
	                headers.set('content-type', 'application/json');
	            }
	            else {
	                // symbol, function, bigint
	                throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unsupported data type: ${typeof data}`);
	            }
	        }
	    }
	    return headers;
	}
	function combineHeaders(headersInit, defaultHeaders) {
	    if (!defaultHeaders)
	        return headersInit;
	    let headers = undefined;
	    for (const [name, definition] of defaultHeaders) {
	        // Ignore undefined values (allowed for convenience when using
	        // Object.entries).
	        if (definition === undefined)
	            continue;
	        // Lazy initialization of the headers object
	        headers ?? (headers = new Headers(headersInit));
	        if (headers.has(name))
	            continue;
	        const value = typeof definition === 'function' ? definition() : definition;
	        if (typeof value === 'string')
	            headers.set(name, value);
	        else if (value === null)
	            headers.delete(name);
	        else
	            throw new TypeError(`Invalid "${name}" header value: ${typeof value}`);
	    }
	    return headers ?? headersInit;
	}
	function isBlobLike(value) {
	    if (value == null)
	        return false;
	    if (typeof value !== 'object')
	        return false;
	    if (typeof Blob === 'function' && value instanceof Blob)
	        return true;
	    // Support for Blobs provided by libraries that don't use the native Blob
	    // (e.g. fetch-blob from node-fetch).
	    // https://github.com/node-fetch/fetch-blob/blob/a1a182e5978811407bef4ea1632b517567dda01f/index.js#L233-L244
	    const tag = value[Symbol.toStringTag];
	    if (tag === 'Blob' || tag === 'File') {
	        return 'stream' in value && typeof value.stream === 'function';
	    }
	    return false;
	}
	function isBodyInit(value) {
	    switch (typeof value) {
	        case 'string':
	            return true;
	        case 'object':
	            return (value instanceof ArrayBuffer ||
	                value instanceof FormData ||
	                value instanceof URLSearchParams ||
	                value instanceof ReadableStream ||
	                ArrayBuffer.isView(value) ||
	                isBlobLike(value));
	        default:
	            return false;
	    }
	}
	function isIterable(value) {
	    return (value != null &&
	        typeof value === 'object' &&
	        (Symbol.iterator in value || Symbol.asyncIterator in value));
	}
	function encodeMethodCallBody(headers, data) {
	    // Silently ignore the body if there is no content-type header.
	    const contentType = headers.get('content-type');
	    if (!contentType) {
	        return undefined;
	    }
	    if (typeof data === 'undefined') {
	        // This error would be returned by the server, but we can catch it earlier
	        // to avoid un-necessary requests. Note that a content-length of 0 does not
	        // necessary mean that the body is "empty" (e.g. an empty txt file).
	        throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `A request body is expected but none was provided`);
	    }
	    if (isBodyInit(data)) {
	        if (data instanceof FormData && contentType === 'multipart/form-data') {
	            // fetch() will encode FormData payload itself, but it won't override the
	            // content-type header if already present. This would cause the boundary
	            // to be missing from the content-type header, resulting in a 400 error.
	            // Deleting the content-type header here to let fetch() re-create it.
	            headers.delete('content-type');
	        }
	        // Will be encoded by the fetch API.
	        return data;
	    }
	    if (isIterable(data)) {
	        // Note that some environments support using Iterable & AsyncIterable as the
	        // body (e.g. Node's fetch), but not all of them do (browsers).
	        return iterableToReadableStream(data);
	    }
	    if (contentType.startsWith('text/')) {
	        return new TextEncoder().encode(String(data));
	    }
	    if (contentType.startsWith('application/json')) {
	        const json = (0, lexicon_1.stringifyLex)(data);
	        // Server would return a 400 error if the JSON is invalid (e.g. trying to
	        // JSONify a function, or an object that implements toJSON() poorly).
	        if (json === undefined) {
	            throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Failed to encode request body as JSON`);
	        }
	        return new TextEncoder().encode(json);
	    }
	    // At this point, "data" is not a valid BodyInit value, and we don't know how
	    // to encode it into one. Passing it to fetch would result in an error. Let's
	    // throw our own error instead.
	    const type = !data || typeof data !== 'object'
	        ? typeof data
	        : data.constructor !== Object &&
	            typeof data.constructor === 'function' &&
	            typeof data.constructor?.name === 'string'
	            ? data.constructor.name
	            : 'object';
	    throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unable to encode ${type} as ${contentType} data`);
	}
	/**
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/from_static}
	 */
	function iterableToReadableStream(iterable) {
	    // Use the native ReadableStream.from() if available.
	    if ('from' in ReadableStream && typeof ReadableStream.from === 'function') {
	        return ReadableStream.from(iterable);
	    }
	    // If you see this error, consider using a polyfill for ReadableStream. For
	    // example, the "web-streams-polyfill" package:
	    // https://github.com/MattiasBuelens/web-streams-polyfill
	    throw new TypeError('ReadableStream.from() is not supported in this environment. ' +
	        'It is required to support using iterables as the request body. ' +
	        'Consider using a polyfill or re-write your code to use a different body type.');
	}
	function httpResponseBodyParse(mimeType, data) {
	    try {
	        if (mimeType) {
	            if (mimeType.includes('application/json')) {
	                const str = new TextDecoder().decode(data);
	                return (0, lexicon_1.jsonStringToLex)(str);
	            }
	            if (mimeType.startsWith('text/')) {
	                return new TextDecoder().decode(data);
	            }
	        }
	        if (data instanceof ArrayBuffer) {
	            return new Uint8Array(data);
	        }
	        return data;
	    }
	    catch (cause) {
	        throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, undefined, `Failed to parse response body: ${String(cause)}`, undefined, { cause });
	    }
	}
	
	return util$2;
}

var xrpcClient = {};

var fetchHandler = {};

var hasRequiredFetchHandler;

function requireFetchHandler () {
	if (hasRequiredFetchHandler) return fetchHandler;
	hasRequiredFetchHandler = 1;
	Object.defineProperty(fetchHandler, "__esModule", { value: true });
	fetchHandler.buildFetchHandler = buildFetchHandler;
	const util_1 = requireUtil$2();
	function buildFetchHandler(options) {
	    // Already a fetch handler (allowed for convenience)
	    if (typeof options === 'function')
	        return options;
	    if (typeof options === 'object' && 'fetchHandler' in options) {
	        return options.fetchHandler.bind(options);
	    }
	    const { service, headers: defaultHeaders = undefined, fetch = globalThis.fetch, } = typeof options === 'string' || options instanceof URL
	        ? { service: options }
	        : options;
	    if (typeof fetch !== 'function') {
	        throw new TypeError('XrpcDispatcher requires fetch() to be available in your environment.');
	    }
	    const defaultHeadersEntries = defaultHeaders != null ? Object.entries(defaultHeaders) : undefined;
	    return async function (url, init) {
	        const base = typeof service === 'function' ? service() : service;
	        const fullUrl = new URL(url, base);
	        const headers = (0, util_1.combineHeaders)(init.headers, defaultHeadersEntries);
	        return fetch(fullUrl, { ...init, headers });
	    };
	}
	
	return fetchHandler;
}

var hasRequiredXrpcClient;

function requireXrpcClient () {
	if (hasRequiredXrpcClient) return xrpcClient;
	hasRequiredXrpcClient = 1;
	Object.defineProperty(xrpcClient, "__esModule", { value: true });
	xrpcClient.XrpcClient = void 0;
	const lexicon_1 = requireDist$2();
	const fetch_handler_1 = requireFetchHandler();
	const types_1 = requireTypes$1();
	const util_1 = requireUtil$2();
	class XrpcClient {
	    constructor(fetchHandlerOpts, 
	    // "Lexicons" is redundant here (because that class implements
	    // "Iterable<LexiconDoc>") but we keep it for explicitness:
	    lex) {
	        Object.defineProperty(this, "fetchHandler", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "headers", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new Map()
	        });
	        Object.defineProperty(this, "lex", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this.fetchHandler = (0, fetch_handler_1.buildFetchHandler)(fetchHandlerOpts);
	        this.lex = lex instanceof lexicon_1.Lexicons ? lex : new lexicon_1.Lexicons(lex);
	    }
	    setHeader(key, value) {
	        this.headers.set(key.toLowerCase(), value);
	    }
	    unsetHeader(key) {
	        this.headers.delete(key.toLowerCase());
	    }
	    clearHeaders() {
	        this.headers.clear();
	    }
	    async call(methodNsid, params, data, opts) {
	        const def = this.lex.getDefOrThrow(methodNsid);
	        if (!def || (def.type !== 'query' && def.type !== 'procedure')) {
	            throw new TypeError(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
	        }
	        // @TODO: should we validate the params and data here?
	        // this.lex.assertValidXrpcParams(methodNsid, params)
	        // if (data !== undefined) {
	        //   this.lex.assertValidXrpcInput(methodNsid, data)
	        // }
	        const reqUrl = (0, util_1.constructMethodCallUrl)(methodNsid, def, params);
	        const reqMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
	        const reqHeaders = (0, util_1.constructMethodCallHeaders)(def, data, opts);
	        const reqBody = (0, util_1.encodeMethodCallBody)(reqHeaders, data);
	        // The duplex field is required for streaming bodies, but not yet reflected
	        // anywhere in docs or types. See whatwg/fetch#1438, nodejs/node#46221.
	        const init = {
	            method: reqMethod,
	            headers: (0, util_1.combineHeaders)(reqHeaders, this.headers),
	            body: reqBody,
	            duplex: 'half',
	            signal: opts?.signal,
	        };
	        try {
	            const response = await this.fetchHandler.call(undefined, reqUrl, init);
	            const resStatus = response.status;
	            const resHeaders = Object.fromEntries(response.headers.entries());
	            const resBodyBytes = await response.arrayBuffer();
	            const resBody = (0, util_1.httpResponseBodyParse)(response.headers.get('content-type'), resBodyBytes);
	            const resCode = (0, types_1.httpResponseCodeToEnum)(resStatus);
	            if (resCode !== types_1.ResponseType.Success) {
	                const { error = undefined, message = undefined } = resBody && (0, util_1.isErrorResponseBody)(resBody) ? resBody : {};
	                throw new types_1.XRPCError(resCode, error, message, resHeaders);
	            }
	            try {
	                this.lex.assertValidXrpcOutput(methodNsid, resBody);
	            }
	            catch (e) {
	                if (e instanceof lexicon_1.ValidationError) {
	                    throw new types_1.XRPCInvalidResponseError(methodNsid, e, resBody);
	                }
	                throw e;
	            }
	            return new types_1.XRPCResponse(resBody, resHeaders);
	        }
	        catch (err) {
	            throw types_1.XRPCError.from(err);
	        }
	    }
	}
	xrpcClient.XrpcClient = XrpcClient;
	
	return xrpcClient;
}

var hasRequiredClient$1;

function requireClient$1 () {
	if (hasRequiredClient$1) return client;
	hasRequiredClient$1 = 1;
	Object.defineProperty(client, "__esModule", { value: true });
	client.ServiceClient = client.Client = void 0;
	const lexicon_1 = requireDist$2();
	const util_1 = requireUtil$2();
	const xrpc_client_1 = requireXrpcClient();
	/** @deprecated Use {@link XrpcClient} instead */
	class Client {
	    constructor() {
	        Object.defineProperty(this, "lex", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new lexicon_1.Lexicons()
	        });
	    }
	    /** @deprecated */
	    get fetch() {
	        throw new Error('Client.fetch is no longer supported. Use an XrpcClient instead.');
	    }
	    /** @deprecated */
	    set fetch(_) {
	        throw new Error('Client.fetch is no longer supported. Use an XrpcClient instead.');
	    }
	    // method calls
	    //
	    async call(serviceUri, methodNsid, params, data, opts) {
	        return this.service(serviceUri).call(methodNsid, params, data, opts);
	    }
	    service(serviceUri) {
	        return new ServiceClient(this, serviceUri);
	    }
	    // schemas
	    // =
	    addLexicon(doc) {
	        this.lex.add(doc);
	    }
	    addLexicons(docs) {
	        for (const doc of docs) {
	            this.addLexicon(doc);
	        }
	    }
	    removeLexicon(uri) {
	        this.lex.remove(uri);
	    }
	}
	client.Client = Client;
	/** @deprecated Use {@link XrpcClient} instead */
	class ServiceClient extends xrpc_client_1.XrpcClient {
	    constructor(baseClient, serviceUri) {
	        super(async (input, init) => {
	            const headers = (0, util_1.combineHeaders)(init.headers, Object.entries(this.headers));
	            return fetch(new URL(input, this.uri), { ...init, headers });
	        }, baseClient.lex);
	        Object.defineProperty(this, "baseClient", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: baseClient
	        });
	        Object.defineProperty(this, "uri", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this.uri = typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri;
	    }
	}
	client.ServiceClient = ServiceClient;
	
	return client;
}

var hasRequiredDist$1;

function requireDist$1 () {
	if (hasRequiredDist$1) return dist;
	hasRequiredDist$1 = 1;
	(function (exports) {
		var __createBinding = (dist && dist.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (dist && dist.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireClient$1(), exports);
		__exportStar(requireFetchHandler(), exports);
		__exportStar(requireTypes$1(), exports);
		__exportStar(requireUtil$2(), exports);
		__exportStar(requireXrpcClient(), exports);
		/* eslint-disable import/no-deprecated */
		const client_1 = requireClient$1();
		/** @deprecated create a local {@link XrpcClient} instance instead */
		const defaultInst = new client_1.Client();
		exports.default = defaultInst;
		/* eslint-enable import/no-deprecated */
		
	} (dist));
	return dist;
}

var refreshIdentity = {};

var hasRequiredRefreshIdentity;

function requireRefreshIdentity () {
	if (hasRequiredRefreshIdentity) return refreshIdentity;
	hasRequiredRefreshIdentity = 1;
	Object.defineProperty(refreshIdentity, "__esModule", { value: true });
	refreshIdentity.DidDeactivatedError = refreshIdentity.DidNotFoundError = refreshIdentity.HandleNotFoundError = void 0;
	refreshIdentity.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class HandleNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	refreshIdentity.HandleNotFoundError = HandleNotFoundError;
	class DidNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	refreshIdentity.DidNotFoundError = DidNotFoundError;
	class DidDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	refreshIdentity.DidDeactivatedError = DidDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'HandleNotFound')
	            return new HandleNotFoundError(e);
	        if (e.error === 'DidNotFound')
	            return new DidNotFoundError(e);
	        if (e.error === 'DidDeactivated')
	            return new DidDeactivatedError(e);
	    }
	    return e;
	}
	
	return refreshIdentity;
}

var resolveDid = {};

var hasRequiredResolveDid;

function requireResolveDid () {
	if (hasRequiredResolveDid) return resolveDid;
	hasRequiredResolveDid = 1;
	Object.defineProperty(resolveDid, "__esModule", { value: true });
	resolveDid.DidDeactivatedError = resolveDid.DidNotFoundError = void 0;
	resolveDid.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class DidNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resolveDid.DidNotFoundError = DidNotFoundError;
	class DidDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resolveDid.DidDeactivatedError = DidDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'DidNotFound')
	            return new DidNotFoundError(e);
	        if (e.error === 'DidDeactivated')
	            return new DidDeactivatedError(e);
	    }
	    return e;
	}
	
	return resolveDid;
}

var resolveHandle = {};

var hasRequiredResolveHandle;

function requireResolveHandle () {
	if (hasRequiredResolveHandle) return resolveHandle;
	hasRequiredResolveHandle = 1;
	Object.defineProperty(resolveHandle, "__esModule", { value: true });
	resolveHandle.HandleNotFoundError = void 0;
	resolveHandle.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class HandleNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resolveHandle.HandleNotFoundError = HandleNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'HandleNotFound')
	            return new HandleNotFoundError(e);
	    }
	    return e;
	}
	
	return resolveHandle;
}

var resolveIdentity = {};

var hasRequiredResolveIdentity;

function requireResolveIdentity () {
	if (hasRequiredResolveIdentity) return resolveIdentity;
	hasRequiredResolveIdentity = 1;
	Object.defineProperty(resolveIdentity, "__esModule", { value: true });
	resolveIdentity.DidDeactivatedError = resolveIdentity.DidNotFoundError = resolveIdentity.HandleNotFoundError = void 0;
	resolveIdentity.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class HandleNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resolveIdentity.HandleNotFoundError = HandleNotFoundError;
	class DidNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resolveIdentity.DidNotFoundError = DidNotFoundError;
	class DidDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resolveIdentity.DidDeactivatedError = DidDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'HandleNotFound')
	            return new HandleNotFoundError(e);
	        if (e.error === 'DidNotFound')
	            return new DidNotFoundError(e);
	        if (e.error === 'DidDeactivated')
	            return new DidDeactivatedError(e);
	    }
	    return e;
	}
	
	return resolveIdentity;
}

var applyWrites = {};

var hasRequiredApplyWrites;

function requireApplyWrites () {
	if (hasRequiredApplyWrites) return applyWrites;
	hasRequiredApplyWrites = 1;
	Object.defineProperty(applyWrites, "__esModule", { value: true });
	applyWrites.InvalidSwapError = void 0;
	applyWrites.toKnownErr = toKnownErr;
	applyWrites.isCreate = isCreate;
	applyWrites.validateCreate = validateCreate;
	applyWrites.isUpdate = isUpdate;
	applyWrites.validateUpdate = validateUpdate;
	applyWrites.isDelete = isDelete;
	applyWrites.validateDelete = validateDelete;
	applyWrites.isCreateResult = isCreateResult;
	applyWrites.validateCreateResult = validateCreateResult;
	applyWrites.isUpdateResult = isUpdateResult;
	applyWrites.validateUpdateResult = validateUpdateResult;
	applyWrites.isDeleteResult = isDeleteResult;
	applyWrites.validateDeleteResult = validateDeleteResult;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.repo.applyWrites';
	class InvalidSwapError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	applyWrites.InvalidSwapError = InvalidSwapError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'InvalidSwap')
	            return new InvalidSwapError(e);
	    }
	    return e;
	}
	const hashCreate = 'create';
	function isCreate(v) {
	    return is$typed(v, id, hashCreate);
	}
	function validateCreate(v) {
	    return validate(v, id, hashCreate);
	}
	const hashUpdate = 'update';
	function isUpdate(v) {
	    return is$typed(v, id, hashUpdate);
	}
	function validateUpdate(v) {
	    return validate(v, id, hashUpdate);
	}
	const hashDelete = 'delete';
	function isDelete(v) {
	    return is$typed(v, id, hashDelete);
	}
	function validateDelete(v) {
	    return validate(v, id, hashDelete);
	}
	const hashCreateResult = 'createResult';
	function isCreateResult(v) {
	    return is$typed(v, id, hashCreateResult);
	}
	function validateCreateResult(v) {
	    return validate(v, id, hashCreateResult);
	}
	const hashUpdateResult = 'updateResult';
	function isUpdateResult(v) {
	    return is$typed(v, id, hashUpdateResult);
	}
	function validateUpdateResult(v) {
	    return validate(v, id, hashUpdateResult);
	}
	const hashDeleteResult = 'deleteResult';
	function isDeleteResult(v) {
	    return is$typed(v, id, hashDeleteResult);
	}
	function validateDeleteResult(v) {
	    return validate(v, id, hashDeleteResult);
	}
	
	return applyWrites;
}

var createRecord = {};

var hasRequiredCreateRecord;

function requireCreateRecord () {
	if (hasRequiredCreateRecord) return createRecord;
	hasRequiredCreateRecord = 1;
	Object.defineProperty(createRecord, "__esModule", { value: true });
	createRecord.InvalidSwapError = void 0;
	createRecord.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class InvalidSwapError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createRecord.InvalidSwapError = InvalidSwapError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'InvalidSwap')
	            return new InvalidSwapError(e);
	    }
	    return e;
	}
	
	return createRecord;
}

var deleteRecord = {};

var hasRequiredDeleteRecord;

function requireDeleteRecord () {
	if (hasRequiredDeleteRecord) return deleteRecord;
	hasRequiredDeleteRecord = 1;
	Object.defineProperty(deleteRecord, "__esModule", { value: true });
	deleteRecord.InvalidSwapError = void 0;
	deleteRecord.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class InvalidSwapError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteRecord.InvalidSwapError = InvalidSwapError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'InvalidSwap')
	            return new InvalidSwapError(e);
	    }
	    return e;
	}
	
	return deleteRecord;
}

var getRecord$2 = {};

var hasRequiredGetRecord$2;

function requireGetRecord$2 () {
	if (hasRequiredGetRecord$2) return getRecord$2;
	hasRequiredGetRecord$2 = 1;
	Object.defineProperty(getRecord$2, "__esModule", { value: true });
	getRecord$2.RecordNotFoundError = void 0;
	getRecord$2.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RecordNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord$2.RecordNotFoundError = RecordNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RecordNotFound')
	            return new RecordNotFoundError(e);
	    }
	    return e;
	}
	
	return getRecord$2;
}

var putRecord = {};

var hasRequiredPutRecord;

function requirePutRecord () {
	if (hasRequiredPutRecord) return putRecord;
	hasRequiredPutRecord = 1;
	Object.defineProperty(putRecord, "__esModule", { value: true });
	putRecord.InvalidSwapError = void 0;
	putRecord.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class InvalidSwapError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	putRecord.InvalidSwapError = InvalidSwapError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'InvalidSwap')
	            return new InvalidSwapError(e);
	    }
	    return e;
	}
	
	return putRecord;
}

var confirmEmail = {};

var hasRequiredConfirmEmail;

function requireConfirmEmail () {
	if (hasRequiredConfirmEmail) return confirmEmail;
	hasRequiredConfirmEmail = 1;
	Object.defineProperty(confirmEmail, "__esModule", { value: true });
	confirmEmail.InvalidEmailError = confirmEmail.InvalidTokenError = confirmEmail.ExpiredTokenError = confirmEmail.AccountNotFoundError = void 0;
	confirmEmail.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class AccountNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	confirmEmail.AccountNotFoundError = AccountNotFoundError;
	class ExpiredTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	confirmEmail.ExpiredTokenError = ExpiredTokenError;
	class InvalidTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	confirmEmail.InvalidTokenError = InvalidTokenError;
	class InvalidEmailError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	confirmEmail.InvalidEmailError = InvalidEmailError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'AccountNotFound')
	            return new AccountNotFoundError(e);
	        if (e.error === 'ExpiredToken')
	            return new ExpiredTokenError(e);
	        if (e.error === 'InvalidToken')
	            return new InvalidTokenError(e);
	        if (e.error === 'InvalidEmail')
	            return new InvalidEmailError(e);
	    }
	    return e;
	}
	
	return confirmEmail;
}

var createAccount = {};

var hasRequiredCreateAccount;

function requireCreateAccount () {
	if (hasRequiredCreateAccount) return createAccount;
	hasRequiredCreateAccount = 1;
	Object.defineProperty(createAccount, "__esModule", { value: true });
	createAccount.IncompatibleDidDocError = createAccount.UnresolvableDidError = createAccount.UnsupportedDomainError = createAccount.HandleNotAvailableError = createAccount.InvalidInviteCodeError = createAccount.InvalidPasswordError = createAccount.InvalidHandleError = void 0;
	createAccount.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class InvalidHandleError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.InvalidHandleError = InvalidHandleError;
	class InvalidPasswordError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.InvalidPasswordError = InvalidPasswordError;
	class InvalidInviteCodeError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.InvalidInviteCodeError = InvalidInviteCodeError;
	class HandleNotAvailableError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.HandleNotAvailableError = HandleNotAvailableError;
	class UnsupportedDomainError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.UnsupportedDomainError = UnsupportedDomainError;
	class UnresolvableDidError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.UnresolvableDidError = UnresolvableDidError;
	class IncompatibleDidDocError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAccount.IncompatibleDidDocError = IncompatibleDidDocError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'InvalidHandle')
	            return new InvalidHandleError(e);
	        if (e.error === 'InvalidPassword')
	            return new InvalidPasswordError(e);
	        if (e.error === 'InvalidInviteCode')
	            return new InvalidInviteCodeError(e);
	        if (e.error === 'HandleNotAvailable')
	            return new HandleNotAvailableError(e);
	        if (e.error === 'UnsupportedDomain')
	            return new UnsupportedDomainError(e);
	        if (e.error === 'UnresolvableDid')
	            return new UnresolvableDidError(e);
	        if (e.error === 'IncompatibleDidDoc')
	            return new IncompatibleDidDocError(e);
	    }
	    return e;
	}
	
	return createAccount;
}

var createAppPassword = {};

var hasRequiredCreateAppPassword;

function requireCreateAppPassword () {
	if (hasRequiredCreateAppPassword) return createAppPassword;
	hasRequiredCreateAppPassword = 1;
	Object.defineProperty(createAppPassword, "__esModule", { value: true });
	createAppPassword.AccountTakedownError = void 0;
	createAppPassword.toKnownErr = toKnownErr;
	createAppPassword.isAppPassword = isAppPassword;
	createAppPassword.validateAppPassword = validateAppPassword;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.server.createAppPassword';
	class AccountTakedownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createAppPassword.AccountTakedownError = AccountTakedownError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'AccountTakedown')
	            return new AccountTakedownError(e);
	    }
	    return e;
	}
	const hashAppPassword = 'appPassword';
	function isAppPassword(v) {
	    return is$typed(v, id, hashAppPassword);
	}
	function validateAppPassword(v) {
	    return validate(v, id, hashAppPassword);
	}
	
	return createAppPassword;
}

var createSession = {};

var hasRequiredCreateSession;

function requireCreateSession () {
	if (hasRequiredCreateSession) return createSession;
	hasRequiredCreateSession = 1;
	Object.defineProperty(createSession, "__esModule", { value: true });
	createSession.AuthFactorTokenRequiredError = createSession.AccountTakedownError = void 0;
	createSession.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class AccountTakedownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createSession.AccountTakedownError = AccountTakedownError;
	class AuthFactorTokenRequiredError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createSession.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'AccountTakedown')
	            return new AccountTakedownError(e);
	        if (e.error === 'AuthFactorTokenRequired')
	            return new AuthFactorTokenRequiredError(e);
	    }
	    return e;
	}
	
	return createSession;
}

var deleteAccount$2 = {};

var hasRequiredDeleteAccount$2;

function requireDeleteAccount$2 () {
	if (hasRequiredDeleteAccount$2) return deleteAccount$2;
	hasRequiredDeleteAccount$2 = 1;
	Object.defineProperty(deleteAccount$2, "__esModule", { value: true });
	deleteAccount$2.InvalidTokenError = deleteAccount$2.ExpiredTokenError = void 0;
	deleteAccount$2.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class ExpiredTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteAccount$2.ExpiredTokenError = ExpiredTokenError;
	class InvalidTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteAccount$2.InvalidTokenError = InvalidTokenError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'ExpiredToken')
	            return new ExpiredTokenError(e);
	        if (e.error === 'InvalidToken')
	            return new InvalidTokenError(e);
	    }
	    return e;
	}
	
	return deleteAccount$2;
}

var getAccountInviteCodes = {};

var hasRequiredGetAccountInviteCodes;

function requireGetAccountInviteCodes () {
	if (hasRequiredGetAccountInviteCodes) return getAccountInviteCodes;
	hasRequiredGetAccountInviteCodes = 1;
	Object.defineProperty(getAccountInviteCodes, "__esModule", { value: true });
	getAccountInviteCodes.DuplicateCreateError = void 0;
	getAccountInviteCodes.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class DuplicateCreateError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getAccountInviteCodes.DuplicateCreateError = DuplicateCreateError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'DuplicateCreate')
	            return new DuplicateCreateError(e);
	    }
	    return e;
	}
	
	return getAccountInviteCodes;
}

var getServiceAuth = {};

var hasRequiredGetServiceAuth;

function requireGetServiceAuth () {
	if (hasRequiredGetServiceAuth) return getServiceAuth;
	hasRequiredGetServiceAuth = 1;
	Object.defineProperty(getServiceAuth, "__esModule", { value: true });
	getServiceAuth.BadExpirationError = void 0;
	getServiceAuth.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BadExpirationError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getServiceAuth.BadExpirationError = BadExpirationError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BadExpiration')
	            return new BadExpirationError(e);
	    }
	    return e;
	}
	
	return getServiceAuth;
}

var listAppPasswords = {};

var hasRequiredListAppPasswords;

function requireListAppPasswords () {
	if (hasRequiredListAppPasswords) return listAppPasswords;
	hasRequiredListAppPasswords = 1;
	Object.defineProperty(listAppPasswords, "__esModule", { value: true });
	listAppPasswords.AccountTakedownError = void 0;
	listAppPasswords.toKnownErr = toKnownErr;
	listAppPasswords.isAppPassword = isAppPassword;
	listAppPasswords.validateAppPassword = validateAppPassword;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.server.listAppPasswords';
	class AccountTakedownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	listAppPasswords.AccountTakedownError = AccountTakedownError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'AccountTakedown')
	            return new AccountTakedownError(e);
	    }
	    return e;
	}
	const hashAppPassword = 'appPassword';
	function isAppPassword(v) {
	    return is$typed(v, id, hashAppPassword);
	}
	function validateAppPassword(v) {
	    return validate(v, id, hashAppPassword);
	}
	
	return listAppPasswords;
}

var refreshSession = {};

var hasRequiredRefreshSession;

function requireRefreshSession () {
	if (hasRequiredRefreshSession) return refreshSession;
	hasRequiredRefreshSession = 1;
	Object.defineProperty(refreshSession, "__esModule", { value: true });
	refreshSession.AccountTakedownError = void 0;
	refreshSession.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class AccountTakedownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	refreshSession.AccountTakedownError = AccountTakedownError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'AccountTakedown')
	            return new AccountTakedownError(e);
	    }
	    return e;
	}
	
	return refreshSession;
}

var resetPassword = {};

var hasRequiredResetPassword;

function requireResetPassword () {
	if (hasRequiredResetPassword) return resetPassword;
	hasRequiredResetPassword = 1;
	Object.defineProperty(resetPassword, "__esModule", { value: true });
	resetPassword.InvalidTokenError = resetPassword.ExpiredTokenError = void 0;
	resetPassword.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class ExpiredTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resetPassword.ExpiredTokenError = ExpiredTokenError;
	class InvalidTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	resetPassword.InvalidTokenError = InvalidTokenError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'ExpiredToken')
	            return new ExpiredTokenError(e);
	        if (e.error === 'InvalidToken')
	            return new InvalidTokenError(e);
	    }
	    return e;
	}
	
	return resetPassword;
}

var updateEmail = {};

var hasRequiredUpdateEmail;

function requireUpdateEmail () {
	if (hasRequiredUpdateEmail) return updateEmail;
	hasRequiredUpdateEmail = 1;
	Object.defineProperty(updateEmail, "__esModule", { value: true });
	updateEmail.TokenRequiredError = updateEmail.InvalidTokenError = updateEmail.ExpiredTokenError = void 0;
	updateEmail.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class ExpiredTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	updateEmail.ExpiredTokenError = ExpiredTokenError;
	class InvalidTokenError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	updateEmail.InvalidTokenError = InvalidTokenError;
	class TokenRequiredError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	updateEmail.TokenRequiredError = TokenRequiredError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'ExpiredToken')
	            return new ExpiredTokenError(e);
	        if (e.error === 'InvalidToken')
	            return new InvalidTokenError(e);
	        if (e.error === 'TokenRequired')
	            return new TokenRequiredError(e);
	    }
	    return e;
	}
	
	return updateEmail;
}

var getBlob = {};

var hasRequiredGetBlob;

function requireGetBlob () {
	if (hasRequiredGetBlob) return getBlob;
	hasRequiredGetBlob = 1;
	Object.defineProperty(getBlob, "__esModule", { value: true });
	getBlob.RepoDeactivatedError = getBlob.RepoSuspendedError = getBlob.RepoTakendownError = getBlob.RepoNotFoundError = getBlob.BlobNotFoundError = void 0;
	getBlob.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BlobNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlob.BlobNotFoundError = BlobNotFoundError;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlob.RepoNotFoundError = RepoNotFoundError;
	class RepoTakendownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlob.RepoTakendownError = RepoTakendownError;
	class RepoSuspendedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlob.RepoSuspendedError = RepoSuspendedError;
	class RepoDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlob.RepoDeactivatedError = RepoDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BlobNotFound')
	            return new BlobNotFoundError(e);
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	        if (e.error === 'RepoTakendown')
	            return new RepoTakendownError(e);
	        if (e.error === 'RepoSuspended')
	            return new RepoSuspendedError(e);
	        if (e.error === 'RepoDeactivated')
	            return new RepoDeactivatedError(e);
	    }
	    return e;
	}
	
	return getBlob;
}

var getBlocks$1 = {};

var hasRequiredGetBlocks$1;

function requireGetBlocks$1 () {
	if (hasRequiredGetBlocks$1) return getBlocks$1;
	hasRequiredGetBlocks$1 = 1;
	Object.defineProperty(getBlocks$1, "__esModule", { value: true });
	getBlocks$1.RepoDeactivatedError = getBlocks$1.RepoSuspendedError = getBlocks$1.RepoTakendownError = getBlocks$1.RepoNotFoundError = getBlocks$1.BlockNotFoundError = void 0;
	getBlocks$1.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BlockNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlocks$1.BlockNotFoundError = BlockNotFoundError;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlocks$1.RepoNotFoundError = RepoNotFoundError;
	class RepoTakendownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlocks$1.RepoTakendownError = RepoTakendownError;
	class RepoSuspendedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlocks$1.RepoSuspendedError = RepoSuspendedError;
	class RepoDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getBlocks$1.RepoDeactivatedError = RepoDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BlockNotFound')
	            return new BlockNotFoundError(e);
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	        if (e.error === 'RepoTakendown')
	            return new RepoTakendownError(e);
	        if (e.error === 'RepoSuspended')
	            return new RepoSuspendedError(e);
	        if (e.error === 'RepoDeactivated')
	            return new RepoDeactivatedError(e);
	    }
	    return e;
	}
	
	return getBlocks$1;
}

var getHead = {};

var hasRequiredGetHead;

function requireGetHead () {
	if (hasRequiredGetHead) return getHead;
	hasRequiredGetHead = 1;
	Object.defineProperty(getHead, "__esModule", { value: true });
	getHead.HeadNotFoundError = void 0;
	getHead.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class HeadNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getHead.HeadNotFoundError = HeadNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'HeadNotFound')
	            return new HeadNotFoundError(e);
	    }
	    return e;
	}
	
	return getHead;
}

var getHostStatus = {};

var hasRequiredGetHostStatus;

function requireGetHostStatus () {
	if (hasRequiredGetHostStatus) return getHostStatus;
	hasRequiredGetHostStatus = 1;
	Object.defineProperty(getHostStatus, "__esModule", { value: true });
	getHostStatus.HostNotFoundError = void 0;
	getHostStatus.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class HostNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getHostStatus.HostNotFoundError = HostNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'HostNotFound')
	            return new HostNotFoundError(e);
	    }
	    return e;
	}
	
	return getHostStatus;
}

var getLatestCommit = {};

var hasRequiredGetLatestCommit;

function requireGetLatestCommit () {
	if (hasRequiredGetLatestCommit) return getLatestCommit;
	hasRequiredGetLatestCommit = 1;
	Object.defineProperty(getLatestCommit, "__esModule", { value: true });
	getLatestCommit.RepoDeactivatedError = getLatestCommit.RepoSuspendedError = getLatestCommit.RepoTakendownError = getLatestCommit.RepoNotFoundError = void 0;
	getLatestCommit.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getLatestCommit.RepoNotFoundError = RepoNotFoundError;
	class RepoTakendownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getLatestCommit.RepoTakendownError = RepoTakendownError;
	class RepoSuspendedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getLatestCommit.RepoSuspendedError = RepoSuspendedError;
	class RepoDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getLatestCommit.RepoDeactivatedError = RepoDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	        if (e.error === 'RepoTakendown')
	            return new RepoTakendownError(e);
	        if (e.error === 'RepoSuspended')
	            return new RepoSuspendedError(e);
	        if (e.error === 'RepoDeactivated')
	            return new RepoDeactivatedError(e);
	    }
	    return e;
	}
	
	return getLatestCommit;
}

var getRecord$1 = {};

var hasRequiredGetRecord$1;

function requireGetRecord$1 () {
	if (hasRequiredGetRecord$1) return getRecord$1;
	hasRequiredGetRecord$1 = 1;
	Object.defineProperty(getRecord$1, "__esModule", { value: true });
	getRecord$1.RepoDeactivatedError = getRecord$1.RepoSuspendedError = getRecord$1.RepoTakendownError = getRecord$1.RepoNotFoundError = getRecord$1.RecordNotFoundError = void 0;
	getRecord$1.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RecordNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord$1.RecordNotFoundError = RecordNotFoundError;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord$1.RepoNotFoundError = RepoNotFoundError;
	class RepoTakendownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord$1.RepoTakendownError = RepoTakendownError;
	class RepoSuspendedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord$1.RepoSuspendedError = RepoSuspendedError;
	class RepoDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord$1.RepoDeactivatedError = RepoDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RecordNotFound')
	            return new RecordNotFoundError(e);
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	        if (e.error === 'RepoTakendown')
	            return new RepoTakendownError(e);
	        if (e.error === 'RepoSuspended')
	            return new RepoSuspendedError(e);
	        if (e.error === 'RepoDeactivated')
	            return new RepoDeactivatedError(e);
	    }
	    return e;
	}
	
	return getRecord$1;
}

var getRepo$1 = {};

var hasRequiredGetRepo$1;

function requireGetRepo$1 () {
	if (hasRequiredGetRepo$1) return getRepo$1;
	hasRequiredGetRepo$1 = 1;
	Object.defineProperty(getRepo$1, "__esModule", { value: true });
	getRepo$1.RepoDeactivatedError = getRepo$1.RepoSuspendedError = getRepo$1.RepoTakendownError = getRepo$1.RepoNotFoundError = void 0;
	getRepo$1.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRepo$1.RepoNotFoundError = RepoNotFoundError;
	class RepoTakendownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRepo$1.RepoTakendownError = RepoTakendownError;
	class RepoSuspendedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRepo$1.RepoSuspendedError = RepoSuspendedError;
	class RepoDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRepo$1.RepoDeactivatedError = RepoDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	        if (e.error === 'RepoTakendown')
	            return new RepoTakendownError(e);
	        if (e.error === 'RepoSuspended')
	            return new RepoSuspendedError(e);
	        if (e.error === 'RepoDeactivated')
	            return new RepoDeactivatedError(e);
	    }
	    return e;
	}
	
	return getRepo$1;
}

var getRepoStatus = {};

var hasRequiredGetRepoStatus;

function requireGetRepoStatus () {
	if (hasRequiredGetRepoStatus) return getRepoStatus;
	hasRequiredGetRepoStatus = 1;
	Object.defineProperty(getRepoStatus, "__esModule", { value: true });
	getRepoStatus.RepoNotFoundError = void 0;
	getRepoStatus.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRepoStatus.RepoNotFoundError = RepoNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	    }
	    return e;
	}
	
	return getRepoStatus;
}

var listBlobs = {};

var hasRequiredListBlobs;

function requireListBlobs () {
	if (hasRequiredListBlobs) return listBlobs;
	hasRequiredListBlobs = 1;
	Object.defineProperty(listBlobs, "__esModule", { value: true });
	listBlobs.RepoDeactivatedError = listBlobs.RepoSuspendedError = listBlobs.RepoTakendownError = listBlobs.RepoNotFoundError = void 0;
	listBlobs.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	listBlobs.RepoNotFoundError = RepoNotFoundError;
	class RepoTakendownError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	listBlobs.RepoTakendownError = RepoTakendownError;
	class RepoSuspendedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	listBlobs.RepoSuspendedError = RepoSuspendedError;
	class RepoDeactivatedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	listBlobs.RepoDeactivatedError = RepoDeactivatedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	        if (e.error === 'RepoTakendown')
	            return new RepoTakendownError(e);
	        if (e.error === 'RepoSuspended')
	            return new RepoSuspendedError(e);
	        if (e.error === 'RepoDeactivated')
	            return new RepoDeactivatedError(e);
	    }
	    return e;
	}
	
	return listBlobs;
}

var requestCrawl = {};

var hasRequiredRequestCrawl;

function requireRequestCrawl () {
	if (hasRequiredRequestCrawl) return requestCrawl;
	hasRequiredRequestCrawl = 1;
	Object.defineProperty(requestCrawl, "__esModule", { value: true });
	requestCrawl.HostBannedError = void 0;
	requestCrawl.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class HostBannedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	requestCrawl.HostBannedError = HostBannedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'HostBanned')
	            return new HostBannedError(e);
	    }
	    return e;
	}
	
	return requestCrawl;
}

var getActorLikes = {};

var hasRequiredGetActorLikes;

function requireGetActorLikes () {
	if (hasRequiredGetActorLikes) return getActorLikes;
	hasRequiredGetActorLikes = 1;
	Object.defineProperty(getActorLikes, "__esModule", { value: true });
	getActorLikes.BlockedByActorError = getActorLikes.BlockedActorError = void 0;
	getActorLikes.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BlockedActorError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getActorLikes.BlockedActorError = BlockedActorError;
	class BlockedByActorError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getActorLikes.BlockedByActorError = BlockedByActorError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BlockedActor')
	            return new BlockedActorError(e);
	        if (e.error === 'BlockedByActor')
	            return new BlockedByActorError(e);
	    }
	    return e;
	}
	
	return getActorLikes;
}

var getAuthorFeed = {};

var hasRequiredGetAuthorFeed;

function requireGetAuthorFeed () {
	if (hasRequiredGetAuthorFeed) return getAuthorFeed;
	hasRequiredGetAuthorFeed = 1;
	Object.defineProperty(getAuthorFeed, "__esModule", { value: true });
	getAuthorFeed.BlockedByActorError = getAuthorFeed.BlockedActorError = void 0;
	getAuthorFeed.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BlockedActorError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getAuthorFeed.BlockedActorError = BlockedActorError;
	class BlockedByActorError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getAuthorFeed.BlockedByActorError = BlockedByActorError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BlockedActor')
	            return new BlockedActorError(e);
	        if (e.error === 'BlockedByActor')
	            return new BlockedByActorError(e);
	    }
	    return e;
	}
	
	return getAuthorFeed;
}

var getFeed = {};

var hasRequiredGetFeed;

function requireGetFeed () {
	if (hasRequiredGetFeed) return getFeed;
	hasRequiredGetFeed = 1;
	Object.defineProperty(getFeed, "__esModule", { value: true });
	getFeed.UnknownFeedError = void 0;
	getFeed.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class UnknownFeedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getFeed.UnknownFeedError = UnknownFeedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'UnknownFeed')
	            return new UnknownFeedError(e);
	    }
	    return e;
	}
	
	return getFeed;
}

var getFeedSkeleton = {};

var hasRequiredGetFeedSkeleton;

function requireGetFeedSkeleton () {
	if (hasRequiredGetFeedSkeleton) return getFeedSkeleton;
	hasRequiredGetFeedSkeleton = 1;
	Object.defineProperty(getFeedSkeleton, "__esModule", { value: true });
	getFeedSkeleton.UnknownFeedError = void 0;
	getFeedSkeleton.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class UnknownFeedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getFeedSkeleton.UnknownFeedError = UnknownFeedError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'UnknownFeed')
	            return new UnknownFeedError(e);
	    }
	    return e;
	}
	
	return getFeedSkeleton;
}

var getListFeed = {};

var hasRequiredGetListFeed;

function requireGetListFeed () {
	if (hasRequiredGetListFeed) return getListFeed;
	hasRequiredGetListFeed = 1;
	Object.defineProperty(getListFeed, "__esModule", { value: true });
	getListFeed.UnknownListError = void 0;
	getListFeed.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class UnknownListError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getListFeed.UnknownListError = UnknownListError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'UnknownList')
	            return new UnknownListError(e);
	    }
	    return e;
	}
	
	return getListFeed;
}

var getPostThread = {};

var hasRequiredGetPostThread;

function requireGetPostThread () {
	if (hasRequiredGetPostThread) return getPostThread;
	hasRequiredGetPostThread = 1;
	Object.defineProperty(getPostThread, "__esModule", { value: true });
	getPostThread.NotFoundError = void 0;
	getPostThread.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class NotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getPostThread.NotFoundError = NotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'NotFound')
	            return new NotFoundError(e);
	    }
	    return e;
	}
	
	return getPostThread;
}

var searchPosts = {};

var hasRequiredSearchPosts;

function requireSearchPosts () {
	if (hasRequiredSearchPosts) return searchPosts;
	hasRequiredSearchPosts = 1;
	Object.defineProperty(searchPosts, "__esModule", { value: true });
	searchPosts.BadQueryStringError = void 0;
	searchPosts.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BadQueryStringError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	searchPosts.BadQueryStringError = BadQueryStringError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BadQueryString')
	            return new BadQueryStringError(e);
	    }
	    return e;
	}
	
	return searchPosts;
}

var getRelationships = {};

var hasRequiredGetRelationships;

function requireGetRelationships () {
	if (hasRequiredGetRelationships) return getRelationships;
	hasRequiredGetRelationships = 1;
	Object.defineProperty(getRelationships, "__esModule", { value: true });
	getRelationships.ActorNotFoundError = void 0;
	getRelationships.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class ActorNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRelationships.ActorNotFoundError = ActorNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'ActorNotFound')
	            return new ActorNotFoundError(e);
	    }
	    return e;
	}
	
	return getRelationships;
}

var searchActorsSkeleton = {};

var hasRequiredSearchActorsSkeleton;

function requireSearchActorsSkeleton () {
	if (hasRequiredSearchActorsSkeleton) return searchActorsSkeleton;
	hasRequiredSearchActorsSkeleton = 1;
	Object.defineProperty(searchActorsSkeleton, "__esModule", { value: true });
	searchActorsSkeleton.BadQueryStringError = void 0;
	searchActorsSkeleton.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BadQueryStringError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	searchActorsSkeleton.BadQueryStringError = BadQueryStringError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BadQueryString')
	            return new BadQueryStringError(e);
	    }
	    return e;
	}
	
	return searchActorsSkeleton;
}

var searchPostsSkeleton = {};

var hasRequiredSearchPostsSkeleton;

function requireSearchPostsSkeleton () {
	if (hasRequiredSearchPostsSkeleton) return searchPostsSkeleton;
	hasRequiredSearchPostsSkeleton = 1;
	Object.defineProperty(searchPostsSkeleton, "__esModule", { value: true });
	searchPostsSkeleton.BadQueryStringError = void 0;
	searchPostsSkeleton.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BadQueryStringError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	searchPostsSkeleton.BadQueryStringError = BadQueryStringError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BadQueryString')
	            return new BadQueryStringError(e);
	    }
	    return e;
	}
	
	return searchPostsSkeleton;
}

var searchStarterPacksSkeleton = {};

var hasRequiredSearchStarterPacksSkeleton;

function requireSearchStarterPacksSkeleton () {
	if (hasRequiredSearchStarterPacksSkeleton) return searchStarterPacksSkeleton;
	hasRequiredSearchStarterPacksSkeleton = 1;
	Object.defineProperty(searchStarterPacksSkeleton, "__esModule", { value: true });
	searchStarterPacksSkeleton.BadQueryStringError = void 0;
	searchStarterPacksSkeleton.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class BadQueryStringError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	searchStarterPacksSkeleton.BadQueryStringError = BadQueryStringError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'BadQueryString')
	            return new BadQueryStringError(e);
	    }
	    return e;
	}
	
	return searchStarterPacksSkeleton;
}

var addReaction = {};

var hasRequiredAddReaction;

function requireAddReaction () {
	if (hasRequiredAddReaction) return addReaction;
	hasRequiredAddReaction = 1;
	Object.defineProperty(addReaction, "__esModule", { value: true });
	addReaction.ReactionInvalidValueError = addReaction.ReactionLimitReachedError = addReaction.ReactionMessageDeletedError = void 0;
	addReaction.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class ReactionMessageDeletedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	addReaction.ReactionMessageDeletedError = ReactionMessageDeletedError;
	class ReactionLimitReachedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	addReaction.ReactionLimitReachedError = ReactionLimitReachedError;
	class ReactionInvalidValueError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	addReaction.ReactionInvalidValueError = ReactionInvalidValueError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'ReactionMessageDeleted')
	            return new ReactionMessageDeletedError(e);
	        if (e.error === 'ReactionLimitReached')
	            return new ReactionLimitReachedError(e);
	        if (e.error === 'ReactionInvalidValue')
	            return new ReactionInvalidValueError(e);
	    }
	    return e;
	}
	
	return addReaction;
}

var removeReaction = {};

var hasRequiredRemoveReaction;

function requireRemoveReaction () {
	if (hasRequiredRemoveReaction) return removeReaction;
	hasRequiredRemoveReaction = 1;
	Object.defineProperty(removeReaction, "__esModule", { value: true });
	removeReaction.ReactionInvalidValueError = removeReaction.ReactionMessageDeletedError = void 0;
	removeReaction.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class ReactionMessageDeletedError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	removeReaction.ReactionMessageDeletedError = ReactionMessageDeletedError;
	class ReactionInvalidValueError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	removeReaction.ReactionInvalidValueError = ReactionInvalidValueError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'ReactionMessageDeleted')
	            return new ReactionMessageDeletedError(e);
	        if (e.error === 'ReactionInvalidValue')
	            return new ReactionInvalidValueError(e);
	    }
	    return e;
	}
	
	return removeReaction;
}

var createTemplate = {};

var hasRequiredCreateTemplate;

function requireCreateTemplate () {
	if (hasRequiredCreateTemplate) return createTemplate;
	hasRequiredCreateTemplate = 1;
	Object.defineProperty(createTemplate, "__esModule", { value: true });
	createTemplate.DuplicateTemplateNameError = void 0;
	createTemplate.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class DuplicateTemplateNameError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	createTemplate.DuplicateTemplateNameError = DuplicateTemplateNameError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'DuplicateTemplateName')
	            return new DuplicateTemplateNameError(e);
	    }
	    return e;
	}
	
	return createTemplate;
}

var updateTemplate = {};

var hasRequiredUpdateTemplate;

function requireUpdateTemplate () {
	if (hasRequiredUpdateTemplate) return updateTemplate;
	hasRequiredUpdateTemplate = 1;
	Object.defineProperty(updateTemplate, "__esModule", { value: true });
	updateTemplate.DuplicateTemplateNameError = void 0;
	updateTemplate.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class DuplicateTemplateNameError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	updateTemplate.DuplicateTemplateNameError = DuplicateTemplateNameError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'DuplicateTemplateName')
	            return new DuplicateTemplateNameError(e);
	    }
	    return e;
	}
	
	return updateTemplate;
}

var emitEvent = {};

var hasRequiredEmitEvent;

function requireEmitEvent () {
	if (hasRequiredEmitEvent) return emitEvent;
	hasRequiredEmitEvent = 1;
	Object.defineProperty(emitEvent, "__esModule", { value: true });
	emitEvent.SubjectHasActionError = void 0;
	emitEvent.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class SubjectHasActionError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	emitEvent.SubjectHasActionError = SubjectHasActionError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'SubjectHasAction')
	            return new SubjectHasActionError(e);
	    }
	    return e;
	}
	
	return emitEvent;
}

var getRecord = {};

var hasRequiredGetRecord;

function requireGetRecord () {
	if (hasRequiredGetRecord) return getRecord;
	hasRequiredGetRecord = 1;
	Object.defineProperty(getRecord, "__esModule", { value: true });
	getRecord.RecordNotFoundError = void 0;
	getRecord.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RecordNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRecord.RecordNotFoundError = RecordNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RecordNotFound')
	            return new RecordNotFoundError(e);
	    }
	    return e;
	}
	
	return getRecord;
}

var getRepo = {};

var hasRequiredGetRepo;

function requireGetRepo () {
	if (hasRequiredGetRepo) return getRepo;
	hasRequiredGetRepo = 1;
	Object.defineProperty(getRepo, "__esModule", { value: true });
	getRepo.RepoNotFoundError = void 0;
	getRepo.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class RepoNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getRepo.RepoNotFoundError = RepoNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'RepoNotFound')
	            return new RepoNotFoundError(e);
	    }
	    return e;
	}
	
	return getRepo;
}

var deleteSet = {};

var hasRequiredDeleteSet;

function requireDeleteSet () {
	if (hasRequiredDeleteSet) return deleteSet;
	hasRequiredDeleteSet = 1;
	Object.defineProperty(deleteSet, "__esModule", { value: true });
	deleteSet.SetNotFoundError = void 0;
	deleteSet.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class SetNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteSet.SetNotFoundError = SetNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'SetNotFound')
	            return new SetNotFoundError(e);
	    }
	    return e;
	}
	
	return deleteSet;
}

var deleteValues = {};

var hasRequiredDeleteValues;

function requireDeleteValues () {
	if (hasRequiredDeleteValues) return deleteValues;
	hasRequiredDeleteValues = 1;
	Object.defineProperty(deleteValues, "__esModule", { value: true });
	deleteValues.SetNotFoundError = void 0;
	deleteValues.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class SetNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteValues.SetNotFoundError = SetNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'SetNotFound')
	            return new SetNotFoundError(e);
	    }
	    return e;
	}
	
	return deleteValues;
}

var getValues = {};

var hasRequiredGetValues;

function requireGetValues () {
	if (hasRequiredGetValues) return getValues;
	hasRequiredGetValues = 1;
	Object.defineProperty(getValues, "__esModule", { value: true });
	getValues.SetNotFoundError = void 0;
	getValues.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class SetNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	getValues.SetNotFoundError = SetNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'SetNotFound')
	            return new SetNotFoundError(e);
	    }
	    return e;
	}
	
	return getValues;
}

var addMember = {};

var hasRequiredAddMember;

function requireAddMember () {
	if (hasRequiredAddMember) return addMember;
	hasRequiredAddMember = 1;
	Object.defineProperty(addMember, "__esModule", { value: true });
	addMember.MemberAlreadyExistsError = void 0;
	addMember.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class MemberAlreadyExistsError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	addMember.MemberAlreadyExistsError = MemberAlreadyExistsError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'MemberAlreadyExists')
	            return new MemberAlreadyExistsError(e);
	    }
	    return e;
	}
	
	return addMember;
}

var deleteMember = {};

var hasRequiredDeleteMember;

function requireDeleteMember () {
	if (hasRequiredDeleteMember) return deleteMember;
	hasRequiredDeleteMember = 1;
	Object.defineProperty(deleteMember, "__esModule", { value: true });
	deleteMember.CannotDeleteSelfError = deleteMember.MemberNotFoundError = void 0;
	deleteMember.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class MemberNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteMember.MemberNotFoundError = MemberNotFoundError;
	class CannotDeleteSelfError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	deleteMember.CannotDeleteSelfError = CannotDeleteSelfError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'MemberNotFound')
	            return new MemberNotFoundError(e);
	        if (e.error === 'CannotDeleteSelf')
	            return new CannotDeleteSelfError(e);
	    }
	    return e;
	}
	
	return deleteMember;
}

var updateMember = {};

var hasRequiredUpdateMember;

function requireUpdateMember () {
	if (hasRequiredUpdateMember) return updateMember;
	hasRequiredUpdateMember = 1;
	Object.defineProperty(updateMember, "__esModule", { value: true });
	updateMember.MemberNotFoundError = void 0;
	updateMember.toKnownErr = toKnownErr;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	class MemberNotFoundError extends xrpc_1.XRPCError {
	    constructor(src) {
	        super(src.status, src.error, src.message, src.headers, { cause: src });
	    }
	}
	updateMember.MemberNotFoundError = MemberNotFoundError;
	function toKnownErr(e) {
	    if (e instanceof xrpc_1.XRPCError) {
	        if (e.error === 'MemberNotFound')
	            return new MemberNotFoundError(e);
	    }
	    return e;
	}
	
	return updateMember;
}

var defs$n = {};

var hasRequiredDefs$n;

function requireDefs$n () {
	if (hasRequiredDefs$n) return defs$n;
	hasRequiredDefs$n = 1;
	Object.defineProperty(defs$n, "__esModule", { value: true });
	defs$n.isStatusAttr = isStatusAttr;
	defs$n.validateStatusAttr = validateStatusAttr;
	defs$n.isAccountView = isAccountView;
	defs$n.validateAccountView = validateAccountView;
	defs$n.isRepoRef = isRepoRef;
	defs$n.validateRepoRef = validateRepoRef;
	defs$n.isRepoBlobRef = isRepoBlobRef;
	defs$n.validateRepoBlobRef = validateRepoBlobRef;
	defs$n.isThreatSignature = isThreatSignature;
	defs$n.validateThreatSignature = validateThreatSignature;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.admin.defs';
	const hashStatusAttr = 'statusAttr';
	function isStatusAttr(v) {
	    return is$typed(v, id, hashStatusAttr);
	}
	function validateStatusAttr(v) {
	    return validate(v, id, hashStatusAttr);
	}
	const hashAccountView = 'accountView';
	function isAccountView(v) {
	    return is$typed(v, id, hashAccountView);
	}
	function validateAccountView(v) {
	    return validate(v, id, hashAccountView);
	}
	const hashRepoRef = 'repoRef';
	function isRepoRef(v) {
	    return is$typed(v, id, hashRepoRef);
	}
	function validateRepoRef(v) {
	    return validate(v, id, hashRepoRef);
	}
	const hashRepoBlobRef = 'repoBlobRef';
	function isRepoBlobRef(v) {
	    return is$typed(v, id, hashRepoBlobRef);
	}
	function validateRepoBlobRef(v) {
	    return validate(v, id, hashRepoBlobRef);
	}
	const hashThreatSignature = 'threatSignature';
	function isThreatSignature(v) {
	    return is$typed(v, id, hashThreatSignature);
	}
	function validateThreatSignature(v) {
	    return validate(v, id, hashThreatSignature);
	}
	
	return defs$n;
}

var deleteAccount$1 = {};

var hasRequiredDeleteAccount$1;

function requireDeleteAccount$1 () {
	if (hasRequiredDeleteAccount$1) return deleteAccount$1;
	hasRequiredDeleteAccount$1 = 1;
	Object.defineProperty(deleteAccount$1, "__esModule", { value: true });
	deleteAccount$1.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return deleteAccount$1;
}

var disableAccountInvites = {};

var hasRequiredDisableAccountInvites;

function requireDisableAccountInvites () {
	if (hasRequiredDisableAccountInvites) return disableAccountInvites;
	hasRequiredDisableAccountInvites = 1;
	Object.defineProperty(disableAccountInvites, "__esModule", { value: true });
	disableAccountInvites.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return disableAccountInvites;
}

var disableInviteCodes = {};

var hasRequiredDisableInviteCodes;

function requireDisableInviteCodes () {
	if (hasRequiredDisableInviteCodes) return disableInviteCodes;
	hasRequiredDisableInviteCodes = 1;
	Object.defineProperty(disableInviteCodes, "__esModule", { value: true });
	disableInviteCodes.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return disableInviteCodes;
}

var enableAccountInvites = {};

var hasRequiredEnableAccountInvites;

function requireEnableAccountInvites () {
	if (hasRequiredEnableAccountInvites) return enableAccountInvites;
	hasRequiredEnableAccountInvites = 1;
	Object.defineProperty(enableAccountInvites, "__esModule", { value: true });
	enableAccountInvites.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return enableAccountInvites;
}

var getAccountInfo = {};

var hasRequiredGetAccountInfo;

function requireGetAccountInfo () {
	if (hasRequiredGetAccountInfo) return getAccountInfo;
	hasRequiredGetAccountInfo = 1;
	Object.defineProperty(getAccountInfo, "__esModule", { value: true });
	getAccountInfo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getAccountInfo;
}

var getAccountInfos = {};

var hasRequiredGetAccountInfos;

function requireGetAccountInfos () {
	if (hasRequiredGetAccountInfos) return getAccountInfos;
	hasRequiredGetAccountInfos = 1;
	Object.defineProperty(getAccountInfos, "__esModule", { value: true });
	getAccountInfos.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getAccountInfos;
}

var getInviteCodes = {};

var hasRequiredGetInviteCodes;

function requireGetInviteCodes () {
	if (hasRequiredGetInviteCodes) return getInviteCodes;
	hasRequiredGetInviteCodes = 1;
	Object.defineProperty(getInviteCodes, "__esModule", { value: true });
	getInviteCodes.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getInviteCodes;
}

var getSubjectStatus = {};

var hasRequiredGetSubjectStatus;

function requireGetSubjectStatus () {
	if (hasRequiredGetSubjectStatus) return getSubjectStatus;
	hasRequiredGetSubjectStatus = 1;
	Object.defineProperty(getSubjectStatus, "__esModule", { value: true });
	getSubjectStatus.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSubjectStatus;
}

var searchAccounts$1 = {};

var hasRequiredSearchAccounts$1;

function requireSearchAccounts$1 () {
	if (hasRequiredSearchAccounts$1) return searchAccounts$1;
	hasRequiredSearchAccounts$1 = 1;
	Object.defineProperty(searchAccounts$1, "__esModule", { value: true });
	searchAccounts$1.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return searchAccounts$1;
}

var sendEmail = {};

var hasRequiredSendEmail;

function requireSendEmail () {
	if (hasRequiredSendEmail) return sendEmail;
	hasRequiredSendEmail = 1;
	Object.defineProperty(sendEmail, "__esModule", { value: true });
	sendEmail.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return sendEmail;
}

var updateAccountEmail = {};

var hasRequiredUpdateAccountEmail;

function requireUpdateAccountEmail () {
	if (hasRequiredUpdateAccountEmail) return updateAccountEmail;
	hasRequiredUpdateAccountEmail = 1;
	Object.defineProperty(updateAccountEmail, "__esModule", { value: true });
	updateAccountEmail.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateAccountEmail;
}

var updateAccountHandle = {};

var hasRequiredUpdateAccountHandle;

function requireUpdateAccountHandle () {
	if (hasRequiredUpdateAccountHandle) return updateAccountHandle;
	hasRequiredUpdateAccountHandle = 1;
	Object.defineProperty(updateAccountHandle, "__esModule", { value: true });
	updateAccountHandle.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateAccountHandle;
}

var updateAccountPassword = {};

var hasRequiredUpdateAccountPassword;

function requireUpdateAccountPassword () {
	if (hasRequiredUpdateAccountPassword) return updateAccountPassword;
	hasRequiredUpdateAccountPassword = 1;
	Object.defineProperty(updateAccountPassword, "__esModule", { value: true });
	updateAccountPassword.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateAccountPassword;
}

var updateAccountSigningKey = {};

var hasRequiredUpdateAccountSigningKey;

function requireUpdateAccountSigningKey () {
	if (hasRequiredUpdateAccountSigningKey) return updateAccountSigningKey;
	hasRequiredUpdateAccountSigningKey = 1;
	Object.defineProperty(updateAccountSigningKey, "__esModule", { value: true });
	updateAccountSigningKey.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateAccountSigningKey;
}

var updateSubjectStatus = {};

var hasRequiredUpdateSubjectStatus;

function requireUpdateSubjectStatus () {
	if (hasRequiredUpdateSubjectStatus) return updateSubjectStatus;
	hasRequiredUpdateSubjectStatus = 1;
	Object.defineProperty(updateSubjectStatus, "__esModule", { value: true });
	updateSubjectStatus.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateSubjectStatus;
}

var defs$m = {};

var hasRequiredDefs$m;

function requireDefs$m () {
	if (hasRequiredDefs$m) return defs$m;
	hasRequiredDefs$m = 1;
	Object.defineProperty(defs$m, "__esModule", { value: true });
	defs$m.isIdentityInfo = isIdentityInfo;
	defs$m.validateIdentityInfo = validateIdentityInfo;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.identity.defs';
	const hashIdentityInfo = 'identityInfo';
	function isIdentityInfo(v) {
	    return is$typed(v, id, hashIdentityInfo);
	}
	function validateIdentityInfo(v) {
	    return validate(v, id, hashIdentityInfo);
	}
	
	return defs$m;
}

var getRecommendedDidCredentials = {};

var hasRequiredGetRecommendedDidCredentials;

function requireGetRecommendedDidCredentials () {
	if (hasRequiredGetRecommendedDidCredentials) return getRecommendedDidCredentials;
	hasRequiredGetRecommendedDidCredentials = 1;
	Object.defineProperty(getRecommendedDidCredentials, "__esModule", { value: true });
	getRecommendedDidCredentials.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getRecommendedDidCredentials;
}

var requestPlcOperationSignature = {};

var hasRequiredRequestPlcOperationSignature;

function requireRequestPlcOperationSignature () {
	if (hasRequiredRequestPlcOperationSignature) return requestPlcOperationSignature;
	hasRequiredRequestPlcOperationSignature = 1;
	Object.defineProperty(requestPlcOperationSignature, "__esModule", { value: true });
	requestPlcOperationSignature.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return requestPlcOperationSignature;
}

var signPlcOperation = {};

var hasRequiredSignPlcOperation;

function requireSignPlcOperation () {
	if (hasRequiredSignPlcOperation) return signPlcOperation;
	hasRequiredSignPlcOperation = 1;
	Object.defineProperty(signPlcOperation, "__esModule", { value: true });
	signPlcOperation.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return signPlcOperation;
}

var submitPlcOperation = {};

var hasRequiredSubmitPlcOperation;

function requireSubmitPlcOperation () {
	if (hasRequiredSubmitPlcOperation) return submitPlcOperation;
	hasRequiredSubmitPlcOperation = 1;
	Object.defineProperty(submitPlcOperation, "__esModule", { value: true });
	submitPlcOperation.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return submitPlcOperation;
}

var updateHandle = {};

var hasRequiredUpdateHandle;

function requireUpdateHandle () {
	if (hasRequiredUpdateHandle) return updateHandle;
	hasRequiredUpdateHandle = 1;
	Object.defineProperty(updateHandle, "__esModule", { value: true });
	updateHandle.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateHandle;
}

var defs$l = {};

var hasRequiredDefs$l;

function requireDefs$l () {
	if (hasRequiredDefs$l) return defs$l;
	hasRequiredDefs$l = 1;
	Object.defineProperty(defs$l, "__esModule", { value: true });
	defs$l.isLabel = isLabel;
	defs$l.validateLabel = validateLabel;
	defs$l.isSelfLabels = isSelfLabels;
	defs$l.validateSelfLabels = validateSelfLabels;
	defs$l.isSelfLabel = isSelfLabel;
	defs$l.validateSelfLabel = validateSelfLabel;
	defs$l.isLabelValueDefinition = isLabelValueDefinition;
	defs$l.validateLabelValueDefinition = validateLabelValueDefinition;
	defs$l.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
	defs$l.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.label.defs';
	const hashLabel = 'label';
	function isLabel(v) {
	    return is$typed(v, id, hashLabel);
	}
	function validateLabel(v) {
	    return validate(v, id, hashLabel);
	}
	const hashSelfLabels = 'selfLabels';
	function isSelfLabels(v) {
	    return is$typed(v, id, hashSelfLabels);
	}
	function validateSelfLabels(v) {
	    return validate(v, id, hashSelfLabels);
	}
	const hashSelfLabel = 'selfLabel';
	function isSelfLabel(v) {
	    return is$typed(v, id, hashSelfLabel);
	}
	function validateSelfLabel(v) {
	    return validate(v, id, hashSelfLabel);
	}
	const hashLabelValueDefinition = 'labelValueDefinition';
	function isLabelValueDefinition(v) {
	    return is$typed(v, id, hashLabelValueDefinition);
	}
	function validateLabelValueDefinition(v) {
	    return validate(v, id, hashLabelValueDefinition);
	}
	const hashLabelValueDefinitionStrings = 'labelValueDefinitionStrings';
	function isLabelValueDefinitionStrings(v) {
	    return is$typed(v, id, hashLabelValueDefinitionStrings);
	}
	function validateLabelValueDefinitionStrings(v) {
	    return validate(v, id, hashLabelValueDefinitionStrings);
	}
	
	return defs$l;
}

var queryLabels = {};

var hasRequiredQueryLabels;

function requireQueryLabels () {
	if (hasRequiredQueryLabels) return queryLabels;
	hasRequiredQueryLabels = 1;
	Object.defineProperty(queryLabels, "__esModule", { value: true });
	queryLabels.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return queryLabels;
}

var subscribeLabels = {};

var hasRequiredSubscribeLabels;

function requireSubscribeLabels () {
	if (hasRequiredSubscribeLabels) return subscribeLabels;
	hasRequiredSubscribeLabels = 1;
	Object.defineProperty(subscribeLabels, "__esModule", { value: true });
	subscribeLabels.isLabels = isLabels;
	subscribeLabels.validateLabels = validateLabels;
	subscribeLabels.isInfo = isInfo;
	subscribeLabels.validateInfo = validateInfo;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.label.subscribeLabels';
	const hashLabels = 'labels';
	function isLabels(v) {
	    return is$typed(v, id, hashLabels);
	}
	function validateLabels(v) {
	    return validate(v, id, hashLabels);
	}
	const hashInfo = 'info';
	function isInfo(v) {
	    return is$typed(v, id, hashInfo);
	}
	function validateInfo(v) {
	    return validate(v, id, hashInfo);
	}
	
	return subscribeLabels;
}

var schema = {};

var hasRequiredSchema;

function requireSchema () {
	if (hasRequiredSchema) return schema;
	hasRequiredSchema = 1;
	Object.defineProperty(schema, "__esModule", { value: true });
	schema.isRecord = isRecord;
	schema.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.lexicon.schema';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return schema;
}

var createReport = {};

var hasRequiredCreateReport;

function requireCreateReport () {
	if (hasRequiredCreateReport) return createReport;
	hasRequiredCreateReport = 1;
	Object.defineProperty(createReport, "__esModule", { value: true });
	createReport.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return createReport;
}

var defs$k = {};

var hasRequiredDefs$k;

function requireDefs$k () {
	if (hasRequiredDefs$k) return defs$k;
	hasRequiredDefs$k = 1;
	Object.defineProperty(defs$k, "__esModule", { value: true });
	defs$k.REASONAPPEAL = defs$k.REASONOTHER = defs$k.REASONRUDE = defs$k.REASONSEXUAL = defs$k.REASONMISLEADING = defs$k.REASONVIOLATION = defs$k.REASONSPAM = void 0;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	const id = 'com.atproto.moderation.defs';
	/** Spam: frequent unwanted promotion, replies, mentions */
	defs$k.REASONSPAM = `${id}#reasonSpam`;
	/** Direct violation of server rules, laws, terms of service */
	defs$k.REASONVIOLATION = `${id}#reasonViolation`;
	/** Misleading identity, affiliation, or content */
	defs$k.REASONMISLEADING = `${id}#reasonMisleading`;
	/** Unwanted or mislabeled sexual content */
	defs$k.REASONSEXUAL = `${id}#reasonSexual`;
	/** Rude, harassing, explicit, or otherwise unwelcoming behavior */
	defs$k.REASONRUDE = `${id}#reasonRude`;
	/** Other: reports not falling under another report category */
	defs$k.REASONOTHER = `${id}#reasonOther`;
	/** Appeal: appeal a previously taken moderation action */
	defs$k.REASONAPPEAL = `${id}#reasonAppeal`;
	
	return defs$k;
}

var defs$j = {};

var hasRequiredDefs$j;

function requireDefs$j () {
	if (hasRequiredDefs$j) return defs$j;
	hasRequiredDefs$j = 1;
	Object.defineProperty(defs$j, "__esModule", { value: true });
	defs$j.isCommitMeta = isCommitMeta;
	defs$j.validateCommitMeta = validateCommitMeta;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.repo.defs';
	const hashCommitMeta = 'commitMeta';
	function isCommitMeta(v) {
	    return is$typed(v, id, hashCommitMeta);
	}
	function validateCommitMeta(v) {
	    return validate(v, id, hashCommitMeta);
	}
	
	return defs$j;
}

var describeRepo = {};

var hasRequiredDescribeRepo;

function requireDescribeRepo () {
	if (hasRequiredDescribeRepo) return describeRepo;
	hasRequiredDescribeRepo = 1;
	Object.defineProperty(describeRepo, "__esModule", { value: true });
	describeRepo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return describeRepo;
}

var importRepo = {};

var hasRequiredImportRepo;

function requireImportRepo () {
	if (hasRequiredImportRepo) return importRepo;
	hasRequiredImportRepo = 1;
	Object.defineProperty(importRepo, "__esModule", { value: true });
	importRepo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return importRepo;
}

var listMissingBlobs = {};

var hasRequiredListMissingBlobs;

function requireListMissingBlobs () {
	if (hasRequiredListMissingBlobs) return listMissingBlobs;
	hasRequiredListMissingBlobs = 1;
	Object.defineProperty(listMissingBlobs, "__esModule", { value: true });
	listMissingBlobs.toKnownErr = toKnownErr;
	listMissingBlobs.isRecordBlob = isRecordBlob;
	listMissingBlobs.validateRecordBlob = validateRecordBlob;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.repo.listMissingBlobs';
	function toKnownErr(e) {
	    return e;
	}
	const hashRecordBlob = 'recordBlob';
	function isRecordBlob(v) {
	    return is$typed(v, id, hashRecordBlob);
	}
	function validateRecordBlob(v) {
	    return validate(v, id, hashRecordBlob);
	}
	
	return listMissingBlobs;
}

var listRecords = {};

var hasRequiredListRecords;

function requireListRecords () {
	if (hasRequiredListRecords) return listRecords;
	hasRequiredListRecords = 1;
	Object.defineProperty(listRecords, "__esModule", { value: true });
	listRecords.toKnownErr = toKnownErr;
	listRecords.isRecord = isRecord;
	listRecords.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.repo.listRecords';
	function toKnownErr(e) {
	    return e;
	}
	const hashRecord = 'record';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord);
	}
	
	return listRecords;
}

var strongRef = {};

var hasRequiredStrongRef;

function requireStrongRef () {
	if (hasRequiredStrongRef) return strongRef;
	hasRequiredStrongRef = 1;
	Object.defineProperty(strongRef, "__esModule", { value: true });
	strongRef.isMain = isMain;
	strongRef.validateMain = validateMain;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.repo.strongRef';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	
	return strongRef;
}

var uploadBlob = {};

var hasRequiredUploadBlob;

function requireUploadBlob () {
	if (hasRequiredUploadBlob) return uploadBlob;
	hasRequiredUploadBlob = 1;
	Object.defineProperty(uploadBlob, "__esModule", { value: true });
	uploadBlob.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return uploadBlob;
}

var activateAccount = {};

var hasRequiredActivateAccount;

function requireActivateAccount () {
	if (hasRequiredActivateAccount) return activateAccount;
	hasRequiredActivateAccount = 1;
	Object.defineProperty(activateAccount, "__esModule", { value: true });
	activateAccount.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return activateAccount;
}

var checkAccountStatus = {};

var hasRequiredCheckAccountStatus;

function requireCheckAccountStatus () {
	if (hasRequiredCheckAccountStatus) return checkAccountStatus;
	hasRequiredCheckAccountStatus = 1;
	Object.defineProperty(checkAccountStatus, "__esModule", { value: true });
	checkAccountStatus.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return checkAccountStatus;
}

var createInviteCode = {};

var hasRequiredCreateInviteCode;

function requireCreateInviteCode () {
	if (hasRequiredCreateInviteCode) return createInviteCode;
	hasRequiredCreateInviteCode = 1;
	Object.defineProperty(createInviteCode, "__esModule", { value: true });
	createInviteCode.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return createInviteCode;
}

var createInviteCodes = {};

var hasRequiredCreateInviteCodes;

function requireCreateInviteCodes () {
	if (hasRequiredCreateInviteCodes) return createInviteCodes;
	hasRequiredCreateInviteCodes = 1;
	Object.defineProperty(createInviteCodes, "__esModule", { value: true });
	createInviteCodes.toKnownErr = toKnownErr;
	createInviteCodes.isAccountCodes = isAccountCodes;
	createInviteCodes.validateAccountCodes = validateAccountCodes;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.server.createInviteCodes';
	function toKnownErr(e) {
	    return e;
	}
	const hashAccountCodes = 'accountCodes';
	function isAccountCodes(v) {
	    return is$typed(v, id, hashAccountCodes);
	}
	function validateAccountCodes(v) {
	    return validate(v, id, hashAccountCodes);
	}
	
	return createInviteCodes;
}

var deactivateAccount = {};

var hasRequiredDeactivateAccount;

function requireDeactivateAccount () {
	if (hasRequiredDeactivateAccount) return deactivateAccount;
	hasRequiredDeactivateAccount = 1;
	Object.defineProperty(deactivateAccount, "__esModule", { value: true });
	deactivateAccount.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return deactivateAccount;
}

var defs$i = {};

var hasRequiredDefs$i;

function requireDefs$i () {
	if (hasRequiredDefs$i) return defs$i;
	hasRequiredDefs$i = 1;
	Object.defineProperty(defs$i, "__esModule", { value: true });
	defs$i.isInviteCode = isInviteCode;
	defs$i.validateInviteCode = validateInviteCode;
	defs$i.isInviteCodeUse = isInviteCodeUse;
	defs$i.validateInviteCodeUse = validateInviteCodeUse;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.server.defs';
	const hashInviteCode = 'inviteCode';
	function isInviteCode(v) {
	    return is$typed(v, id, hashInviteCode);
	}
	function validateInviteCode(v) {
	    return validate(v, id, hashInviteCode);
	}
	const hashInviteCodeUse = 'inviteCodeUse';
	function isInviteCodeUse(v) {
	    return is$typed(v, id, hashInviteCodeUse);
	}
	function validateInviteCodeUse(v) {
	    return validate(v, id, hashInviteCodeUse);
	}
	
	return defs$i;
}

var deleteSession = {};

var hasRequiredDeleteSession;

function requireDeleteSession () {
	if (hasRequiredDeleteSession) return deleteSession;
	hasRequiredDeleteSession = 1;
	Object.defineProperty(deleteSession, "__esModule", { value: true });
	deleteSession.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return deleteSession;
}

var describeServer = {};

var hasRequiredDescribeServer;

function requireDescribeServer () {
	if (hasRequiredDescribeServer) return describeServer;
	hasRequiredDescribeServer = 1;
	Object.defineProperty(describeServer, "__esModule", { value: true });
	describeServer.toKnownErr = toKnownErr;
	describeServer.isLinks = isLinks;
	describeServer.validateLinks = validateLinks;
	describeServer.isContact = isContact;
	describeServer.validateContact = validateContact;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.server.describeServer';
	function toKnownErr(e) {
	    return e;
	}
	const hashLinks = 'links';
	function isLinks(v) {
	    return is$typed(v, id, hashLinks);
	}
	function validateLinks(v) {
	    return validate(v, id, hashLinks);
	}
	const hashContact = 'contact';
	function isContact(v) {
	    return is$typed(v, id, hashContact);
	}
	function validateContact(v) {
	    return validate(v, id, hashContact);
	}
	
	return describeServer;
}

var getSession = {};

var hasRequiredGetSession;

function requireGetSession () {
	if (hasRequiredGetSession) return getSession;
	hasRequiredGetSession = 1;
	Object.defineProperty(getSession, "__esModule", { value: true });
	getSession.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSession;
}

var requestAccountDelete = {};

var hasRequiredRequestAccountDelete;

function requireRequestAccountDelete () {
	if (hasRequiredRequestAccountDelete) return requestAccountDelete;
	hasRequiredRequestAccountDelete = 1;
	Object.defineProperty(requestAccountDelete, "__esModule", { value: true });
	requestAccountDelete.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return requestAccountDelete;
}

var requestEmailConfirmation = {};

var hasRequiredRequestEmailConfirmation;

function requireRequestEmailConfirmation () {
	if (hasRequiredRequestEmailConfirmation) return requestEmailConfirmation;
	hasRequiredRequestEmailConfirmation = 1;
	Object.defineProperty(requestEmailConfirmation, "__esModule", { value: true });
	requestEmailConfirmation.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return requestEmailConfirmation;
}

var requestEmailUpdate = {};

var hasRequiredRequestEmailUpdate;

function requireRequestEmailUpdate () {
	if (hasRequiredRequestEmailUpdate) return requestEmailUpdate;
	hasRequiredRequestEmailUpdate = 1;
	Object.defineProperty(requestEmailUpdate, "__esModule", { value: true });
	requestEmailUpdate.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return requestEmailUpdate;
}

var requestPasswordReset = {};

var hasRequiredRequestPasswordReset;

function requireRequestPasswordReset () {
	if (hasRequiredRequestPasswordReset) return requestPasswordReset;
	hasRequiredRequestPasswordReset = 1;
	Object.defineProperty(requestPasswordReset, "__esModule", { value: true });
	requestPasswordReset.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return requestPasswordReset;
}

var reserveSigningKey = {};

var hasRequiredReserveSigningKey;

function requireReserveSigningKey () {
	if (hasRequiredReserveSigningKey) return reserveSigningKey;
	hasRequiredReserveSigningKey = 1;
	Object.defineProperty(reserveSigningKey, "__esModule", { value: true });
	reserveSigningKey.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return reserveSigningKey;
}

var revokeAppPassword = {};

var hasRequiredRevokeAppPassword;

function requireRevokeAppPassword () {
	if (hasRequiredRevokeAppPassword) return revokeAppPassword;
	hasRequiredRevokeAppPassword = 1;
	Object.defineProperty(revokeAppPassword, "__esModule", { value: true });
	revokeAppPassword.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return revokeAppPassword;
}

var defs$h = {};

var hasRequiredDefs$h;

function requireDefs$h () {
	if (hasRequiredDefs$h) return defs$h;
	hasRequiredDefs$h = 1;
	Object.defineProperty(defs$h, "__esModule", { value: true });
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	
	return defs$h;
}

var getCheckout = {};

var hasRequiredGetCheckout;

function requireGetCheckout () {
	if (hasRequiredGetCheckout) return getCheckout;
	hasRequiredGetCheckout = 1;
	Object.defineProperty(getCheckout, "__esModule", { value: true });
	getCheckout.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getCheckout;
}

var listHosts = {};

var hasRequiredListHosts;

function requireListHosts () {
	if (hasRequiredListHosts) return listHosts;
	hasRequiredListHosts = 1;
	Object.defineProperty(listHosts, "__esModule", { value: true });
	listHosts.toKnownErr = toKnownErr;
	listHosts.isHost = isHost;
	listHosts.validateHost = validateHost;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.sync.listHosts';
	function toKnownErr(e) {
	    return e;
	}
	const hashHost = 'host';
	function isHost(v) {
	    return is$typed(v, id, hashHost);
	}
	function validateHost(v) {
	    return validate(v, id, hashHost);
	}
	
	return listHosts;
}

var listRepos = {};

var hasRequiredListRepos;

function requireListRepos () {
	if (hasRequiredListRepos) return listRepos;
	hasRequiredListRepos = 1;
	Object.defineProperty(listRepos, "__esModule", { value: true });
	listRepos.toKnownErr = toKnownErr;
	listRepos.isRepo = isRepo;
	listRepos.validateRepo = validateRepo;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.sync.listRepos';
	function toKnownErr(e) {
	    return e;
	}
	const hashRepo = 'repo';
	function isRepo(v) {
	    return is$typed(v, id, hashRepo);
	}
	function validateRepo(v) {
	    return validate(v, id, hashRepo);
	}
	
	return listRepos;
}

var listReposByCollection = {};

var hasRequiredListReposByCollection;

function requireListReposByCollection () {
	if (hasRequiredListReposByCollection) return listReposByCollection;
	hasRequiredListReposByCollection = 1;
	Object.defineProperty(listReposByCollection, "__esModule", { value: true });
	listReposByCollection.toKnownErr = toKnownErr;
	listReposByCollection.isRepo = isRepo;
	listReposByCollection.validateRepo = validateRepo;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.sync.listReposByCollection';
	function toKnownErr(e) {
	    return e;
	}
	const hashRepo = 'repo';
	function isRepo(v) {
	    return is$typed(v, id, hashRepo);
	}
	function validateRepo(v) {
	    return validate(v, id, hashRepo);
	}
	
	return listReposByCollection;
}

var notifyOfUpdate = {};

var hasRequiredNotifyOfUpdate;

function requireNotifyOfUpdate () {
	if (hasRequiredNotifyOfUpdate) return notifyOfUpdate;
	hasRequiredNotifyOfUpdate = 1;
	Object.defineProperty(notifyOfUpdate, "__esModule", { value: true });
	notifyOfUpdate.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return notifyOfUpdate;
}

var subscribeRepos = {};

var hasRequiredSubscribeRepos;

function requireSubscribeRepos () {
	if (hasRequiredSubscribeRepos) return subscribeRepos;
	hasRequiredSubscribeRepos = 1;
	Object.defineProperty(subscribeRepos, "__esModule", { value: true });
	subscribeRepos.isCommit = isCommit;
	subscribeRepos.validateCommit = validateCommit;
	subscribeRepos.isSync = isSync;
	subscribeRepos.validateSync = validateSync;
	subscribeRepos.isIdentity = isIdentity;
	subscribeRepos.validateIdentity = validateIdentity;
	subscribeRepos.isAccount = isAccount;
	subscribeRepos.validateAccount = validateAccount;
	subscribeRepos.isInfo = isInfo;
	subscribeRepos.validateInfo = validateInfo;
	subscribeRepos.isRepoOp = isRepoOp;
	subscribeRepos.validateRepoOp = validateRepoOp;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'com.atproto.sync.subscribeRepos';
	const hashCommit = 'commit';
	function isCommit(v) {
	    return is$typed(v, id, hashCommit);
	}
	function validateCommit(v) {
	    return validate(v, id, hashCommit);
	}
	const hashSync = 'sync';
	function isSync(v) {
	    return is$typed(v, id, hashSync);
	}
	function validateSync(v) {
	    return validate(v, id, hashSync);
	}
	const hashIdentity = 'identity';
	function isIdentity(v) {
	    return is$typed(v, id, hashIdentity);
	}
	function validateIdentity(v) {
	    return validate(v, id, hashIdentity);
	}
	const hashAccount = 'account';
	function isAccount(v) {
	    return is$typed(v, id, hashAccount);
	}
	function validateAccount(v) {
	    return validate(v, id, hashAccount);
	}
	const hashInfo = 'info';
	function isInfo(v) {
	    return is$typed(v, id, hashInfo);
	}
	function validateInfo(v) {
	    return validate(v, id, hashInfo);
	}
	const hashRepoOp = 'repoOp';
	function isRepoOp(v) {
	    return is$typed(v, id, hashRepoOp);
	}
	function validateRepoOp(v) {
	    return validate(v, id, hashRepoOp);
	}
	
	return subscribeRepos;
}

var addReservedHandle = {};

var hasRequiredAddReservedHandle;

function requireAddReservedHandle () {
	if (hasRequiredAddReservedHandle) return addReservedHandle;
	hasRequiredAddReservedHandle = 1;
	Object.defineProperty(addReservedHandle, "__esModule", { value: true });
	addReservedHandle.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return addReservedHandle;
}

var checkSignupQueue = {};

var hasRequiredCheckSignupQueue;

function requireCheckSignupQueue () {
	if (hasRequiredCheckSignupQueue) return checkSignupQueue;
	hasRequiredCheckSignupQueue = 1;
	Object.defineProperty(checkSignupQueue, "__esModule", { value: true });
	checkSignupQueue.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return checkSignupQueue;
}

var fetchLabels = {};

var hasRequiredFetchLabels;

function requireFetchLabels () {
	if (hasRequiredFetchLabels) return fetchLabels;
	hasRequiredFetchLabels = 1;
	Object.defineProperty(fetchLabels, "__esModule", { value: true });
	fetchLabels.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return fetchLabels;
}

var requestPhoneVerification = {};

var hasRequiredRequestPhoneVerification;

function requireRequestPhoneVerification () {
	if (hasRequiredRequestPhoneVerification) return requestPhoneVerification;
	hasRequiredRequestPhoneVerification = 1;
	Object.defineProperty(requestPhoneVerification, "__esModule", { value: true });
	requestPhoneVerification.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return requestPhoneVerification;
}

var defs$g = {};

var hasRequiredDefs$g;

function requireDefs$g () {
	if (hasRequiredDefs$g) return defs$g;
	hasRequiredDefs$g = 1;
	Object.defineProperty(defs$g, "__esModule", { value: true });
	defs$g.isProfileViewBasic = isProfileViewBasic;
	defs$g.validateProfileViewBasic = validateProfileViewBasic;
	defs$g.isProfileView = isProfileView;
	defs$g.validateProfileView = validateProfileView;
	defs$g.isProfileViewDetailed = isProfileViewDetailed;
	defs$g.validateProfileViewDetailed = validateProfileViewDetailed;
	defs$g.isProfileAssociated = isProfileAssociated;
	defs$g.validateProfileAssociated = validateProfileAssociated;
	defs$g.isProfileAssociatedChat = isProfileAssociatedChat;
	defs$g.validateProfileAssociatedChat = validateProfileAssociatedChat;
	defs$g.isViewerState = isViewerState;
	defs$g.validateViewerState = validateViewerState;
	defs$g.isKnownFollowers = isKnownFollowers;
	defs$g.validateKnownFollowers = validateKnownFollowers;
	defs$g.isVerificationState = isVerificationState;
	defs$g.validateVerificationState = validateVerificationState;
	defs$g.isVerificationView = isVerificationView;
	defs$g.validateVerificationView = validateVerificationView;
	defs$g.isAdultContentPref = isAdultContentPref;
	defs$g.validateAdultContentPref = validateAdultContentPref;
	defs$g.isContentLabelPref = isContentLabelPref;
	defs$g.validateContentLabelPref = validateContentLabelPref;
	defs$g.isSavedFeed = isSavedFeed;
	defs$g.validateSavedFeed = validateSavedFeed;
	defs$g.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
	defs$g.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
	defs$g.isSavedFeedsPref = isSavedFeedsPref;
	defs$g.validateSavedFeedsPref = validateSavedFeedsPref;
	defs$g.isPersonalDetailsPref = isPersonalDetailsPref;
	defs$g.validatePersonalDetailsPref = validatePersonalDetailsPref;
	defs$g.isFeedViewPref = isFeedViewPref;
	defs$g.validateFeedViewPref = validateFeedViewPref;
	defs$g.isThreadViewPref = isThreadViewPref;
	defs$g.validateThreadViewPref = validateThreadViewPref;
	defs$g.isInterestsPref = isInterestsPref;
	defs$g.validateInterestsPref = validateInterestsPref;
	defs$g.isMutedWord = isMutedWord;
	defs$g.validateMutedWord = validateMutedWord;
	defs$g.isMutedWordsPref = isMutedWordsPref;
	defs$g.validateMutedWordsPref = validateMutedWordsPref;
	defs$g.isHiddenPostsPref = isHiddenPostsPref;
	defs$g.validateHiddenPostsPref = validateHiddenPostsPref;
	defs$g.isLabelersPref = isLabelersPref;
	defs$g.validateLabelersPref = validateLabelersPref;
	defs$g.isLabelerPrefItem = isLabelerPrefItem;
	defs$g.validateLabelerPrefItem = validateLabelerPrefItem;
	defs$g.isBskyAppStatePref = isBskyAppStatePref;
	defs$g.validateBskyAppStatePref = validateBskyAppStatePref;
	defs$g.isBskyAppProgressGuide = isBskyAppProgressGuide;
	defs$g.validateBskyAppProgressGuide = validateBskyAppProgressGuide;
	defs$g.isNux = isNux;
	defs$g.validateNux = validateNux;
	defs$g.isVerificationPrefs = isVerificationPrefs;
	defs$g.validateVerificationPrefs = validateVerificationPrefs;
	defs$g.isPostInteractionSettingsPref = isPostInteractionSettingsPref;
	defs$g.validatePostInteractionSettingsPref = validatePostInteractionSettingsPref;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.actor.defs';
	const hashProfileViewBasic = 'profileViewBasic';
	function isProfileViewBasic(v) {
	    return is$typed(v, id, hashProfileViewBasic);
	}
	function validateProfileViewBasic(v) {
	    return validate(v, id, hashProfileViewBasic);
	}
	const hashProfileView = 'profileView';
	function isProfileView(v) {
	    return is$typed(v, id, hashProfileView);
	}
	function validateProfileView(v) {
	    return validate(v, id, hashProfileView);
	}
	const hashProfileViewDetailed = 'profileViewDetailed';
	function isProfileViewDetailed(v) {
	    return is$typed(v, id, hashProfileViewDetailed);
	}
	function validateProfileViewDetailed(v) {
	    return validate(v, id, hashProfileViewDetailed);
	}
	const hashProfileAssociated = 'profileAssociated';
	function isProfileAssociated(v) {
	    return is$typed(v, id, hashProfileAssociated);
	}
	function validateProfileAssociated(v) {
	    return validate(v, id, hashProfileAssociated);
	}
	const hashProfileAssociatedChat = 'profileAssociatedChat';
	function isProfileAssociatedChat(v) {
	    return is$typed(v, id, hashProfileAssociatedChat);
	}
	function validateProfileAssociatedChat(v) {
	    return validate(v, id, hashProfileAssociatedChat);
	}
	const hashViewerState = 'viewerState';
	function isViewerState(v) {
	    return is$typed(v, id, hashViewerState);
	}
	function validateViewerState(v) {
	    return validate(v, id, hashViewerState);
	}
	const hashKnownFollowers = 'knownFollowers';
	function isKnownFollowers(v) {
	    return is$typed(v, id, hashKnownFollowers);
	}
	function validateKnownFollowers(v) {
	    return validate(v, id, hashKnownFollowers);
	}
	const hashVerificationState = 'verificationState';
	function isVerificationState(v) {
	    return is$typed(v, id, hashVerificationState);
	}
	function validateVerificationState(v) {
	    return validate(v, id, hashVerificationState);
	}
	const hashVerificationView = 'verificationView';
	function isVerificationView(v) {
	    return is$typed(v, id, hashVerificationView);
	}
	function validateVerificationView(v) {
	    return validate(v, id, hashVerificationView);
	}
	const hashAdultContentPref = 'adultContentPref';
	function isAdultContentPref(v) {
	    return is$typed(v, id, hashAdultContentPref);
	}
	function validateAdultContentPref(v) {
	    return validate(v, id, hashAdultContentPref);
	}
	const hashContentLabelPref = 'contentLabelPref';
	function isContentLabelPref(v) {
	    return is$typed(v, id, hashContentLabelPref);
	}
	function validateContentLabelPref(v) {
	    return validate(v, id, hashContentLabelPref);
	}
	const hashSavedFeed = 'savedFeed';
	function isSavedFeed(v) {
	    return is$typed(v, id, hashSavedFeed);
	}
	function validateSavedFeed(v) {
	    return validate(v, id, hashSavedFeed);
	}
	const hashSavedFeedsPrefV2 = 'savedFeedsPrefV2';
	function isSavedFeedsPrefV2(v) {
	    return is$typed(v, id, hashSavedFeedsPrefV2);
	}
	function validateSavedFeedsPrefV2(v) {
	    return validate(v, id, hashSavedFeedsPrefV2);
	}
	const hashSavedFeedsPref = 'savedFeedsPref';
	function isSavedFeedsPref(v) {
	    return is$typed(v, id, hashSavedFeedsPref);
	}
	function validateSavedFeedsPref(v) {
	    return validate(v, id, hashSavedFeedsPref);
	}
	const hashPersonalDetailsPref = 'personalDetailsPref';
	function isPersonalDetailsPref(v) {
	    return is$typed(v, id, hashPersonalDetailsPref);
	}
	function validatePersonalDetailsPref(v) {
	    return validate(v, id, hashPersonalDetailsPref);
	}
	const hashFeedViewPref = 'feedViewPref';
	function isFeedViewPref(v) {
	    return is$typed(v, id, hashFeedViewPref);
	}
	function validateFeedViewPref(v) {
	    return validate(v, id, hashFeedViewPref);
	}
	const hashThreadViewPref = 'threadViewPref';
	function isThreadViewPref(v) {
	    return is$typed(v, id, hashThreadViewPref);
	}
	function validateThreadViewPref(v) {
	    return validate(v, id, hashThreadViewPref);
	}
	const hashInterestsPref = 'interestsPref';
	function isInterestsPref(v) {
	    return is$typed(v, id, hashInterestsPref);
	}
	function validateInterestsPref(v) {
	    return validate(v, id, hashInterestsPref);
	}
	const hashMutedWord = 'mutedWord';
	function isMutedWord(v) {
	    return is$typed(v, id, hashMutedWord);
	}
	function validateMutedWord(v) {
	    return validate(v, id, hashMutedWord);
	}
	const hashMutedWordsPref = 'mutedWordsPref';
	function isMutedWordsPref(v) {
	    return is$typed(v, id, hashMutedWordsPref);
	}
	function validateMutedWordsPref(v) {
	    return validate(v, id, hashMutedWordsPref);
	}
	const hashHiddenPostsPref = 'hiddenPostsPref';
	function isHiddenPostsPref(v) {
	    return is$typed(v, id, hashHiddenPostsPref);
	}
	function validateHiddenPostsPref(v) {
	    return validate(v, id, hashHiddenPostsPref);
	}
	const hashLabelersPref = 'labelersPref';
	function isLabelersPref(v) {
	    return is$typed(v, id, hashLabelersPref);
	}
	function validateLabelersPref(v) {
	    return validate(v, id, hashLabelersPref);
	}
	const hashLabelerPrefItem = 'labelerPrefItem';
	function isLabelerPrefItem(v) {
	    return is$typed(v, id, hashLabelerPrefItem);
	}
	function validateLabelerPrefItem(v) {
	    return validate(v, id, hashLabelerPrefItem);
	}
	const hashBskyAppStatePref = 'bskyAppStatePref';
	function isBskyAppStatePref(v) {
	    return is$typed(v, id, hashBskyAppStatePref);
	}
	function validateBskyAppStatePref(v) {
	    return validate(v, id, hashBskyAppStatePref);
	}
	const hashBskyAppProgressGuide = 'bskyAppProgressGuide';
	function isBskyAppProgressGuide(v) {
	    return is$typed(v, id, hashBskyAppProgressGuide);
	}
	function validateBskyAppProgressGuide(v) {
	    return validate(v, id, hashBskyAppProgressGuide);
	}
	const hashNux = 'nux';
	function isNux(v) {
	    return is$typed(v, id, hashNux);
	}
	function validateNux(v) {
	    return validate(v, id, hashNux);
	}
	const hashVerificationPrefs = 'verificationPrefs';
	function isVerificationPrefs(v) {
	    return is$typed(v, id, hashVerificationPrefs);
	}
	function validateVerificationPrefs(v) {
	    return validate(v, id, hashVerificationPrefs);
	}
	const hashPostInteractionSettingsPref = 'postInteractionSettingsPref';
	function isPostInteractionSettingsPref(v) {
	    return is$typed(v, id, hashPostInteractionSettingsPref);
	}
	function validatePostInteractionSettingsPref(v) {
	    return validate(v, id, hashPostInteractionSettingsPref);
	}
	
	return defs$g;
}

var getPreferences = {};

var hasRequiredGetPreferences;

function requireGetPreferences () {
	if (hasRequiredGetPreferences) return getPreferences;
	hasRequiredGetPreferences = 1;
	Object.defineProperty(getPreferences, "__esModule", { value: true });
	getPreferences.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getPreferences;
}

var getProfile = {};

var hasRequiredGetProfile;

function requireGetProfile () {
	if (hasRequiredGetProfile) return getProfile;
	hasRequiredGetProfile = 1;
	Object.defineProperty(getProfile, "__esModule", { value: true });
	getProfile.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getProfile;
}

var getProfiles = {};

var hasRequiredGetProfiles;

function requireGetProfiles () {
	if (hasRequiredGetProfiles) return getProfiles;
	hasRequiredGetProfiles = 1;
	Object.defineProperty(getProfiles, "__esModule", { value: true });
	getProfiles.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getProfiles;
}

var getSuggestions = {};

var hasRequiredGetSuggestions;

function requireGetSuggestions () {
	if (hasRequiredGetSuggestions) return getSuggestions;
	hasRequiredGetSuggestions = 1;
	Object.defineProperty(getSuggestions, "__esModule", { value: true });
	getSuggestions.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestions;
}

var profile$1 = {};

var hasRequiredProfile$1;

function requireProfile$1 () {
	if (hasRequiredProfile$1) return profile$1;
	hasRequiredProfile$1 = 1;
	Object.defineProperty(profile$1, "__esModule", { value: true });
	profile$1.isRecord = isRecord;
	profile$1.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.actor.profile';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return profile$1;
}

var putPreferences$1 = {};

var hasRequiredPutPreferences$1;

function requirePutPreferences$1 () {
	if (hasRequiredPutPreferences$1) return putPreferences$1;
	hasRequiredPutPreferences$1 = 1;
	Object.defineProperty(putPreferences$1, "__esModule", { value: true });
	putPreferences$1.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return putPreferences$1;
}

var searchActors = {};

var hasRequiredSearchActors;

function requireSearchActors () {
	if (hasRequiredSearchActors) return searchActors;
	hasRequiredSearchActors = 1;
	Object.defineProperty(searchActors, "__esModule", { value: true });
	searchActors.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return searchActors;
}

var searchActorsTypeahead = {};

var hasRequiredSearchActorsTypeahead;

function requireSearchActorsTypeahead () {
	if (hasRequiredSearchActorsTypeahead) return searchActorsTypeahead;
	hasRequiredSearchActorsTypeahead = 1;
	Object.defineProperty(searchActorsTypeahead, "__esModule", { value: true });
	searchActorsTypeahead.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return searchActorsTypeahead;
}

var defs$f = {};

var hasRequiredDefs$f;

function requireDefs$f () {
	if (hasRequiredDefs$f) return defs$f;
	hasRequiredDefs$f = 1;
	Object.defineProperty(defs$f, "__esModule", { value: true });
	defs$f.isAspectRatio = isAspectRatio;
	defs$f.validateAspectRatio = validateAspectRatio;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.embed.defs';
	const hashAspectRatio = 'aspectRatio';
	function isAspectRatio(v) {
	    return is$typed(v, id, hashAspectRatio);
	}
	function validateAspectRatio(v) {
	    return validate(v, id, hashAspectRatio);
	}
	
	return defs$f;
}

var external = {};

var hasRequiredExternal;

function requireExternal () {
	if (hasRequiredExternal) return external;
	hasRequiredExternal = 1;
	Object.defineProperty(external, "__esModule", { value: true });
	external.isMain = isMain;
	external.validateMain = validateMain;
	external.isExternal = isExternal;
	external.validateExternal = validateExternal;
	external.isView = isView;
	external.validateView = validateView;
	external.isViewExternal = isViewExternal;
	external.validateViewExternal = validateViewExternal;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.embed.external';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	const hashExternal = 'external';
	function isExternal(v) {
	    return is$typed(v, id, hashExternal);
	}
	function validateExternal(v) {
	    return validate(v, id, hashExternal);
	}
	const hashView = 'view';
	function isView(v) {
	    return is$typed(v, id, hashView);
	}
	function validateView(v) {
	    return validate(v, id, hashView);
	}
	const hashViewExternal = 'viewExternal';
	function isViewExternal(v) {
	    return is$typed(v, id, hashViewExternal);
	}
	function validateViewExternal(v) {
	    return validate(v, id, hashViewExternal);
	}
	
	return external;
}

var images = {};

var hasRequiredImages;

function requireImages () {
	if (hasRequiredImages) return images;
	hasRequiredImages = 1;
	Object.defineProperty(images, "__esModule", { value: true });
	images.isMain = isMain;
	images.validateMain = validateMain;
	images.isImage = isImage;
	images.validateImage = validateImage;
	images.isView = isView;
	images.validateView = validateView;
	images.isViewImage = isViewImage;
	images.validateViewImage = validateViewImage;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.embed.images';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	const hashImage = 'image';
	function isImage(v) {
	    return is$typed(v, id, hashImage);
	}
	function validateImage(v) {
	    return validate(v, id, hashImage);
	}
	const hashView = 'view';
	function isView(v) {
	    return is$typed(v, id, hashView);
	}
	function validateView(v) {
	    return validate(v, id, hashView);
	}
	const hashViewImage = 'viewImage';
	function isViewImage(v) {
	    return is$typed(v, id, hashViewImage);
	}
	function validateViewImage(v) {
	    return validate(v, id, hashViewImage);
	}
	
	return images;
}

var record = {};

var hasRequiredRecord;

function requireRecord () {
	if (hasRequiredRecord) return record;
	hasRequiredRecord = 1;
	Object.defineProperty(record, "__esModule", { value: true });
	record.isMain = isMain;
	record.validateMain = validateMain;
	record.isView = isView;
	record.validateView = validateView;
	record.isViewRecord = isViewRecord;
	record.validateViewRecord = validateViewRecord;
	record.isViewNotFound = isViewNotFound;
	record.validateViewNotFound = validateViewNotFound;
	record.isViewBlocked = isViewBlocked;
	record.validateViewBlocked = validateViewBlocked;
	record.isViewDetached = isViewDetached;
	record.validateViewDetached = validateViewDetached;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.embed.record';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	const hashView = 'view';
	function isView(v) {
	    return is$typed(v, id, hashView);
	}
	function validateView(v) {
	    return validate(v, id, hashView);
	}
	const hashViewRecord = 'viewRecord';
	function isViewRecord(v) {
	    return is$typed(v, id, hashViewRecord);
	}
	function validateViewRecord(v) {
	    return validate(v, id, hashViewRecord);
	}
	const hashViewNotFound = 'viewNotFound';
	function isViewNotFound(v) {
	    return is$typed(v, id, hashViewNotFound);
	}
	function validateViewNotFound(v) {
	    return validate(v, id, hashViewNotFound);
	}
	const hashViewBlocked = 'viewBlocked';
	function isViewBlocked(v) {
	    return is$typed(v, id, hashViewBlocked);
	}
	function validateViewBlocked(v) {
	    return validate(v, id, hashViewBlocked);
	}
	const hashViewDetached = 'viewDetached';
	function isViewDetached(v) {
	    return is$typed(v, id, hashViewDetached);
	}
	function validateViewDetached(v) {
	    return validate(v, id, hashViewDetached);
	}
	
	return record;
}

var recordWithMedia = {};

var hasRequiredRecordWithMedia;

function requireRecordWithMedia () {
	if (hasRequiredRecordWithMedia) return recordWithMedia;
	hasRequiredRecordWithMedia = 1;
	Object.defineProperty(recordWithMedia, "__esModule", { value: true });
	recordWithMedia.isMain = isMain;
	recordWithMedia.validateMain = validateMain;
	recordWithMedia.isView = isView;
	recordWithMedia.validateView = validateView;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.embed.recordWithMedia';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	const hashView = 'view';
	function isView(v) {
	    return is$typed(v, id, hashView);
	}
	function validateView(v) {
	    return validate(v, id, hashView);
	}
	
	return recordWithMedia;
}

var video = {};

var hasRequiredVideo;

function requireVideo () {
	if (hasRequiredVideo) return video;
	hasRequiredVideo = 1;
	Object.defineProperty(video, "__esModule", { value: true });
	video.isMain = isMain;
	video.validateMain = validateMain;
	video.isCaption = isCaption;
	video.validateCaption = validateCaption;
	video.isView = isView;
	video.validateView = validateView;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.embed.video';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	const hashCaption = 'caption';
	function isCaption(v) {
	    return is$typed(v, id, hashCaption);
	}
	function validateCaption(v) {
	    return validate(v, id, hashCaption);
	}
	const hashView = 'view';
	function isView(v) {
	    return is$typed(v, id, hashView);
	}
	function validateView(v) {
	    return validate(v, id, hashView);
	}
	
	return video;
}

var defs$e = {};

var hasRequiredDefs$e;

function requireDefs$e () {
	if (hasRequiredDefs$e) return defs$e;
	hasRequiredDefs$e = 1;
	Object.defineProperty(defs$e, "__esModule", { value: true });
	defs$e.INTERACTIONSHARE = defs$e.INTERACTIONQUOTE = defs$e.INTERACTIONREPLY = defs$e.INTERACTIONREPOST = defs$e.INTERACTIONLIKE = defs$e.INTERACTIONSEEN = defs$e.CONTENTMODEVIDEO = defs$e.CONTENTMODEUNSPECIFIED = defs$e.CLICKTHROUGHEMBED = defs$e.CLICKTHROUGHREPOSTER = defs$e.CLICKTHROUGHAUTHOR = defs$e.CLICKTHROUGHITEM = defs$e.REQUESTMORE = defs$e.REQUESTLESS = void 0;
	defs$e.isPostView = isPostView;
	defs$e.validatePostView = validatePostView;
	defs$e.isViewerState = isViewerState;
	defs$e.validateViewerState = validateViewerState;
	defs$e.isThreadContext = isThreadContext;
	defs$e.validateThreadContext = validateThreadContext;
	defs$e.isFeedViewPost = isFeedViewPost;
	defs$e.validateFeedViewPost = validateFeedViewPost;
	defs$e.isReplyRef = isReplyRef;
	defs$e.validateReplyRef = validateReplyRef;
	defs$e.isReasonRepost = isReasonRepost;
	defs$e.validateReasonRepost = validateReasonRepost;
	defs$e.isReasonPin = isReasonPin;
	defs$e.validateReasonPin = validateReasonPin;
	defs$e.isThreadViewPost = isThreadViewPost;
	defs$e.validateThreadViewPost = validateThreadViewPost;
	defs$e.isNotFoundPost = isNotFoundPost;
	defs$e.validateNotFoundPost = validateNotFoundPost;
	defs$e.isBlockedPost = isBlockedPost;
	defs$e.validateBlockedPost = validateBlockedPost;
	defs$e.isBlockedAuthor = isBlockedAuthor;
	defs$e.validateBlockedAuthor = validateBlockedAuthor;
	defs$e.isGeneratorView = isGeneratorView;
	defs$e.validateGeneratorView = validateGeneratorView;
	defs$e.isGeneratorViewerState = isGeneratorViewerState;
	defs$e.validateGeneratorViewerState = validateGeneratorViewerState;
	defs$e.isSkeletonFeedPost = isSkeletonFeedPost;
	defs$e.validateSkeletonFeedPost = validateSkeletonFeedPost;
	defs$e.isSkeletonReasonRepost = isSkeletonReasonRepost;
	defs$e.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
	defs$e.isSkeletonReasonPin = isSkeletonReasonPin;
	defs$e.validateSkeletonReasonPin = validateSkeletonReasonPin;
	defs$e.isThreadgateView = isThreadgateView;
	defs$e.validateThreadgateView = validateThreadgateView;
	defs$e.isInteraction = isInteraction;
	defs$e.validateInteraction = validateInteraction;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.defs';
	const hashPostView = 'postView';
	function isPostView(v) {
	    return is$typed(v, id, hashPostView);
	}
	function validatePostView(v) {
	    return validate(v, id, hashPostView);
	}
	const hashViewerState = 'viewerState';
	function isViewerState(v) {
	    return is$typed(v, id, hashViewerState);
	}
	function validateViewerState(v) {
	    return validate(v, id, hashViewerState);
	}
	const hashThreadContext = 'threadContext';
	function isThreadContext(v) {
	    return is$typed(v, id, hashThreadContext);
	}
	function validateThreadContext(v) {
	    return validate(v, id, hashThreadContext);
	}
	const hashFeedViewPost = 'feedViewPost';
	function isFeedViewPost(v) {
	    return is$typed(v, id, hashFeedViewPost);
	}
	function validateFeedViewPost(v) {
	    return validate(v, id, hashFeedViewPost);
	}
	const hashReplyRef = 'replyRef';
	function isReplyRef(v) {
	    return is$typed(v, id, hashReplyRef);
	}
	function validateReplyRef(v) {
	    return validate(v, id, hashReplyRef);
	}
	const hashReasonRepost = 'reasonRepost';
	function isReasonRepost(v) {
	    return is$typed(v, id, hashReasonRepost);
	}
	function validateReasonRepost(v) {
	    return validate(v, id, hashReasonRepost);
	}
	const hashReasonPin = 'reasonPin';
	function isReasonPin(v) {
	    return is$typed(v, id, hashReasonPin);
	}
	function validateReasonPin(v) {
	    return validate(v, id, hashReasonPin);
	}
	const hashThreadViewPost = 'threadViewPost';
	function isThreadViewPost(v) {
	    return is$typed(v, id, hashThreadViewPost);
	}
	function validateThreadViewPost(v) {
	    return validate(v, id, hashThreadViewPost);
	}
	const hashNotFoundPost = 'notFoundPost';
	function isNotFoundPost(v) {
	    return is$typed(v, id, hashNotFoundPost);
	}
	function validateNotFoundPost(v) {
	    return validate(v, id, hashNotFoundPost);
	}
	const hashBlockedPost = 'blockedPost';
	function isBlockedPost(v) {
	    return is$typed(v, id, hashBlockedPost);
	}
	function validateBlockedPost(v) {
	    return validate(v, id, hashBlockedPost);
	}
	const hashBlockedAuthor = 'blockedAuthor';
	function isBlockedAuthor(v) {
	    return is$typed(v, id, hashBlockedAuthor);
	}
	function validateBlockedAuthor(v) {
	    return validate(v, id, hashBlockedAuthor);
	}
	const hashGeneratorView = 'generatorView';
	function isGeneratorView(v) {
	    return is$typed(v, id, hashGeneratorView);
	}
	function validateGeneratorView(v) {
	    return validate(v, id, hashGeneratorView);
	}
	const hashGeneratorViewerState = 'generatorViewerState';
	function isGeneratorViewerState(v) {
	    return is$typed(v, id, hashGeneratorViewerState);
	}
	function validateGeneratorViewerState(v) {
	    return validate(v, id, hashGeneratorViewerState);
	}
	const hashSkeletonFeedPost = 'skeletonFeedPost';
	function isSkeletonFeedPost(v) {
	    return is$typed(v, id, hashSkeletonFeedPost);
	}
	function validateSkeletonFeedPost(v) {
	    return validate(v, id, hashSkeletonFeedPost);
	}
	const hashSkeletonReasonRepost = 'skeletonReasonRepost';
	function isSkeletonReasonRepost(v) {
	    return is$typed(v, id, hashSkeletonReasonRepost);
	}
	function validateSkeletonReasonRepost(v) {
	    return validate(v, id, hashSkeletonReasonRepost);
	}
	const hashSkeletonReasonPin = 'skeletonReasonPin';
	function isSkeletonReasonPin(v) {
	    return is$typed(v, id, hashSkeletonReasonPin);
	}
	function validateSkeletonReasonPin(v) {
	    return validate(v, id, hashSkeletonReasonPin);
	}
	const hashThreadgateView = 'threadgateView';
	function isThreadgateView(v) {
	    return is$typed(v, id, hashThreadgateView);
	}
	function validateThreadgateView(v) {
	    return validate(v, id, hashThreadgateView);
	}
	const hashInteraction = 'interaction';
	function isInteraction(v) {
	    return is$typed(v, id, hashInteraction);
	}
	function validateInteraction(v) {
	    return validate(v, id, hashInteraction);
	}
	/** Request that less content like the given feed item be shown in the feed */
	defs$e.REQUESTLESS = `${id}#requestLess`;
	/** Request that more content like the given feed item be shown in the feed */
	defs$e.REQUESTMORE = `${id}#requestMore`;
	/** User clicked through to the feed item */
	defs$e.CLICKTHROUGHITEM = `${id}#clickthroughItem`;
	/** User clicked through to the author of the feed item */
	defs$e.CLICKTHROUGHAUTHOR = `${id}#clickthroughAuthor`;
	/** User clicked through to the reposter of the feed item */
	defs$e.CLICKTHROUGHREPOSTER = `${id}#clickthroughReposter`;
	/** User clicked through to the embedded content of the feed item */
	defs$e.CLICKTHROUGHEMBED = `${id}#clickthroughEmbed`;
	/** Declares the feed generator returns any types of posts. */
	defs$e.CONTENTMODEUNSPECIFIED = `${id}#contentModeUnspecified`;
	/** Declares the feed generator returns posts containing app.bsky.embed.video embeds. */
	defs$e.CONTENTMODEVIDEO = `${id}#contentModeVideo`;
	/** Feed item was seen by user */
	defs$e.INTERACTIONSEEN = `${id}#interactionSeen`;
	/** User liked the feed item */
	defs$e.INTERACTIONLIKE = `${id}#interactionLike`;
	/** User reposted the feed item */
	defs$e.INTERACTIONREPOST = `${id}#interactionRepost`;
	/** User replied to the feed item */
	defs$e.INTERACTIONREPLY = `${id}#interactionReply`;
	/** User quoted the feed item */
	defs$e.INTERACTIONQUOTE = `${id}#interactionQuote`;
	/** User shared the feed item */
	defs$e.INTERACTIONSHARE = `${id}#interactionShare`;
	
	return defs$e;
}

var describeFeedGenerator = {};

var hasRequiredDescribeFeedGenerator;

function requireDescribeFeedGenerator () {
	if (hasRequiredDescribeFeedGenerator) return describeFeedGenerator;
	hasRequiredDescribeFeedGenerator = 1;
	Object.defineProperty(describeFeedGenerator, "__esModule", { value: true });
	describeFeedGenerator.toKnownErr = toKnownErr;
	describeFeedGenerator.isFeed = isFeed;
	describeFeedGenerator.validateFeed = validateFeed;
	describeFeedGenerator.isLinks = isLinks;
	describeFeedGenerator.validateLinks = validateLinks;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.describeFeedGenerator';
	function toKnownErr(e) {
	    return e;
	}
	const hashFeed = 'feed';
	function isFeed(v) {
	    return is$typed(v, id, hashFeed);
	}
	function validateFeed(v) {
	    return validate(v, id, hashFeed);
	}
	const hashLinks = 'links';
	function isLinks(v) {
	    return is$typed(v, id, hashLinks);
	}
	function validateLinks(v) {
	    return validate(v, id, hashLinks);
	}
	
	return describeFeedGenerator;
}

var generator = {};

var hasRequiredGenerator;

function requireGenerator () {
	if (hasRequiredGenerator) return generator;
	hasRequiredGenerator = 1;
	Object.defineProperty(generator, "__esModule", { value: true });
	generator.isRecord = isRecord;
	generator.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.generator';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return generator;
}

var getActorFeeds = {};

var hasRequiredGetActorFeeds;

function requireGetActorFeeds () {
	if (hasRequiredGetActorFeeds) return getActorFeeds;
	hasRequiredGetActorFeeds = 1;
	Object.defineProperty(getActorFeeds, "__esModule", { value: true });
	getActorFeeds.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getActorFeeds;
}

var getFeedGenerator = {};

var hasRequiredGetFeedGenerator;

function requireGetFeedGenerator () {
	if (hasRequiredGetFeedGenerator) return getFeedGenerator;
	hasRequiredGetFeedGenerator = 1;
	Object.defineProperty(getFeedGenerator, "__esModule", { value: true });
	getFeedGenerator.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getFeedGenerator;
}

var getFeedGenerators = {};

var hasRequiredGetFeedGenerators;

function requireGetFeedGenerators () {
	if (hasRequiredGetFeedGenerators) return getFeedGenerators;
	hasRequiredGetFeedGenerators = 1;
	Object.defineProperty(getFeedGenerators, "__esModule", { value: true });
	getFeedGenerators.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getFeedGenerators;
}

var getLikes = {};

var hasRequiredGetLikes;

function requireGetLikes () {
	if (hasRequiredGetLikes) return getLikes;
	hasRequiredGetLikes = 1;
	Object.defineProperty(getLikes, "__esModule", { value: true });
	getLikes.toKnownErr = toKnownErr;
	getLikes.isLike = isLike;
	getLikes.validateLike = validateLike;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.getLikes';
	function toKnownErr(e) {
	    return e;
	}
	const hashLike = 'like';
	function isLike(v) {
	    return is$typed(v, id, hashLike);
	}
	function validateLike(v) {
	    return validate(v, id, hashLike);
	}
	
	return getLikes;
}

var getPosts = {};

var hasRequiredGetPosts;

function requireGetPosts () {
	if (hasRequiredGetPosts) return getPosts;
	hasRequiredGetPosts = 1;
	Object.defineProperty(getPosts, "__esModule", { value: true });
	getPosts.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getPosts;
}

var getQuotes = {};

var hasRequiredGetQuotes;

function requireGetQuotes () {
	if (hasRequiredGetQuotes) return getQuotes;
	hasRequiredGetQuotes = 1;
	Object.defineProperty(getQuotes, "__esModule", { value: true });
	getQuotes.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getQuotes;
}

var getRepostedBy = {};

var hasRequiredGetRepostedBy;

function requireGetRepostedBy () {
	if (hasRequiredGetRepostedBy) return getRepostedBy;
	hasRequiredGetRepostedBy = 1;
	Object.defineProperty(getRepostedBy, "__esModule", { value: true });
	getRepostedBy.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getRepostedBy;
}

var getSuggestedFeeds$1 = {};

var hasRequiredGetSuggestedFeeds$1;

function requireGetSuggestedFeeds$1 () {
	if (hasRequiredGetSuggestedFeeds$1) return getSuggestedFeeds$1;
	hasRequiredGetSuggestedFeeds$1 = 1;
	Object.defineProperty(getSuggestedFeeds$1, "__esModule", { value: true });
	getSuggestedFeeds$1.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedFeeds$1;
}

var getTimeline = {};

var hasRequiredGetTimeline;

function requireGetTimeline () {
	if (hasRequiredGetTimeline) return getTimeline;
	hasRequiredGetTimeline = 1;
	Object.defineProperty(getTimeline, "__esModule", { value: true });
	getTimeline.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getTimeline;
}

var like = {};

var hasRequiredLike;

function requireLike () {
	if (hasRequiredLike) return like;
	hasRequiredLike = 1;
	Object.defineProperty(like, "__esModule", { value: true });
	like.isRecord = isRecord;
	like.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.like';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return like;
}

var post$2 = {};

var hasRequiredPost$1;

function requirePost$1 () {
	if (hasRequiredPost$1) return post$2;
	hasRequiredPost$1 = 1;
	Object.defineProperty(post$2, "__esModule", { value: true });
	post$2.isRecord = isRecord;
	post$2.validateRecord = validateRecord;
	post$2.isReplyRef = isReplyRef;
	post$2.validateReplyRef = validateReplyRef;
	post$2.isEntity = isEntity;
	post$2.validateEntity = validateEntity;
	post$2.isTextSlice = isTextSlice;
	post$2.validateTextSlice = validateTextSlice;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.post';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	const hashReplyRef = 'replyRef';
	function isReplyRef(v) {
	    return is$typed(v, id, hashReplyRef);
	}
	function validateReplyRef(v) {
	    return validate(v, id, hashReplyRef);
	}
	const hashEntity = 'entity';
	function isEntity(v) {
	    return is$typed(v, id, hashEntity);
	}
	function validateEntity(v) {
	    return validate(v, id, hashEntity);
	}
	const hashTextSlice = 'textSlice';
	function isTextSlice(v) {
	    return is$typed(v, id, hashTextSlice);
	}
	function validateTextSlice(v) {
	    return validate(v, id, hashTextSlice);
	}
	
	return post$2;
}

var postgate = {};

var hasRequiredPostgate;

function requirePostgate () {
	if (hasRequiredPostgate) return postgate;
	hasRequiredPostgate = 1;
	Object.defineProperty(postgate, "__esModule", { value: true });
	postgate.isRecord = isRecord;
	postgate.validateRecord = validateRecord;
	postgate.isDisableRule = isDisableRule;
	postgate.validateDisableRule = validateDisableRule;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.postgate';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	const hashDisableRule = 'disableRule';
	function isDisableRule(v) {
	    return is$typed(v, id, hashDisableRule);
	}
	function validateDisableRule(v) {
	    return validate(v, id, hashDisableRule);
	}
	
	return postgate;
}

var repost = {};

var hasRequiredRepost;

function requireRepost () {
	if (hasRequiredRepost) return repost;
	hasRequiredRepost = 1;
	Object.defineProperty(repost, "__esModule", { value: true });
	repost.isRecord = isRecord;
	repost.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.repost';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return repost;
}

var sendInteractions = {};

var hasRequiredSendInteractions;

function requireSendInteractions () {
	if (hasRequiredSendInteractions) return sendInteractions;
	hasRequiredSendInteractions = 1;
	Object.defineProperty(sendInteractions, "__esModule", { value: true });
	sendInteractions.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return sendInteractions;
}

var threadgate = {};

var hasRequiredThreadgate;

function requireThreadgate () {
	if (hasRequiredThreadgate) return threadgate;
	hasRequiredThreadgate = 1;
	Object.defineProperty(threadgate, "__esModule", { value: true });
	threadgate.isRecord = isRecord;
	threadgate.validateRecord = validateRecord;
	threadgate.isMentionRule = isMentionRule;
	threadgate.validateMentionRule = validateMentionRule;
	threadgate.isFollowerRule = isFollowerRule;
	threadgate.validateFollowerRule = validateFollowerRule;
	threadgate.isFollowingRule = isFollowingRule;
	threadgate.validateFollowingRule = validateFollowingRule;
	threadgate.isListRule = isListRule;
	threadgate.validateListRule = validateListRule;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.feed.threadgate';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	const hashMentionRule = 'mentionRule';
	function isMentionRule(v) {
	    return is$typed(v, id, hashMentionRule);
	}
	function validateMentionRule(v) {
	    return validate(v, id, hashMentionRule);
	}
	const hashFollowerRule = 'followerRule';
	function isFollowerRule(v) {
	    return is$typed(v, id, hashFollowerRule);
	}
	function validateFollowerRule(v) {
	    return validate(v, id, hashFollowerRule);
	}
	const hashFollowingRule = 'followingRule';
	function isFollowingRule(v) {
	    return is$typed(v, id, hashFollowingRule);
	}
	function validateFollowingRule(v) {
	    return validate(v, id, hashFollowingRule);
	}
	const hashListRule = 'listRule';
	function isListRule(v) {
	    return is$typed(v, id, hashListRule);
	}
	function validateListRule(v) {
	    return validate(v, id, hashListRule);
	}
	
	return threadgate;
}

var block = {};

var hasRequiredBlock;

function requireBlock () {
	if (hasRequiredBlock) return block;
	hasRequiredBlock = 1;
	Object.defineProperty(block, "__esModule", { value: true });
	block.isRecord = isRecord;
	block.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.block';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return block;
}

var defs$d = {};

var hasRequiredDefs$d;

function requireDefs$d () {
	if (hasRequiredDefs$d) return defs$d;
	hasRequiredDefs$d = 1;
	Object.defineProperty(defs$d, "__esModule", { value: true });
	defs$d.REFERENCELIST = defs$d.CURATELIST = defs$d.MODLIST = void 0;
	defs$d.isListViewBasic = isListViewBasic;
	defs$d.validateListViewBasic = validateListViewBasic;
	defs$d.isListView = isListView;
	defs$d.validateListView = validateListView;
	defs$d.isListItemView = isListItemView;
	defs$d.validateListItemView = validateListItemView;
	defs$d.isStarterPackView = isStarterPackView;
	defs$d.validateStarterPackView = validateStarterPackView;
	defs$d.isStarterPackViewBasic = isStarterPackViewBasic;
	defs$d.validateStarterPackViewBasic = validateStarterPackViewBasic;
	defs$d.isListViewerState = isListViewerState;
	defs$d.validateListViewerState = validateListViewerState;
	defs$d.isNotFoundActor = isNotFoundActor;
	defs$d.validateNotFoundActor = validateNotFoundActor;
	defs$d.isRelationship = isRelationship;
	defs$d.validateRelationship = validateRelationship;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.defs';
	const hashListViewBasic = 'listViewBasic';
	function isListViewBasic(v) {
	    return is$typed(v, id, hashListViewBasic);
	}
	function validateListViewBasic(v) {
	    return validate(v, id, hashListViewBasic);
	}
	const hashListView = 'listView';
	function isListView(v) {
	    return is$typed(v, id, hashListView);
	}
	function validateListView(v) {
	    return validate(v, id, hashListView);
	}
	const hashListItemView = 'listItemView';
	function isListItemView(v) {
	    return is$typed(v, id, hashListItemView);
	}
	function validateListItemView(v) {
	    return validate(v, id, hashListItemView);
	}
	const hashStarterPackView = 'starterPackView';
	function isStarterPackView(v) {
	    return is$typed(v, id, hashStarterPackView);
	}
	function validateStarterPackView(v) {
	    return validate(v, id, hashStarterPackView);
	}
	const hashStarterPackViewBasic = 'starterPackViewBasic';
	function isStarterPackViewBasic(v) {
	    return is$typed(v, id, hashStarterPackViewBasic);
	}
	function validateStarterPackViewBasic(v) {
	    return validate(v, id, hashStarterPackViewBasic);
	}
	/** A list of actors to apply an aggregate moderation action (mute/block) on. */
	defs$d.MODLIST = `${id}#modlist`;
	/** A list of actors used for curation purposes such as list feeds or interaction gating. */
	defs$d.CURATELIST = `${id}#curatelist`;
	/** A list of actors used for only for reference purposes such as within a starter pack. */
	defs$d.REFERENCELIST = `${id}#referencelist`;
	const hashListViewerState = 'listViewerState';
	function isListViewerState(v) {
	    return is$typed(v, id, hashListViewerState);
	}
	function validateListViewerState(v) {
	    return validate(v, id, hashListViewerState);
	}
	const hashNotFoundActor = 'notFoundActor';
	function isNotFoundActor(v) {
	    return is$typed(v, id, hashNotFoundActor);
	}
	function validateNotFoundActor(v) {
	    return validate(v, id, hashNotFoundActor);
	}
	const hashRelationship = 'relationship';
	function isRelationship(v) {
	    return is$typed(v, id, hashRelationship);
	}
	function validateRelationship(v) {
	    return validate(v, id, hashRelationship);
	}
	
	return defs$d;
}

var follow = {};

var hasRequiredFollow;

function requireFollow () {
	if (hasRequiredFollow) return follow;
	hasRequiredFollow = 1;
	Object.defineProperty(follow, "__esModule", { value: true });
	follow.isRecord = isRecord;
	follow.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.follow';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return follow;
}

var getActorStarterPacks = {};

var hasRequiredGetActorStarterPacks;

function requireGetActorStarterPacks () {
	if (hasRequiredGetActorStarterPacks) return getActorStarterPacks;
	hasRequiredGetActorStarterPacks = 1;
	Object.defineProperty(getActorStarterPacks, "__esModule", { value: true });
	getActorStarterPacks.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getActorStarterPacks;
}

var getBlocks = {};

var hasRequiredGetBlocks;

function requireGetBlocks () {
	if (hasRequiredGetBlocks) return getBlocks;
	hasRequiredGetBlocks = 1;
	Object.defineProperty(getBlocks, "__esModule", { value: true });
	getBlocks.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getBlocks;
}

var getFollowers = {};

var hasRequiredGetFollowers;

function requireGetFollowers () {
	if (hasRequiredGetFollowers) return getFollowers;
	hasRequiredGetFollowers = 1;
	Object.defineProperty(getFollowers, "__esModule", { value: true });
	getFollowers.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getFollowers;
}

var getFollows = {};

var hasRequiredGetFollows;

function requireGetFollows () {
	if (hasRequiredGetFollows) return getFollows;
	hasRequiredGetFollows = 1;
	Object.defineProperty(getFollows, "__esModule", { value: true });
	getFollows.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getFollows;
}

var getKnownFollowers = {};

var hasRequiredGetKnownFollowers;

function requireGetKnownFollowers () {
	if (hasRequiredGetKnownFollowers) return getKnownFollowers;
	hasRequiredGetKnownFollowers = 1;
	Object.defineProperty(getKnownFollowers, "__esModule", { value: true });
	getKnownFollowers.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getKnownFollowers;
}

var getList = {};

var hasRequiredGetList;

function requireGetList () {
	if (hasRequiredGetList) return getList;
	hasRequiredGetList = 1;
	Object.defineProperty(getList, "__esModule", { value: true });
	getList.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getList;
}

var getListBlocks = {};

var hasRequiredGetListBlocks;

function requireGetListBlocks () {
	if (hasRequiredGetListBlocks) return getListBlocks;
	hasRequiredGetListBlocks = 1;
	Object.defineProperty(getListBlocks, "__esModule", { value: true });
	getListBlocks.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getListBlocks;
}

var getListMutes = {};

var hasRequiredGetListMutes;

function requireGetListMutes () {
	if (hasRequiredGetListMutes) return getListMutes;
	hasRequiredGetListMutes = 1;
	Object.defineProperty(getListMutes, "__esModule", { value: true });
	getListMutes.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getListMutes;
}

var getLists = {};

var hasRequiredGetLists;

function requireGetLists () {
	if (hasRequiredGetLists) return getLists;
	hasRequiredGetLists = 1;
	Object.defineProperty(getLists, "__esModule", { value: true });
	getLists.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getLists;
}

var getMutes = {};

var hasRequiredGetMutes;

function requireGetMutes () {
	if (hasRequiredGetMutes) return getMutes;
	hasRequiredGetMutes = 1;
	Object.defineProperty(getMutes, "__esModule", { value: true });
	getMutes.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getMutes;
}

var getStarterPack = {};

var hasRequiredGetStarterPack;

function requireGetStarterPack () {
	if (hasRequiredGetStarterPack) return getStarterPack;
	hasRequiredGetStarterPack = 1;
	Object.defineProperty(getStarterPack, "__esModule", { value: true });
	getStarterPack.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getStarterPack;
}

var getStarterPacks = {};

var hasRequiredGetStarterPacks;

function requireGetStarterPacks () {
	if (hasRequiredGetStarterPacks) return getStarterPacks;
	hasRequiredGetStarterPacks = 1;
	Object.defineProperty(getStarterPacks, "__esModule", { value: true });
	getStarterPacks.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getStarterPacks;
}

var getSuggestedFollowsByActor = {};

var hasRequiredGetSuggestedFollowsByActor;

function requireGetSuggestedFollowsByActor () {
	if (hasRequiredGetSuggestedFollowsByActor) return getSuggestedFollowsByActor;
	hasRequiredGetSuggestedFollowsByActor = 1;
	Object.defineProperty(getSuggestedFollowsByActor, "__esModule", { value: true });
	getSuggestedFollowsByActor.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedFollowsByActor;
}

var list = {};

var hasRequiredList;

function requireList () {
	if (hasRequiredList) return list;
	hasRequiredList = 1;
	Object.defineProperty(list, "__esModule", { value: true });
	list.isRecord = isRecord;
	list.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.list';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return list;
}

var listblock = {};

var hasRequiredListblock;

function requireListblock () {
	if (hasRequiredListblock) return listblock;
	hasRequiredListblock = 1;
	Object.defineProperty(listblock, "__esModule", { value: true });
	listblock.isRecord = isRecord;
	listblock.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.listblock';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return listblock;
}

var listitem = {};

var hasRequiredListitem;

function requireListitem () {
	if (hasRequiredListitem) return listitem;
	hasRequiredListitem = 1;
	Object.defineProperty(listitem, "__esModule", { value: true });
	listitem.isRecord = isRecord;
	listitem.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.listitem';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return listitem;
}

var muteActor = {};

var hasRequiredMuteActor;

function requireMuteActor () {
	if (hasRequiredMuteActor) return muteActor;
	hasRequiredMuteActor = 1;
	Object.defineProperty(muteActor, "__esModule", { value: true });
	muteActor.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return muteActor;
}

var muteActorList = {};

var hasRequiredMuteActorList;

function requireMuteActorList () {
	if (hasRequiredMuteActorList) return muteActorList;
	hasRequiredMuteActorList = 1;
	Object.defineProperty(muteActorList, "__esModule", { value: true });
	muteActorList.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return muteActorList;
}

var muteThread = {};

var hasRequiredMuteThread;

function requireMuteThread () {
	if (hasRequiredMuteThread) return muteThread;
	hasRequiredMuteThread = 1;
	Object.defineProperty(muteThread, "__esModule", { value: true });
	muteThread.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return muteThread;
}

var searchStarterPacks = {};

var hasRequiredSearchStarterPacks;

function requireSearchStarterPacks () {
	if (hasRequiredSearchStarterPacks) return searchStarterPacks;
	hasRequiredSearchStarterPacks = 1;
	Object.defineProperty(searchStarterPacks, "__esModule", { value: true });
	searchStarterPacks.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return searchStarterPacks;
}

var starterpack = {};

var hasRequiredStarterpack;

function requireStarterpack () {
	if (hasRequiredStarterpack) return starterpack;
	hasRequiredStarterpack = 1;
	Object.defineProperty(starterpack, "__esModule", { value: true });
	starterpack.isRecord = isRecord;
	starterpack.validateRecord = validateRecord;
	starterpack.isFeedItem = isFeedItem;
	starterpack.validateFeedItem = validateFeedItem;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.starterpack';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	const hashFeedItem = 'feedItem';
	function isFeedItem(v) {
	    return is$typed(v, id, hashFeedItem);
	}
	function validateFeedItem(v) {
	    return validate(v, id, hashFeedItem);
	}
	
	return starterpack;
}

var unmuteActor = {};

var hasRequiredUnmuteActor;

function requireUnmuteActor () {
	if (hasRequiredUnmuteActor) return unmuteActor;
	hasRequiredUnmuteActor = 1;
	Object.defineProperty(unmuteActor, "__esModule", { value: true });
	unmuteActor.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return unmuteActor;
}

var unmuteActorList = {};

var hasRequiredUnmuteActorList;

function requireUnmuteActorList () {
	if (hasRequiredUnmuteActorList) return unmuteActorList;
	hasRequiredUnmuteActorList = 1;
	Object.defineProperty(unmuteActorList, "__esModule", { value: true });
	unmuteActorList.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return unmuteActorList;
}

var unmuteThread = {};

var hasRequiredUnmuteThread;

function requireUnmuteThread () {
	if (hasRequiredUnmuteThread) return unmuteThread;
	hasRequiredUnmuteThread = 1;
	Object.defineProperty(unmuteThread, "__esModule", { value: true });
	unmuteThread.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return unmuteThread;
}

var verification = {};

var hasRequiredVerification;

function requireVerification () {
	if (hasRequiredVerification) return verification;
	hasRequiredVerification = 1;
	Object.defineProperty(verification, "__esModule", { value: true });
	verification.isRecord = isRecord;
	verification.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.graph.verification';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return verification;
}

var defs$c = {};

var hasRequiredDefs$c;

function requireDefs$c () {
	if (hasRequiredDefs$c) return defs$c;
	hasRequiredDefs$c = 1;
	Object.defineProperty(defs$c, "__esModule", { value: true });
	defs$c.isLabelerView = isLabelerView;
	defs$c.validateLabelerView = validateLabelerView;
	defs$c.isLabelerViewDetailed = isLabelerViewDetailed;
	defs$c.validateLabelerViewDetailed = validateLabelerViewDetailed;
	defs$c.isLabelerViewerState = isLabelerViewerState;
	defs$c.validateLabelerViewerState = validateLabelerViewerState;
	defs$c.isLabelerPolicies = isLabelerPolicies;
	defs$c.validateLabelerPolicies = validateLabelerPolicies;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.labeler.defs';
	const hashLabelerView = 'labelerView';
	function isLabelerView(v) {
	    return is$typed(v, id, hashLabelerView);
	}
	function validateLabelerView(v) {
	    return validate(v, id, hashLabelerView);
	}
	const hashLabelerViewDetailed = 'labelerViewDetailed';
	function isLabelerViewDetailed(v) {
	    return is$typed(v, id, hashLabelerViewDetailed);
	}
	function validateLabelerViewDetailed(v) {
	    return validate(v, id, hashLabelerViewDetailed);
	}
	const hashLabelerViewerState = 'labelerViewerState';
	function isLabelerViewerState(v) {
	    return is$typed(v, id, hashLabelerViewerState);
	}
	function validateLabelerViewerState(v) {
	    return validate(v, id, hashLabelerViewerState);
	}
	const hashLabelerPolicies = 'labelerPolicies';
	function isLabelerPolicies(v) {
	    return is$typed(v, id, hashLabelerPolicies);
	}
	function validateLabelerPolicies(v) {
	    return validate(v, id, hashLabelerPolicies);
	}
	
	return defs$c;
}

var getServices = {};

var hasRequiredGetServices;

function requireGetServices () {
	if (hasRequiredGetServices) return getServices;
	hasRequiredGetServices = 1;
	Object.defineProperty(getServices, "__esModule", { value: true });
	getServices.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getServices;
}

var service = {};

var hasRequiredService;

function requireService () {
	if (hasRequiredService) return service;
	hasRequiredService = 1;
	Object.defineProperty(service, "__esModule", { value: true });
	service.isRecord = isRecord;
	service.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.labeler.service';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return service;
}

var defs$b = {};

var hasRequiredDefs$b;

function requireDefs$b () {
	if (hasRequiredDefs$b) return defs$b;
	hasRequiredDefs$b = 1;
	Object.defineProperty(defs$b, "__esModule", { value: true });
	defs$b.isRecordDeleted = isRecordDeleted;
	defs$b.validateRecordDeleted = validateRecordDeleted;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.notification.defs';
	const hashRecordDeleted = 'recordDeleted';
	function isRecordDeleted(v) {
	    return is$typed(v, id, hashRecordDeleted);
	}
	function validateRecordDeleted(v) {
	    return validate(v, id, hashRecordDeleted);
	}
	
	return defs$b;
}

var getUnreadCount = {};

var hasRequiredGetUnreadCount;

function requireGetUnreadCount () {
	if (hasRequiredGetUnreadCount) return getUnreadCount;
	hasRequiredGetUnreadCount = 1;
	Object.defineProperty(getUnreadCount, "__esModule", { value: true });
	getUnreadCount.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getUnreadCount;
}

var listNotifications = {};

var hasRequiredListNotifications;

function requireListNotifications () {
	if (hasRequiredListNotifications) return listNotifications;
	hasRequiredListNotifications = 1;
	Object.defineProperty(listNotifications, "__esModule", { value: true });
	listNotifications.toKnownErr = toKnownErr;
	listNotifications.isNotification = isNotification;
	listNotifications.validateNotification = validateNotification;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.notification.listNotifications';
	function toKnownErr(e) {
	    return e;
	}
	const hashNotification = 'notification';
	function isNotification(v) {
	    return is$typed(v, id, hashNotification);
	}
	function validateNotification(v) {
	    return validate(v, id, hashNotification);
	}
	
	return listNotifications;
}

var putPreferences = {};

var hasRequiredPutPreferences;

function requirePutPreferences () {
	if (hasRequiredPutPreferences) return putPreferences;
	hasRequiredPutPreferences = 1;
	Object.defineProperty(putPreferences, "__esModule", { value: true });
	putPreferences.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return putPreferences;
}

var registerPush = {};

var hasRequiredRegisterPush;

function requireRegisterPush () {
	if (hasRequiredRegisterPush) return registerPush;
	hasRequiredRegisterPush = 1;
	Object.defineProperty(registerPush, "__esModule", { value: true });
	registerPush.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return registerPush;
}

var updateSeen = {};

var hasRequiredUpdateSeen;

function requireUpdateSeen () {
	if (hasRequiredUpdateSeen) return updateSeen;
	hasRequiredUpdateSeen = 1;
	Object.defineProperty(updateSeen, "__esModule", { value: true });
	updateSeen.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateSeen;
}

var facet = {};

var hasRequiredFacet;

function requireFacet () {
	if (hasRequiredFacet) return facet;
	hasRequiredFacet = 1;
	Object.defineProperty(facet, "__esModule", { value: true });
	facet.isMain = isMain;
	facet.validateMain = validateMain;
	facet.isMention = isMention;
	facet.validateMention = validateMention;
	facet.isLink = isLink;
	facet.validateLink = validateLink;
	facet.isTag = isTag;
	facet.validateTag = validateTag;
	facet.isByteSlice = isByteSlice;
	facet.validateByteSlice = validateByteSlice;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.richtext.facet';
	const hashMain = 'main';
	function isMain(v) {
	    return is$typed(v, id, hashMain);
	}
	function validateMain(v) {
	    return validate(v, id, hashMain);
	}
	const hashMention = 'mention';
	function isMention(v) {
	    return is$typed(v, id, hashMention);
	}
	function validateMention(v) {
	    return validate(v, id, hashMention);
	}
	const hashLink = 'link';
	function isLink(v) {
	    return is$typed(v, id, hashLink);
	}
	function validateLink(v) {
	    return validate(v, id, hashLink);
	}
	const hashTag = 'tag';
	function isTag(v) {
	    return is$typed(v, id, hashTag);
	}
	function validateTag(v) {
	    return validate(v, id, hashTag);
	}
	const hashByteSlice = 'byteSlice';
	function isByteSlice(v) {
	    return is$typed(v, id, hashByteSlice);
	}
	function validateByteSlice(v) {
	    return validate(v, id, hashByteSlice);
	}
	
	return facet;
}

var defs$a = {};

var hasRequiredDefs$a;

function requireDefs$a () {
	if (hasRequiredDefs$a) return defs$a;
	hasRequiredDefs$a = 1;
	Object.defineProperty(defs$a, "__esModule", { value: true });
	defs$a.isSkeletonSearchPost = isSkeletonSearchPost;
	defs$a.validateSkeletonSearchPost = validateSkeletonSearchPost;
	defs$a.isSkeletonSearchActor = isSkeletonSearchActor;
	defs$a.validateSkeletonSearchActor = validateSkeletonSearchActor;
	defs$a.isSkeletonSearchStarterPack = isSkeletonSearchStarterPack;
	defs$a.validateSkeletonSearchStarterPack = validateSkeletonSearchStarterPack;
	defs$a.isTrendingTopic = isTrendingTopic;
	defs$a.validateTrendingTopic = validateTrendingTopic;
	defs$a.isSkeletonTrend = isSkeletonTrend;
	defs$a.validateSkeletonTrend = validateSkeletonTrend;
	defs$a.isTrendView = isTrendView;
	defs$a.validateTrendView = validateTrendView;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.unspecced.defs';
	const hashSkeletonSearchPost = 'skeletonSearchPost';
	function isSkeletonSearchPost(v) {
	    return is$typed(v, id, hashSkeletonSearchPost);
	}
	function validateSkeletonSearchPost(v) {
	    return validate(v, id, hashSkeletonSearchPost);
	}
	const hashSkeletonSearchActor = 'skeletonSearchActor';
	function isSkeletonSearchActor(v) {
	    return is$typed(v, id, hashSkeletonSearchActor);
	}
	function validateSkeletonSearchActor(v) {
	    return validate(v, id, hashSkeletonSearchActor);
	}
	const hashSkeletonSearchStarterPack = 'skeletonSearchStarterPack';
	function isSkeletonSearchStarterPack(v) {
	    return is$typed(v, id, hashSkeletonSearchStarterPack);
	}
	function validateSkeletonSearchStarterPack(v) {
	    return validate(v, id, hashSkeletonSearchStarterPack);
	}
	const hashTrendingTopic = 'trendingTopic';
	function isTrendingTopic(v) {
	    return is$typed(v, id, hashTrendingTopic);
	}
	function validateTrendingTopic(v) {
	    return validate(v, id, hashTrendingTopic);
	}
	const hashSkeletonTrend = 'skeletonTrend';
	function isSkeletonTrend(v) {
	    return is$typed(v, id, hashSkeletonTrend);
	}
	function validateSkeletonTrend(v) {
	    return validate(v, id, hashSkeletonTrend);
	}
	const hashTrendView = 'trendView';
	function isTrendView(v) {
	    return is$typed(v, id, hashTrendView);
	}
	function validateTrendView(v) {
	    return validate(v, id, hashTrendView);
	}
	
	return defs$a;
}

var getConfig$1 = {};

var hasRequiredGetConfig$1;

function requireGetConfig$1 () {
	if (hasRequiredGetConfig$1) return getConfig$1;
	hasRequiredGetConfig$1 = 1;
	Object.defineProperty(getConfig$1, "__esModule", { value: true });
	getConfig$1.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getConfig$1;
}

var getPopularFeedGenerators = {};

var hasRequiredGetPopularFeedGenerators;

function requireGetPopularFeedGenerators () {
	if (hasRequiredGetPopularFeedGenerators) return getPopularFeedGenerators;
	hasRequiredGetPopularFeedGenerators = 1;
	Object.defineProperty(getPopularFeedGenerators, "__esModule", { value: true });
	getPopularFeedGenerators.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getPopularFeedGenerators;
}

var getSuggestedFeeds = {};

var hasRequiredGetSuggestedFeeds;

function requireGetSuggestedFeeds () {
	if (hasRequiredGetSuggestedFeeds) return getSuggestedFeeds;
	hasRequiredGetSuggestedFeeds = 1;
	Object.defineProperty(getSuggestedFeeds, "__esModule", { value: true });
	getSuggestedFeeds.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedFeeds;
}

var getSuggestedFeedsSkeleton = {};

var hasRequiredGetSuggestedFeedsSkeleton;

function requireGetSuggestedFeedsSkeleton () {
	if (hasRequiredGetSuggestedFeedsSkeleton) return getSuggestedFeedsSkeleton;
	hasRequiredGetSuggestedFeedsSkeleton = 1;
	Object.defineProperty(getSuggestedFeedsSkeleton, "__esModule", { value: true });
	getSuggestedFeedsSkeleton.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedFeedsSkeleton;
}

var getSuggestedStarterPacks = {};

var hasRequiredGetSuggestedStarterPacks;

function requireGetSuggestedStarterPacks () {
	if (hasRequiredGetSuggestedStarterPacks) return getSuggestedStarterPacks;
	hasRequiredGetSuggestedStarterPacks = 1;
	Object.defineProperty(getSuggestedStarterPacks, "__esModule", { value: true });
	getSuggestedStarterPacks.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedStarterPacks;
}

var getSuggestedStarterPacksSkeleton = {};

var hasRequiredGetSuggestedStarterPacksSkeleton;

function requireGetSuggestedStarterPacksSkeleton () {
	if (hasRequiredGetSuggestedStarterPacksSkeleton) return getSuggestedStarterPacksSkeleton;
	hasRequiredGetSuggestedStarterPacksSkeleton = 1;
	Object.defineProperty(getSuggestedStarterPacksSkeleton, "__esModule", { value: true });
	getSuggestedStarterPacksSkeleton.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedStarterPacksSkeleton;
}

var getSuggestedUsers = {};

var hasRequiredGetSuggestedUsers;

function requireGetSuggestedUsers () {
	if (hasRequiredGetSuggestedUsers) return getSuggestedUsers;
	hasRequiredGetSuggestedUsers = 1;
	Object.defineProperty(getSuggestedUsers, "__esModule", { value: true });
	getSuggestedUsers.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedUsers;
}

var getSuggestedUsersSkeleton = {};

var hasRequiredGetSuggestedUsersSkeleton;

function requireGetSuggestedUsersSkeleton () {
	if (hasRequiredGetSuggestedUsersSkeleton) return getSuggestedUsersSkeleton;
	hasRequiredGetSuggestedUsersSkeleton = 1;
	Object.defineProperty(getSuggestedUsersSkeleton, "__esModule", { value: true });
	getSuggestedUsersSkeleton.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestedUsersSkeleton;
}

var getSuggestionsSkeleton = {};

var hasRequiredGetSuggestionsSkeleton;

function requireGetSuggestionsSkeleton () {
	if (hasRequiredGetSuggestionsSkeleton) return getSuggestionsSkeleton;
	hasRequiredGetSuggestionsSkeleton = 1;
	Object.defineProperty(getSuggestionsSkeleton, "__esModule", { value: true });
	getSuggestionsSkeleton.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSuggestionsSkeleton;
}

var getTaggedSuggestions = {};

var hasRequiredGetTaggedSuggestions;

function requireGetTaggedSuggestions () {
	if (hasRequiredGetTaggedSuggestions) return getTaggedSuggestions;
	hasRequiredGetTaggedSuggestions = 1;
	Object.defineProperty(getTaggedSuggestions, "__esModule", { value: true });
	getTaggedSuggestions.toKnownErr = toKnownErr;
	getTaggedSuggestions.isSuggestion = isSuggestion;
	getTaggedSuggestions.validateSuggestion = validateSuggestion;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.unspecced.getTaggedSuggestions';
	function toKnownErr(e) {
	    return e;
	}
	const hashSuggestion = 'suggestion';
	function isSuggestion(v) {
	    return is$typed(v, id, hashSuggestion);
	}
	function validateSuggestion(v) {
	    return validate(v, id, hashSuggestion);
	}
	
	return getTaggedSuggestions;
}

var getTrendingTopics = {};

var hasRequiredGetTrendingTopics;

function requireGetTrendingTopics () {
	if (hasRequiredGetTrendingTopics) return getTrendingTopics;
	hasRequiredGetTrendingTopics = 1;
	Object.defineProperty(getTrendingTopics, "__esModule", { value: true });
	getTrendingTopics.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getTrendingTopics;
}

var getTrends = {};

var hasRequiredGetTrends;

function requireGetTrends () {
	if (hasRequiredGetTrends) return getTrends;
	hasRequiredGetTrends = 1;
	Object.defineProperty(getTrends, "__esModule", { value: true });
	getTrends.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getTrends;
}

var getTrendsSkeleton = {};

var hasRequiredGetTrendsSkeleton;

function requireGetTrendsSkeleton () {
	if (hasRequiredGetTrendsSkeleton) return getTrendsSkeleton;
	hasRequiredGetTrendsSkeleton = 1;
	Object.defineProperty(getTrendsSkeleton, "__esModule", { value: true });
	getTrendsSkeleton.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getTrendsSkeleton;
}

var defs$9 = {};

var hasRequiredDefs$9;

function requireDefs$9 () {
	if (hasRequiredDefs$9) return defs$9;
	hasRequiredDefs$9 = 1;
	Object.defineProperty(defs$9, "__esModule", { value: true });
	defs$9.isJobStatus = isJobStatus;
	defs$9.validateJobStatus = validateJobStatus;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'app.bsky.video.defs';
	const hashJobStatus = 'jobStatus';
	function isJobStatus(v) {
	    return is$typed(v, id, hashJobStatus);
	}
	function validateJobStatus(v) {
	    return validate(v, id, hashJobStatus);
	}
	
	return defs$9;
}

var getJobStatus = {};

var hasRequiredGetJobStatus;

function requireGetJobStatus () {
	if (hasRequiredGetJobStatus) return getJobStatus;
	hasRequiredGetJobStatus = 1;
	Object.defineProperty(getJobStatus, "__esModule", { value: true });
	getJobStatus.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getJobStatus;
}

var getUploadLimits = {};

var hasRequiredGetUploadLimits;

function requireGetUploadLimits () {
	if (hasRequiredGetUploadLimits) return getUploadLimits;
	hasRequiredGetUploadLimits = 1;
	Object.defineProperty(getUploadLimits, "__esModule", { value: true });
	getUploadLimits.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getUploadLimits;
}

var uploadVideo = {};

var hasRequiredUploadVideo;

function requireUploadVideo () {
	if (hasRequiredUploadVideo) return uploadVideo;
	hasRequiredUploadVideo = 1;
	Object.defineProperty(uploadVideo, "__esModule", { value: true });
	uploadVideo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return uploadVideo;
}

var declaration = {};

var hasRequiredDeclaration;

function requireDeclaration () {
	if (hasRequiredDeclaration) return declaration;
	hasRequiredDeclaration = 1;
	Object.defineProperty(declaration, "__esModule", { value: true });
	declaration.isRecord = isRecord;
	declaration.validateRecord = validateRecord;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'chat.bsky.actor.declaration';
	const hashRecord = 'main';
	function isRecord(v) {
	    return is$typed(v, id, hashRecord);
	}
	function validateRecord(v) {
	    return validate(v, id, hashRecord, true);
	}
	
	return declaration;
}

var defs$8 = {};

var hasRequiredDefs$8;

function requireDefs$8 () {
	if (hasRequiredDefs$8) return defs$8;
	hasRequiredDefs$8 = 1;
	Object.defineProperty(defs$8, "__esModule", { value: true });
	defs$8.isProfileViewBasic = isProfileViewBasic;
	defs$8.validateProfileViewBasic = validateProfileViewBasic;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'chat.bsky.actor.defs';
	const hashProfileViewBasic = 'profileViewBasic';
	function isProfileViewBasic(v) {
	    return is$typed(v, id, hashProfileViewBasic);
	}
	function validateProfileViewBasic(v) {
	    return validate(v, id, hashProfileViewBasic);
	}
	
	return defs$8;
}

var deleteAccount = {};

var hasRequiredDeleteAccount;

function requireDeleteAccount () {
	if (hasRequiredDeleteAccount) return deleteAccount;
	hasRequiredDeleteAccount = 1;
	Object.defineProperty(deleteAccount, "__esModule", { value: true });
	deleteAccount.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return deleteAccount;
}

var exportAccountData = {};

var hasRequiredExportAccountData;

function requireExportAccountData () {
	if (hasRequiredExportAccountData) return exportAccountData;
	hasRequiredExportAccountData = 1;
	Object.defineProperty(exportAccountData, "__esModule", { value: true });
	exportAccountData.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return exportAccountData;
}

var acceptConvo = {};

var hasRequiredAcceptConvo;

function requireAcceptConvo () {
	if (hasRequiredAcceptConvo) return acceptConvo;
	hasRequiredAcceptConvo = 1;
	Object.defineProperty(acceptConvo, "__esModule", { value: true });
	acceptConvo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return acceptConvo;
}

var defs$7 = {};

var hasRequiredDefs$7;

function requireDefs$7 () {
	if (hasRequiredDefs$7) return defs$7;
	hasRequiredDefs$7 = 1;
	Object.defineProperty(defs$7, "__esModule", { value: true });
	defs$7.isMessageRef = isMessageRef;
	defs$7.validateMessageRef = validateMessageRef;
	defs$7.isMessageInput = isMessageInput;
	defs$7.validateMessageInput = validateMessageInput;
	defs$7.isMessageView = isMessageView;
	defs$7.validateMessageView = validateMessageView;
	defs$7.isDeletedMessageView = isDeletedMessageView;
	defs$7.validateDeletedMessageView = validateDeletedMessageView;
	defs$7.isMessageViewSender = isMessageViewSender;
	defs$7.validateMessageViewSender = validateMessageViewSender;
	defs$7.isReactionView = isReactionView;
	defs$7.validateReactionView = validateReactionView;
	defs$7.isReactionViewSender = isReactionViewSender;
	defs$7.validateReactionViewSender = validateReactionViewSender;
	defs$7.isMessageAndReactionView = isMessageAndReactionView;
	defs$7.validateMessageAndReactionView = validateMessageAndReactionView;
	defs$7.isConvoView = isConvoView;
	defs$7.validateConvoView = validateConvoView;
	defs$7.isLogBeginConvo = isLogBeginConvo;
	defs$7.validateLogBeginConvo = validateLogBeginConvo;
	defs$7.isLogAcceptConvo = isLogAcceptConvo;
	defs$7.validateLogAcceptConvo = validateLogAcceptConvo;
	defs$7.isLogLeaveConvo = isLogLeaveConvo;
	defs$7.validateLogLeaveConvo = validateLogLeaveConvo;
	defs$7.isLogMuteConvo = isLogMuteConvo;
	defs$7.validateLogMuteConvo = validateLogMuteConvo;
	defs$7.isLogUnmuteConvo = isLogUnmuteConvo;
	defs$7.validateLogUnmuteConvo = validateLogUnmuteConvo;
	defs$7.isLogCreateMessage = isLogCreateMessage;
	defs$7.validateLogCreateMessage = validateLogCreateMessage;
	defs$7.isLogDeleteMessage = isLogDeleteMessage;
	defs$7.validateLogDeleteMessage = validateLogDeleteMessage;
	defs$7.isLogReadMessage = isLogReadMessage;
	defs$7.validateLogReadMessage = validateLogReadMessage;
	defs$7.isLogAddReaction = isLogAddReaction;
	defs$7.validateLogAddReaction = validateLogAddReaction;
	defs$7.isLogRemoveReaction = isLogRemoveReaction;
	defs$7.validateLogRemoveReaction = validateLogRemoveReaction;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'chat.bsky.convo.defs';
	const hashMessageRef = 'messageRef';
	function isMessageRef(v) {
	    return is$typed(v, id, hashMessageRef);
	}
	function validateMessageRef(v) {
	    return validate(v, id, hashMessageRef);
	}
	const hashMessageInput = 'messageInput';
	function isMessageInput(v) {
	    return is$typed(v, id, hashMessageInput);
	}
	function validateMessageInput(v) {
	    return validate(v, id, hashMessageInput);
	}
	const hashMessageView = 'messageView';
	function isMessageView(v) {
	    return is$typed(v, id, hashMessageView);
	}
	function validateMessageView(v) {
	    return validate(v, id, hashMessageView);
	}
	const hashDeletedMessageView = 'deletedMessageView';
	function isDeletedMessageView(v) {
	    return is$typed(v, id, hashDeletedMessageView);
	}
	function validateDeletedMessageView(v) {
	    return validate(v, id, hashDeletedMessageView);
	}
	const hashMessageViewSender = 'messageViewSender';
	function isMessageViewSender(v) {
	    return is$typed(v, id, hashMessageViewSender);
	}
	function validateMessageViewSender(v) {
	    return validate(v, id, hashMessageViewSender);
	}
	const hashReactionView = 'reactionView';
	function isReactionView(v) {
	    return is$typed(v, id, hashReactionView);
	}
	function validateReactionView(v) {
	    return validate(v, id, hashReactionView);
	}
	const hashReactionViewSender = 'reactionViewSender';
	function isReactionViewSender(v) {
	    return is$typed(v, id, hashReactionViewSender);
	}
	function validateReactionViewSender(v) {
	    return validate(v, id, hashReactionViewSender);
	}
	const hashMessageAndReactionView = 'messageAndReactionView';
	function isMessageAndReactionView(v) {
	    return is$typed(v, id, hashMessageAndReactionView);
	}
	function validateMessageAndReactionView(v) {
	    return validate(v, id, hashMessageAndReactionView);
	}
	const hashConvoView = 'convoView';
	function isConvoView(v) {
	    return is$typed(v, id, hashConvoView);
	}
	function validateConvoView(v) {
	    return validate(v, id, hashConvoView);
	}
	const hashLogBeginConvo = 'logBeginConvo';
	function isLogBeginConvo(v) {
	    return is$typed(v, id, hashLogBeginConvo);
	}
	function validateLogBeginConvo(v) {
	    return validate(v, id, hashLogBeginConvo);
	}
	const hashLogAcceptConvo = 'logAcceptConvo';
	function isLogAcceptConvo(v) {
	    return is$typed(v, id, hashLogAcceptConvo);
	}
	function validateLogAcceptConvo(v) {
	    return validate(v, id, hashLogAcceptConvo);
	}
	const hashLogLeaveConvo = 'logLeaveConvo';
	function isLogLeaveConvo(v) {
	    return is$typed(v, id, hashLogLeaveConvo);
	}
	function validateLogLeaveConvo(v) {
	    return validate(v, id, hashLogLeaveConvo);
	}
	const hashLogMuteConvo = 'logMuteConvo';
	function isLogMuteConvo(v) {
	    return is$typed(v, id, hashLogMuteConvo);
	}
	function validateLogMuteConvo(v) {
	    return validate(v, id, hashLogMuteConvo);
	}
	const hashLogUnmuteConvo = 'logUnmuteConvo';
	function isLogUnmuteConvo(v) {
	    return is$typed(v, id, hashLogUnmuteConvo);
	}
	function validateLogUnmuteConvo(v) {
	    return validate(v, id, hashLogUnmuteConvo);
	}
	const hashLogCreateMessage = 'logCreateMessage';
	function isLogCreateMessage(v) {
	    return is$typed(v, id, hashLogCreateMessage);
	}
	function validateLogCreateMessage(v) {
	    return validate(v, id, hashLogCreateMessage);
	}
	const hashLogDeleteMessage = 'logDeleteMessage';
	function isLogDeleteMessage(v) {
	    return is$typed(v, id, hashLogDeleteMessage);
	}
	function validateLogDeleteMessage(v) {
	    return validate(v, id, hashLogDeleteMessage);
	}
	const hashLogReadMessage = 'logReadMessage';
	function isLogReadMessage(v) {
	    return is$typed(v, id, hashLogReadMessage);
	}
	function validateLogReadMessage(v) {
	    return validate(v, id, hashLogReadMessage);
	}
	const hashLogAddReaction = 'logAddReaction';
	function isLogAddReaction(v) {
	    return is$typed(v, id, hashLogAddReaction);
	}
	function validateLogAddReaction(v) {
	    return validate(v, id, hashLogAddReaction);
	}
	const hashLogRemoveReaction = 'logRemoveReaction';
	function isLogRemoveReaction(v) {
	    return is$typed(v, id, hashLogRemoveReaction);
	}
	function validateLogRemoveReaction(v) {
	    return validate(v, id, hashLogRemoveReaction);
	}
	
	return defs$7;
}

var deleteMessageForSelf = {};

var hasRequiredDeleteMessageForSelf;

function requireDeleteMessageForSelf () {
	if (hasRequiredDeleteMessageForSelf) return deleteMessageForSelf;
	hasRequiredDeleteMessageForSelf = 1;
	Object.defineProperty(deleteMessageForSelf, "__esModule", { value: true });
	deleteMessageForSelf.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return deleteMessageForSelf;
}

var getConvo = {};

var hasRequiredGetConvo;

function requireGetConvo () {
	if (hasRequiredGetConvo) return getConvo;
	hasRequiredGetConvo = 1;
	Object.defineProperty(getConvo, "__esModule", { value: true });
	getConvo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getConvo;
}

var getConvoAvailability = {};

var hasRequiredGetConvoAvailability;

function requireGetConvoAvailability () {
	if (hasRequiredGetConvoAvailability) return getConvoAvailability;
	hasRequiredGetConvoAvailability = 1;
	Object.defineProperty(getConvoAvailability, "__esModule", { value: true });
	getConvoAvailability.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getConvoAvailability;
}

var getConvoForMembers = {};

var hasRequiredGetConvoForMembers;

function requireGetConvoForMembers () {
	if (hasRequiredGetConvoForMembers) return getConvoForMembers;
	hasRequiredGetConvoForMembers = 1;
	Object.defineProperty(getConvoForMembers, "__esModule", { value: true });
	getConvoForMembers.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getConvoForMembers;
}

var getLog = {};

var hasRequiredGetLog;

function requireGetLog () {
	if (hasRequiredGetLog) return getLog;
	hasRequiredGetLog = 1;
	Object.defineProperty(getLog, "__esModule", { value: true });
	getLog.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getLog;
}

var getMessages = {};

var hasRequiredGetMessages;

function requireGetMessages () {
	if (hasRequiredGetMessages) return getMessages;
	hasRequiredGetMessages = 1;
	Object.defineProperty(getMessages, "__esModule", { value: true });
	getMessages.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getMessages;
}

var leaveConvo = {};

var hasRequiredLeaveConvo;

function requireLeaveConvo () {
	if (hasRequiredLeaveConvo) return leaveConvo;
	hasRequiredLeaveConvo = 1;
	Object.defineProperty(leaveConvo, "__esModule", { value: true });
	leaveConvo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return leaveConvo;
}

var listConvos = {};

var hasRequiredListConvos;

function requireListConvos () {
	if (hasRequiredListConvos) return listConvos;
	hasRequiredListConvos = 1;
	Object.defineProperty(listConvos, "__esModule", { value: true });
	listConvos.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return listConvos;
}

var muteConvo = {};

var hasRequiredMuteConvo;

function requireMuteConvo () {
	if (hasRequiredMuteConvo) return muteConvo;
	hasRequiredMuteConvo = 1;
	Object.defineProperty(muteConvo, "__esModule", { value: true });
	muteConvo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return muteConvo;
}

var sendMessage = {};

var hasRequiredSendMessage;

function requireSendMessage () {
	if (hasRequiredSendMessage) return sendMessage;
	hasRequiredSendMessage = 1;
	Object.defineProperty(sendMessage, "__esModule", { value: true });
	sendMessage.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return sendMessage;
}

var sendMessageBatch = {};

var hasRequiredSendMessageBatch;

function requireSendMessageBatch () {
	if (hasRequiredSendMessageBatch) return sendMessageBatch;
	hasRequiredSendMessageBatch = 1;
	Object.defineProperty(sendMessageBatch, "__esModule", { value: true });
	sendMessageBatch.toKnownErr = toKnownErr;
	sendMessageBatch.isBatchItem = isBatchItem;
	sendMessageBatch.validateBatchItem = validateBatchItem;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'chat.bsky.convo.sendMessageBatch';
	function toKnownErr(e) {
	    return e;
	}
	const hashBatchItem = 'batchItem';
	function isBatchItem(v) {
	    return is$typed(v, id, hashBatchItem);
	}
	function validateBatchItem(v) {
	    return validate(v, id, hashBatchItem);
	}
	
	return sendMessageBatch;
}

var unmuteConvo = {};

var hasRequiredUnmuteConvo;

function requireUnmuteConvo () {
	if (hasRequiredUnmuteConvo) return unmuteConvo;
	hasRequiredUnmuteConvo = 1;
	Object.defineProperty(unmuteConvo, "__esModule", { value: true });
	unmuteConvo.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return unmuteConvo;
}

var updateAllRead = {};

var hasRequiredUpdateAllRead;

function requireUpdateAllRead () {
	if (hasRequiredUpdateAllRead) return updateAllRead;
	hasRequiredUpdateAllRead = 1;
	Object.defineProperty(updateAllRead, "__esModule", { value: true });
	updateAllRead.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateAllRead;
}

var updateRead = {};

var hasRequiredUpdateRead;

function requireUpdateRead () {
	if (hasRequiredUpdateRead) return updateRead;
	hasRequiredUpdateRead = 1;
	Object.defineProperty(updateRead, "__esModule", { value: true });
	updateRead.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateRead;
}

var getActorMetadata = {};

var hasRequiredGetActorMetadata;

function requireGetActorMetadata () {
	if (hasRequiredGetActorMetadata) return getActorMetadata;
	hasRequiredGetActorMetadata = 1;
	Object.defineProperty(getActorMetadata, "__esModule", { value: true });
	getActorMetadata.toKnownErr = toKnownErr;
	getActorMetadata.isMetadata = isMetadata;
	getActorMetadata.validateMetadata = validateMetadata;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'chat.bsky.moderation.getActorMetadata';
	function toKnownErr(e) {
	    return e;
	}
	const hashMetadata = 'metadata';
	function isMetadata(v) {
	    return is$typed(v, id, hashMetadata);
	}
	function validateMetadata(v) {
	    return validate(v, id, hashMetadata);
	}
	
	return getActorMetadata;
}

var getMessageContext = {};

var hasRequiredGetMessageContext;

function requireGetMessageContext () {
	if (hasRequiredGetMessageContext) return getMessageContext;
	hasRequiredGetMessageContext = 1;
	Object.defineProperty(getMessageContext, "__esModule", { value: true });
	getMessageContext.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getMessageContext;
}

var updateActorAccess = {};

var hasRequiredUpdateActorAccess;

function requireUpdateActorAccess () {
	if (hasRequiredUpdateActorAccess) return updateActorAccess;
	hasRequiredUpdateActorAccess = 1;
	Object.defineProperty(updateActorAccess, "__esModule", { value: true });
	updateActorAccess.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return updateActorAccess;
}

var defs$6 = {};

var hasRequiredDefs$6;

function requireDefs$6 () {
	if (hasRequiredDefs$6) return defs$6;
	hasRequiredDefs$6 = 1;
	Object.defineProperty(defs$6, "__esModule", { value: true });
	defs$6.isTemplateView = isTemplateView;
	defs$6.validateTemplateView = validateTemplateView;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.communication.defs';
	const hashTemplateView = 'templateView';
	function isTemplateView(v) {
	    return is$typed(v, id, hashTemplateView);
	}
	function validateTemplateView(v) {
	    return validate(v, id, hashTemplateView);
	}
	
	return defs$6;
}

var deleteTemplate = {};

var hasRequiredDeleteTemplate;

function requireDeleteTemplate () {
	if (hasRequiredDeleteTemplate) return deleteTemplate;
	hasRequiredDeleteTemplate = 1;
	Object.defineProperty(deleteTemplate, "__esModule", { value: true });
	deleteTemplate.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return deleteTemplate;
}

var listTemplates = {};

var hasRequiredListTemplates;

function requireListTemplates () {
	if (hasRequiredListTemplates) return listTemplates;
	hasRequiredListTemplates = 1;
	Object.defineProperty(listTemplates, "__esModule", { value: true });
	listTemplates.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return listTemplates;
}

var getAccountHistory = {};

var hasRequiredGetAccountHistory;

function requireGetAccountHistory () {
	if (hasRequiredGetAccountHistory) return getAccountHistory;
	hasRequiredGetAccountHistory = 1;
	Object.defineProperty(getAccountHistory, "__esModule", { value: true });
	getAccountHistory.toKnownErr = toKnownErr;
	getAccountHistory.isEvent = isEvent;
	getAccountHistory.validateEvent = validateEvent;
	getAccountHistory.isAccountCreated = isAccountCreated;
	getAccountHistory.validateAccountCreated = validateAccountCreated;
	getAccountHistory.isEmailUpdated = isEmailUpdated;
	getAccountHistory.validateEmailUpdated = validateEmailUpdated;
	getAccountHistory.isEmailConfirmed = isEmailConfirmed;
	getAccountHistory.validateEmailConfirmed = validateEmailConfirmed;
	getAccountHistory.isPasswordUpdated = isPasswordUpdated;
	getAccountHistory.validatePasswordUpdated = validatePasswordUpdated;
	getAccountHistory.isHandleUpdated = isHandleUpdated;
	getAccountHistory.validateHandleUpdated = validateHandleUpdated;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.hosting.getAccountHistory';
	function toKnownErr(e) {
	    return e;
	}
	const hashEvent = 'event';
	function isEvent(v) {
	    return is$typed(v, id, hashEvent);
	}
	function validateEvent(v) {
	    return validate(v, id, hashEvent);
	}
	const hashAccountCreated = 'accountCreated';
	function isAccountCreated(v) {
	    return is$typed(v, id, hashAccountCreated);
	}
	function validateAccountCreated(v) {
	    return validate(v, id, hashAccountCreated);
	}
	const hashEmailUpdated = 'emailUpdated';
	function isEmailUpdated(v) {
	    return is$typed(v, id, hashEmailUpdated);
	}
	function validateEmailUpdated(v) {
	    return validate(v, id, hashEmailUpdated);
	}
	const hashEmailConfirmed = 'emailConfirmed';
	function isEmailConfirmed(v) {
	    return is$typed(v, id, hashEmailConfirmed);
	}
	function validateEmailConfirmed(v) {
	    return validate(v, id, hashEmailConfirmed);
	}
	const hashPasswordUpdated = 'passwordUpdated';
	function isPasswordUpdated(v) {
	    return is$typed(v, id, hashPasswordUpdated);
	}
	function validatePasswordUpdated(v) {
	    return validate(v, id, hashPasswordUpdated);
	}
	const hashHandleUpdated = 'handleUpdated';
	function isHandleUpdated(v) {
	    return is$typed(v, id, hashHandleUpdated);
	}
	function validateHandleUpdated(v) {
	    return validate(v, id, hashHandleUpdated);
	}
	
	return getAccountHistory;
}

var defs$5 = {};

var hasRequiredDefs$5;

function requireDefs$5 () {
	if (hasRequiredDefs$5) return defs$5;
	hasRequiredDefs$5 = 1;
	Object.defineProperty(defs$5, "__esModule", { value: true });
	defs$5.REVIEWNONE = defs$5.REVIEWCLOSED = defs$5.REVIEWESCALATED = defs$5.REVIEWOPEN = void 0;
	defs$5.isModEventView = isModEventView;
	defs$5.validateModEventView = validateModEventView;
	defs$5.isModEventViewDetail = isModEventViewDetail;
	defs$5.validateModEventViewDetail = validateModEventViewDetail;
	defs$5.isSubjectStatusView = isSubjectStatusView;
	defs$5.validateSubjectStatusView = validateSubjectStatusView;
	defs$5.isSubjectView = isSubjectView;
	defs$5.validateSubjectView = validateSubjectView;
	defs$5.isAccountStats = isAccountStats;
	defs$5.validateAccountStats = validateAccountStats;
	defs$5.isRecordsStats = isRecordsStats;
	defs$5.validateRecordsStats = validateRecordsStats;
	defs$5.isModEventTakedown = isModEventTakedown;
	defs$5.validateModEventTakedown = validateModEventTakedown;
	defs$5.isModEventReverseTakedown = isModEventReverseTakedown;
	defs$5.validateModEventReverseTakedown = validateModEventReverseTakedown;
	defs$5.isModEventResolveAppeal = isModEventResolveAppeal;
	defs$5.validateModEventResolveAppeal = validateModEventResolveAppeal;
	defs$5.isModEventComment = isModEventComment;
	defs$5.validateModEventComment = validateModEventComment;
	defs$5.isModEventReport = isModEventReport;
	defs$5.validateModEventReport = validateModEventReport;
	defs$5.isModEventLabel = isModEventLabel;
	defs$5.validateModEventLabel = validateModEventLabel;
	defs$5.isModEventPriorityScore = isModEventPriorityScore;
	defs$5.validateModEventPriorityScore = validateModEventPriorityScore;
	defs$5.isModEventAcknowledge = isModEventAcknowledge;
	defs$5.validateModEventAcknowledge = validateModEventAcknowledge;
	defs$5.isModEventEscalate = isModEventEscalate;
	defs$5.validateModEventEscalate = validateModEventEscalate;
	defs$5.isModEventMute = isModEventMute;
	defs$5.validateModEventMute = validateModEventMute;
	defs$5.isModEventUnmute = isModEventUnmute;
	defs$5.validateModEventUnmute = validateModEventUnmute;
	defs$5.isModEventMuteReporter = isModEventMuteReporter;
	defs$5.validateModEventMuteReporter = validateModEventMuteReporter;
	defs$5.isModEventUnmuteReporter = isModEventUnmuteReporter;
	defs$5.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
	defs$5.isModEventEmail = isModEventEmail;
	defs$5.validateModEventEmail = validateModEventEmail;
	defs$5.isModEventDivert = isModEventDivert;
	defs$5.validateModEventDivert = validateModEventDivert;
	defs$5.isModEventTag = isModEventTag;
	defs$5.validateModEventTag = validateModEventTag;
	defs$5.isAccountEvent = isAccountEvent;
	defs$5.validateAccountEvent = validateAccountEvent;
	defs$5.isIdentityEvent = isIdentityEvent;
	defs$5.validateIdentityEvent = validateIdentityEvent;
	defs$5.isRecordEvent = isRecordEvent;
	defs$5.validateRecordEvent = validateRecordEvent;
	defs$5.isRepoView = isRepoView;
	defs$5.validateRepoView = validateRepoView;
	defs$5.isRepoViewDetail = isRepoViewDetail;
	defs$5.validateRepoViewDetail = validateRepoViewDetail;
	defs$5.isRepoViewNotFound = isRepoViewNotFound;
	defs$5.validateRepoViewNotFound = validateRepoViewNotFound;
	defs$5.isRecordView = isRecordView;
	defs$5.validateRecordView = validateRecordView;
	defs$5.isRecordViewDetail = isRecordViewDetail;
	defs$5.validateRecordViewDetail = validateRecordViewDetail;
	defs$5.isRecordViewNotFound = isRecordViewNotFound;
	defs$5.validateRecordViewNotFound = validateRecordViewNotFound;
	defs$5.isModeration = isModeration;
	defs$5.validateModeration = validateModeration;
	defs$5.isModerationDetail = isModerationDetail;
	defs$5.validateModerationDetail = validateModerationDetail;
	defs$5.isBlobView = isBlobView;
	defs$5.validateBlobView = validateBlobView;
	defs$5.isImageDetails = isImageDetails;
	defs$5.validateImageDetails = validateImageDetails;
	defs$5.isVideoDetails = isVideoDetails;
	defs$5.validateVideoDetails = validateVideoDetails;
	defs$5.isAccountHosting = isAccountHosting;
	defs$5.validateAccountHosting = validateAccountHosting;
	defs$5.isRecordHosting = isRecordHosting;
	defs$5.validateRecordHosting = validateRecordHosting;
	defs$5.isReporterStats = isReporterStats;
	defs$5.validateReporterStats = validateReporterStats;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.moderation.defs';
	const hashModEventView = 'modEventView';
	function isModEventView(v) {
	    return is$typed(v, id, hashModEventView);
	}
	function validateModEventView(v) {
	    return validate(v, id, hashModEventView);
	}
	const hashModEventViewDetail = 'modEventViewDetail';
	function isModEventViewDetail(v) {
	    return is$typed(v, id, hashModEventViewDetail);
	}
	function validateModEventViewDetail(v) {
	    return validate(v, id, hashModEventViewDetail);
	}
	const hashSubjectStatusView = 'subjectStatusView';
	function isSubjectStatusView(v) {
	    return is$typed(v, id, hashSubjectStatusView);
	}
	function validateSubjectStatusView(v) {
	    return validate(v, id, hashSubjectStatusView);
	}
	const hashSubjectView = 'subjectView';
	function isSubjectView(v) {
	    return is$typed(v, id, hashSubjectView);
	}
	function validateSubjectView(v) {
	    return validate(v, id, hashSubjectView);
	}
	const hashAccountStats = 'accountStats';
	function isAccountStats(v) {
	    return is$typed(v, id, hashAccountStats);
	}
	function validateAccountStats(v) {
	    return validate(v, id, hashAccountStats);
	}
	const hashRecordsStats = 'recordsStats';
	function isRecordsStats(v) {
	    return is$typed(v, id, hashRecordsStats);
	}
	function validateRecordsStats(v) {
	    return validate(v, id, hashRecordsStats);
	}
	/** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */
	defs$5.REVIEWOPEN = `${id}#reviewOpen`;
	/** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */
	defs$5.REVIEWESCALATED = `${id}#reviewEscalated`;
	/** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */
	defs$5.REVIEWCLOSED = `${id}#reviewClosed`;
	/** Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it */
	defs$5.REVIEWNONE = `${id}#reviewNone`;
	const hashModEventTakedown = 'modEventTakedown';
	function isModEventTakedown(v) {
	    return is$typed(v, id, hashModEventTakedown);
	}
	function validateModEventTakedown(v) {
	    return validate(v, id, hashModEventTakedown);
	}
	const hashModEventReverseTakedown = 'modEventReverseTakedown';
	function isModEventReverseTakedown(v) {
	    return is$typed(v, id, hashModEventReverseTakedown);
	}
	function validateModEventReverseTakedown(v) {
	    return validate(v, id, hashModEventReverseTakedown);
	}
	const hashModEventResolveAppeal = 'modEventResolveAppeal';
	function isModEventResolveAppeal(v) {
	    return is$typed(v, id, hashModEventResolveAppeal);
	}
	function validateModEventResolveAppeal(v) {
	    return validate(v, id, hashModEventResolveAppeal);
	}
	const hashModEventComment = 'modEventComment';
	function isModEventComment(v) {
	    return is$typed(v, id, hashModEventComment);
	}
	function validateModEventComment(v) {
	    return validate(v, id, hashModEventComment);
	}
	const hashModEventReport = 'modEventReport';
	function isModEventReport(v) {
	    return is$typed(v, id, hashModEventReport);
	}
	function validateModEventReport(v) {
	    return validate(v, id, hashModEventReport);
	}
	const hashModEventLabel = 'modEventLabel';
	function isModEventLabel(v) {
	    return is$typed(v, id, hashModEventLabel);
	}
	function validateModEventLabel(v) {
	    return validate(v, id, hashModEventLabel);
	}
	const hashModEventPriorityScore = 'modEventPriorityScore';
	function isModEventPriorityScore(v) {
	    return is$typed(v, id, hashModEventPriorityScore);
	}
	function validateModEventPriorityScore(v) {
	    return validate(v, id, hashModEventPriorityScore);
	}
	const hashModEventAcknowledge = 'modEventAcknowledge';
	function isModEventAcknowledge(v) {
	    return is$typed(v, id, hashModEventAcknowledge);
	}
	function validateModEventAcknowledge(v) {
	    return validate(v, id, hashModEventAcknowledge);
	}
	const hashModEventEscalate = 'modEventEscalate';
	function isModEventEscalate(v) {
	    return is$typed(v, id, hashModEventEscalate);
	}
	function validateModEventEscalate(v) {
	    return validate(v, id, hashModEventEscalate);
	}
	const hashModEventMute = 'modEventMute';
	function isModEventMute(v) {
	    return is$typed(v, id, hashModEventMute);
	}
	function validateModEventMute(v) {
	    return validate(v, id, hashModEventMute);
	}
	const hashModEventUnmute = 'modEventUnmute';
	function isModEventUnmute(v) {
	    return is$typed(v, id, hashModEventUnmute);
	}
	function validateModEventUnmute(v) {
	    return validate(v, id, hashModEventUnmute);
	}
	const hashModEventMuteReporter = 'modEventMuteReporter';
	function isModEventMuteReporter(v) {
	    return is$typed(v, id, hashModEventMuteReporter);
	}
	function validateModEventMuteReporter(v) {
	    return validate(v, id, hashModEventMuteReporter);
	}
	const hashModEventUnmuteReporter = 'modEventUnmuteReporter';
	function isModEventUnmuteReporter(v) {
	    return is$typed(v, id, hashModEventUnmuteReporter);
	}
	function validateModEventUnmuteReporter(v) {
	    return validate(v, id, hashModEventUnmuteReporter);
	}
	const hashModEventEmail = 'modEventEmail';
	function isModEventEmail(v) {
	    return is$typed(v, id, hashModEventEmail);
	}
	function validateModEventEmail(v) {
	    return validate(v, id, hashModEventEmail);
	}
	const hashModEventDivert = 'modEventDivert';
	function isModEventDivert(v) {
	    return is$typed(v, id, hashModEventDivert);
	}
	function validateModEventDivert(v) {
	    return validate(v, id, hashModEventDivert);
	}
	const hashModEventTag = 'modEventTag';
	function isModEventTag(v) {
	    return is$typed(v, id, hashModEventTag);
	}
	function validateModEventTag(v) {
	    return validate(v, id, hashModEventTag);
	}
	const hashAccountEvent = 'accountEvent';
	function isAccountEvent(v) {
	    return is$typed(v, id, hashAccountEvent);
	}
	function validateAccountEvent(v) {
	    return validate(v, id, hashAccountEvent);
	}
	const hashIdentityEvent = 'identityEvent';
	function isIdentityEvent(v) {
	    return is$typed(v, id, hashIdentityEvent);
	}
	function validateIdentityEvent(v) {
	    return validate(v, id, hashIdentityEvent);
	}
	const hashRecordEvent = 'recordEvent';
	function isRecordEvent(v) {
	    return is$typed(v, id, hashRecordEvent);
	}
	function validateRecordEvent(v) {
	    return validate(v, id, hashRecordEvent);
	}
	const hashRepoView = 'repoView';
	function isRepoView(v) {
	    return is$typed(v, id, hashRepoView);
	}
	function validateRepoView(v) {
	    return validate(v, id, hashRepoView);
	}
	const hashRepoViewDetail = 'repoViewDetail';
	function isRepoViewDetail(v) {
	    return is$typed(v, id, hashRepoViewDetail);
	}
	function validateRepoViewDetail(v) {
	    return validate(v, id, hashRepoViewDetail);
	}
	const hashRepoViewNotFound = 'repoViewNotFound';
	function isRepoViewNotFound(v) {
	    return is$typed(v, id, hashRepoViewNotFound);
	}
	function validateRepoViewNotFound(v) {
	    return validate(v, id, hashRepoViewNotFound);
	}
	const hashRecordView = 'recordView';
	function isRecordView(v) {
	    return is$typed(v, id, hashRecordView);
	}
	function validateRecordView(v) {
	    return validate(v, id, hashRecordView);
	}
	const hashRecordViewDetail = 'recordViewDetail';
	function isRecordViewDetail(v) {
	    return is$typed(v, id, hashRecordViewDetail);
	}
	function validateRecordViewDetail(v) {
	    return validate(v, id, hashRecordViewDetail);
	}
	const hashRecordViewNotFound = 'recordViewNotFound';
	function isRecordViewNotFound(v) {
	    return is$typed(v, id, hashRecordViewNotFound);
	}
	function validateRecordViewNotFound(v) {
	    return validate(v, id, hashRecordViewNotFound);
	}
	const hashModeration = 'moderation';
	function isModeration(v) {
	    return is$typed(v, id, hashModeration);
	}
	function validateModeration(v) {
	    return validate(v, id, hashModeration);
	}
	const hashModerationDetail = 'moderationDetail';
	function isModerationDetail(v) {
	    return is$typed(v, id, hashModerationDetail);
	}
	function validateModerationDetail(v) {
	    return validate(v, id, hashModerationDetail);
	}
	const hashBlobView = 'blobView';
	function isBlobView(v) {
	    return is$typed(v, id, hashBlobView);
	}
	function validateBlobView(v) {
	    return validate(v, id, hashBlobView);
	}
	const hashImageDetails = 'imageDetails';
	function isImageDetails(v) {
	    return is$typed(v, id, hashImageDetails);
	}
	function validateImageDetails(v) {
	    return validate(v, id, hashImageDetails);
	}
	const hashVideoDetails = 'videoDetails';
	function isVideoDetails(v) {
	    return is$typed(v, id, hashVideoDetails);
	}
	function validateVideoDetails(v) {
	    return validate(v, id, hashVideoDetails);
	}
	const hashAccountHosting = 'accountHosting';
	function isAccountHosting(v) {
	    return is$typed(v, id, hashAccountHosting);
	}
	function validateAccountHosting(v) {
	    return validate(v, id, hashAccountHosting);
	}
	const hashRecordHosting = 'recordHosting';
	function isRecordHosting(v) {
	    return is$typed(v, id, hashRecordHosting);
	}
	function validateRecordHosting(v) {
	    return validate(v, id, hashRecordHosting);
	}
	const hashReporterStats = 'reporterStats';
	function isReporterStats(v) {
	    return is$typed(v, id, hashReporterStats);
	}
	function validateReporterStats(v) {
	    return validate(v, id, hashReporterStats);
	}
	
	return defs$5;
}

var getEvent = {};

var hasRequiredGetEvent;

function requireGetEvent () {
	if (hasRequiredGetEvent) return getEvent;
	hasRequiredGetEvent = 1;
	Object.defineProperty(getEvent, "__esModule", { value: true });
	getEvent.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getEvent;
}

var getRecords = {};

var hasRequiredGetRecords;

function requireGetRecords () {
	if (hasRequiredGetRecords) return getRecords;
	hasRequiredGetRecords = 1;
	Object.defineProperty(getRecords, "__esModule", { value: true });
	getRecords.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getRecords;
}

var getReporterStats = {};

var hasRequiredGetReporterStats;

function requireGetReporterStats () {
	if (hasRequiredGetReporterStats) return getReporterStats;
	hasRequiredGetReporterStats = 1;
	Object.defineProperty(getReporterStats, "__esModule", { value: true });
	getReporterStats.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getReporterStats;
}

var getRepos = {};

var hasRequiredGetRepos;

function requireGetRepos () {
	if (hasRequiredGetRepos) return getRepos;
	hasRequiredGetRepos = 1;
	Object.defineProperty(getRepos, "__esModule", { value: true });
	getRepos.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getRepos;
}

var getSubjects = {};

var hasRequiredGetSubjects;

function requireGetSubjects () {
	if (hasRequiredGetSubjects) return getSubjects;
	hasRequiredGetSubjects = 1;
	Object.defineProperty(getSubjects, "__esModule", { value: true });
	getSubjects.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return getSubjects;
}

var queryEvents = {};

var hasRequiredQueryEvents;

function requireQueryEvents () {
	if (hasRequiredQueryEvents) return queryEvents;
	hasRequiredQueryEvents = 1;
	Object.defineProperty(queryEvents, "__esModule", { value: true });
	queryEvents.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return queryEvents;
}

var queryStatuses = {};

var hasRequiredQueryStatuses;

function requireQueryStatuses () {
	if (hasRequiredQueryStatuses) return queryStatuses;
	hasRequiredQueryStatuses = 1;
	Object.defineProperty(queryStatuses, "__esModule", { value: true });
	queryStatuses.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return queryStatuses;
}

var searchRepos = {};

var hasRequiredSearchRepos;

function requireSearchRepos () {
	if (hasRequiredSearchRepos) return searchRepos;
	hasRequiredSearchRepos = 1;
	Object.defineProperty(searchRepos, "__esModule", { value: true });
	searchRepos.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return searchRepos;
}

var getConfig = {};

var hasRequiredGetConfig;

function requireGetConfig () {
	if (hasRequiredGetConfig) return getConfig;
	hasRequiredGetConfig = 1;
	Object.defineProperty(getConfig, "__esModule", { value: true });
	getConfig.toKnownErr = toKnownErr;
	getConfig.isServiceConfig = isServiceConfig;
	getConfig.validateServiceConfig = validateServiceConfig;
	getConfig.isViewerConfig = isViewerConfig;
	getConfig.validateViewerConfig = validateViewerConfig;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.server.getConfig';
	function toKnownErr(e) {
	    return e;
	}
	const hashServiceConfig = 'serviceConfig';
	function isServiceConfig(v) {
	    return is$typed(v, id, hashServiceConfig);
	}
	function validateServiceConfig(v) {
	    return validate(v, id, hashServiceConfig);
	}
	const hashViewerConfig = 'viewerConfig';
	function isViewerConfig(v) {
	    return is$typed(v, id, hashViewerConfig);
	}
	function validateViewerConfig(v) {
	    return validate(v, id, hashViewerConfig);
	}
	
	return getConfig;
}

var addValues = {};

var hasRequiredAddValues;

function requireAddValues () {
	if (hasRequiredAddValues) return addValues;
	hasRequiredAddValues = 1;
	Object.defineProperty(addValues, "__esModule", { value: true });
	addValues.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return addValues;
}

var defs$4 = {};

var hasRequiredDefs$4;

function requireDefs$4 () {
	if (hasRequiredDefs$4) return defs$4;
	hasRequiredDefs$4 = 1;
	Object.defineProperty(defs$4, "__esModule", { value: true });
	defs$4.isSet = isSet;
	defs$4.validateSet = validateSet;
	defs$4.isSetView = isSetView;
	defs$4.validateSetView = validateSetView;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.set.defs';
	const hashSet = 'set';
	function isSet(v) {
	    return is$typed(v, id, hashSet);
	}
	function validateSet(v) {
	    return validate(v, id, hashSet);
	}
	const hashSetView = 'setView';
	function isSetView(v) {
	    return is$typed(v, id, hashSetView);
	}
	function validateSetView(v) {
	    return validate(v, id, hashSetView);
	}
	
	return defs$4;
}

var querySets = {};

var hasRequiredQuerySets;

function requireQuerySets () {
	if (hasRequiredQuerySets) return querySets;
	hasRequiredQuerySets = 1;
	Object.defineProperty(querySets, "__esModule", { value: true });
	querySets.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return querySets;
}

var upsertSet = {};

var hasRequiredUpsertSet;

function requireUpsertSet () {
	if (hasRequiredUpsertSet) return upsertSet;
	hasRequiredUpsertSet = 1;
	Object.defineProperty(upsertSet, "__esModule", { value: true });
	upsertSet.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return upsertSet;
}

var defs$3 = {};

var hasRequiredDefs$3;

function requireDefs$3 () {
	if (hasRequiredDefs$3) return defs$3;
	hasRequiredDefs$3 = 1;
	Object.defineProperty(defs$3, "__esModule", { value: true });
	defs$3.isOption = isOption;
	defs$3.validateOption = validateOption;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.setting.defs';
	const hashOption = 'option';
	function isOption(v) {
	    return is$typed(v, id, hashOption);
	}
	function validateOption(v) {
	    return validate(v, id, hashOption);
	}
	
	return defs$3;
}

var listOptions = {};

var hasRequiredListOptions;

function requireListOptions () {
	if (hasRequiredListOptions) return listOptions;
	hasRequiredListOptions = 1;
	Object.defineProperty(listOptions, "__esModule", { value: true });
	listOptions.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return listOptions;
}

var removeOptions = {};

var hasRequiredRemoveOptions;

function requireRemoveOptions () {
	if (hasRequiredRemoveOptions) return removeOptions;
	hasRequiredRemoveOptions = 1;
	Object.defineProperty(removeOptions, "__esModule", { value: true });
	removeOptions.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return removeOptions;
}

var upsertOption = {};

var hasRequiredUpsertOption;

function requireUpsertOption () {
	if (hasRequiredUpsertOption) return upsertOption;
	hasRequiredUpsertOption = 1;
	Object.defineProperty(upsertOption, "__esModule", { value: true });
	upsertOption.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return upsertOption;
}

var defs$2 = {};

var hasRequiredDefs$2;

function requireDefs$2 () {
	if (hasRequiredDefs$2) return defs$2;
	hasRequiredDefs$2 = 1;
	Object.defineProperty(defs$2, "__esModule", { value: true });
	defs$2.isSigDetail = isSigDetail;
	defs$2.validateSigDetail = validateSigDetail;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.signature.defs';
	const hashSigDetail = 'sigDetail';
	function isSigDetail(v) {
	    return is$typed(v, id, hashSigDetail);
	}
	function validateSigDetail(v) {
	    return validate(v, id, hashSigDetail);
	}
	
	return defs$2;
}

var findCorrelation = {};

var hasRequiredFindCorrelation;

function requireFindCorrelation () {
	if (hasRequiredFindCorrelation) return findCorrelation;
	hasRequiredFindCorrelation = 1;
	Object.defineProperty(findCorrelation, "__esModule", { value: true });
	findCorrelation.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return findCorrelation;
}

var findRelatedAccounts = {};

var hasRequiredFindRelatedAccounts;

function requireFindRelatedAccounts () {
	if (hasRequiredFindRelatedAccounts) return findRelatedAccounts;
	hasRequiredFindRelatedAccounts = 1;
	Object.defineProperty(findRelatedAccounts, "__esModule", { value: true });
	findRelatedAccounts.toKnownErr = toKnownErr;
	findRelatedAccounts.isRelatedAccount = isRelatedAccount;
	findRelatedAccounts.validateRelatedAccount = validateRelatedAccount;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.signature.findRelatedAccounts';
	function toKnownErr(e) {
	    return e;
	}
	const hashRelatedAccount = 'relatedAccount';
	function isRelatedAccount(v) {
	    return is$typed(v, id, hashRelatedAccount);
	}
	function validateRelatedAccount(v) {
	    return validate(v, id, hashRelatedAccount);
	}
	
	return findRelatedAccounts;
}

var searchAccounts = {};

var hasRequiredSearchAccounts;

function requireSearchAccounts () {
	if (hasRequiredSearchAccounts) return searchAccounts;
	hasRequiredSearchAccounts = 1;
	Object.defineProperty(searchAccounts, "__esModule", { value: true });
	searchAccounts.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return searchAccounts;
}

var defs$1 = {};

var hasRequiredDefs$1;

function requireDefs$1 () {
	if (hasRequiredDefs$1) return defs$1;
	hasRequiredDefs$1 = 1;
	Object.defineProperty(defs$1, "__esModule", { value: true });
	defs$1.ROLEVERIFIER = defs$1.ROLETRIAGE = defs$1.ROLEMODERATOR = defs$1.ROLEADMIN = void 0;
	defs$1.isMember = isMember;
	defs$1.validateMember = validateMember;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.team.defs';
	const hashMember = 'member';
	function isMember(v) {
	    return is$typed(v, id, hashMember);
	}
	function validateMember(v) {
	    return validate(v, id, hashMember);
	}
	/** Admin role. Highest level of access, can perform all actions. */
	defs$1.ROLEADMIN = `${id}#roleAdmin`;
	/** Moderator role. Can perform most actions. */
	defs$1.ROLEMODERATOR = `${id}#roleModerator`;
	/** Triage role. Mostly intended for monitoring and escalating issues. */
	defs$1.ROLETRIAGE = `${id}#roleTriage`;
	/** Verifier role. Only allowed to issue verifications. */
	defs$1.ROLEVERIFIER = `${id}#roleVerifier`;
	
	return defs$1;
}

var listMembers = {};

var hasRequiredListMembers;

function requireListMembers () {
	if (hasRequiredListMembers) return listMembers;
	hasRequiredListMembers = 1;
	Object.defineProperty(listMembers, "__esModule", { value: true });
	listMembers.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return listMembers;
}

var defs = {};

var hasRequiredDefs;

function requireDefs () {
	if (hasRequiredDefs) return defs;
	hasRequiredDefs = 1;
	Object.defineProperty(defs, "__esModule", { value: true });
	defs.isVerificationView = isVerificationView;
	defs.validateVerificationView = validateVerificationView;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.verification.defs';
	const hashVerificationView = 'verificationView';
	function isVerificationView(v) {
	    return is$typed(v, id, hashVerificationView);
	}
	function validateVerificationView(v) {
	    return validate(v, id, hashVerificationView);
	}
	
	return defs;
}

var grantVerifications = {};

var hasRequiredGrantVerifications;

function requireGrantVerifications () {
	if (hasRequiredGrantVerifications) return grantVerifications;
	hasRequiredGrantVerifications = 1;
	Object.defineProperty(grantVerifications, "__esModule", { value: true });
	grantVerifications.toKnownErr = toKnownErr;
	grantVerifications.isVerificationInput = isVerificationInput;
	grantVerifications.validateVerificationInput = validateVerificationInput;
	grantVerifications.isGrantError = isGrantError;
	grantVerifications.validateGrantError = validateGrantError;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.verification.grantVerifications';
	function toKnownErr(e) {
	    return e;
	}
	const hashVerificationInput = 'verificationInput';
	function isVerificationInput(v) {
	    return is$typed(v, id, hashVerificationInput);
	}
	function validateVerificationInput(v) {
	    return validate(v, id, hashVerificationInput);
	}
	const hashGrantError = 'grantError';
	function isGrantError(v) {
	    return is$typed(v, id, hashGrantError);
	}
	function validateGrantError(v) {
	    return validate(v, id, hashGrantError);
	}
	
	return grantVerifications;
}

var listVerifications = {};

var hasRequiredListVerifications;

function requireListVerifications () {
	if (hasRequiredListVerifications) return listVerifications;
	hasRequiredListVerifications = 1;
	Object.defineProperty(listVerifications, "__esModule", { value: true });
	listVerifications.toKnownErr = toKnownErr;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	util_1.is$typed; lexicons_1.validate;
	function toKnownErr(e) {
	    return e;
	}
	
	return listVerifications;
}

var revokeVerifications = {};

var hasRequiredRevokeVerifications;

function requireRevokeVerifications () {
	if (hasRequiredRevokeVerifications) return revokeVerifications;
	hasRequiredRevokeVerifications = 1;
	Object.defineProperty(revokeVerifications, "__esModule", { value: true });
	revokeVerifications.toKnownErr = toKnownErr;
	revokeVerifications.isRevokeError = isRevokeError;
	revokeVerifications.validateRevokeError = validateRevokeError;
	const lexicons_1 = requireLexicons();
	const util_1 = requireUtil$4();
	const is$typed = util_1.is$typed, validate = lexicons_1.validate;
	const id = 'tools.ozone.verification.revokeVerifications';
	function toKnownErr(e) {
	    return e;
	}
	const hashRevokeError = 'revokeError';
	function isRevokeError(v) {
	    return is$typed(v, id, hashRevokeError);
	}
	function validateRevokeError(v) {
	    return validate(v, id, hashRevokeError);
	}
	
	return revokeVerifications;
}

var hasRequiredClient;

function requireClient () {
	if (hasRequiredClient) return client$1;
	hasRequiredClient = 1;
	var __createBinding = (client$1 && client$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (client$1 && client$1.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (client$1 && client$1.__importStar) || (function () {
	    var ownKeys = function(o) {
	        ownKeys = Object.getOwnPropertyNames || function (o) {
	            var ar = [];
	            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
	            return ar;
	        };
	        return ownKeys(o);
	    };
	    return function (mod) {
	        if (mod && mod.__esModule) return mod;
	        var result = {};
	        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
	        __setModuleDefault(result, mod);
	        return result;
	    };
	})();
	Object.defineProperty(client$1, "__esModule", { value: true });
	client$1.ComAtprotoServerCreateInviteCode = client$1.ComAtprotoServerCreateAppPassword = client$1.ComAtprotoServerCreateAccount = client$1.ComAtprotoServerConfirmEmail = client$1.ComAtprotoServerCheckAccountStatus = client$1.ComAtprotoServerActivateAccount = client$1.ComAtprotoRepoUploadBlob = client$1.ComAtprotoRepoStrongRef = client$1.ComAtprotoRepoPutRecord = client$1.ComAtprotoRepoListRecords = client$1.ComAtprotoRepoListMissingBlobs = client$1.ComAtprotoRepoImportRepo = client$1.ComAtprotoRepoGetRecord = client$1.ComAtprotoRepoDescribeRepo = client$1.ComAtprotoRepoDeleteRecord = client$1.ComAtprotoRepoDefs = client$1.ComAtprotoRepoCreateRecord = client$1.ComAtprotoRepoApplyWrites = client$1.ComAtprotoModerationDefs = client$1.ComAtprotoModerationCreateReport = client$1.ComAtprotoLexiconSchema = client$1.ComAtprotoLabelSubscribeLabels = client$1.ComAtprotoLabelQueryLabels = client$1.ComAtprotoLabelDefs = client$1.ComAtprotoIdentityUpdateHandle = client$1.ComAtprotoIdentitySubmitPlcOperation = client$1.ComAtprotoIdentitySignPlcOperation = client$1.ComAtprotoIdentityResolveIdentity = client$1.ComAtprotoIdentityResolveHandle = client$1.ComAtprotoIdentityResolveDid = client$1.ComAtprotoIdentityRequestPlcOperationSignature = client$1.ComAtprotoIdentityRefreshIdentity = client$1.ComAtprotoIdentityGetRecommendedDidCredentials = client$1.ComAtprotoIdentityDefs = client$1.ComAtprotoAdminUpdateSubjectStatus = client$1.ComAtprotoAdminUpdateAccountSigningKey = client$1.ComAtprotoAdminUpdateAccountPassword = client$1.ComAtprotoAdminUpdateAccountHandle = client$1.ComAtprotoAdminUpdateAccountEmail = client$1.ComAtprotoAdminSendEmail = client$1.ComAtprotoAdminSearchAccounts = client$1.ComAtprotoAdminGetSubjectStatus = client$1.ComAtprotoAdminGetInviteCodes = client$1.ComAtprotoAdminGetAccountInfos = client$1.ComAtprotoAdminGetAccountInfo = client$1.ComAtprotoAdminEnableAccountInvites = client$1.ComAtprotoAdminDisableInviteCodes = client$1.ComAtprotoAdminDisableAccountInvites = client$1.ComAtprotoAdminDeleteAccount = client$1.ComAtprotoAdminDefs = void 0;
	client$1.AppBskyActorSearchActorsTypeahead = client$1.AppBskyActorSearchActors = client$1.AppBskyActorPutPreferences = client$1.AppBskyActorProfile = client$1.AppBskyActorGetSuggestions = client$1.AppBskyActorGetProfiles = client$1.AppBskyActorGetProfile = client$1.AppBskyActorGetPreferences = client$1.AppBskyActorDefs = client$1.ComAtprotoTempRequestPhoneVerification = client$1.ComAtprotoTempFetchLabels = client$1.ComAtprotoTempCheckSignupQueue = client$1.ComAtprotoTempAddReservedHandle = client$1.ComAtprotoSyncSubscribeRepos = client$1.ComAtprotoSyncRequestCrawl = client$1.ComAtprotoSyncNotifyOfUpdate = client$1.ComAtprotoSyncListReposByCollection = client$1.ComAtprotoSyncListRepos = client$1.ComAtprotoSyncListHosts = client$1.ComAtprotoSyncListBlobs = client$1.ComAtprotoSyncGetRepoStatus = client$1.ComAtprotoSyncGetRepo = client$1.ComAtprotoSyncGetRecord = client$1.ComAtprotoSyncGetLatestCommit = client$1.ComAtprotoSyncGetHostStatus = client$1.ComAtprotoSyncGetHead = client$1.ComAtprotoSyncGetCheckout = client$1.ComAtprotoSyncGetBlocks = client$1.ComAtprotoSyncGetBlob = client$1.ComAtprotoSyncDefs = client$1.ComAtprotoServerUpdateEmail = client$1.ComAtprotoServerRevokeAppPassword = client$1.ComAtprotoServerResetPassword = client$1.ComAtprotoServerReserveSigningKey = client$1.ComAtprotoServerRequestPasswordReset = client$1.ComAtprotoServerRequestEmailUpdate = client$1.ComAtprotoServerRequestEmailConfirmation = client$1.ComAtprotoServerRequestAccountDelete = client$1.ComAtprotoServerRefreshSession = client$1.ComAtprotoServerListAppPasswords = client$1.ComAtprotoServerGetSession = client$1.ComAtprotoServerGetServiceAuth = client$1.ComAtprotoServerGetAccountInviteCodes = client$1.ComAtprotoServerDescribeServer = client$1.ComAtprotoServerDeleteSession = client$1.ComAtprotoServerDeleteAccount = client$1.ComAtprotoServerDefs = client$1.ComAtprotoServerDeactivateAccount = client$1.ComAtprotoServerCreateSession = client$1.ComAtprotoServerCreateInviteCodes = void 0;
	client$1.AppBskyGraphListblock = client$1.AppBskyGraphList = client$1.AppBskyGraphGetSuggestedFollowsByActor = client$1.AppBskyGraphGetStarterPacks = client$1.AppBskyGraphGetStarterPack = client$1.AppBskyGraphGetRelationships = client$1.AppBskyGraphGetMutes = client$1.AppBskyGraphGetLists = client$1.AppBskyGraphGetListMutes = client$1.AppBskyGraphGetListBlocks = client$1.AppBskyGraphGetList = client$1.AppBskyGraphGetKnownFollowers = client$1.AppBskyGraphGetFollows = client$1.AppBskyGraphGetFollowers = client$1.AppBskyGraphGetBlocks = client$1.AppBskyGraphGetActorStarterPacks = client$1.AppBskyGraphFollow = client$1.AppBskyGraphDefs = client$1.AppBskyGraphBlock = client$1.AppBskyFeedThreadgate = client$1.AppBskyFeedSendInteractions = client$1.AppBskyFeedSearchPosts = client$1.AppBskyFeedRepost = client$1.AppBskyFeedPostgate = client$1.AppBskyFeedPost = client$1.AppBskyFeedLike = client$1.AppBskyFeedGetTimeline = client$1.AppBskyFeedGetSuggestedFeeds = client$1.AppBskyFeedGetRepostedBy = client$1.AppBskyFeedGetQuotes = client$1.AppBskyFeedGetPosts = client$1.AppBskyFeedGetPostThread = client$1.AppBskyFeedGetListFeed = client$1.AppBskyFeedGetLikes = client$1.AppBskyFeedGetFeedSkeleton = client$1.AppBskyFeedGetFeedGenerators = client$1.AppBskyFeedGetFeedGenerator = client$1.AppBskyFeedGetFeed = client$1.AppBskyFeedGetAuthorFeed = client$1.AppBskyFeedGetActorLikes = client$1.AppBskyFeedGetActorFeeds = client$1.AppBskyFeedGenerator = client$1.AppBskyFeedDescribeFeedGenerator = client$1.AppBskyFeedDefs = client$1.AppBskyEmbedVideo = client$1.AppBskyEmbedRecordWithMedia = client$1.AppBskyEmbedRecord = client$1.AppBskyEmbedImages = client$1.AppBskyEmbedExternal = client$1.AppBskyEmbedDefs = void 0;
	client$1.ChatBskyConvoGetConvo = client$1.ChatBskyConvoDeleteMessageForSelf = client$1.ChatBskyConvoDefs = client$1.ChatBskyConvoAddReaction = client$1.ChatBskyConvoAcceptConvo = client$1.ChatBskyActorExportAccountData = client$1.ChatBskyActorDeleteAccount = client$1.ChatBskyActorDefs = client$1.ChatBskyActorDeclaration = client$1.AppBskyVideoUploadVideo = client$1.AppBskyVideoGetUploadLimits = client$1.AppBskyVideoGetJobStatus = client$1.AppBskyVideoDefs = client$1.AppBskyUnspeccedSearchStarterPacksSkeleton = client$1.AppBskyUnspeccedSearchPostsSkeleton = client$1.AppBskyUnspeccedSearchActorsSkeleton = client$1.AppBskyUnspeccedGetTrendsSkeleton = client$1.AppBskyUnspeccedGetTrends = client$1.AppBskyUnspeccedGetTrendingTopics = client$1.AppBskyUnspeccedGetTaggedSuggestions = client$1.AppBskyUnspeccedGetSuggestionsSkeleton = client$1.AppBskyUnspeccedGetSuggestedUsersSkeleton = client$1.AppBskyUnspeccedGetSuggestedUsers = client$1.AppBskyUnspeccedGetSuggestedStarterPacksSkeleton = client$1.AppBskyUnspeccedGetSuggestedStarterPacks = client$1.AppBskyUnspeccedGetSuggestedFeedsSkeleton = client$1.AppBskyUnspeccedGetSuggestedFeeds = client$1.AppBskyUnspeccedGetPopularFeedGenerators = client$1.AppBskyUnspeccedGetConfig = client$1.AppBskyUnspeccedDefs = client$1.AppBskyRichtextFacet = client$1.AppBskyNotificationUpdateSeen = client$1.AppBskyNotificationRegisterPush = client$1.AppBskyNotificationPutPreferences = client$1.AppBskyNotificationListNotifications = client$1.AppBskyNotificationGetUnreadCount = client$1.AppBskyNotificationDefs = client$1.AppBskyLabelerService = client$1.AppBskyLabelerGetServices = client$1.AppBskyLabelerDefs = client$1.AppBskyGraphVerification = client$1.AppBskyGraphUnmuteThread = client$1.AppBskyGraphUnmuteActorList = client$1.AppBskyGraphUnmuteActor = client$1.AppBskyGraphStarterpack = client$1.AppBskyGraphSearchStarterPacks = client$1.AppBskyGraphMuteThread = client$1.AppBskyGraphMuteActorList = client$1.AppBskyGraphMuteActor = client$1.AppBskyGraphListitem = void 0;
	client$1.ToolsOzoneSignatureSearchAccounts = client$1.ToolsOzoneSignatureFindRelatedAccounts = client$1.ToolsOzoneSignatureFindCorrelation = client$1.ToolsOzoneSignatureDefs = client$1.ToolsOzoneSettingUpsertOption = client$1.ToolsOzoneSettingRemoveOptions = client$1.ToolsOzoneSettingListOptions = client$1.ToolsOzoneSettingDefs = client$1.ToolsOzoneSetUpsertSet = client$1.ToolsOzoneSetQuerySets = client$1.ToolsOzoneSetGetValues = client$1.ToolsOzoneSetDeleteValues = client$1.ToolsOzoneSetDeleteSet = client$1.ToolsOzoneSetDefs = client$1.ToolsOzoneSetAddValues = client$1.ToolsOzoneServerGetConfig = client$1.ToolsOzoneModerationSearchRepos = client$1.ToolsOzoneModerationQueryStatuses = client$1.ToolsOzoneModerationQueryEvents = client$1.ToolsOzoneModerationGetSubjects = client$1.ToolsOzoneModerationGetRepos = client$1.ToolsOzoneModerationGetReporterStats = client$1.ToolsOzoneModerationGetRepo = client$1.ToolsOzoneModerationGetRecords = client$1.ToolsOzoneModerationGetRecord = client$1.ToolsOzoneModerationGetEvent = client$1.ToolsOzoneModerationEmitEvent = client$1.ToolsOzoneModerationDefs = client$1.ToolsOzoneHostingGetAccountHistory = client$1.ToolsOzoneCommunicationUpdateTemplate = client$1.ToolsOzoneCommunicationListTemplates = client$1.ToolsOzoneCommunicationDeleteTemplate = client$1.ToolsOzoneCommunicationDefs = client$1.ToolsOzoneCommunicationCreateTemplate = client$1.ChatBskyModerationUpdateActorAccess = client$1.ChatBskyModerationGetMessageContext = client$1.ChatBskyModerationGetActorMetadata = client$1.ChatBskyConvoUpdateRead = client$1.ChatBskyConvoUpdateAllRead = client$1.ChatBskyConvoUnmuteConvo = client$1.ChatBskyConvoSendMessageBatch = client$1.ChatBskyConvoSendMessage = client$1.ChatBskyConvoRemoveReaction = client$1.ChatBskyConvoMuteConvo = client$1.ChatBskyConvoListConvos = client$1.ChatBskyConvoLeaveConvo = client$1.ChatBskyConvoGetMessages = client$1.ChatBskyConvoGetLog = client$1.ChatBskyConvoGetConvoForMembers = client$1.ChatBskyConvoGetConvoAvailability = void 0;
	client$1.AppBskyNotificationNS = client$1.AppBskyLabelerServiceRecord = client$1.AppBskyLabelerNS = client$1.AppBskyGraphVerificationRecord = client$1.AppBskyGraphStarterpackRecord = client$1.AppBskyGraphListitemRecord = client$1.AppBskyGraphListblockRecord = client$1.AppBskyGraphListRecord = client$1.AppBskyGraphFollowRecord = client$1.AppBskyGraphBlockRecord = client$1.AppBskyGraphNS = client$1.AppBskyFeedThreadgateRecord = client$1.AppBskyFeedRepostRecord = client$1.AppBskyFeedPostgateRecord = client$1.AppBskyFeedPostRecord = client$1.AppBskyFeedLikeRecord = client$1.AppBskyFeedGeneratorRecord = client$1.AppBskyFeedNS = client$1.AppBskyEmbedNS = client$1.AppBskyActorProfileRecord = client$1.AppBskyActorNS = client$1.AppBskyNS = client$1.AppNS = client$1.ComAtprotoTempNS = client$1.ComAtprotoSyncNS = client$1.ComAtprotoServerNS = client$1.ComAtprotoRepoNS = client$1.ComAtprotoModerationNS = client$1.ComAtprotoLexiconSchemaRecord = client$1.ComAtprotoLexiconNS = client$1.ComAtprotoLabelNS = client$1.ComAtprotoIdentityNS = client$1.ComAtprotoAdminNS = client$1.ComAtprotoNS = client$1.ComNS = client$1.AtpBaseClient = client$1.TOOLS_OZONE_TEAM = client$1.TOOLS_OZONE_MODERATION = client$1.APP_BSKY_GRAPH = client$1.APP_BSKY_FEED = client$1.COM_ATPROTO_MODERATION = client$1.ToolsOzoneVerificationRevokeVerifications = client$1.ToolsOzoneVerificationListVerifications = client$1.ToolsOzoneVerificationGrantVerifications = client$1.ToolsOzoneVerificationDefs = client$1.ToolsOzoneTeamUpdateMember = client$1.ToolsOzoneTeamListMembers = client$1.ToolsOzoneTeamDeleteMember = client$1.ToolsOzoneTeamDefs = client$1.ToolsOzoneTeamAddMember = void 0;
	client$1.ToolsOzoneVerificationNS = client$1.ToolsOzoneTeamNS = client$1.ToolsOzoneSignatureNS = client$1.ToolsOzoneSettingNS = client$1.ToolsOzoneSetNS = client$1.ToolsOzoneServerNS = client$1.ToolsOzoneModerationNS = client$1.ToolsOzoneHostingNS = client$1.ToolsOzoneCommunicationNS = client$1.ToolsOzoneNS = client$1.ToolsNS = client$1.ChatBskyModerationNS = client$1.ChatBskyConvoNS = client$1.ChatBskyActorDeclarationRecord = client$1.ChatBskyActorNS = client$1.ChatBskyNS = client$1.ChatNS = client$1.AppBskyVideoNS = client$1.AppBskyUnspeccedNS = client$1.AppBskyRichtextNS = void 0;
	/**
	 * GENERATED CODE - DO NOT MODIFY
	 */
	const xrpc_1 = requireDist$1();
	const lexicons_js_1 = requireLexicons();
	const ComAtprotoIdentityRefreshIdentity = __importStar(requireRefreshIdentity());
	const ComAtprotoIdentityResolveDid = __importStar(requireResolveDid());
	const ComAtprotoIdentityResolveHandle = __importStar(requireResolveHandle());
	const ComAtprotoIdentityResolveIdentity = __importStar(requireResolveIdentity());
	const ComAtprotoRepoApplyWrites = __importStar(requireApplyWrites());
	const ComAtprotoRepoCreateRecord = __importStar(requireCreateRecord());
	const ComAtprotoRepoDeleteRecord = __importStar(requireDeleteRecord());
	const ComAtprotoRepoGetRecord = __importStar(requireGetRecord$2());
	const ComAtprotoRepoPutRecord = __importStar(requirePutRecord());
	const ComAtprotoServerConfirmEmail = __importStar(requireConfirmEmail());
	const ComAtprotoServerCreateAccount = __importStar(requireCreateAccount());
	const ComAtprotoServerCreateAppPassword = __importStar(requireCreateAppPassword());
	const ComAtprotoServerCreateSession = __importStar(requireCreateSession());
	const ComAtprotoServerDeleteAccount = __importStar(requireDeleteAccount$2());
	const ComAtprotoServerGetAccountInviteCodes = __importStar(requireGetAccountInviteCodes());
	const ComAtprotoServerGetServiceAuth = __importStar(requireGetServiceAuth());
	const ComAtprotoServerListAppPasswords = __importStar(requireListAppPasswords());
	const ComAtprotoServerRefreshSession = __importStar(requireRefreshSession());
	const ComAtprotoServerResetPassword = __importStar(requireResetPassword());
	const ComAtprotoServerUpdateEmail = __importStar(requireUpdateEmail());
	const ComAtprotoSyncGetBlob = __importStar(requireGetBlob());
	const ComAtprotoSyncGetBlocks = __importStar(requireGetBlocks$1());
	const ComAtprotoSyncGetHead = __importStar(requireGetHead());
	const ComAtprotoSyncGetHostStatus = __importStar(requireGetHostStatus());
	const ComAtprotoSyncGetLatestCommit = __importStar(requireGetLatestCommit());
	const ComAtprotoSyncGetRecord = __importStar(requireGetRecord$1());
	const ComAtprotoSyncGetRepo = __importStar(requireGetRepo$1());
	const ComAtprotoSyncGetRepoStatus = __importStar(requireGetRepoStatus());
	const ComAtprotoSyncListBlobs = __importStar(requireListBlobs());
	const ComAtprotoSyncRequestCrawl = __importStar(requireRequestCrawl());
	const AppBskyFeedGetActorLikes = __importStar(requireGetActorLikes());
	const AppBskyFeedGetAuthorFeed = __importStar(requireGetAuthorFeed());
	const AppBskyFeedGetFeed = __importStar(requireGetFeed());
	const AppBskyFeedGetFeedSkeleton = __importStar(requireGetFeedSkeleton());
	const AppBskyFeedGetListFeed = __importStar(requireGetListFeed());
	const AppBskyFeedGetPostThread = __importStar(requireGetPostThread());
	const AppBskyFeedSearchPosts = __importStar(requireSearchPosts());
	const AppBskyGraphGetRelationships = __importStar(requireGetRelationships());
	const AppBskyUnspeccedSearchActorsSkeleton = __importStar(requireSearchActorsSkeleton());
	const AppBskyUnspeccedSearchPostsSkeleton = __importStar(requireSearchPostsSkeleton());
	const AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(requireSearchStarterPacksSkeleton());
	const ChatBskyConvoAddReaction = __importStar(requireAddReaction());
	const ChatBskyConvoRemoveReaction = __importStar(requireRemoveReaction());
	const ToolsOzoneCommunicationCreateTemplate = __importStar(requireCreateTemplate());
	const ToolsOzoneCommunicationUpdateTemplate = __importStar(requireUpdateTemplate());
	const ToolsOzoneModerationEmitEvent = __importStar(requireEmitEvent());
	const ToolsOzoneModerationGetRecord = __importStar(requireGetRecord());
	const ToolsOzoneModerationGetRepo = __importStar(requireGetRepo());
	const ToolsOzoneSetDeleteSet = __importStar(requireDeleteSet());
	const ToolsOzoneSetDeleteValues = __importStar(requireDeleteValues());
	const ToolsOzoneSetGetValues = __importStar(requireGetValues());
	const ToolsOzoneTeamAddMember = __importStar(requireAddMember());
	const ToolsOzoneTeamDeleteMember = __importStar(requireDeleteMember());
	const ToolsOzoneTeamUpdateMember = __importStar(requireUpdateMember());
	client$1.ComAtprotoAdminDefs = __importStar(requireDefs$n());
	client$1.ComAtprotoAdminDeleteAccount = __importStar(requireDeleteAccount$1());
	client$1.ComAtprotoAdminDisableAccountInvites = __importStar(requireDisableAccountInvites());
	client$1.ComAtprotoAdminDisableInviteCodes = __importStar(requireDisableInviteCodes());
	client$1.ComAtprotoAdminEnableAccountInvites = __importStar(requireEnableAccountInvites());
	client$1.ComAtprotoAdminGetAccountInfo = __importStar(requireGetAccountInfo());
	client$1.ComAtprotoAdminGetAccountInfos = __importStar(requireGetAccountInfos());
	client$1.ComAtprotoAdminGetInviteCodes = __importStar(requireGetInviteCodes());
	client$1.ComAtprotoAdminGetSubjectStatus = __importStar(requireGetSubjectStatus());
	client$1.ComAtprotoAdminSearchAccounts = __importStar(requireSearchAccounts$1());
	client$1.ComAtprotoAdminSendEmail = __importStar(requireSendEmail());
	client$1.ComAtprotoAdminUpdateAccountEmail = __importStar(requireUpdateAccountEmail());
	client$1.ComAtprotoAdminUpdateAccountHandle = __importStar(requireUpdateAccountHandle());
	client$1.ComAtprotoAdminUpdateAccountPassword = __importStar(requireUpdateAccountPassword());
	client$1.ComAtprotoAdminUpdateAccountSigningKey = __importStar(requireUpdateAccountSigningKey());
	client$1.ComAtprotoAdminUpdateSubjectStatus = __importStar(requireUpdateSubjectStatus());
	client$1.ComAtprotoIdentityDefs = __importStar(requireDefs$m());
	client$1.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(requireGetRecommendedDidCredentials());
	client$1.ComAtprotoIdentityRefreshIdentity = __importStar(requireRefreshIdentity());
	client$1.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(requireRequestPlcOperationSignature());
	client$1.ComAtprotoIdentityResolveDid = __importStar(requireResolveDid());
	client$1.ComAtprotoIdentityResolveHandle = __importStar(requireResolveHandle());
	client$1.ComAtprotoIdentityResolveIdentity = __importStar(requireResolveIdentity());
	client$1.ComAtprotoIdentitySignPlcOperation = __importStar(requireSignPlcOperation());
	client$1.ComAtprotoIdentitySubmitPlcOperation = __importStar(requireSubmitPlcOperation());
	client$1.ComAtprotoIdentityUpdateHandle = __importStar(requireUpdateHandle());
	client$1.ComAtprotoLabelDefs = __importStar(requireDefs$l());
	client$1.ComAtprotoLabelQueryLabels = __importStar(requireQueryLabels());
	client$1.ComAtprotoLabelSubscribeLabels = __importStar(requireSubscribeLabels());
	client$1.ComAtprotoLexiconSchema = __importStar(requireSchema());
	client$1.ComAtprotoModerationCreateReport = __importStar(requireCreateReport());
	client$1.ComAtprotoModerationDefs = __importStar(requireDefs$k());
	client$1.ComAtprotoRepoApplyWrites = __importStar(requireApplyWrites());
	client$1.ComAtprotoRepoCreateRecord = __importStar(requireCreateRecord());
	client$1.ComAtprotoRepoDefs = __importStar(requireDefs$j());
	client$1.ComAtprotoRepoDeleteRecord = __importStar(requireDeleteRecord());
	client$1.ComAtprotoRepoDescribeRepo = __importStar(requireDescribeRepo());
	client$1.ComAtprotoRepoGetRecord = __importStar(requireGetRecord$2());
	client$1.ComAtprotoRepoImportRepo = __importStar(requireImportRepo());
	client$1.ComAtprotoRepoListMissingBlobs = __importStar(requireListMissingBlobs());
	client$1.ComAtprotoRepoListRecords = __importStar(requireListRecords());
	client$1.ComAtprotoRepoPutRecord = __importStar(requirePutRecord());
	client$1.ComAtprotoRepoStrongRef = __importStar(requireStrongRef());
	client$1.ComAtprotoRepoUploadBlob = __importStar(requireUploadBlob());
	client$1.ComAtprotoServerActivateAccount = __importStar(requireActivateAccount());
	client$1.ComAtprotoServerCheckAccountStatus = __importStar(requireCheckAccountStatus());
	client$1.ComAtprotoServerConfirmEmail = __importStar(requireConfirmEmail());
	client$1.ComAtprotoServerCreateAccount = __importStar(requireCreateAccount());
	client$1.ComAtprotoServerCreateAppPassword = __importStar(requireCreateAppPassword());
	client$1.ComAtprotoServerCreateInviteCode = __importStar(requireCreateInviteCode());
	client$1.ComAtprotoServerCreateInviteCodes = __importStar(requireCreateInviteCodes());
	client$1.ComAtprotoServerCreateSession = __importStar(requireCreateSession());
	client$1.ComAtprotoServerDeactivateAccount = __importStar(requireDeactivateAccount());
	client$1.ComAtprotoServerDefs = __importStar(requireDefs$i());
	client$1.ComAtprotoServerDeleteAccount = __importStar(requireDeleteAccount$2());
	client$1.ComAtprotoServerDeleteSession = __importStar(requireDeleteSession());
	client$1.ComAtprotoServerDescribeServer = __importStar(requireDescribeServer());
	client$1.ComAtprotoServerGetAccountInviteCodes = __importStar(requireGetAccountInviteCodes());
	client$1.ComAtprotoServerGetServiceAuth = __importStar(requireGetServiceAuth());
	client$1.ComAtprotoServerGetSession = __importStar(requireGetSession());
	client$1.ComAtprotoServerListAppPasswords = __importStar(requireListAppPasswords());
	client$1.ComAtprotoServerRefreshSession = __importStar(requireRefreshSession());
	client$1.ComAtprotoServerRequestAccountDelete = __importStar(requireRequestAccountDelete());
	client$1.ComAtprotoServerRequestEmailConfirmation = __importStar(requireRequestEmailConfirmation());
	client$1.ComAtprotoServerRequestEmailUpdate = __importStar(requireRequestEmailUpdate());
	client$1.ComAtprotoServerRequestPasswordReset = __importStar(requireRequestPasswordReset());
	client$1.ComAtprotoServerReserveSigningKey = __importStar(requireReserveSigningKey());
	client$1.ComAtprotoServerResetPassword = __importStar(requireResetPassword());
	client$1.ComAtprotoServerRevokeAppPassword = __importStar(requireRevokeAppPassword());
	client$1.ComAtprotoServerUpdateEmail = __importStar(requireUpdateEmail());
	client$1.ComAtprotoSyncDefs = __importStar(requireDefs$h());
	client$1.ComAtprotoSyncGetBlob = __importStar(requireGetBlob());
	client$1.ComAtprotoSyncGetBlocks = __importStar(requireGetBlocks$1());
	client$1.ComAtprotoSyncGetCheckout = __importStar(requireGetCheckout());
	client$1.ComAtprotoSyncGetHead = __importStar(requireGetHead());
	client$1.ComAtprotoSyncGetHostStatus = __importStar(requireGetHostStatus());
	client$1.ComAtprotoSyncGetLatestCommit = __importStar(requireGetLatestCommit());
	client$1.ComAtprotoSyncGetRecord = __importStar(requireGetRecord$1());
	client$1.ComAtprotoSyncGetRepo = __importStar(requireGetRepo$1());
	client$1.ComAtprotoSyncGetRepoStatus = __importStar(requireGetRepoStatus());
	client$1.ComAtprotoSyncListBlobs = __importStar(requireListBlobs());
	client$1.ComAtprotoSyncListHosts = __importStar(requireListHosts());
	client$1.ComAtprotoSyncListRepos = __importStar(requireListRepos());
	client$1.ComAtprotoSyncListReposByCollection = __importStar(requireListReposByCollection());
	client$1.ComAtprotoSyncNotifyOfUpdate = __importStar(requireNotifyOfUpdate());
	client$1.ComAtprotoSyncRequestCrawl = __importStar(requireRequestCrawl());
	client$1.ComAtprotoSyncSubscribeRepos = __importStar(requireSubscribeRepos());
	client$1.ComAtprotoTempAddReservedHandle = __importStar(requireAddReservedHandle());
	client$1.ComAtprotoTempCheckSignupQueue = __importStar(requireCheckSignupQueue());
	client$1.ComAtprotoTempFetchLabels = __importStar(requireFetchLabels());
	client$1.ComAtprotoTempRequestPhoneVerification = __importStar(requireRequestPhoneVerification());
	client$1.AppBskyActorDefs = __importStar(requireDefs$g());
	client$1.AppBskyActorGetPreferences = __importStar(requireGetPreferences());
	client$1.AppBskyActorGetProfile = __importStar(requireGetProfile());
	client$1.AppBskyActorGetProfiles = __importStar(requireGetProfiles());
	client$1.AppBskyActorGetSuggestions = __importStar(requireGetSuggestions());
	client$1.AppBskyActorProfile = __importStar(requireProfile$1());
	client$1.AppBskyActorPutPreferences = __importStar(requirePutPreferences$1());
	client$1.AppBskyActorSearchActors = __importStar(requireSearchActors());
	client$1.AppBskyActorSearchActorsTypeahead = __importStar(requireSearchActorsTypeahead());
	client$1.AppBskyEmbedDefs = __importStar(requireDefs$f());
	client$1.AppBskyEmbedExternal = __importStar(requireExternal());
	client$1.AppBskyEmbedImages = __importStar(requireImages());
	client$1.AppBskyEmbedRecord = __importStar(requireRecord());
	client$1.AppBskyEmbedRecordWithMedia = __importStar(requireRecordWithMedia());
	client$1.AppBskyEmbedVideo = __importStar(requireVideo());
	client$1.AppBskyFeedDefs = __importStar(requireDefs$e());
	client$1.AppBskyFeedDescribeFeedGenerator = __importStar(requireDescribeFeedGenerator());
	client$1.AppBskyFeedGenerator = __importStar(requireGenerator());
	client$1.AppBskyFeedGetActorFeeds = __importStar(requireGetActorFeeds());
	client$1.AppBskyFeedGetActorLikes = __importStar(requireGetActorLikes());
	client$1.AppBskyFeedGetAuthorFeed = __importStar(requireGetAuthorFeed());
	client$1.AppBskyFeedGetFeed = __importStar(requireGetFeed());
	client$1.AppBskyFeedGetFeedGenerator = __importStar(requireGetFeedGenerator());
	client$1.AppBskyFeedGetFeedGenerators = __importStar(requireGetFeedGenerators());
	client$1.AppBskyFeedGetFeedSkeleton = __importStar(requireGetFeedSkeleton());
	client$1.AppBskyFeedGetLikes = __importStar(requireGetLikes());
	client$1.AppBskyFeedGetListFeed = __importStar(requireGetListFeed());
	client$1.AppBskyFeedGetPostThread = __importStar(requireGetPostThread());
	client$1.AppBskyFeedGetPosts = __importStar(requireGetPosts());
	client$1.AppBskyFeedGetQuotes = __importStar(requireGetQuotes());
	client$1.AppBskyFeedGetRepostedBy = __importStar(requireGetRepostedBy());
	client$1.AppBskyFeedGetSuggestedFeeds = __importStar(requireGetSuggestedFeeds$1());
	client$1.AppBskyFeedGetTimeline = __importStar(requireGetTimeline());
	client$1.AppBskyFeedLike = __importStar(requireLike());
	client$1.AppBskyFeedPost = __importStar(requirePost$1());
	client$1.AppBskyFeedPostgate = __importStar(requirePostgate());
	client$1.AppBskyFeedRepost = __importStar(requireRepost());
	client$1.AppBskyFeedSearchPosts = __importStar(requireSearchPosts());
	client$1.AppBskyFeedSendInteractions = __importStar(requireSendInteractions());
	client$1.AppBskyFeedThreadgate = __importStar(requireThreadgate());
	client$1.AppBskyGraphBlock = __importStar(requireBlock());
	client$1.AppBskyGraphDefs = __importStar(requireDefs$d());
	client$1.AppBskyGraphFollow = __importStar(requireFollow());
	client$1.AppBskyGraphGetActorStarterPacks = __importStar(requireGetActorStarterPacks());
	client$1.AppBskyGraphGetBlocks = __importStar(requireGetBlocks());
	client$1.AppBskyGraphGetFollowers = __importStar(requireGetFollowers());
	client$1.AppBskyGraphGetFollows = __importStar(requireGetFollows());
	client$1.AppBskyGraphGetKnownFollowers = __importStar(requireGetKnownFollowers());
	client$1.AppBskyGraphGetList = __importStar(requireGetList());
	client$1.AppBskyGraphGetListBlocks = __importStar(requireGetListBlocks());
	client$1.AppBskyGraphGetListMutes = __importStar(requireGetListMutes());
	client$1.AppBskyGraphGetLists = __importStar(requireGetLists());
	client$1.AppBskyGraphGetMutes = __importStar(requireGetMutes());
	client$1.AppBskyGraphGetRelationships = __importStar(requireGetRelationships());
	client$1.AppBskyGraphGetStarterPack = __importStar(requireGetStarterPack());
	client$1.AppBskyGraphGetStarterPacks = __importStar(requireGetStarterPacks());
	client$1.AppBskyGraphGetSuggestedFollowsByActor = __importStar(requireGetSuggestedFollowsByActor());
	client$1.AppBskyGraphList = __importStar(requireList());
	client$1.AppBskyGraphListblock = __importStar(requireListblock());
	client$1.AppBskyGraphListitem = __importStar(requireListitem());
	client$1.AppBskyGraphMuteActor = __importStar(requireMuteActor());
	client$1.AppBskyGraphMuteActorList = __importStar(requireMuteActorList());
	client$1.AppBskyGraphMuteThread = __importStar(requireMuteThread());
	client$1.AppBskyGraphSearchStarterPacks = __importStar(requireSearchStarterPacks());
	client$1.AppBskyGraphStarterpack = __importStar(requireStarterpack());
	client$1.AppBskyGraphUnmuteActor = __importStar(requireUnmuteActor());
	client$1.AppBskyGraphUnmuteActorList = __importStar(requireUnmuteActorList());
	client$1.AppBskyGraphUnmuteThread = __importStar(requireUnmuteThread());
	client$1.AppBskyGraphVerification = __importStar(requireVerification());
	client$1.AppBskyLabelerDefs = __importStar(requireDefs$c());
	client$1.AppBskyLabelerGetServices = __importStar(requireGetServices());
	client$1.AppBskyLabelerService = __importStar(requireService());
	client$1.AppBskyNotificationDefs = __importStar(requireDefs$b());
	client$1.AppBskyNotificationGetUnreadCount = __importStar(requireGetUnreadCount());
	client$1.AppBskyNotificationListNotifications = __importStar(requireListNotifications());
	client$1.AppBskyNotificationPutPreferences = __importStar(requirePutPreferences());
	client$1.AppBskyNotificationRegisterPush = __importStar(requireRegisterPush());
	client$1.AppBskyNotificationUpdateSeen = __importStar(requireUpdateSeen());
	client$1.AppBskyRichtextFacet = __importStar(requireFacet());
	client$1.AppBskyUnspeccedDefs = __importStar(requireDefs$a());
	client$1.AppBskyUnspeccedGetConfig = __importStar(requireGetConfig$1());
	client$1.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(requireGetPopularFeedGenerators());
	client$1.AppBskyUnspeccedGetSuggestedFeeds = __importStar(requireGetSuggestedFeeds());
	client$1.AppBskyUnspeccedGetSuggestedFeedsSkeleton = __importStar(requireGetSuggestedFeedsSkeleton());
	client$1.AppBskyUnspeccedGetSuggestedStarterPacks = __importStar(requireGetSuggestedStarterPacks());
	client$1.AppBskyUnspeccedGetSuggestedStarterPacksSkeleton = __importStar(requireGetSuggestedStarterPacksSkeleton());
	client$1.AppBskyUnspeccedGetSuggestedUsers = __importStar(requireGetSuggestedUsers());
	client$1.AppBskyUnspeccedGetSuggestedUsersSkeleton = __importStar(requireGetSuggestedUsersSkeleton());
	client$1.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(requireGetSuggestionsSkeleton());
	client$1.AppBskyUnspeccedGetTaggedSuggestions = __importStar(requireGetTaggedSuggestions());
	client$1.AppBskyUnspeccedGetTrendingTopics = __importStar(requireGetTrendingTopics());
	client$1.AppBskyUnspeccedGetTrends = __importStar(requireGetTrends());
	client$1.AppBskyUnspeccedGetTrendsSkeleton = __importStar(requireGetTrendsSkeleton());
	client$1.AppBskyUnspeccedSearchActorsSkeleton = __importStar(requireSearchActorsSkeleton());
	client$1.AppBskyUnspeccedSearchPostsSkeleton = __importStar(requireSearchPostsSkeleton());
	client$1.AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(requireSearchStarterPacksSkeleton());
	client$1.AppBskyVideoDefs = __importStar(requireDefs$9());
	client$1.AppBskyVideoGetJobStatus = __importStar(requireGetJobStatus());
	client$1.AppBskyVideoGetUploadLimits = __importStar(requireGetUploadLimits());
	client$1.AppBskyVideoUploadVideo = __importStar(requireUploadVideo());
	client$1.ChatBskyActorDeclaration = __importStar(requireDeclaration());
	client$1.ChatBskyActorDefs = __importStar(requireDefs$8());
	client$1.ChatBskyActorDeleteAccount = __importStar(requireDeleteAccount());
	client$1.ChatBskyActorExportAccountData = __importStar(requireExportAccountData());
	client$1.ChatBskyConvoAcceptConvo = __importStar(requireAcceptConvo());
	client$1.ChatBskyConvoAddReaction = __importStar(requireAddReaction());
	client$1.ChatBskyConvoDefs = __importStar(requireDefs$7());
	client$1.ChatBskyConvoDeleteMessageForSelf = __importStar(requireDeleteMessageForSelf());
	client$1.ChatBskyConvoGetConvo = __importStar(requireGetConvo());
	client$1.ChatBskyConvoGetConvoAvailability = __importStar(requireGetConvoAvailability());
	client$1.ChatBskyConvoGetConvoForMembers = __importStar(requireGetConvoForMembers());
	client$1.ChatBskyConvoGetLog = __importStar(requireGetLog());
	client$1.ChatBskyConvoGetMessages = __importStar(requireGetMessages());
	client$1.ChatBskyConvoLeaveConvo = __importStar(requireLeaveConvo());
	client$1.ChatBskyConvoListConvos = __importStar(requireListConvos());
	client$1.ChatBskyConvoMuteConvo = __importStar(requireMuteConvo());
	client$1.ChatBskyConvoRemoveReaction = __importStar(requireRemoveReaction());
	client$1.ChatBskyConvoSendMessage = __importStar(requireSendMessage());
	client$1.ChatBskyConvoSendMessageBatch = __importStar(requireSendMessageBatch());
	client$1.ChatBskyConvoUnmuteConvo = __importStar(requireUnmuteConvo());
	client$1.ChatBskyConvoUpdateAllRead = __importStar(requireUpdateAllRead());
	client$1.ChatBskyConvoUpdateRead = __importStar(requireUpdateRead());
	client$1.ChatBskyModerationGetActorMetadata = __importStar(requireGetActorMetadata());
	client$1.ChatBskyModerationGetMessageContext = __importStar(requireGetMessageContext());
	client$1.ChatBskyModerationUpdateActorAccess = __importStar(requireUpdateActorAccess());
	client$1.ToolsOzoneCommunicationCreateTemplate = __importStar(requireCreateTemplate());
	client$1.ToolsOzoneCommunicationDefs = __importStar(requireDefs$6());
	client$1.ToolsOzoneCommunicationDeleteTemplate = __importStar(requireDeleteTemplate());
	client$1.ToolsOzoneCommunicationListTemplates = __importStar(requireListTemplates());
	client$1.ToolsOzoneCommunicationUpdateTemplate = __importStar(requireUpdateTemplate());
	client$1.ToolsOzoneHostingGetAccountHistory = __importStar(requireGetAccountHistory());
	client$1.ToolsOzoneModerationDefs = __importStar(requireDefs$5());
	client$1.ToolsOzoneModerationEmitEvent = __importStar(requireEmitEvent());
	client$1.ToolsOzoneModerationGetEvent = __importStar(requireGetEvent());
	client$1.ToolsOzoneModerationGetRecord = __importStar(requireGetRecord());
	client$1.ToolsOzoneModerationGetRecords = __importStar(requireGetRecords());
	client$1.ToolsOzoneModerationGetRepo = __importStar(requireGetRepo());
	client$1.ToolsOzoneModerationGetReporterStats = __importStar(requireGetReporterStats());
	client$1.ToolsOzoneModerationGetRepos = __importStar(requireGetRepos());
	client$1.ToolsOzoneModerationGetSubjects = __importStar(requireGetSubjects());
	client$1.ToolsOzoneModerationQueryEvents = __importStar(requireQueryEvents());
	client$1.ToolsOzoneModerationQueryStatuses = __importStar(requireQueryStatuses());
	client$1.ToolsOzoneModerationSearchRepos = __importStar(requireSearchRepos());
	client$1.ToolsOzoneServerGetConfig = __importStar(requireGetConfig());
	client$1.ToolsOzoneSetAddValues = __importStar(requireAddValues());
	client$1.ToolsOzoneSetDefs = __importStar(requireDefs$4());
	client$1.ToolsOzoneSetDeleteSet = __importStar(requireDeleteSet());
	client$1.ToolsOzoneSetDeleteValues = __importStar(requireDeleteValues());
	client$1.ToolsOzoneSetGetValues = __importStar(requireGetValues());
	client$1.ToolsOzoneSetQuerySets = __importStar(requireQuerySets());
	client$1.ToolsOzoneSetUpsertSet = __importStar(requireUpsertSet());
	client$1.ToolsOzoneSettingDefs = __importStar(requireDefs$3());
	client$1.ToolsOzoneSettingListOptions = __importStar(requireListOptions());
	client$1.ToolsOzoneSettingRemoveOptions = __importStar(requireRemoveOptions());
	client$1.ToolsOzoneSettingUpsertOption = __importStar(requireUpsertOption());
	client$1.ToolsOzoneSignatureDefs = __importStar(requireDefs$2());
	client$1.ToolsOzoneSignatureFindCorrelation = __importStar(requireFindCorrelation());
	client$1.ToolsOzoneSignatureFindRelatedAccounts = __importStar(requireFindRelatedAccounts());
	client$1.ToolsOzoneSignatureSearchAccounts = __importStar(requireSearchAccounts());
	client$1.ToolsOzoneTeamAddMember = __importStar(requireAddMember());
	client$1.ToolsOzoneTeamDefs = __importStar(requireDefs$1());
	client$1.ToolsOzoneTeamDeleteMember = __importStar(requireDeleteMember());
	client$1.ToolsOzoneTeamListMembers = __importStar(requireListMembers());
	client$1.ToolsOzoneTeamUpdateMember = __importStar(requireUpdateMember());
	client$1.ToolsOzoneVerificationDefs = __importStar(requireDefs());
	client$1.ToolsOzoneVerificationGrantVerifications = __importStar(requireGrantVerifications());
	client$1.ToolsOzoneVerificationListVerifications = __importStar(requireListVerifications());
	client$1.ToolsOzoneVerificationRevokeVerifications = __importStar(requireRevokeVerifications());
	client$1.COM_ATPROTO_MODERATION = {
	    DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',
	    DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',
	    DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',
	    DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',
	    DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',
	    DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',
	    DefsReasonAppeal: 'com.atproto.moderation.defs#reasonAppeal',
	};
	client$1.APP_BSKY_FEED = {
	    DefsRequestLess: 'app.bsky.feed.defs#requestLess',
	    DefsRequestMore: 'app.bsky.feed.defs#requestMore',
	    DefsClickthroughItem: 'app.bsky.feed.defs#clickthroughItem',
	    DefsClickthroughAuthor: 'app.bsky.feed.defs#clickthroughAuthor',
	    DefsClickthroughReposter: 'app.bsky.feed.defs#clickthroughReposter',
	    DefsClickthroughEmbed: 'app.bsky.feed.defs#clickthroughEmbed',
	    DefsContentModeUnspecified: 'app.bsky.feed.defs#contentModeUnspecified',
	    DefsContentModeVideo: 'app.bsky.feed.defs#contentModeVideo',
	    DefsInteractionSeen: 'app.bsky.feed.defs#interactionSeen',
	    DefsInteractionLike: 'app.bsky.feed.defs#interactionLike',
	    DefsInteractionRepost: 'app.bsky.feed.defs#interactionRepost',
	    DefsInteractionReply: 'app.bsky.feed.defs#interactionReply',
	    DefsInteractionQuote: 'app.bsky.feed.defs#interactionQuote',
	    DefsInteractionShare: 'app.bsky.feed.defs#interactionShare',
	};
	client$1.APP_BSKY_GRAPH = {
	    DefsModlist: 'app.bsky.graph.defs#modlist',
	    DefsCuratelist: 'app.bsky.graph.defs#curatelist',
	    DefsReferencelist: 'app.bsky.graph.defs#referencelist',
	};
	client$1.TOOLS_OZONE_MODERATION = {
	    DefsReviewOpen: 'tools.ozone.moderation.defs#reviewOpen',
	    DefsReviewEscalated: 'tools.ozone.moderation.defs#reviewEscalated',
	    DefsReviewClosed: 'tools.ozone.moderation.defs#reviewClosed',
	    DefsReviewNone: 'tools.ozone.moderation.defs#reviewNone',
	};
	client$1.TOOLS_OZONE_TEAM = {
	    DefsRoleAdmin: 'tools.ozone.team.defs#roleAdmin',
	    DefsRoleModerator: 'tools.ozone.team.defs#roleModerator',
	    DefsRoleTriage: 'tools.ozone.team.defs#roleTriage',
	    DefsRoleVerifier: 'tools.ozone.team.defs#roleVerifier',
	};
	class AtpBaseClient extends xrpc_1.XrpcClient {
	    constructor(options) {
	        super(options, lexicons_js_1.schemas);
	        Object.defineProperty(this, "com", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "app", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "chat", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "tools", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this.com = new ComNS(this);
	        this.app = new AppNS(this);
	        this.chat = new ChatNS(this);
	        this.tools = new ToolsNS(this);
	    }
	    /** @deprecated use `this` instead */
	    get xrpc() {
	        return this;
	    }
	}
	client$1.AtpBaseClient = AtpBaseClient;
	class ComNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "atproto", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.atproto = new ComAtprotoNS(client);
	    }
	}
	client$1.ComNS = ComNS;
	class ComAtprotoNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "admin", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "identity", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "label", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "lexicon", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "moderation", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "repo", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "server", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "sync", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "temp", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.admin = new ComAtprotoAdminNS(client);
	        this.identity = new ComAtprotoIdentityNS(client);
	        this.label = new ComAtprotoLabelNS(client);
	        this.lexicon = new ComAtprotoLexiconNS(client);
	        this.moderation = new ComAtprotoModerationNS(client);
	        this.repo = new ComAtprotoRepoNS(client);
	        this.server = new ComAtprotoServerNS(client);
	        this.sync = new ComAtprotoSyncNS(client);
	        this.temp = new ComAtprotoTempNS(client);
	    }
	}
	client$1.ComAtprotoNS = ComAtprotoNS;
	class ComAtprotoAdminNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    deleteAccount(data, opts) {
	        return this._client.call('com.atproto.admin.deleteAccount', opts?.qp, data, opts);
	    }
	    disableAccountInvites(data, opts) {
	        return this._client.call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts);
	    }
	    disableInviteCodes(data, opts) {
	        return this._client.call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts);
	    }
	    enableAccountInvites(data, opts) {
	        return this._client.call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts);
	    }
	    getAccountInfo(params, opts) {
	        return this._client.call('com.atproto.admin.getAccountInfo', params, undefined, opts);
	    }
	    getAccountInfos(params, opts) {
	        return this._client.call('com.atproto.admin.getAccountInfos', params, undefined, opts);
	    }
	    getInviteCodes(params, opts) {
	        return this._client.call('com.atproto.admin.getInviteCodes', params, undefined, opts);
	    }
	    getSubjectStatus(params, opts) {
	        return this._client.call('com.atproto.admin.getSubjectStatus', params, undefined, opts);
	    }
	    searchAccounts(params, opts) {
	        return this._client.call('com.atproto.admin.searchAccounts', params, undefined, opts);
	    }
	    sendEmail(data, opts) {
	        return this._client.call('com.atproto.admin.sendEmail', opts?.qp, data, opts);
	    }
	    updateAccountEmail(data, opts) {
	        return this._client.call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts);
	    }
	    updateAccountHandle(data, opts) {
	        return this._client.call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts);
	    }
	    updateAccountPassword(data, opts) {
	        return this._client.call('com.atproto.admin.updateAccountPassword', opts?.qp, data, opts);
	    }
	    updateAccountSigningKey(data, opts) {
	        return this._client.call('com.atproto.admin.updateAccountSigningKey', opts?.qp, data, opts);
	    }
	    updateSubjectStatus(data, opts) {
	        return this._client.call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts);
	    }
	}
	client$1.ComAtprotoAdminNS = ComAtprotoAdminNS;
	class ComAtprotoIdentityNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getRecommendedDidCredentials(params, opts) {
	        return this._client.call('com.atproto.identity.getRecommendedDidCredentials', params, undefined, opts);
	    }
	    refreshIdentity(data, opts) {
	        return this._client
	            .call('com.atproto.identity.refreshIdentity', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoIdentityRefreshIdentity.toKnownErr(e);
	        });
	    }
	    requestPlcOperationSignature(data, opts) {
	        return this._client.call('com.atproto.identity.requestPlcOperationSignature', opts?.qp, data, opts);
	    }
	    resolveDid(params, opts) {
	        return this._client
	            .call('com.atproto.identity.resolveDid', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoIdentityResolveDid.toKnownErr(e);
	        });
	    }
	    resolveHandle(params, opts) {
	        return this._client
	            .call('com.atproto.identity.resolveHandle', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoIdentityResolveHandle.toKnownErr(e);
	        });
	    }
	    resolveIdentity(params, opts) {
	        return this._client
	            .call('com.atproto.identity.resolveIdentity', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoIdentityResolveIdentity.toKnownErr(e);
	        });
	    }
	    signPlcOperation(data, opts) {
	        return this._client.call('com.atproto.identity.signPlcOperation', opts?.qp, data, opts);
	    }
	    submitPlcOperation(data, opts) {
	        return this._client.call('com.atproto.identity.submitPlcOperation', opts?.qp, data, opts);
	    }
	    updateHandle(data, opts) {
	        return this._client.call('com.atproto.identity.updateHandle', opts?.qp, data, opts);
	    }
	}
	client$1.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
	class ComAtprotoLabelNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    queryLabels(params, opts) {
	        return this._client.call('com.atproto.label.queryLabels', params, undefined, opts);
	    }
	}
	client$1.ComAtprotoLabelNS = ComAtprotoLabelNS;
	class ComAtprotoLexiconNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "schema", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.schema = new ComAtprotoLexiconSchemaRecord(client);
	    }
	}
	client$1.ComAtprotoLexiconNS = ComAtprotoLexiconNS;
	class ComAtprotoLexiconSchemaRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'com.atproto.lexicon.schema',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'com.atproto.lexicon.schema',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'com.atproto.lexicon.schema';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'com.atproto.lexicon.schema', ...params }, { headers });
	    }
	}
	client$1.ComAtprotoLexiconSchemaRecord = ComAtprotoLexiconSchemaRecord;
	class ComAtprotoModerationNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    createReport(data, opts) {
	        return this._client.call('com.atproto.moderation.createReport', opts?.qp, data, opts);
	    }
	}
	client$1.ComAtprotoModerationNS = ComAtprotoModerationNS;
	class ComAtprotoRepoNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    applyWrites(data, opts) {
	        return this._client
	            .call('com.atproto.repo.applyWrites', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoRepoApplyWrites.toKnownErr(e);
	        });
	    }
	    createRecord(data, opts) {
	        return this._client
	            .call('com.atproto.repo.createRecord', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoRepoCreateRecord.toKnownErr(e);
	        });
	    }
	    deleteRecord(data, opts) {
	        return this._client
	            .call('com.atproto.repo.deleteRecord', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
	        });
	    }
	    describeRepo(params, opts) {
	        return this._client.call('com.atproto.repo.describeRepo', params, undefined, opts);
	    }
	    getRecord(params, opts) {
	        return this._client
	            .call('com.atproto.repo.getRecord', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoRepoGetRecord.toKnownErr(e);
	        });
	    }
	    importRepo(data, opts) {
	        return this._client.call('com.atproto.repo.importRepo', opts?.qp, data, opts);
	    }
	    listMissingBlobs(params, opts) {
	        return this._client.call('com.atproto.repo.listMissingBlobs', params, undefined, opts);
	    }
	    listRecords(params, opts) {
	        return this._client.call('com.atproto.repo.listRecords', params, undefined, opts);
	    }
	    putRecord(data, opts) {
	        return this._client
	            .call('com.atproto.repo.putRecord', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoRepoPutRecord.toKnownErr(e);
	        });
	    }
	    uploadBlob(data, opts) {
	        return this._client.call('com.atproto.repo.uploadBlob', opts?.qp, data, opts);
	    }
	}
	client$1.ComAtprotoRepoNS = ComAtprotoRepoNS;
	class ComAtprotoServerNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    activateAccount(data, opts) {
	        return this._client.call('com.atproto.server.activateAccount', opts?.qp, data, opts);
	    }
	    checkAccountStatus(params, opts) {
	        return this._client.call('com.atproto.server.checkAccountStatus', params, undefined, opts);
	    }
	    confirmEmail(data, opts) {
	        return this._client
	            .call('com.atproto.server.confirmEmail', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerConfirmEmail.toKnownErr(e);
	        });
	    }
	    createAccount(data, opts) {
	        return this._client
	            .call('com.atproto.server.createAccount', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerCreateAccount.toKnownErr(e);
	        });
	    }
	    createAppPassword(data, opts) {
	        return this._client
	            .call('com.atproto.server.createAppPassword', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
	        });
	    }
	    createInviteCode(data, opts) {
	        return this._client.call('com.atproto.server.createInviteCode', opts?.qp, data, opts);
	    }
	    createInviteCodes(data, opts) {
	        return this._client.call('com.atproto.server.createInviteCodes', opts?.qp, data, opts);
	    }
	    createSession(data, opts) {
	        return this._client
	            .call('com.atproto.server.createSession', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerCreateSession.toKnownErr(e);
	        });
	    }
	    deactivateAccount(data, opts) {
	        return this._client.call('com.atproto.server.deactivateAccount', opts?.qp, data, opts);
	    }
	    deleteAccount(data, opts) {
	        return this._client
	            .call('com.atproto.server.deleteAccount', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerDeleteAccount.toKnownErr(e);
	        });
	    }
	    deleteSession(data, opts) {
	        return this._client.call('com.atproto.server.deleteSession', opts?.qp, data, opts);
	    }
	    describeServer(params, opts) {
	        return this._client.call('com.atproto.server.describeServer', params, undefined, opts);
	    }
	    getAccountInviteCodes(params, opts) {
	        return this._client
	            .call('com.atproto.server.getAccountInviteCodes', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
	        });
	    }
	    getServiceAuth(params, opts) {
	        return this._client
	            .call('com.atproto.server.getServiceAuth', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
	        });
	    }
	    getSession(params, opts) {
	        return this._client.call('com.atproto.server.getSession', params, undefined, opts);
	    }
	    listAppPasswords(params, opts) {
	        return this._client
	            .call('com.atproto.server.listAppPasswords', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoServerListAppPasswords.toKnownErr(e);
	        });
	    }
	    refreshSession(data, opts) {
	        return this._client
	            .call('com.atproto.server.refreshSession', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerRefreshSession.toKnownErr(e);
	        });
	    }
	    requestAccountDelete(data, opts) {
	        return this._client.call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts);
	    }
	    requestEmailConfirmation(data, opts) {
	        return this._client.call('com.atproto.server.requestEmailConfirmation', opts?.qp, data, opts);
	    }
	    requestEmailUpdate(data, opts) {
	        return this._client.call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts);
	    }
	    requestPasswordReset(data, opts) {
	        return this._client.call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts);
	    }
	    reserveSigningKey(data, opts) {
	        return this._client.call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts);
	    }
	    resetPassword(data, opts) {
	        return this._client
	            .call('com.atproto.server.resetPassword', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerResetPassword.toKnownErr(e);
	        });
	    }
	    revokeAppPassword(data, opts) {
	        return this._client.call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts);
	    }
	    updateEmail(data, opts) {
	        return this._client
	            .call('com.atproto.server.updateEmail', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoServerUpdateEmail.toKnownErr(e);
	        });
	    }
	}
	client$1.ComAtprotoServerNS = ComAtprotoServerNS;
	class ComAtprotoSyncNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getBlob(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getBlob', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetBlob.toKnownErr(e);
	        });
	    }
	    getBlocks(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getBlocks', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetBlocks.toKnownErr(e);
	        });
	    }
	    getCheckout(params, opts) {
	        return this._client.call('com.atproto.sync.getCheckout', params, undefined, opts);
	    }
	    getHead(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getHead', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetHead.toKnownErr(e);
	        });
	    }
	    getHostStatus(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getHostStatus', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetHostStatus.toKnownErr(e);
	        });
	    }
	    getLatestCommit(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getLatestCommit', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
	        });
	    }
	    getRecord(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getRecord', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetRecord.toKnownErr(e);
	        });
	    }
	    getRepo(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getRepo', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetRepo.toKnownErr(e);
	        });
	    }
	    getRepoStatus(params, opts) {
	        return this._client
	            .call('com.atproto.sync.getRepoStatus', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncGetRepoStatus.toKnownErr(e);
	        });
	    }
	    listBlobs(params, opts) {
	        return this._client
	            .call('com.atproto.sync.listBlobs', params, undefined, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncListBlobs.toKnownErr(e);
	        });
	    }
	    listHosts(params, opts) {
	        return this._client.call('com.atproto.sync.listHosts', params, undefined, opts);
	    }
	    listRepos(params, opts) {
	        return this._client.call('com.atproto.sync.listRepos', params, undefined, opts);
	    }
	    listReposByCollection(params, opts) {
	        return this._client.call('com.atproto.sync.listReposByCollection', params, undefined, opts);
	    }
	    notifyOfUpdate(data, opts) {
	        return this._client.call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts);
	    }
	    requestCrawl(data, opts) {
	        return this._client
	            .call('com.atproto.sync.requestCrawl', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ComAtprotoSyncRequestCrawl.toKnownErr(e);
	        });
	    }
	}
	client$1.ComAtprotoSyncNS = ComAtprotoSyncNS;
	class ComAtprotoTempNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    addReservedHandle(data, opts) {
	        return this._client.call('com.atproto.temp.addReservedHandle', opts?.qp, data, opts);
	    }
	    checkSignupQueue(params, opts) {
	        return this._client.call('com.atproto.temp.checkSignupQueue', params, undefined, opts);
	    }
	    fetchLabels(params, opts) {
	        return this._client.call('com.atproto.temp.fetchLabels', params, undefined, opts);
	    }
	    requestPhoneVerification(data, opts) {
	        return this._client.call('com.atproto.temp.requestPhoneVerification', opts?.qp, data, opts);
	    }
	}
	client$1.ComAtprotoTempNS = ComAtprotoTempNS;
	class AppNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "bsky", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.bsky = new AppBskyNS(client);
	    }
	}
	client$1.AppNS = AppNS;
	class AppBskyNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "actor", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "embed", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "feed", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "graph", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "labeler", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "notification", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "richtext", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "unspecced", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "video", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.actor = new AppBskyActorNS(client);
	        this.embed = new AppBskyEmbedNS(client);
	        this.feed = new AppBskyFeedNS(client);
	        this.graph = new AppBskyGraphNS(client);
	        this.labeler = new AppBskyLabelerNS(client);
	        this.notification = new AppBskyNotificationNS(client);
	        this.richtext = new AppBskyRichtextNS(client);
	        this.unspecced = new AppBskyUnspeccedNS(client);
	        this.video = new AppBskyVideoNS(client);
	    }
	}
	client$1.AppBskyNS = AppBskyNS;
	class AppBskyActorNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "profile", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.profile = new AppBskyActorProfileRecord(client);
	    }
	    getPreferences(params, opts) {
	        return this._client.call('app.bsky.actor.getPreferences', params, undefined, opts);
	    }
	    getProfile(params, opts) {
	        return this._client.call('app.bsky.actor.getProfile', params, undefined, opts);
	    }
	    getProfiles(params, opts) {
	        return this._client.call('app.bsky.actor.getProfiles', params, undefined, opts);
	    }
	    getSuggestions(params, opts) {
	        return this._client.call('app.bsky.actor.getSuggestions', params, undefined, opts);
	    }
	    putPreferences(data, opts) {
	        return this._client.call('app.bsky.actor.putPreferences', opts?.qp, data, opts);
	    }
	    searchActors(params, opts) {
	        return this._client.call('app.bsky.actor.searchActors', params, undefined, opts);
	    }
	    searchActorsTypeahead(params, opts) {
	        return this._client.call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts);
	    }
	}
	client$1.AppBskyActorNS = AppBskyActorNS;
	class AppBskyActorProfileRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.actor.profile',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.actor.profile',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.actor.profile';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
	            collection,
	            rkey: 'self',
	            ...params,
	            record: { ...record, $type: collection },
	        }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.actor.profile', ...params }, { headers });
	    }
	}
	client$1.AppBskyActorProfileRecord = AppBskyActorProfileRecord;
	class AppBskyEmbedNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	}
	client$1.AppBskyEmbedNS = AppBskyEmbedNS;
	class AppBskyFeedNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "generator", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "like", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "post", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "postgate", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "repost", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "threadgate", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.generator = new AppBskyFeedGeneratorRecord(client);
	        this.like = new AppBskyFeedLikeRecord(client);
	        this.post = new AppBskyFeedPostRecord(client);
	        this.postgate = new AppBskyFeedPostgateRecord(client);
	        this.repost = new AppBskyFeedRepostRecord(client);
	        this.threadgate = new AppBskyFeedThreadgateRecord(client);
	    }
	    describeFeedGenerator(params, opts) {
	        return this._client.call('app.bsky.feed.describeFeedGenerator', params, undefined, opts);
	    }
	    getActorFeeds(params, opts) {
	        return this._client.call('app.bsky.feed.getActorFeeds', params, undefined, opts);
	    }
	    getActorLikes(params, opts) {
	        return this._client
	            .call('app.bsky.feed.getActorLikes', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedGetActorLikes.toKnownErr(e);
	        });
	    }
	    getAuthorFeed(params, opts) {
	        return this._client
	            .call('app.bsky.feed.getAuthorFeed', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
	        });
	    }
	    getFeed(params, opts) {
	        return this._client
	            .call('app.bsky.feed.getFeed', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedGetFeed.toKnownErr(e);
	        });
	    }
	    getFeedGenerator(params, opts) {
	        return this._client.call('app.bsky.feed.getFeedGenerator', params, undefined, opts);
	    }
	    getFeedGenerators(params, opts) {
	        return this._client.call('app.bsky.feed.getFeedGenerators', params, undefined, opts);
	    }
	    getFeedSkeleton(params, opts) {
	        return this._client
	            .call('app.bsky.feed.getFeedSkeleton', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
	        });
	    }
	    getLikes(params, opts) {
	        return this._client.call('app.bsky.feed.getLikes', params, undefined, opts);
	    }
	    getListFeed(params, opts) {
	        return this._client
	            .call('app.bsky.feed.getListFeed', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedGetListFeed.toKnownErr(e);
	        });
	    }
	    getPostThread(params, opts) {
	        return this._client
	            .call('app.bsky.feed.getPostThread', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedGetPostThread.toKnownErr(e);
	        });
	    }
	    getPosts(params, opts) {
	        return this._client.call('app.bsky.feed.getPosts', params, undefined, opts);
	    }
	    getQuotes(params, opts) {
	        return this._client.call('app.bsky.feed.getQuotes', params, undefined, opts);
	    }
	    getRepostedBy(params, opts) {
	        return this._client.call('app.bsky.feed.getRepostedBy', params, undefined, opts);
	    }
	    getSuggestedFeeds(params, opts) {
	        return this._client.call('app.bsky.feed.getSuggestedFeeds', params, undefined, opts);
	    }
	    getTimeline(params, opts) {
	        return this._client.call('app.bsky.feed.getTimeline', params, undefined, opts);
	    }
	    searchPosts(params, opts) {
	        return this._client
	            .call('app.bsky.feed.searchPosts', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyFeedSearchPosts.toKnownErr(e);
	        });
	    }
	    sendInteractions(data, opts) {
	        return this._client.call('app.bsky.feed.sendInteractions', opts?.qp, data, opts);
	    }
	}
	client$1.AppBskyFeedNS = AppBskyFeedNS;
	class AppBskyFeedGeneratorRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.feed.generator',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.feed.generator',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.feed.generator';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.feed.generator', ...params }, { headers });
	    }
	}
	client$1.AppBskyFeedGeneratorRecord = AppBskyFeedGeneratorRecord;
	class AppBskyFeedLikeRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.feed.like',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.feed.like',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.feed.like';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.feed.like', ...params }, { headers });
	    }
	}
	client$1.AppBskyFeedLikeRecord = AppBskyFeedLikeRecord;
	class AppBskyFeedPostRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.feed.post',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.feed.post',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.feed.post';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.feed.post', ...params }, { headers });
	    }
	}
	client$1.AppBskyFeedPostRecord = AppBskyFeedPostRecord;
	class AppBskyFeedPostgateRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.feed.postgate',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.feed.postgate',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.feed.postgate';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.feed.postgate', ...params }, { headers });
	    }
	}
	client$1.AppBskyFeedPostgateRecord = AppBskyFeedPostgateRecord;
	class AppBskyFeedRepostRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.feed.repost',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.feed.repost',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.feed.repost';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.feed.repost', ...params }, { headers });
	    }
	}
	client$1.AppBskyFeedRepostRecord = AppBskyFeedRepostRecord;
	class AppBskyFeedThreadgateRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.feed.threadgate',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.feed.threadgate',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.feed.threadgate';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.feed.threadgate', ...params }, { headers });
	    }
	}
	client$1.AppBskyFeedThreadgateRecord = AppBskyFeedThreadgateRecord;
	class AppBskyGraphNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "block", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "follow", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "list", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "listblock", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "listitem", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "starterpack", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "verification", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.block = new AppBskyGraphBlockRecord(client);
	        this.follow = new AppBskyGraphFollowRecord(client);
	        this.list = new AppBskyGraphListRecord(client);
	        this.listblock = new AppBskyGraphListblockRecord(client);
	        this.listitem = new AppBskyGraphListitemRecord(client);
	        this.starterpack = new AppBskyGraphStarterpackRecord(client);
	        this.verification = new AppBskyGraphVerificationRecord(client);
	    }
	    getActorStarterPacks(params, opts) {
	        return this._client.call('app.bsky.graph.getActorStarterPacks', params, undefined, opts);
	    }
	    getBlocks(params, opts) {
	        return this._client.call('app.bsky.graph.getBlocks', params, undefined, opts);
	    }
	    getFollowers(params, opts) {
	        return this._client.call('app.bsky.graph.getFollowers', params, undefined, opts);
	    }
	    getFollows(params, opts) {
	        return this._client.call('app.bsky.graph.getFollows', params, undefined, opts);
	    }
	    getKnownFollowers(params, opts) {
	        return this._client.call('app.bsky.graph.getKnownFollowers', params, undefined, opts);
	    }
	    getList(params, opts) {
	        return this._client.call('app.bsky.graph.getList', params, undefined, opts);
	    }
	    getListBlocks(params, opts) {
	        return this._client.call('app.bsky.graph.getListBlocks', params, undefined, opts);
	    }
	    getListMutes(params, opts) {
	        return this._client.call('app.bsky.graph.getListMutes', params, undefined, opts);
	    }
	    getLists(params, opts) {
	        return this._client.call('app.bsky.graph.getLists', params, undefined, opts);
	    }
	    getMutes(params, opts) {
	        return this._client.call('app.bsky.graph.getMutes', params, undefined, opts);
	    }
	    getRelationships(params, opts) {
	        return this._client
	            .call('app.bsky.graph.getRelationships', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyGraphGetRelationships.toKnownErr(e);
	        });
	    }
	    getStarterPack(params, opts) {
	        return this._client.call('app.bsky.graph.getStarterPack', params, undefined, opts);
	    }
	    getStarterPacks(params, opts) {
	        return this._client.call('app.bsky.graph.getStarterPacks', params, undefined, opts);
	    }
	    getSuggestedFollowsByActor(params, opts) {
	        return this._client.call('app.bsky.graph.getSuggestedFollowsByActor', params, undefined, opts);
	    }
	    muteActor(data, opts) {
	        return this._client.call('app.bsky.graph.muteActor', opts?.qp, data, opts);
	    }
	    muteActorList(data, opts) {
	        return this._client.call('app.bsky.graph.muteActorList', opts?.qp, data, opts);
	    }
	    muteThread(data, opts) {
	        return this._client.call('app.bsky.graph.muteThread', opts?.qp, data, opts);
	    }
	    searchStarterPacks(params, opts) {
	        return this._client.call('app.bsky.graph.searchStarterPacks', params, undefined, opts);
	    }
	    unmuteActor(data, opts) {
	        return this._client.call('app.bsky.graph.unmuteActor', opts?.qp, data, opts);
	    }
	    unmuteActorList(data, opts) {
	        return this._client.call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts);
	    }
	    unmuteThread(data, opts) {
	        return this._client.call('app.bsky.graph.unmuteThread', opts?.qp, data, opts);
	    }
	}
	client$1.AppBskyGraphNS = AppBskyGraphNS;
	class AppBskyGraphBlockRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.block',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.block',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.block';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.block', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphBlockRecord = AppBskyGraphBlockRecord;
	class AppBskyGraphFollowRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.follow',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.follow',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.follow';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.follow', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphFollowRecord = AppBskyGraphFollowRecord;
	class AppBskyGraphListRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.list',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.list',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.list';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.list', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphListRecord = AppBskyGraphListRecord;
	class AppBskyGraphListblockRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.listblock',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.listblock',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.listblock';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.listblock', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphListblockRecord = AppBskyGraphListblockRecord;
	class AppBskyGraphListitemRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.listitem',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.listitem',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.listitem';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.listitem', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphListitemRecord = AppBskyGraphListitemRecord;
	class AppBskyGraphStarterpackRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.starterpack',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.starterpack',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.starterpack';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.starterpack', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphStarterpackRecord = AppBskyGraphStarterpackRecord;
	class AppBskyGraphVerificationRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.graph.verification',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.graph.verification',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.graph.verification';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, { collection, ...params, record: { ...record, $type: collection } }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.graph.verification', ...params }, { headers });
	    }
	}
	client$1.AppBskyGraphVerificationRecord = AppBskyGraphVerificationRecord;
	class AppBskyLabelerNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "service", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.service = new AppBskyLabelerServiceRecord(client);
	    }
	    getServices(params, opts) {
	        return this._client.call('app.bsky.labeler.getServices', params, undefined, opts);
	    }
	}
	client$1.AppBskyLabelerNS = AppBskyLabelerNS;
	class AppBskyLabelerServiceRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'app.bsky.labeler.service',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'app.bsky.labeler.service',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'app.bsky.labeler.service';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
	            collection,
	            rkey: 'self',
	            ...params,
	            record: { ...record, $type: collection },
	        }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'app.bsky.labeler.service', ...params }, { headers });
	    }
	}
	client$1.AppBskyLabelerServiceRecord = AppBskyLabelerServiceRecord;
	class AppBskyNotificationNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getUnreadCount(params, opts) {
	        return this._client.call('app.bsky.notification.getUnreadCount', params, undefined, opts);
	    }
	    listNotifications(params, opts) {
	        return this._client.call('app.bsky.notification.listNotifications', params, undefined, opts);
	    }
	    putPreferences(data, opts) {
	        return this._client.call('app.bsky.notification.putPreferences', opts?.qp, data, opts);
	    }
	    registerPush(data, opts) {
	        return this._client.call('app.bsky.notification.registerPush', opts?.qp, data, opts);
	    }
	    updateSeen(data, opts) {
	        return this._client.call('app.bsky.notification.updateSeen', opts?.qp, data, opts);
	    }
	}
	client$1.AppBskyNotificationNS = AppBskyNotificationNS;
	class AppBskyRichtextNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	}
	client$1.AppBskyRichtextNS = AppBskyRichtextNS;
	class AppBskyUnspeccedNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getConfig(params, opts) {
	        return this._client.call('app.bsky.unspecced.getConfig', params, undefined, opts);
	    }
	    getPopularFeedGenerators(params, opts) {
	        return this._client.call('app.bsky.unspecced.getPopularFeedGenerators', params, undefined, opts);
	    }
	    getSuggestedFeeds(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestedFeeds', params, undefined, opts);
	    }
	    getSuggestedFeedsSkeleton(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestedFeedsSkeleton', params, undefined, opts);
	    }
	    getSuggestedStarterPacks(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestedStarterPacks', params, undefined, opts);
	    }
	    getSuggestedStarterPacksSkeleton(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestedStarterPacksSkeleton', params, undefined, opts);
	    }
	    getSuggestedUsers(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestedUsers', params, undefined, opts);
	    }
	    getSuggestedUsersSkeleton(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestedUsersSkeleton', params, undefined, opts);
	    }
	    getSuggestionsSkeleton(params, opts) {
	        return this._client.call('app.bsky.unspecced.getSuggestionsSkeleton', params, undefined, opts);
	    }
	    getTaggedSuggestions(params, opts) {
	        return this._client.call('app.bsky.unspecced.getTaggedSuggestions', params, undefined, opts);
	    }
	    getTrendingTopics(params, opts) {
	        return this._client.call('app.bsky.unspecced.getTrendingTopics', params, undefined, opts);
	    }
	    getTrends(params, opts) {
	        return this._client.call('app.bsky.unspecced.getTrends', params, undefined, opts);
	    }
	    getTrendsSkeleton(params, opts) {
	        return this._client.call('app.bsky.unspecced.getTrendsSkeleton', params, undefined, opts);
	    }
	    searchActorsSkeleton(params, opts) {
	        return this._client
	            .call('app.bsky.unspecced.searchActorsSkeleton', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
	        });
	    }
	    searchPostsSkeleton(params, opts) {
	        return this._client
	            .call('app.bsky.unspecced.searchPostsSkeleton', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
	        });
	    }
	    searchStarterPacksSkeleton(params, opts) {
	        return this._client
	            .call('app.bsky.unspecced.searchStarterPacksSkeleton', params, undefined, opts)
	            .catch((e) => {
	            throw AppBskyUnspeccedSearchStarterPacksSkeleton.toKnownErr(e);
	        });
	    }
	}
	client$1.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
	class AppBskyVideoNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getJobStatus(params, opts) {
	        return this._client.call('app.bsky.video.getJobStatus', params, undefined, opts);
	    }
	    getUploadLimits(params, opts) {
	        return this._client.call('app.bsky.video.getUploadLimits', params, undefined, opts);
	    }
	    uploadVideo(data, opts) {
	        return this._client.call('app.bsky.video.uploadVideo', opts?.qp, data, opts);
	    }
	}
	client$1.AppBskyVideoNS = AppBskyVideoNS;
	class ChatNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "bsky", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.bsky = new ChatBskyNS(client);
	    }
	}
	client$1.ChatNS = ChatNS;
	class ChatBskyNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "actor", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "convo", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "moderation", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.actor = new ChatBskyActorNS(client);
	        this.convo = new ChatBskyConvoNS(client);
	        this.moderation = new ChatBskyModerationNS(client);
	    }
	}
	client$1.ChatBskyNS = ChatBskyNS;
	class ChatBskyActorNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "declaration", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.declaration = new ChatBskyActorDeclarationRecord(client);
	    }
	    deleteAccount(data, opts) {
	        return this._client.call('chat.bsky.actor.deleteAccount', opts?.qp, data, opts);
	    }
	    exportAccountData(params, opts) {
	        return this._client.call('chat.bsky.actor.exportAccountData', params, undefined, opts);
	    }
	}
	client$1.ChatBskyActorNS = ChatBskyActorNS;
	class ChatBskyActorDeclarationRecord {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    async list(params) {
	        const res = await this._client.call('com.atproto.repo.listRecords', {
	            collection: 'chat.bsky.actor.declaration',
	            ...params,
	        });
	        return res.data;
	    }
	    async get(params) {
	        const res = await this._client.call('com.atproto.repo.getRecord', {
	            collection: 'chat.bsky.actor.declaration',
	            ...params,
	        });
	        return res.data;
	    }
	    async create(params, record, headers) {
	        const collection = 'chat.bsky.actor.declaration';
	        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
	            collection,
	            rkey: 'self',
	            ...params,
	            record: { ...record, $type: collection },
	        }, { encoding: 'application/json', headers });
	        return res.data;
	    }
	    async delete(params, headers) {
	        await this._client.call('com.atproto.repo.deleteRecord', undefined, { collection: 'chat.bsky.actor.declaration', ...params }, { headers });
	    }
	}
	client$1.ChatBskyActorDeclarationRecord = ChatBskyActorDeclarationRecord;
	class ChatBskyConvoNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    acceptConvo(data, opts) {
	        return this._client.call('chat.bsky.convo.acceptConvo', opts?.qp, data, opts);
	    }
	    addReaction(data, opts) {
	        return this._client
	            .call('chat.bsky.convo.addReaction', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ChatBskyConvoAddReaction.toKnownErr(e);
	        });
	    }
	    deleteMessageForSelf(data, opts) {
	        return this._client.call('chat.bsky.convo.deleteMessageForSelf', opts?.qp, data, opts);
	    }
	    getConvo(params, opts) {
	        return this._client.call('chat.bsky.convo.getConvo', params, undefined, opts);
	    }
	    getConvoAvailability(params, opts) {
	        return this._client.call('chat.bsky.convo.getConvoAvailability', params, undefined, opts);
	    }
	    getConvoForMembers(params, opts) {
	        return this._client.call('chat.bsky.convo.getConvoForMembers', params, undefined, opts);
	    }
	    getLog(params, opts) {
	        return this._client.call('chat.bsky.convo.getLog', params, undefined, opts);
	    }
	    getMessages(params, opts) {
	        return this._client.call('chat.bsky.convo.getMessages', params, undefined, opts);
	    }
	    leaveConvo(data, opts) {
	        return this._client.call('chat.bsky.convo.leaveConvo', opts?.qp, data, opts);
	    }
	    listConvos(params, opts) {
	        return this._client.call('chat.bsky.convo.listConvos', params, undefined, opts);
	    }
	    muteConvo(data, opts) {
	        return this._client.call('chat.bsky.convo.muteConvo', opts?.qp, data, opts);
	    }
	    removeReaction(data, opts) {
	        return this._client
	            .call('chat.bsky.convo.removeReaction', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ChatBskyConvoRemoveReaction.toKnownErr(e);
	        });
	    }
	    sendMessage(data, opts) {
	        return this._client.call('chat.bsky.convo.sendMessage', opts?.qp, data, opts);
	    }
	    sendMessageBatch(data, opts) {
	        return this._client.call('chat.bsky.convo.sendMessageBatch', opts?.qp, data, opts);
	    }
	    unmuteConvo(data, opts) {
	        return this._client.call('chat.bsky.convo.unmuteConvo', opts?.qp, data, opts);
	    }
	    updateAllRead(data, opts) {
	        return this._client.call('chat.bsky.convo.updateAllRead', opts?.qp, data, opts);
	    }
	    updateRead(data, opts) {
	        return this._client.call('chat.bsky.convo.updateRead', opts?.qp, data, opts);
	    }
	}
	client$1.ChatBskyConvoNS = ChatBskyConvoNS;
	class ChatBskyModerationNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getActorMetadata(params, opts) {
	        return this._client.call('chat.bsky.moderation.getActorMetadata', params, undefined, opts);
	    }
	    getMessageContext(params, opts) {
	        return this._client.call('chat.bsky.moderation.getMessageContext', params, undefined, opts);
	    }
	    updateActorAccess(data, opts) {
	        return this._client.call('chat.bsky.moderation.updateActorAccess', opts?.qp, data, opts);
	    }
	}
	client$1.ChatBskyModerationNS = ChatBskyModerationNS;
	class ToolsNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "ozone", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.ozone = new ToolsOzoneNS(client);
	    }
	}
	client$1.ToolsNS = ToolsNS;
	class ToolsOzoneNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "communication", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "hosting", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "moderation", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "server", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "set", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "setting", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "signature", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "team", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "verification", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	        this.communication = new ToolsOzoneCommunicationNS(client);
	        this.hosting = new ToolsOzoneHostingNS(client);
	        this.moderation = new ToolsOzoneModerationNS(client);
	        this.server = new ToolsOzoneServerNS(client);
	        this.set = new ToolsOzoneSetNS(client);
	        this.setting = new ToolsOzoneSettingNS(client);
	        this.signature = new ToolsOzoneSignatureNS(client);
	        this.team = new ToolsOzoneTeamNS(client);
	        this.verification = new ToolsOzoneVerificationNS(client);
	    }
	}
	client$1.ToolsOzoneNS = ToolsOzoneNS;
	class ToolsOzoneCommunicationNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    createTemplate(data, opts) {
	        return this._client
	            .call('tools.ozone.communication.createTemplate', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
	        });
	    }
	    deleteTemplate(data, opts) {
	        return this._client.call('tools.ozone.communication.deleteTemplate', opts?.qp, data, opts);
	    }
	    listTemplates(params, opts) {
	        return this._client.call('tools.ozone.communication.listTemplates', params, undefined, opts);
	    }
	    updateTemplate(data, opts) {
	        return this._client
	            .call('tools.ozone.communication.updateTemplate', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
	        });
	    }
	}
	client$1.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
	class ToolsOzoneHostingNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getAccountHistory(params, opts) {
	        return this._client.call('tools.ozone.hosting.getAccountHistory', params, undefined, opts);
	    }
	}
	client$1.ToolsOzoneHostingNS = ToolsOzoneHostingNS;
	class ToolsOzoneModerationNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    emitEvent(data, opts) {
	        return this._client
	            .call('tools.ozone.moderation.emitEvent', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
	        });
	    }
	    getEvent(params, opts) {
	        return this._client.call('tools.ozone.moderation.getEvent', params, undefined, opts);
	    }
	    getRecord(params, opts) {
	        return this._client
	            .call('tools.ozone.moderation.getRecord', params, undefined, opts)
	            .catch((e) => {
	            throw ToolsOzoneModerationGetRecord.toKnownErr(e);
	        });
	    }
	    getRecords(params, opts) {
	        return this._client.call('tools.ozone.moderation.getRecords', params, undefined, opts);
	    }
	    getRepo(params, opts) {
	        return this._client
	            .call('tools.ozone.moderation.getRepo', params, undefined, opts)
	            .catch((e) => {
	            throw ToolsOzoneModerationGetRepo.toKnownErr(e);
	        });
	    }
	    getReporterStats(params, opts) {
	        return this._client.call('tools.ozone.moderation.getReporterStats', params, undefined, opts);
	    }
	    getRepos(params, opts) {
	        return this._client.call('tools.ozone.moderation.getRepos', params, undefined, opts);
	    }
	    getSubjects(params, opts) {
	        return this._client.call('tools.ozone.moderation.getSubjects', params, undefined, opts);
	    }
	    queryEvents(params, opts) {
	        return this._client.call('tools.ozone.moderation.queryEvents', params, undefined, opts);
	    }
	    queryStatuses(params, opts) {
	        return this._client.call('tools.ozone.moderation.queryStatuses', params, undefined, opts);
	    }
	    searchRepos(params, opts) {
	        return this._client.call('tools.ozone.moderation.searchRepos', params, undefined, opts);
	    }
	}
	client$1.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
	class ToolsOzoneServerNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    getConfig(params, opts) {
	        return this._client.call('tools.ozone.server.getConfig', params, undefined, opts);
	    }
	}
	client$1.ToolsOzoneServerNS = ToolsOzoneServerNS;
	class ToolsOzoneSetNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    addValues(data, opts) {
	        return this._client.call('tools.ozone.set.addValues', opts?.qp, data, opts);
	    }
	    deleteSet(data, opts) {
	        return this._client
	            .call('tools.ozone.set.deleteSet', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneSetDeleteSet.toKnownErr(e);
	        });
	    }
	    deleteValues(data, opts) {
	        return this._client
	            .call('tools.ozone.set.deleteValues', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneSetDeleteValues.toKnownErr(e);
	        });
	    }
	    getValues(params, opts) {
	        return this._client
	            .call('tools.ozone.set.getValues', params, undefined, opts)
	            .catch((e) => {
	            throw ToolsOzoneSetGetValues.toKnownErr(e);
	        });
	    }
	    querySets(params, opts) {
	        return this._client.call('tools.ozone.set.querySets', params, undefined, opts);
	    }
	    upsertSet(data, opts) {
	        return this._client.call('tools.ozone.set.upsertSet', opts?.qp, data, opts);
	    }
	}
	client$1.ToolsOzoneSetNS = ToolsOzoneSetNS;
	class ToolsOzoneSettingNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    listOptions(params, opts) {
	        return this._client.call('tools.ozone.setting.listOptions', params, undefined, opts);
	    }
	    removeOptions(data, opts) {
	        return this._client.call('tools.ozone.setting.removeOptions', opts?.qp, data, opts);
	    }
	    upsertOption(data, opts) {
	        return this._client.call('tools.ozone.setting.upsertOption', opts?.qp, data, opts);
	    }
	}
	client$1.ToolsOzoneSettingNS = ToolsOzoneSettingNS;
	class ToolsOzoneSignatureNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    findCorrelation(params, opts) {
	        return this._client.call('tools.ozone.signature.findCorrelation', params, undefined, opts);
	    }
	    findRelatedAccounts(params, opts) {
	        return this._client.call('tools.ozone.signature.findRelatedAccounts', params, undefined, opts);
	    }
	    searchAccounts(params, opts) {
	        return this._client.call('tools.ozone.signature.searchAccounts', params, undefined, opts);
	    }
	}
	client$1.ToolsOzoneSignatureNS = ToolsOzoneSignatureNS;
	class ToolsOzoneTeamNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    addMember(data, opts) {
	        return this._client
	            .call('tools.ozone.team.addMember', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneTeamAddMember.toKnownErr(e);
	        });
	    }
	    deleteMember(data, opts) {
	        return this._client
	            .call('tools.ozone.team.deleteMember', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneTeamDeleteMember.toKnownErr(e);
	        });
	    }
	    listMembers(params, opts) {
	        return this._client.call('tools.ozone.team.listMembers', params, undefined, opts);
	    }
	    updateMember(data, opts) {
	        return this._client
	            .call('tools.ozone.team.updateMember', opts?.qp, data, opts)
	            .catch((e) => {
	            throw ToolsOzoneTeamUpdateMember.toKnownErr(e);
	        });
	    }
	}
	client$1.ToolsOzoneTeamNS = ToolsOzoneTeamNS;
	class ToolsOzoneVerificationNS {
	    constructor(client) {
	        Object.defineProperty(this, "_client", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this._client = client;
	    }
	    grantVerifications(data, opts) {
	        return this._client.call('tools.ozone.verification.grantVerifications', opts?.qp, data, opts);
	    }
	    listVerifications(params, opts) {
	        return this._client.call('tools.ozone.verification.listVerifications', params, undefined, opts);
	    }
	    revokeVerifications(data, opts) {
	        return this._client.call('tools.ozone.verification.revokeVerifications', opts?.qp, data, opts);
	    }
	}
	client$1.ToolsOzoneVerificationNS = ToolsOzoneVerificationNS;
	
	return client$1;
}

var richText = {};

var detection = {};

var require$$0 = [
	"aaa",
	"aarp",
	"abb",
	"abbott",
	"abbvie",
	"abc",
	"able",
	"abogado",
	"abudhabi",
	"ac",
	"academy",
	"accenture",
	"accountant",
	"accountants",
	"aco",
	"actor",
	"ad",
	"ads",
	"adult",
	"ae",
	"aeg",
	"aero",
	"aetna",
	"af",
	"afl",
	"africa",
	"ag",
	"agakhan",
	"agency",
	"ai",
	"aig",
	"airbus",
	"airforce",
	"airtel",
	"akdn",
	"al",
	"alibaba",
	"alipay",
	"allfinanz",
	"allstate",
	"ally",
	"alsace",
	"alstom",
	"am",
	"amazon",
	"americanexpress",
	"americanfamily",
	"amex",
	"amfam",
	"amica",
	"amsterdam",
	"analytics",
	"android",
	"anquan",
	"anz",
	"ao",
	"aol",
	"apartments",
	"app",
	"apple",
	"aq",
	"aquarelle",
	"ar",
	"arab",
	"aramco",
	"archi",
	"army",
	"arpa",
	"art",
	"arte",
	"as",
	"asda",
	"asia",
	"associates",
	"at",
	"athleta",
	"attorney",
	"au",
	"auction",
	"audi",
	"audible",
	"audio",
	"auspost",
	"author",
	"auto",
	"autos",
	"aw",
	"aws",
	"ax",
	"axa",
	"az",
	"azure",
	"ba",
	"baby",
	"baidu",
	"banamex",
	"band",
	"bank",
	"bar",
	"barcelona",
	"barclaycard",
	"barclays",
	"barefoot",
	"bargains",
	"baseball",
	"basketball",
	"bauhaus",
	"bayern",
	"bb",
	"bbc",
	"bbt",
	"bbva",
	"bcg",
	"bcn",
	"bd",
	"be",
	"beats",
	"beauty",
	"beer",
	"berlin",
	"best",
	"bestbuy",
	"bet",
	"bf",
	"bg",
	"bh",
	"bharti",
	"bi",
	"bible",
	"bid",
	"bike",
	"bing",
	"bingo",
	"bio",
	"biz",
	"bj",
	"black",
	"blackfriday",
	"blockbuster",
	"blog",
	"bloomberg",
	"blue",
	"bm",
	"bms",
	"bmw",
	"bn",
	"bnpparibas",
	"bo",
	"boats",
	"boehringer",
	"bofa",
	"bom",
	"bond",
	"boo",
	"book",
	"booking",
	"bosch",
	"bostik",
	"boston",
	"bot",
	"boutique",
	"box",
	"br",
	"bradesco",
	"bridgestone",
	"broadway",
	"broker",
	"brother",
	"brussels",
	"bs",
	"bt",
	"build",
	"builders",
	"business",
	"buy",
	"buzz",
	"bv",
	"bw",
	"by",
	"bz",
	"bzh",
	"ca",
	"cab",
	"cafe",
	"cal",
	"call",
	"calvinklein",
	"cam",
	"camera",
	"camp",
	"canon",
	"capetown",
	"capital",
	"capitalone",
	"car",
	"caravan",
	"cards",
	"care",
	"career",
	"careers",
	"cars",
	"casa",
	"case",
	"cash",
	"casino",
	"cat",
	"catering",
	"catholic",
	"cba",
	"cbn",
	"cbre",
	"cc",
	"cd",
	"center",
	"ceo",
	"cern",
	"cf",
	"cfa",
	"cfd",
	"cg",
	"ch",
	"chanel",
	"channel",
	"charity",
	"chase",
	"chat",
	"cheap",
	"chintai",
	"christmas",
	"chrome",
	"church",
	"ci",
	"cipriani",
	"circle",
	"cisco",
	"citadel",
	"citi",
	"citic",
	"city",
	"ck",
	"cl",
	"claims",
	"cleaning",
	"click",
	"clinic",
	"clinique",
	"clothing",
	"cloud",
	"club",
	"clubmed",
	"cm",
	"cn",
	"co",
	"coach",
	"codes",
	"coffee",
	"college",
	"cologne",
	"com",
	"commbank",
	"community",
	"company",
	"compare",
	"computer",
	"comsec",
	"condos",
	"construction",
	"consulting",
	"contact",
	"contractors",
	"cooking",
	"cool",
	"coop",
	"corsica",
	"country",
	"coupon",
	"coupons",
	"courses",
	"cpa",
	"cr",
	"credit",
	"creditcard",
	"creditunion",
	"cricket",
	"crown",
	"crs",
	"cruise",
	"cruises",
	"cu",
	"cuisinella",
	"cv",
	"cw",
	"cx",
	"cy",
	"cymru",
	"cyou",
	"cz",
	"dad",
	"dance",
	"data",
	"date",
	"dating",
	"datsun",
	"day",
	"dclk",
	"dds",
	"de",
	"deal",
	"dealer",
	"deals",
	"degree",
	"delivery",
	"dell",
	"deloitte",
	"delta",
	"democrat",
	"dental",
	"dentist",
	"desi",
	"design",
	"dev",
	"dhl",
	"diamonds",
	"diet",
	"digital",
	"direct",
	"directory",
	"discount",
	"discover",
	"dish",
	"diy",
	"dj",
	"dk",
	"dm",
	"dnp",
	"do",
	"docs",
	"doctor",
	"dog",
	"domains",
	"dot",
	"download",
	"drive",
	"dtv",
	"dubai",
	"dunlop",
	"dupont",
	"durban",
	"dvag",
	"dvr",
	"dz",
	"earth",
	"eat",
	"ec",
	"eco",
	"edeka",
	"edu",
	"education",
	"ee",
	"eg",
	"email",
	"emerck",
	"energy",
	"engineer",
	"engineering",
	"enterprises",
	"epson",
	"equipment",
	"er",
	"ericsson",
	"erni",
	"es",
	"esq",
	"estate",
	"et",
	"eu",
	"eurovision",
	"eus",
	"events",
	"exchange",
	"expert",
	"exposed",
	"express",
	"extraspace",
	"fage",
	"fail",
	"fairwinds",
	"faith",
	"family",
	"fan",
	"fans",
	"farm",
	"farmers",
	"fashion",
	"fast",
	"fedex",
	"feedback",
	"ferrari",
	"ferrero",
	"fi",
	"fidelity",
	"fido",
	"film",
	"final",
	"finance",
	"financial",
	"fire",
	"firestone",
	"firmdale",
	"fish",
	"fishing",
	"fit",
	"fitness",
	"fj",
	"fk",
	"flickr",
	"flights",
	"flir",
	"florist",
	"flowers",
	"fly",
	"fm",
	"fo",
	"foo",
	"food",
	"football",
	"ford",
	"forex",
	"forsale",
	"forum",
	"foundation",
	"fox",
	"fr",
	"free",
	"fresenius",
	"frl",
	"frogans",
	"frontier",
	"ftr",
	"fujitsu",
	"fun",
	"fund",
	"furniture",
	"futbol",
	"fyi",
	"ga",
	"gal",
	"gallery",
	"gallo",
	"gallup",
	"game",
	"games",
	"gap",
	"garden",
	"gay",
	"gb",
	"gbiz",
	"gd",
	"gdn",
	"ge",
	"gea",
	"gent",
	"genting",
	"george",
	"gf",
	"gg",
	"ggee",
	"gh",
	"gi",
	"gift",
	"gifts",
	"gives",
	"giving",
	"gl",
	"glass",
	"gle",
	"global",
	"globo",
	"gm",
	"gmail",
	"gmbh",
	"gmo",
	"gmx",
	"gn",
	"godaddy",
	"gold",
	"goldpoint",
	"golf",
	"goo",
	"goodyear",
	"goog",
	"google",
	"gop",
	"got",
	"gov",
	"gp",
	"gq",
	"gr",
	"grainger",
	"graphics",
	"gratis",
	"green",
	"gripe",
	"grocery",
	"group",
	"gs",
	"gt",
	"gu",
	"gucci",
	"guge",
	"guide",
	"guitars",
	"guru",
	"gw",
	"gy",
	"hair",
	"hamburg",
	"hangout",
	"haus",
	"hbo",
	"hdfc",
	"hdfcbank",
	"health",
	"healthcare",
	"help",
	"helsinki",
	"here",
	"hermes",
	"hiphop",
	"hisamitsu",
	"hitachi",
	"hiv",
	"hk",
	"hkt",
	"hm",
	"hn",
	"hockey",
	"holdings",
	"holiday",
	"homedepot",
	"homegoods",
	"homes",
	"homesense",
	"honda",
	"horse",
	"hospital",
	"host",
	"hosting",
	"hot",
	"hotels",
	"hotmail",
	"house",
	"how",
	"hr",
	"hsbc",
	"ht",
	"hu",
	"hughes",
	"hyatt",
	"hyundai",
	"ibm",
	"icbc",
	"ice",
	"icu",
	"id",
	"ie",
	"ieee",
	"ifm",
	"ikano",
	"il",
	"im",
	"imamat",
	"imdb",
	"immo",
	"immobilien",
	"in",
	"inc",
	"industries",
	"infiniti",
	"info",
	"ing",
	"ink",
	"institute",
	"insurance",
	"insure",
	"int",
	"international",
	"intuit",
	"investments",
	"io",
	"ipiranga",
	"iq",
	"ir",
	"irish",
	"is",
	"ismaili",
	"ist",
	"istanbul",
	"it",
	"itau",
	"itv",
	"jaguar",
	"java",
	"jcb",
	"je",
	"jeep",
	"jetzt",
	"jewelry",
	"jio",
	"jll",
	"jm",
	"jmp",
	"jnj",
	"jo",
	"jobs",
	"joburg",
	"jot",
	"joy",
	"jp",
	"jpmorgan",
	"jprs",
	"juegos",
	"juniper",
	"kaufen",
	"kddi",
	"ke",
	"kerryhotels",
	"kerryproperties",
	"kfh",
	"kg",
	"kh",
	"ki",
	"kia",
	"kids",
	"kim",
	"kindle",
	"kitchen",
	"kiwi",
	"km",
	"kn",
	"koeln",
	"komatsu",
	"kosher",
	"kp",
	"kpmg",
	"kpn",
	"kr",
	"krd",
	"kred",
	"kuokgroup",
	"kw",
	"ky",
	"kyoto",
	"kz",
	"la",
	"lacaixa",
	"lamborghini",
	"lamer",
	"land",
	"landrover",
	"lanxess",
	"lasalle",
	"lat",
	"latino",
	"latrobe",
	"law",
	"lawyer",
	"lb",
	"lc",
	"lds",
	"lease",
	"leclerc",
	"lefrak",
	"legal",
	"lego",
	"lexus",
	"lgbt",
	"li",
	"lidl",
	"life",
	"lifeinsurance",
	"lifestyle",
	"lighting",
	"like",
	"lilly",
	"limited",
	"limo",
	"lincoln",
	"link",
	"live",
	"living",
	"lk",
	"llc",
	"llp",
	"loan",
	"loans",
	"locker",
	"locus",
	"lol",
	"london",
	"lotte",
	"lotto",
	"love",
	"lpl",
	"lplfinancial",
	"lr",
	"ls",
	"lt",
	"ltd",
	"ltda",
	"lu",
	"lundbeck",
	"luxe",
	"luxury",
	"lv",
	"ly",
	"ma",
	"madrid",
	"maif",
	"maison",
	"makeup",
	"man",
	"management",
	"mango",
	"map",
	"market",
	"marketing",
	"markets",
	"marriott",
	"marshalls",
	"mattel",
	"mba",
	"mc",
	"mckinsey",
	"md",
	"me",
	"med",
	"media",
	"meet",
	"melbourne",
	"meme",
	"memorial",
	"men",
	"menu",
	"merckmsd",
	"mg",
	"mh",
	"miami",
	"microsoft",
	"mil",
	"mini",
	"mint",
	"mit",
	"mitsubishi",
	"mk",
	"ml",
	"mlb",
	"mls",
	"mm",
	"mma",
	"mn",
	"mo",
	"mobi",
	"mobile",
	"moda",
	"moe",
	"moi",
	"mom",
	"monash",
	"money",
	"monster",
	"mormon",
	"mortgage",
	"moscow",
	"moto",
	"motorcycles",
	"mov",
	"movie",
	"mp",
	"mq",
	"mr",
	"ms",
	"msd",
	"mt",
	"mtn",
	"mtr",
	"mu",
	"museum",
	"music",
	"mv",
	"mw",
	"mx",
	"my",
	"mz",
	"na",
	"nab",
	"nagoya",
	"name",
	"navy",
	"nba",
	"nc",
	"ne",
	"nec",
	"net",
	"netbank",
	"netflix",
	"network",
	"neustar",
	"new",
	"news",
	"next",
	"nextdirect",
	"nexus",
	"nf",
	"nfl",
	"ng",
	"ngo",
	"nhk",
	"ni",
	"nico",
	"nike",
	"nikon",
	"ninja",
	"nissan",
	"nissay",
	"nl",
	"no",
	"nokia",
	"norton",
	"now",
	"nowruz",
	"nowtv",
	"np",
	"nr",
	"nra",
	"nrw",
	"ntt",
	"nu",
	"nyc",
	"nz",
	"obi",
	"observer",
	"office",
	"okinawa",
	"olayan",
	"olayangroup",
	"ollo",
	"om",
	"omega",
	"one",
	"ong",
	"onl",
	"online",
	"ooo",
	"open",
	"oracle",
	"orange",
	"org",
	"organic",
	"origins",
	"osaka",
	"otsuka",
	"ott",
	"ovh",
	"pa",
	"page",
	"panasonic",
	"paris",
	"pars",
	"partners",
	"parts",
	"party",
	"pay",
	"pccw",
	"pe",
	"pet",
	"pf",
	"pfizer",
	"pg",
	"ph",
	"pharmacy",
	"phd",
	"philips",
	"phone",
	"photo",
	"photography",
	"photos",
	"physio",
	"pics",
	"pictet",
	"pictures",
	"pid",
	"pin",
	"ping",
	"pink",
	"pioneer",
	"pizza",
	"pk",
	"pl",
	"place",
	"play",
	"playstation",
	"plumbing",
	"plus",
	"pm",
	"pn",
	"pnc",
	"pohl",
	"poker",
	"politie",
	"porn",
	"post",
	"pr",
	"pramerica",
	"praxi",
	"press",
	"prime",
	"pro",
	"prod",
	"productions",
	"prof",
	"progressive",
	"promo",
	"properties",
	"property",
	"protection",
	"pru",
	"prudential",
	"ps",
	"pt",
	"pub",
	"pw",
	"pwc",
	"py",
	"qa",
	"qpon",
	"quebec",
	"quest",
	"racing",
	"radio",
	"re",
	"read",
	"realestate",
	"realtor",
	"realty",
	"recipes",
	"red",
	"redstone",
	"redumbrella",
	"rehab",
	"reise",
	"reisen",
	"reit",
	"reliance",
	"ren",
	"rent",
	"rentals",
	"repair",
	"report",
	"republican",
	"rest",
	"restaurant",
	"review",
	"reviews",
	"rexroth",
	"rich",
	"richardli",
	"ricoh",
	"ril",
	"rio",
	"rip",
	"ro",
	"rocks",
	"rodeo",
	"rogers",
	"room",
	"rs",
	"rsvp",
	"ru",
	"rugby",
	"ruhr",
	"run",
	"rw",
	"rwe",
	"ryukyu",
	"sa",
	"saarland",
	"safe",
	"safety",
	"sakura",
	"sale",
	"salon",
	"samsclub",
	"samsung",
	"sandvik",
	"sandvikcoromant",
	"sanofi",
	"sap",
	"sarl",
	"sas",
	"save",
	"saxo",
	"sb",
	"sbi",
	"sbs",
	"sc",
	"scb",
	"schaeffler",
	"schmidt",
	"scholarships",
	"school",
	"schule",
	"schwarz",
	"science",
	"scot",
	"sd",
	"se",
	"search",
	"seat",
	"secure",
	"security",
	"seek",
	"select",
	"sener",
	"services",
	"seven",
	"sew",
	"sex",
	"sexy",
	"sfr",
	"sg",
	"sh",
	"shangrila",
	"sharp",
	"shell",
	"shia",
	"shiksha",
	"shoes",
	"shop",
	"shopping",
	"shouji",
	"show",
	"si",
	"silk",
	"sina",
	"singles",
	"site",
	"sj",
	"sk",
	"ski",
	"skin",
	"sky",
	"skype",
	"sl",
	"sling",
	"sm",
	"smart",
	"smile",
	"sn",
	"sncf",
	"so",
	"soccer",
	"social",
	"softbank",
	"software",
	"sohu",
	"solar",
	"solutions",
	"song",
	"sony",
	"soy",
	"spa",
	"space",
	"sport",
	"spot",
	"sr",
	"srl",
	"ss",
	"st",
	"stada",
	"staples",
	"star",
	"statebank",
	"statefarm",
	"stc",
	"stcgroup",
	"stockholm",
	"storage",
	"store",
	"stream",
	"studio",
	"study",
	"style",
	"su",
	"sucks",
	"supplies",
	"supply",
	"support",
	"surf",
	"surgery",
	"suzuki",
	"sv",
	"swatch",
	"swiss",
	"sx",
	"sy",
	"sydney",
	"systems",
	"sz",
	"tab",
	"taipei",
	"talk",
	"taobao",
	"target",
	"tatamotors",
	"tatar",
	"tattoo",
	"tax",
	"taxi",
	"tc",
	"tci",
	"td",
	"tdk",
	"team",
	"tech",
	"technology",
	"tel",
	"temasek",
	"tennis",
	"teva",
	"tf",
	"tg",
	"th",
	"thd",
	"theater",
	"theatre",
	"tiaa",
	"tickets",
	"tienda",
	"tips",
	"tires",
	"tirol",
	"tj",
	"tjmaxx",
	"tjx",
	"tk",
	"tkmaxx",
	"tl",
	"tm",
	"tmall",
	"tn",
	"to",
	"today",
	"tokyo",
	"tools",
	"top",
	"toray",
	"toshiba",
	"total",
	"tours",
	"town",
	"toyota",
	"toys",
	"tr",
	"trade",
	"trading",
	"training",
	"travel",
	"travelers",
	"travelersinsurance",
	"trust",
	"trv",
	"tt",
	"tube",
	"tui",
	"tunes",
	"tushu",
	"tv",
	"tvs",
	"tw",
	"tz",
	"ua",
	"ubank",
	"ubs",
	"ug",
	"uk",
	"unicom",
	"university",
	"uno",
	"uol",
	"ups",
	"us",
	"uy",
	"uz",
	"va",
	"vacations",
	"vana",
	"vanguard",
	"vc",
	"ve",
	"vegas",
	"ventures",
	"verisign",
	"vermögensberater",
	"vermögensberatung",
	"versicherung",
	"vet",
	"vg",
	"vi",
	"viajes",
	"video",
	"vig",
	"viking",
	"villas",
	"vin",
	"vip",
	"virgin",
	"visa",
	"vision",
	"viva",
	"vivo",
	"vlaanderen",
	"vn",
	"vodka",
	"volvo",
	"vote",
	"voting",
	"voto",
	"voyage",
	"vu",
	"wales",
	"walmart",
	"walter",
	"wang",
	"wanggou",
	"watch",
	"watches",
	"weather",
	"weatherchannel",
	"webcam",
	"weber",
	"website",
	"wed",
	"wedding",
	"weibo",
	"weir",
	"wf",
	"whoswho",
	"wien",
	"wiki",
	"williamhill",
	"win",
	"windows",
	"wine",
	"winners",
	"wme",
	"wolterskluwer",
	"woodside",
	"work",
	"works",
	"world",
	"wow",
	"ws",
	"wtc",
	"wtf",
	"xbox",
	"xerox",
	"xihuan",
	"xin",
	"xxx",
	"xyz",
	"yachts",
	"yahoo",
	"yamaxun",
	"yandex",
	"ye",
	"yodobashi",
	"yoga",
	"yokohama",
	"you",
	"youtube",
	"yt",
	"yun",
	"za",
	"zappos",
	"zara",
	"zero",
	"zip",
	"zm",
	"zone",
	"zuerich",
	"zw",
	"ελ",
	"ευ",
	"бг",
	"бел",
	"дети",
	"ею",
	"католик",
	"ком",
	"мкд",
	"мон",
	"москва",
	"онлайн",
	"орг",
	"рус",
	"рф",
	"сайт",
	"срб",
	"укр",
	"қаз",
	"հայ",
	"ישראל",
	"קום",
	"ابوظبي",
	"ارامكو",
	"الاردن",
	"البحرين",
	"الجزائر",
	"السعودية",
	"العليان",
	"المغرب",
	"امارات",
	"ایران",
	"بارت",
	"بازار",
	"بيتك",
	"بھارت",
	"تونس",
	"سودان",
	"سورية",
	"شبكة",
	"عراق",
	"عرب",
	"عمان",
	"فلسطين",
	"قطر",
	"كاثوليك",
	"كوم",
	"مصر",
	"مليسيا",
	"موريتانيا",
	"موقع",
	"همراه",
	"پاکستان",
	"ڀارت",
	"कॉम",
	"नेट",
	"भारत",
	"भारतम्",
	"भारोत",
	"संगठन",
	"বাংলা",
	"ভারত",
	"ভাৰত",
	"ਭਾਰਤ",
	"ભારત",
	"ଭାରତ",
	"இந்தியா",
	"இலங்கை",
	"சிங்கப்பூர்",
	"భారత్",
	"ಭಾರತ",
	"ഭാരതം",
	"ලංකා",
	"คอม",
	"ไทย",
	"ລາວ",
	"გე",
	"みんな",
	"アマゾン",
	"クラウド",
	"グーグル",
	"コム",
	"ストア",
	"セール",
	"ファッション",
	"ポイント",
	"世界",
	"中信",
	"中国",
	"中國",
	"中文网",
	"亚马逊",
	"企业",
	"佛山",
	"信息",
	"健康",
	"八卦",
	"公司",
	"公益",
	"台湾",
	"台灣",
	"商城",
	"商店",
	"商标",
	"嘉里",
	"嘉里大酒店",
	"在线",
	"大拿",
	"天主教",
	"娱乐",
	"家電",
	"广东",
	"微博",
	"慈善",
	"我爱你",
	"手机",
	"招聘",
	"政务",
	"政府",
	"新加坡",
	"新闻",
	"时尚",
	"書籍",
	"机构",
	"淡马锡",
	"游戏",
	"澳門",
	"点看",
	"移动",
	"组织机构",
	"网址",
	"网店",
	"网站",
	"网络",
	"联通",
	"谷歌",
	"购物",
	"通販",
	"集团",
	"電訊盈科",
	"飞利浦",
	"食品",
	"餐厅",
	"香格里拉",
	"香港",
	"닷넷",
	"닷컴",
	"삼성",
	"한국"
];

var util$1 = {};

var hasRequiredUtil$1;

function requireUtil$1 () {
	if (hasRequiredUtil$1) return util$1;
	hasRequiredUtil$1 = 1;
	Object.defineProperty(util$1, "__esModule", { value: true });
	util$1.TAG_REGEX = util$1.TRAILING_PUNCTUATION_REGEX = util$1.URL_REGEX = util$1.MENTION_REGEX = void 0;
	util$1.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
	util$1.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
	util$1.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
	/**
	 * `\ufe0f` emoji modifier
	 * `\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2` zero-width spaces (likely incomplete)
	 */
	util$1.TAG_REGEX = 
	// eslint-disable-next-line no-misleading-character-class
	/(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
	
	return util$1;
}

var hasRequiredDetection;

function requireDetection () {
	if (hasRequiredDetection) return detection;
	hasRequiredDetection = 1;
	var __importDefault = (detection && detection.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(detection, "__esModule", { value: true });
	detection.detectFacets = detectFacets;
	const tlds_1 = __importDefault(require$$0);
	const util_1 = requireUtil$1();
	function detectFacets(text) {
	    let match;
	    const facets = [];
	    {
	        // mentions
	        const re = util_1.MENTION_REGEX;
	        while ((match = re.exec(text.utf16))) {
	            if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {
	                continue; // probably not a handle
	            }
	            const start = text.utf16.indexOf(match[3], match.index) - 1;
	            facets.push({
	                $type: 'app.bsky.richtext.facet',
	                index: {
	                    byteStart: text.utf16IndexToUtf8Index(start),
	                    byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1),
	                },
	                features: [
	                    {
	                        $type: 'app.bsky.richtext.facet#mention',
	                        did: match[3], // must be resolved afterwards
	                    },
	                ],
	            });
	        }
	    }
	    {
	        // links
	        const re = util_1.URL_REGEX;
	        while ((match = re.exec(text.utf16))) {
	            let uri = match[2];
	            if (!uri.startsWith('http')) {
	                const domain = match.groups?.domain;
	                if (!domain || !isValidDomain(domain)) {
	                    continue;
	                }
	                uri = `https://${uri}`;
	            }
	            const start = text.utf16.indexOf(match[2], match.index);
	            const index = { start, end: start + match[2].length };
	            // strip ending puncuation
	            if (/[.,;:!?]$/.test(uri)) {
	                uri = uri.slice(0, -1);
	                index.end--;
	            }
	            if (/[)]$/.test(uri) && !uri.includes('(')) {
	                uri = uri.slice(0, -1);
	                index.end--;
	            }
	            facets.push({
	                index: {
	                    byteStart: text.utf16IndexToUtf8Index(index.start),
	                    byteEnd: text.utf16IndexToUtf8Index(index.end),
	                },
	                features: [
	                    {
	                        $type: 'app.bsky.richtext.facet#link',
	                        uri,
	                    },
	                ],
	            });
	        }
	    }
	    {
	        const re = util_1.TAG_REGEX;
	        while ((match = re.exec(text.utf16))) {
	            const leading = match[1];
	            let tag = match[2];
	            if (!tag)
	                continue;
	            // strip ending punctuation and any spaces
	            tag = tag.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, '');
	            if (tag.length === 0 || tag.length > 64)
	                continue;
	            const index = match.index + leading.length;
	            facets.push({
	                index: {
	                    byteStart: text.utf16IndexToUtf8Index(index),
	                    byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length),
	                },
	                features: [
	                    {
	                        $type: 'app.bsky.richtext.facet#tag',
	                        tag: tag,
	                    },
	                ],
	            });
	        }
	    }
	    return facets.length > 0 ? facets : undefined;
	}
	function isValidDomain(str) {
	    return !!tlds_1.default.find((tld) => {
	        const i = str.lastIndexOf(tld);
	        if (i === -1) {
	            return false;
	        }
	        return str.charAt(i - 1) === '.' && i === str.length - tld.length;
	    });
	}
	
	return detection;
}

var sanitization = {};

var unicode = {};

var hasRequiredUnicode;

function requireUnicode () {
	if (hasRequiredUnicode) return unicode;
	hasRequiredUnicode = 1;
	/**
	 * Javascript uses utf16-encoded strings while most environments and specs
	 * have standardized around utf8 (including JSON).
	 *
	 * After some lengthy debated we decided that richtext facets need to use
	 * utf8 indices. This means we need tools to convert indices between utf8
	 * and utf16, and that's precisely what this library handles.
	 */
	Object.defineProperty(unicode, "__esModule", { value: true });
	unicode.UnicodeString = void 0;
	const common_web_1 = requireDist$4();
	const encoder = new TextEncoder();
	const decoder = new TextDecoder();
	class UnicodeString {
	    constructor(utf16) {
	        Object.defineProperty(this, "utf16", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "utf8", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "_graphemeLen", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this.utf16 = utf16;
	        this.utf8 = encoder.encode(utf16);
	    }
	    get length() {
	        return this.utf8.byteLength;
	    }
	    get graphemeLength() {
	        if (!this._graphemeLen) {
	            this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
	        }
	        return this._graphemeLen;
	    }
	    slice(start, end) {
	        return decoder.decode(this.utf8.slice(start, end));
	    }
	    utf16IndexToUtf8Index(i) {
	        return encoder.encode(this.utf16.slice(0, i)).byteLength;
	    }
	    toString() {
	        return this.utf16;
	    }
	}
	unicode.UnicodeString = UnicodeString;
	
	return unicode;
}

var hasRequiredSanitization;

function requireSanitization () {
	if (hasRequiredSanitization) return sanitization;
	hasRequiredSanitization = 1;
	Object.defineProperty(sanitization, "__esModule", { value: true });
	sanitization.sanitizeRichText = sanitizeRichText;
	const unicode_1 = requireUnicode();
	// this regex is intentionally matching on the zero-with-separator codepoint
	// eslint-disable-next-line no-misleading-character-class
	const EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
	const REPLACEMENT_STR = '\n\n';
	function sanitizeRichText(richText, opts) {
	    if (opts.cleanNewlines) {
	        richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
	    }
	    return richText;
	}
	function clean(richText, targetRegexp, replacementString) {
	    richText = richText.clone();
	    let match = richText.unicodeText.utf16.match(targetRegexp);
	    while (match && typeof match.index !== 'undefined') {
	        const oldText = richText.unicodeText;
	        const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
	        const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
	        richText.delete(removeStartIndex, removeEndIndex);
	        if (richText.unicodeText.utf16 === oldText.utf16) {
	            break; // sanity check
	        }
	        richText.insert(removeStartIndex, replacementString);
	        match = richText.unicodeText.utf16.match(targetRegexp);
	    }
	    return richText;
	}
	
	return sanitization;
}

var hasRequiredRichText;

function requireRichText () {
	if (hasRequiredRichText) return richText;
	hasRequiredRichText = 1;
	/*
	= Rich Text Manipulation

	When we sanitize rich text, we have to update the entity indices as the
	text is modified. This can be modeled as inserts() and deletes() of the
	rich text string. The possible scenarios are outlined below, along with
	their expected behaviors.

	NOTE: Slices are start inclusive, end exclusive

	== richTextInsert()

	Target string:

	   0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w o r l d   // string value
	       ^-------^           // target slice {start: 2, end: 7}

	Scenarios:

	A: ^                       // insert "test" at 0
	B:        ^                // insert "test" at 4
	C:                 ^       // insert "test" at 8

	A = before           -> move both by num added
	B = inner            -> move end by num added
	C = after            -> noop

	Results:

	A: 0 1 2 3 4 5 6 7 8 910   // string indices
	   t e s t h e l l o   w   // string value
	               ^-------^   // target slice {start: 6, end: 11}

	B: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l t e s t o   w   // string value
	       ^---------------^   // target slice {start: 2, end: 11}

	C: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w o t e s   // string value
	       ^-------^           // target slice {start: 2, end: 7}

	== richTextDelete()

	Target string:

	   0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w o r l d   // string value
	       ^-------^           // target slice {start: 2, end: 7}

	Scenarios:

	A: ^---------------^       // remove slice {start: 0, end: 9}
	B:               ^-----^   // remove slice {start: 7, end: 11}
	C:         ^-----------^   // remove slice {start: 4, end: 11}
	D:       ^-^               // remove slice {start: 3, end: 5}
	E:   ^-----^               // remove slice {start: 1, end: 5}
	F: ^-^                     // remove slice {start: 0, end: 2}

	A = entirely outer   -> delete slice
	B = entirely after   -> noop
	C = partially after  -> move end to remove-start
	D = entirely inner   -> move end by num removed
	E = partially before -> move start to remove-start index, move end by num removed
	F = entirely before  -> move both by num removed

	Results:

	A: 0 1 2 3 4 5 6 7 8 910   // string indices
	   l d                     // string value
	                           // target slice (deleted)

	B: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l o   w           // string value
	       ^-------^           // target slice {start: 2, end: 7}

	C: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l l                 // string value
	       ^-^                 // target slice {start: 2, end: 4}

	D: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h e l   w o r l d       // string value
	       ^---^               // target slice {start: 2, end: 5}

	E: 0 1 2 3 4 5 6 7 8 910   // string indices
	   h   w o r l d           // string value
	     ^-^                   // target slice {start: 1, end: 3}

	F: 0 1 2 3 4 5 6 7 8 910   // string indices
	   l l o   w o r l d       // string value
	   ^-------^               // target slice {start: 0, end: 5}
	 */
	Object.defineProperty(richText, "__esModule", { value: true });
	richText.RichText = richText.RichTextSegment = void 0;
	const client_1 = requireClient();
	const detection_1 = requireDetection();
	const sanitization_1 = requireSanitization();
	const unicode_1 = requireUnicode();
	class RichTextSegment {
	    constructor(text, facet) {
	        Object.defineProperty(this, "text", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: text
	        });
	        Object.defineProperty(this, "facet", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: facet
	        });
	    }
	    get link() {
	        return this.facet?.features.find(client_1.AppBskyRichtextFacet.isLink);
	    }
	    isLink() {
	        return !!this.link;
	    }
	    get mention() {
	        return this.facet?.features.find(client_1.AppBskyRichtextFacet.isMention);
	    }
	    isMention() {
	        return !!this.mention;
	    }
	    get tag() {
	        return this.facet?.features.find(client_1.AppBskyRichtextFacet.isTag);
	    }
	    isTag() {
	        return !!this.tag;
	    }
	}
	richText.RichTextSegment = RichTextSegment;
	class RichText {
	    constructor(props, opts) {
	        Object.defineProperty(this, "unicodeText", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "facets", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        this.unicodeText = new unicode_1.UnicodeString(props.text);
	        this.facets = props.facets;
	        if (!this.facets?.length && props.entities?.length) {
	            this.facets = entitiesToFacets(this.unicodeText, props.entities);
	        }
	        if (this.facets) {
	            this.facets = this.facets.filter(facetFilter).sort(facetSort);
	        }
	        if (opts?.cleanNewlines) {
	            (0, sanitization_1.sanitizeRichText)(this, { cleanNewlines: true }).copyInto(this);
	        }
	    }
	    get text() {
	        return this.unicodeText.toString();
	    }
	    get length() {
	        return this.unicodeText.length;
	    }
	    get graphemeLength() {
	        return this.unicodeText.graphemeLength;
	    }
	    clone() {
	        return new RichText({
	            text: this.unicodeText.utf16,
	            facets: cloneDeep(this.facets),
	        });
	    }
	    copyInto(target) {
	        target.unicodeText = this.unicodeText;
	        target.facets = cloneDeep(this.facets);
	    }
	    *segments() {
	        const facets = this.facets || [];
	        if (!facets.length) {
	            yield new RichTextSegment(this.unicodeText.utf16);
	            return;
	        }
	        let textCursor = 0;
	        let facetCursor = 0;
	        do {
	            const currFacet = facets[facetCursor];
	            if (textCursor < currFacet.index.byteStart) {
	                yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
	            }
	            else if (textCursor > currFacet.index.byteStart) {
	                facetCursor++;
	                continue;
	            }
	            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
	                const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
	                if (!subtext.trim()) {
	                    // dont empty string entities
	                    yield new RichTextSegment(subtext);
	                }
	                else {
	                    yield new RichTextSegment(subtext, currFacet);
	                }
	            }
	            textCursor = currFacet.index.byteEnd;
	            facetCursor++;
	        } while (facetCursor < facets.length);
	        if (textCursor < this.unicodeText.length) {
	            yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
	        }
	    }
	    insert(insertIndex, insertText) {
	        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) +
	            insertText +
	            this.unicodeText.slice(insertIndex));
	        if (!this.facets?.length) {
	            return this;
	        }
	        const numCharsAdded = insertText.length;
	        for (const ent of this.facets) {
	            // see comment at top of file for labels of each scenario
	            // scenario A (before)
	            if (insertIndex <= ent.index.byteStart) {
	                // move both by num added
	                ent.index.byteStart += numCharsAdded;
	                ent.index.byteEnd += numCharsAdded;
	            }
	            // scenario B (inner)
	            else if (insertIndex >= ent.index.byteStart &&
	                insertIndex < ent.index.byteEnd) {
	                // move end by num added
	                ent.index.byteEnd += numCharsAdded;
	            }
	            // scenario C (after)
	            // noop
	        }
	        return this;
	    }
	    delete(removeStartIndex, removeEndIndex) {
	        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) +
	            this.unicodeText.slice(removeEndIndex));
	        if (!this.facets?.length) {
	            return this;
	        }
	        const numCharsRemoved = removeEndIndex - removeStartIndex;
	        for (const ent of this.facets) {
	            // see comment at top of file for labels of each scenario
	            // scenario A (entirely outer)
	            if (removeStartIndex <= ent.index.byteStart &&
	                removeEndIndex >= ent.index.byteEnd) {
	                // delete slice (will get removed in final pass)
	                ent.index.byteStart = 0;
	                ent.index.byteEnd = 0;
	            }
	            // scenario B (entirely after)
	            else if (removeStartIndex > ent.index.byteEnd) ;
	            // scenario C (partially after)
	            else if (removeStartIndex > ent.index.byteStart &&
	                removeStartIndex <= ent.index.byteEnd &&
	                removeEndIndex > ent.index.byteEnd) {
	                // move end to remove start
	                ent.index.byteEnd = removeStartIndex;
	            }
	            // scenario D (entirely inner)
	            else if (removeStartIndex >= ent.index.byteStart &&
	                removeEndIndex <= ent.index.byteEnd) {
	                // move end by num removed
	                ent.index.byteEnd -= numCharsRemoved;
	            }
	            // scenario E (partially before)
	            else if (removeStartIndex < ent.index.byteStart &&
	                removeEndIndex >= ent.index.byteStart &&
	                removeEndIndex <= ent.index.byteEnd) {
	                // move start to remove-start index, move end by num removed
	                ent.index.byteStart = removeStartIndex;
	                ent.index.byteEnd -= numCharsRemoved;
	            }
	            // scenario F (entirely before)
	            else if (removeEndIndex < ent.index.byteStart) {
	                // move both by num removed
	                ent.index.byteStart -= numCharsRemoved;
	                ent.index.byteEnd -= numCharsRemoved;
	            }
	        }
	        // filter out any facets that were made irrelevant
	        this.facets = this.facets.filter((ent) => ent.index.byteStart < ent.index.byteEnd);
	        return this;
	    }
	    /**
	     * Detects facets such as links and mentions
	     * Note: Overwrites the existing facets with auto-detected facets
	     */
	    async detectFacets(agent) {
	        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
	        if (this.facets) {
	            const promises = [];
	            for (const facet of this.facets) {
	                for (const feature of facet.features) {
	                    if (client_1.AppBskyRichtextFacet.isMention(feature)) {
	                        promises.push(agent.com.atproto.identity
	                            .resolveHandle({ handle: feature.did })
	                            .then((res) => res?.data.did)
	                            .catch((_) => undefined)
	                            .then((did) => {
	                            feature.did = did || '';
	                        }));
	                    }
	                }
	            }
	            await Promise.allSettled(promises);
	            this.facets.sort(facetSort);
	        }
	    }
	    /**
	     * Detects facets such as links and mentions but does not resolve them
	     * Will produce invalid facets! For instance, mentions will not have their DIDs set.
	     * Note: Overwrites the existing facets with auto-detected facets
	     */
	    detectFacetsWithoutResolution() {
	        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
	        if (this.facets) {
	            this.facets.sort(facetSort);
	        }
	    }
	}
	richText.RichText = RichText;
	const facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
	const facetFilter = (facet) => 
	// discard negative-length facets. zero-length facets are valid
	facet.index.byteStart <= facet.index.byteEnd;
	function entitiesToFacets(text, entities) {
	    const facets = [];
	    for (const ent of entities) {
	        if (ent.type === 'link') {
	            facets.push({
	                $type: 'app.bsky.richtext.facet',
	                index: {
	                    byteStart: text.utf16IndexToUtf8Index(ent.index.start),
	                    byteEnd: text.utf16IndexToUtf8Index(ent.index.end),
	                },
	                features: [{ $type: 'app.bsky.richtext.facet#link', uri: ent.value }],
	            });
	        }
	        else if (ent.type === 'mention') {
	            facets.push({
	                $type: 'app.bsky.richtext.facet',
	                index: {
	                    byteStart: text.utf16IndexToUtf8Index(ent.index.start),
	                    byteEnd: text.utf16IndexToUtf8Index(ent.index.end),
	                },
	                features: [
	                    { $type: 'app.bsky.richtext.facet#mention', did: ent.value },
	                ],
	            });
	        }
	    }
	    return facets;
	}
	function cloneDeep(v) {
	    if (typeof v === 'undefined') {
	        return v;
	    }
	    return JSON.parse(JSON.stringify(v));
	}
	
	return richText;
}

var moderation = {};

var decision = {};

var labels = {};

var hasRequiredLabels;

function requireLabels () {
	if (hasRequiredLabels) return labels;
	hasRequiredLabels = 1;
	Object.defineProperty(labels, "__esModule", { value: true });
	labels.LABELS = labels.DEFAULT_LABEL_SETTINGS = void 0;
	labels.DEFAULT_LABEL_SETTINGS = {
	    porn: 'hide',
	    sexual: 'warn',
	    nudity: 'ignore',
	    'graphic-media': 'warn',
	};
	labels.LABELS = {
	    '!hide': {
	        identifier: '!hide',
	        configurable: false,
	        defaultSetting: 'hide',
	        flags: ['no-override', 'no-self'],
	        severity: 'alert',
	        blurs: 'content',
	        behaviors: {
	            account: {
	                profileList: 'blur',
	                profileView: 'blur',
	                avatar: 'blur',
	                banner: 'blur',
	                displayName: 'blur',
	                contentList: 'blur',
	                contentView: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	                displayName: 'blur',
	            },
	            content: {
	                contentList: 'blur',
	                contentView: 'blur',
	            },
	        },
	        locales: [],
	    },
	    '!warn': {
	        identifier: '!warn',
	        configurable: false,
	        defaultSetting: 'warn',
	        flags: ['no-self'],
	        severity: 'none',
	        blurs: 'content',
	        behaviors: {
	            account: {
	                profileList: 'blur',
	                profileView: 'blur',
	                avatar: 'blur',
	                banner: 'blur',
	                contentList: 'blur',
	                contentView: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	                displayName: 'blur',
	            },
	            content: {
	                contentList: 'blur',
	                contentView: 'blur',
	            },
	        },
	        locales: [],
	    },
	    '!no-unauthenticated': {
	        identifier: '!no-unauthenticated',
	        configurable: false,
	        defaultSetting: 'hide',
	        flags: ['no-override', 'unauthed'],
	        severity: 'none',
	        blurs: 'content',
	        behaviors: {
	            account: {
	                profileList: 'blur',
	                profileView: 'blur',
	                avatar: 'blur',
	                banner: 'blur',
	                displayName: 'blur',
	                contentList: 'blur',
	                contentView: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	                displayName: 'blur',
	            },
	            content: {
	                contentList: 'blur',
	                contentView: 'blur',
	            },
	        },
	        locales: [],
	    },
	    porn: {
	        identifier: 'porn',
	        configurable: true,
	        defaultSetting: 'hide',
	        flags: ['adult'],
	        severity: 'none',
	        blurs: 'media',
	        behaviors: {
	            account: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            content: {
	                contentMedia: 'blur',
	            },
	        },
	        locales: [],
	    },
	    sexual: {
	        identifier: 'sexual',
	        configurable: true,
	        defaultSetting: 'warn',
	        flags: ['adult'],
	        severity: 'none',
	        blurs: 'media',
	        behaviors: {
	            account: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            content: {
	                contentMedia: 'blur',
	            },
	        },
	        locales: [],
	    },
	    nudity: {
	        identifier: 'nudity',
	        configurable: true,
	        defaultSetting: 'ignore',
	        flags: [],
	        severity: 'none',
	        blurs: 'media',
	        behaviors: {
	            account: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            content: {
	                contentMedia: 'blur',
	            },
	        },
	        locales: [],
	    },
	    'graphic-media': {
	        identifier: 'graphic-media',
	        flags: ['adult'],
	        configurable: true,
	        defaultSetting: 'warn',
	        severity: 'none',
	        blurs: 'media',
	        behaviors: {
	            account: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            content: {
	                contentMedia: 'blur',
	            },
	        },
	        locales: [],
	    },
	    /** @deprecated alias for `graphic-media` */
	    gore: {
	        identifier: 'gore',
	        flags: ['adult'],
	        configurable: true,
	        defaultSetting: 'warn',
	        severity: 'none',
	        blurs: 'media',
	        behaviors: {
	            account: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            profile: {
	                avatar: 'blur',
	                banner: 'blur',
	            },
	            content: {
	                contentMedia: 'blur',
	            },
	        },
	        locales: [],
	    },
	};
	
	return labels;
}

var types = {};

var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types;
	hasRequiredTypes = 1;
	Object.defineProperty(types, "__esModule", { value: true });
	types.NOOP_BEHAVIOR = types.HIDE_BEHAVIOR = types.MUTEWORD_BEHAVIOR = types.MUTE_BEHAVIOR = types.BLOCK_BEHAVIOR = types.CUSTOM_LABEL_VALUE_RE = void 0;
	// syntax
	// =
	types.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
	types.BLOCK_BEHAVIOR = {
	    profileList: 'blur',
	    profileView: 'alert',
	    avatar: 'blur',
	    banner: 'blur',
	    contentList: 'blur',
	    contentView: 'blur',
	};
	types.MUTE_BEHAVIOR = {
	    profileList: 'inform',
	    profileView: 'alert',
	    contentList: 'blur',
	    contentView: 'inform',
	};
	types.MUTEWORD_BEHAVIOR = {
	    contentList: 'blur',
	    contentView: 'blur',
	};
	types.HIDE_BEHAVIOR = {
	    contentList: 'blur',
	    contentView: 'blur',
	};
	types.NOOP_BEHAVIOR = {};
	
	return types;
}

var ui = {};

var hasRequiredUi;

function requireUi () {
	if (hasRequiredUi) return ui;
	hasRequiredUi = 1;
	Object.defineProperty(ui, "__esModule", { value: true });
	ui.ModerationUI = void 0;
	class ModerationUI {
	    constructor() {
	        Object.defineProperty(this, "noOverride", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: false
	        });
	        Object.defineProperty(this, "filters", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: []
	        });
	        Object.defineProperty(this, "blurs", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: []
	        });
	        Object.defineProperty(this, "alerts", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: []
	        });
	        Object.defineProperty(this, "informs", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: []
	        });
	    }
	    get filter() {
	        return this.filters.length !== 0;
	    }
	    get blur() {
	        return this.blurs.length !== 0;
	    }
	    get alert() {
	        return this.alerts.length !== 0;
	    }
	    get inform() {
	        return this.informs.length !== 0;
	    }
	}
	ui.ModerationUI = ModerationUI;
	
	return ui;
}

var hasRequiredDecision;

function requireDecision () {
	if (hasRequiredDecision) return decision;
	hasRequiredDecision = 1;
	Object.defineProperty(decision, "__esModule", { value: true });
	decision.ModerationDecision = void 0;
	const labels_1 = requireLabels();
	const types_1 = requireTypes();
	const ui_1 = requireUi();
	var ModerationBehaviorSeverity;
	(function (ModerationBehaviorSeverity) {
	    ModerationBehaviorSeverity[ModerationBehaviorSeverity["High"] = 0] = "High";
	    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Medium"] = 1] = "Medium";
	    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Low"] = 2] = "Low";
	})(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
	class ModerationDecision {
	    constructor() {
	        Object.defineProperty(this, "did", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: ''
	        });
	        Object.defineProperty(this, "isMe", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: false
	        });
	        Object.defineProperty(this, "causes", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: []
	        });
	    }
	    static merge(...decisions) {
	        const decisionsFiltered = decisions.filter((v) => v != null);
	        const decision = new ModerationDecision();
	        if (decisionsFiltered[0]) {
	            decision.did = decisionsFiltered[0].did;
	            decision.isMe = decisionsFiltered[0].isMe;
	        }
	        decision.causes = decisionsFiltered.flatMap((d) => d.causes);
	        return decision;
	    }
	    downgrade() {
	        for (const cause of this.causes) {
	            cause.downgraded = true;
	        }
	        return this;
	    }
	    get blocked() {
	        return !!this.blockCause;
	    }
	    get muted() {
	        return !!this.muteCause;
	    }
	    get blockCause() {
	        return this.causes.find((cause) => cause.type === 'blocking' ||
	            cause.type === 'blocked-by' ||
	            cause.type === 'block-other');
	    }
	    get muteCause() {
	        return this.causes.find((cause) => cause.type === 'muted');
	    }
	    get labelCauses() {
	        return this.causes.filter((cause) => cause.type === 'label');
	    }
	    ui(context) {
	        const ui = new ui_1.ModerationUI();
	        for (const cause of this.causes) {
	            if (cause.type === 'blocking' ||
	                cause.type === 'blocked-by' ||
	                cause.type === 'block-other') {
	                if (this.isMe) {
	                    continue;
	                }
	                if (context === 'profileList' || context === 'contentList') {
	                    ui.filters.push(cause);
	                }
	                if (!cause.downgraded) {
	                    if (types_1.BLOCK_BEHAVIOR[context] === 'blur') {
	                        ui.noOverride = true;
	                        ui.blurs.push(cause);
	                    }
	                    else if (types_1.BLOCK_BEHAVIOR[context] === 'alert') {
	                        ui.alerts.push(cause);
	                    }
	                    else if (types_1.BLOCK_BEHAVIOR[context] === 'inform') {
	                        ui.informs.push(cause);
	                    }
	                }
	            }
	            else if (cause.type === 'muted') {
	                if (this.isMe) {
	                    continue;
	                }
	                if (context === 'profileList' || context === 'contentList') {
	                    ui.filters.push(cause);
	                }
	                if (!cause.downgraded) {
	                    if (types_1.MUTE_BEHAVIOR[context] === 'blur') {
	                        ui.blurs.push(cause);
	                    }
	                    else if (types_1.MUTE_BEHAVIOR[context] === 'alert') {
	                        ui.alerts.push(cause);
	                    }
	                    else if (types_1.MUTE_BEHAVIOR[context] === 'inform') {
	                        ui.informs.push(cause);
	                    }
	                }
	            }
	            else if (cause.type === 'mute-word') {
	                if (this.isMe) {
	                    continue;
	                }
	                if (context === 'contentList') {
	                    ui.filters.push(cause);
	                }
	                if (!cause.downgraded) {
	                    if (types_1.MUTEWORD_BEHAVIOR[context] === 'blur') {
	                        ui.blurs.push(cause);
	                    }
	                    else if (types_1.MUTEWORD_BEHAVIOR[context] === 'alert') {
	                        ui.alerts.push(cause);
	                    }
	                    else if (types_1.MUTEWORD_BEHAVIOR[context] === 'inform') {
	                        ui.informs.push(cause);
	                    }
	                }
	            }
	            else if (cause.type === 'hidden') {
	                if (context === 'profileList' || context === 'contentList') {
	                    ui.filters.push(cause);
	                }
	                if (!cause.downgraded) {
	                    if (types_1.HIDE_BEHAVIOR[context] === 'blur') {
	                        ui.blurs.push(cause);
	                    }
	                    else if (types_1.HIDE_BEHAVIOR[context] === 'alert') {
	                        ui.alerts.push(cause);
	                    }
	                    else if (types_1.HIDE_BEHAVIOR[context] === 'inform') {
	                        ui.informs.push(cause);
	                    }
	                }
	            }
	            else if (cause.type === 'label') {
	                if (context === 'profileList' && cause.target === 'account') {
	                    if (cause.setting === 'hide' && !this.isMe) {
	                        ui.filters.push(cause);
	                    }
	                }
	                else if (context === 'contentList' &&
	                    (cause.target === 'account' || cause.target === 'content')) {
	                    if (cause.setting === 'hide' && !this.isMe) {
	                        ui.filters.push(cause);
	                    }
	                }
	                if (!cause.downgraded) {
	                    if (cause.behavior[context] === 'blur') {
	                        ui.blurs.push(cause);
	                        if (cause.noOverride && !this.isMe) {
	                            ui.noOverride = true;
	                        }
	                    }
	                    else if (cause.behavior[context] === 'alert') {
	                        ui.alerts.push(cause);
	                    }
	                    else if (cause.behavior[context] === 'inform') {
	                        ui.informs.push(cause);
	                    }
	                }
	            }
	        }
	        ui.filters.sort(sortByPriority);
	        ui.blurs.sort(sortByPriority);
	        return ui;
	    }
	    setDid(did) {
	        this.did = did;
	    }
	    setIsMe(isMe) {
	        this.isMe = isMe;
	    }
	    addHidden(hidden) {
	        if (hidden) {
	            this.causes.push({
	                type: 'hidden',
	                source: { type: 'user' },
	                priority: 6,
	            });
	        }
	    }
	    addMutedWord(mutedWord) {
	        if (mutedWord) {
	            this.causes.push({
	                type: 'mute-word',
	                source: { type: 'user' },
	                priority: 6,
	            });
	        }
	    }
	    addBlocking(blocking) {
	        if (blocking) {
	            this.causes.push({
	                type: 'blocking',
	                source: { type: 'user' },
	                priority: 3,
	            });
	        }
	    }
	    addBlockingByList(blockingByList) {
	        if (blockingByList) {
	            this.causes.push({
	                type: 'blocking',
	                source: { type: 'list', list: blockingByList },
	                priority: 3,
	            });
	        }
	    }
	    addBlockedBy(blockedBy) {
	        if (blockedBy) {
	            this.causes.push({
	                type: 'blocked-by',
	                source: { type: 'user' },
	                priority: 4,
	            });
	        }
	    }
	    addBlockOther(blockOther) {
	        if (blockOther) {
	            this.causes.push({
	                type: 'block-other',
	                source: { type: 'user' },
	                priority: 4,
	            });
	        }
	    }
	    addLabel(target, label, opts) {
	        // look up the label definition
	        const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val)
	            ? opts.labelDefs?.[label.src]?.find((def) => def.identifier === label.val) || labels_1.LABELS[label.val]
	            : labels_1.LABELS[label.val];
	        if (!labelDef) {
	            // ignore labels we don't understand
	            return;
	        }
	        // look up the label preference
	        const isSelf = label.src === this.did;
	        const labeler = isSelf
	            ? undefined
	            : opts.prefs.labelers.find((s) => s.did === label.src);
	        if (!isSelf && !labeler) {
	            return; // skip labelers not configured by the user
	        }
	        if (isSelf && labelDef.flags.includes('no-self')) {
	            return; // skip self-labels that aren't supported
	        }
	        // establish the label preference for interpretation
	        let labelPref = labelDef.defaultSetting || 'ignore';
	        if (!labelDef.configurable) {
	            labelPref = labelDef.defaultSetting || 'hide';
	        }
	        else if (labelDef.flags.includes('adult') &&
	            !opts.prefs.adultContentEnabled) {
	            labelPref = 'hide';
	        }
	        else if (labeler?.labels[labelDef.identifier]) {
	            labelPref = labeler?.labels[labelDef.identifier];
	        }
	        else if (opts.prefs.labels[labelDef.identifier]) {
	            labelPref = opts.prefs.labels[labelDef.identifier];
	        }
	        // ignore labels the user has asked to ignore
	        if (labelPref === 'ignore') {
	            return;
	        }
	        // ignore 'unauthed' labels when the user is authed
	        if (labelDef.flags.includes('unauthed') && !!opts.userDid) {
	            return;
	        }
	        // establish the priority of the label
	        let priority;
	        const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
	        if (labelDef.flags.includes('no-override') ||
	            (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled)) {
	            priority = 1;
	        }
	        else if (labelPref === 'hide') {
	            priority = 2;
	        }
	        else if (severity === ModerationBehaviorSeverity.High) {
	            // blurring profile view or content view
	            priority = 5;
	        }
	        else if (severity === ModerationBehaviorSeverity.Medium) {
	            // blurring content list or content media
	            priority = 7;
	        }
	        else {
	            // blurring avatar, adding alerts
	            priority = 8;
	        }
	        let noOverride = false;
	        if (labelDef.flags.includes('no-override')) {
	            noOverride = true;
	        }
	        else if (labelDef.flags.includes('adult') &&
	            !opts.prefs.adultContentEnabled) {
	            noOverride = true;
	        }
	        this.causes.push({
	            type: 'label',
	            source: isSelf || !labeler
	                ? { type: 'user' }
	                : { type: 'labeler', did: labeler.did },
	            label,
	            labelDef,
	            target,
	            setting: labelPref,
	            behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
	            noOverride,
	            priority,
	        });
	    }
	    addMuted(muted) {
	        if (muted) {
	            this.causes.push({
	                type: 'muted',
	                source: { type: 'user' },
	                priority: 6,
	            });
	        }
	    }
	    addMutedByList(mutedByList) {
	        if (mutedByList) {
	            this.causes.push({
	                type: 'muted',
	                source: { type: 'list', list: mutedByList },
	                priority: 6,
	            });
	        }
	    }
	}
	decision.ModerationDecision = ModerationDecision;
	function measureModerationBehaviorSeverity(beh) {
	    if (!beh) {
	        return ModerationBehaviorSeverity.Low;
	    }
	    if (beh.profileView === 'blur' || beh.contentView === 'blur') {
	        return ModerationBehaviorSeverity.High;
	    }
	    if (beh.contentList === 'blur' || beh.contentMedia === 'blur') {
	        return ModerationBehaviorSeverity.Medium;
	    }
	    return ModerationBehaviorSeverity.Low;
	}
	function sortByPriority(a, b) {
	    return a.priority - b.priority;
	}
	
	return decision;
}

var account = {};

var hasRequiredAccount;

function requireAccount () {
	if (hasRequiredAccount) return account;
	hasRequiredAccount = 1;
	Object.defineProperty(account, "__esModule", { value: true });
	account.decideAccount = decideAccount;
	account.filterAccountLabels = filterAccountLabels;
	const decision_1 = requireDecision();
	function decideAccount(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.did);
	    acc.setIsMe(subject.did === opts.userDid);
	    if (subject.viewer?.muted) {
	        if (subject.viewer?.mutedByList) {
	            acc.addMutedByList(subject.viewer?.mutedByList);
	        }
	        else {
	            acc.addMuted(subject.viewer?.muted);
	        }
	    }
	    if (subject.viewer?.blocking) {
	        if (subject.viewer?.blockingByList) {
	            acc.addBlockingByList(subject.viewer?.blockingByList);
	        }
	        else {
	            acc.addBlocking(subject.viewer?.blocking);
	        }
	    }
	    acc.addBlockedBy(subject.viewer?.blockedBy);
	    for (const label of filterAccountLabels(subject.labels)) {
	        acc.addLabel('account', label, opts);
	    }
	    return acc;
	}
	function filterAccountLabels(labels) {
	    if (!labels) {
	        return [];
	    }
	    return labels.filter((label) => !label.uri.endsWith('/app.bsky.actor.profile/self') ||
	        label.val === '!no-unauthenticated');
	}
	
	return account;
}

var feedGenerator = {};

var profile = {};

var hasRequiredProfile;

function requireProfile () {
	if (hasRequiredProfile) return profile;
	hasRequiredProfile = 1;
	Object.defineProperty(profile, "__esModule", { value: true });
	profile.decideProfile = decideProfile;
	profile.filterProfileLabels = filterProfileLabels;
	const decision_1 = requireDecision();
	function decideProfile(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.did);
	    acc.setIsMe(subject.did === opts.userDid);
	    for (const label of filterProfileLabels(subject.labels)) {
	        acc.addLabel('profile', label, opts);
	    }
	    return acc;
	}
	function filterProfileLabels(labels) {
	    if (!labels) {
	        return [];
	    }
	    return labels.filter((label) => label.uri.endsWith('/app.bsky.actor.profile/self'));
	}
	
	return profile;
}

var hasRequiredFeedGenerator;

function requireFeedGenerator () {
	if (hasRequiredFeedGenerator) return feedGenerator;
	hasRequiredFeedGenerator = 1;
	Object.defineProperty(feedGenerator, "__esModule", { value: true });
	feedGenerator.decideFeedGenerator = decideFeedGenerator;
	const decision_1 = requireDecision();
	const account_1 = requireAccount();
	const profile_1 = requireProfile();
	function decideFeedGenerator(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.creator.did);
	    acc.setIsMe(subject.creator.did === opts.userDid);
	    if (subject.labels?.length) {
	        for (const label of subject.labels) {
	            acc.addLabel('content', label, opts);
	        }
	    }
	    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
	}
	
	return feedGenerator;
}

var notification = {};

var hasRequiredNotification;

function requireNotification () {
	if (hasRequiredNotification) return notification;
	hasRequiredNotification = 1;
	Object.defineProperty(notification, "__esModule", { value: true });
	notification.decideNotification = decideNotification;
	const decision_1 = requireDecision();
	const account_1 = requireAccount();
	const profile_1 = requireProfile();
	function decideNotification(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.author.did);
	    acc.setIsMe(subject.author.did === opts.userDid);
	    if (subject.labels?.length) {
	        for (const label of subject.labels) {
	            acc.addLabel('content', label, opts);
	        }
	    }
	    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
	}
	
	return notification;
}

var post$1 = {};

var mutewords = {};

var hasRequiredMutewords;

function requireMutewords () {
	if (hasRequiredMutewords) return mutewords;
	hasRequiredMutewords = 1;
	Object.defineProperty(mutewords, "__esModule", { value: true });
	mutewords.hasMutedWord = hasMutedWord;
	const client_1 = requireClient();
	const REGEX = {
	    LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
	    WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g,
	};
	/**
	 * List of 2-letter lang codes for languages that either don't use spaces, or
	 * don't use spaces in a way conducive to word-based filtering.
	 *
	 * For these, we use a simple `String.includes` to check for a match.
	 */
	const LANGUAGE_EXCEPTIONS = [
	    'ja', // Japanese
	    'zh', // Chinese
	    'ko', // Korean
	    'th', // Thai
	    'vi', // Vietnamese
	];
	function hasMutedWord({ mutedWords, text, facets, outlineTags, languages, actor, }) {
	    const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || '');
	    const tags = []
	        .concat(outlineTags || [])
	        .concat((facets || []).flatMap((facet) => facet.features.filter(client_1.AppBskyRichtextFacet.isTag).map((tag) => tag.tag)))
	        .map((t) => t.toLowerCase());
	    for (const mute of mutedWords) {
	        const mutedWord = mute.value.toLowerCase();
	        const postText = text.toLowerCase();
	        // expired, ignore
	        if (mute.expiresAt && mute.expiresAt < new Date().toISOString())
	            continue;
	        if (mute.actorTarget === 'exclude-following' &&
	            Boolean(actor?.viewer?.following))
	            continue;
	        // `content` applies to tags as well
	        if (tags.includes(mutedWord))
	            return true;
	        // rest of the checks are for `content` only
	        if (!mute.targets.includes('content'))
	            continue;
	        // single character or other exception, has to use includes
	        if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord))
	            return true;
	        // too long
	        if (mutedWord.length > postText.length)
	            continue;
	        // exact match
	        if (mutedWord === postText)
	            return true;
	        // any muted phrase with space or punctuation
	        if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord))
	            return true;
	        // check individual character groups
	        const words = postText.split(REGEX.WORD_BOUNDARY);
	        for (const word of words) {
	            if (word === mutedWord)
	                return true;
	            // compare word without leading/trailing punctuation, but allow internal
	            // punctuation (such as `s@ssy`)
	            const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, '');
	            if (mutedWord === wordTrimmedPunctuation)
	                return true;
	            if (mutedWord.length > wordTrimmedPunctuation.length)
	                continue;
	            if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
	                const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, ' ');
	                if (spacedWord === mutedWord)
	                    return true;
	                const contiguousWord = spacedWord.replace(/\s/gu, '');
	                if (contiguousWord === mutedWord)
	                    return true;
	                const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
	                for (const wordPart of wordParts) {
	                    if (wordPart === mutedWord)
	                        return true;
	                }
	            }
	        }
	    }
	    return false;
	}
	
	return mutewords;
}

var hasRequiredPost;

function requirePost () {
	if (hasRequiredPost) return post$1;
	hasRequiredPost = 1;
	Object.defineProperty(post$1, "__esModule", { value: true });
	post$1.decidePost = decidePost;
	const client_1 = requireClient();
	const decision_1 = requireDecision();
	const mutewords_1 = requireMutewords();
	const account_1 = requireAccount();
	const profile_1 = requireProfile();
	function decidePost(subject, opts) {
	    return decision_1.ModerationDecision.merge(decideSubject(subject, opts), decideEmbed(subject.embed, opts)?.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
	}
	function decideSubject(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.author.did);
	    acc.setIsMe(subject.author.did === opts.userDid);
	    if (subject.labels?.length) {
	        for (const label of subject.labels) {
	            acc.addLabel('content', label, opts);
	        }
	    }
	    acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
	    if (!acc.isMe) {
	        acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
	    }
	    return acc;
	}
	function decideEmbed(embed, opts) {
	    if (embed) {
	        if ((client_1.AppBskyEmbedRecord.isView(embed) ||
	            client_1.AppBskyEmbedRecordWithMedia.isView(embed)) &&
	            client_1.AppBskyEmbedRecord.isViewRecord(embed.record)) {
	            // quote post
	            return decideQuotedPost(embed.record, opts);
	        }
	        else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) &&
	            client_1.AppBskyEmbedRecord.isViewRecord(embed.record.record)) {
	            // quoted post with media
	            return decideQuotedPost(embed.record.record, opts);
	        }
	        else if ((client_1.AppBskyEmbedRecord.isView(embed) ||
	            client_1.AppBskyEmbedRecordWithMedia.isView(embed)) &&
	            client_1.AppBskyEmbedRecord.isViewBlocked(embed.record)) {
	            // blocked quote post
	            return decideBlockedQuotedPost(embed.record, opts);
	        }
	        else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) &&
	            client_1.AppBskyEmbedRecord.isViewBlocked(embed.record.record)) {
	            // blocked quoted post with media
	            return decideBlockedQuotedPost(embed.record.record, opts);
	        }
	    }
	    return undefined;
	}
	function decideQuotedPost(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.author.did);
	    acc.setIsMe(subject.author.did === opts.userDid);
	    if (subject.labels?.length) {
	        for (const label of subject.labels) {
	            acc.addLabel('content', label, opts);
	        }
	    }
	    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
	}
	function decideBlockedQuotedPost(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    acc.setDid(subject.author.did);
	    acc.setIsMe(subject.author.did === opts.userDid);
	    if (subject.author.viewer?.muted) {
	        if (subject.author.viewer?.mutedByList) {
	            acc.addMutedByList(subject.author.viewer?.mutedByList);
	        }
	        else {
	            acc.addMuted(subject.author.viewer?.muted);
	        }
	    }
	    if (subject.author.viewer?.blocking) {
	        if (subject.author.viewer?.blockingByList) {
	            acc.addBlockingByList(subject.author.viewer?.blockingByList);
	        }
	        else {
	            acc.addBlocking(subject.author.viewer?.blocking);
	        }
	    }
	    acc.addBlockedBy(subject.author.viewer?.blockedBy);
	    return acc;
	}
	function checkHiddenPost(subject, hiddenPosts) {
	    if (!hiddenPosts?.length) {
	        return false;
	    }
	    if (hiddenPosts.includes(subject.uri)) {
	        return true;
	    }
	    if (subject.embed) {
	        if (client_1.AppBskyEmbedRecord.isView(subject.embed) &&
	            client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) &&
	            hiddenPosts.includes(subject.embed.record.uri)) {
	            return true;
	        }
	        if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) &&
	            client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) &&
	            hiddenPosts.includes(subject.embed.record.record.uri)) {
	            return true;
	        }
	    }
	    return false;
	}
	function checkMutedWords(subject, mutedWords) {
	    if (!mutedWords?.length) {
	        return false;
	    }
	    const postAuthor = subject.author;
	    if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
	        const post = subject.record;
	        // post text
	        if ((0, mutewords_1.hasMutedWord)({
	            mutedWords,
	            text: post.text,
	            facets: post.facets,
	            outlineTags: post.tags,
	            languages: post.langs,
	            actor: postAuthor,
	        })) {
	            return true;
	        }
	        if (post.embed && client_1.AppBskyEmbedImages.isMain(post.embed)) {
	            // post images
	            for (const image of post.embed.images) {
	                if ((0, mutewords_1.hasMutedWord)({
	                    mutedWords,
	                    text: image.alt,
	                    languages: post.langs,
	                    actor: postAuthor,
	                })) {
	                    return true;
	                }
	            }
	        }
	    }
	    const { embed } = subject;
	    if (embed) {
	        // quote post
	        if ((client_1.AppBskyEmbedRecord.isView(embed) ||
	            client_1.AppBskyEmbedRecordWithMedia.isView(embed)) &&
	            client_1.AppBskyEmbedRecord.isViewRecord(embed.record)) {
	            if (client_1.AppBskyFeedPost.isRecord(embed.record.value)) {
	                const embeddedPost = embed.record.value;
	                const embedAuthor = embed.record.author;
	                // quoted post text
	                if ((0, mutewords_1.hasMutedWord)({
	                    mutedWords,
	                    text: embeddedPost.text,
	                    facets: embeddedPost.facets,
	                    outlineTags: embeddedPost.tags,
	                    languages: embeddedPost.langs,
	                    actor: embedAuthor,
	                })) {
	                    return true;
	                }
	                // quoted post's images
	                if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
	                    for (const image of embeddedPost.embed.images) {
	                        if ((0, mutewords_1.hasMutedWord)({
	                            mutedWords,
	                            text: image.alt,
	                            languages: embeddedPost.langs,
	                            actor: embedAuthor,
	                        })) {
	                            return true;
	                        }
	                    }
	                }
	                // quoted post's link card
	                if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
	                    const { external } = embeddedPost.embed;
	                    if ((0, mutewords_1.hasMutedWord)({
	                        mutedWords,
	                        text: external.title + ' ' + external.description,
	                        languages: [],
	                        actor: embedAuthor,
	                    })) {
	                        return true;
	                    }
	                }
	                if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
	                    // quoted post's link card when it did a quote + media
	                    if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
	                        const { external } = embeddedPost.embed.media;
	                        if ((0, mutewords_1.hasMutedWord)({
	                            mutedWords,
	                            text: external.title + ' ' + external.description,
	                            languages: [],
	                            actor: embedAuthor,
	                        })) {
	                            return true;
	                        }
	                    }
	                    // quoted post's images when it did a quote + media
	                    if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
	                        for (const image of embeddedPost.embed.media.images) {
	                            if ((0, mutewords_1.hasMutedWord)({
	                                mutedWords,
	                                text: image.alt,
	                                languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record)
	                                    ? embeddedPost.langs
	                                    : [],
	                                actor: embedAuthor,
	                            })) {
	                                return true;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        // link card
	        else if (client_1.AppBskyEmbedExternal.isView(embed)) {
	            const { external } = embed;
	            if ((0, mutewords_1.hasMutedWord)({
	                mutedWords,
	                text: external.title + ' ' + external.description,
	                languages: [],
	                actor: postAuthor,
	            })) {
	                return true;
	            }
	        }
	        // quote post with media
	        else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) &&
	            client_1.AppBskyEmbedRecord.isViewRecord(embed.record.record)) {
	            const embedAuthor = embed.record.record.author;
	            // quoted post text
	            if (client_1.AppBskyFeedPost.isRecord(embed.record.record.value)) {
	                const post = embed.record.record.value;
	                if ((0, mutewords_1.hasMutedWord)({
	                    mutedWords,
	                    text: post.text,
	                    facets: post.facets,
	                    outlineTags: post.tags,
	                    languages: post.langs,
	                    actor: embedAuthor,
	                })) {
	                    return true;
	                }
	            }
	            // quoted post images
	            if (client_1.AppBskyEmbedImages.isView(embed.media)) {
	                for (const image of embed.media.images) {
	                    if ((0, mutewords_1.hasMutedWord)({
	                        mutedWords,
	                        text: image.alt,
	                        languages: client_1.AppBskyFeedPost.isRecord(subject.record)
	                            ? subject.record.langs
	                            : [],
	                        actor: embedAuthor,
	                    })) {
	                        return true;
	                    }
	                }
	            }
	            if (client_1.AppBskyEmbedExternal.isView(embed.media)) {
	                const { external } = embed.media;
	                if ((0, mutewords_1.hasMutedWord)({
	                    mutedWords,
	                    text: external.title + ' ' + external.description,
	                    languages: [],
	                    actor: embedAuthor,
	                })) {
	                    return true;
	                }
	            }
	        }
	    }
	    return false;
	}
	
	return post$1;
}

var userList = {};

var hasRequiredUserList;

function requireUserList () {
	if (hasRequiredUserList) return userList;
	hasRequiredUserList = 1;
	Object.defineProperty(userList, "__esModule", { value: true });
	userList.decideUserList = decideUserList;
	const syntax_1 = requireDist$5();
	const decision_1 = requireDecision();
	const account_1 = requireAccount();
	const profile_1 = requireProfile();
	function decideUserList(subject, opts) {
	    const acc = new decision_1.ModerationDecision();
	    const creator = 
	    // Note: ListViewBasic should not contain a creator field, but let's support it anyway
	    'creator' in subject && isProfile(subject.creator)
	        ? subject.creator
	        : undefined;
	    if (creator) {
	        acc.setDid(creator.did);
	        acc.setIsMe(creator.did === opts.userDid);
	        if (subject.labels?.length) {
	            for (const label of subject.labels) {
	                acc.addLabel('content', label, opts);
	            }
	        }
	        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
	    }
	    const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
	    acc.setDid(creatorDid);
	    acc.setIsMe(creatorDid === opts.userDid);
	    if (subject.labels?.length) {
	        for (const label of subject.labels) {
	            acc.addLabel('content', label, opts);
	        }
	    }
	    return acc;
	}
	function isProfile(v) {
	    return v && typeof v === 'object' && 'did' in v;
	}
	
	return userList;
}

var util = {};

var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return util;
	hasRequiredUtil = 1;
	Object.defineProperty(util, "__esModule", { value: true });
	util.isQuotedPost = isQuotedPost;
	util.isQuotedPostWithMedia = isQuotedPostWithMedia;
	util.interpretLabelValueDefinition = interpretLabelValueDefinition;
	util.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
	const client_1 = requireClient();
	const util_1 = requireUtil$4();
	function isQuotedPost(embed) {
	    return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
	}
	function isQuotedPostWithMedia(embed) {
	    return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
	}
	function interpretLabelValueDefinition(def, definedBy) {
	    const behaviors = {
	        account: {},
	        profile: {},
	        content: {},
	    };
	    const alertOrInform = def.severity === 'alert'
	        ? 'alert'
	        : def.severity === 'inform'
	            ? 'inform'
	            : undefined;
	    if (def.blurs === 'content') {
	        // target=account, blurs=content
	        behaviors.account.profileList = alertOrInform;
	        behaviors.account.profileView = alertOrInform;
	        behaviors.account.contentList = 'blur';
	        behaviors.account.contentView = def.adultOnly ? 'blur' : alertOrInform;
	        // target=profile, blurs=content
	        behaviors.profile.profileList = alertOrInform;
	        behaviors.profile.profileView = alertOrInform;
	        // target=content, blurs=content
	        behaviors.content.contentList = 'blur';
	        behaviors.content.contentView = def.adultOnly ? 'blur' : alertOrInform;
	    }
	    else if (def.blurs === 'media') {
	        // target=account, blurs=media
	        behaviors.account.profileList = alertOrInform;
	        behaviors.account.profileView = alertOrInform;
	        behaviors.account.avatar = 'blur';
	        behaviors.account.banner = 'blur';
	        // target=profile, blurs=media
	        behaviors.profile.profileList = alertOrInform;
	        behaviors.profile.profileView = alertOrInform;
	        behaviors.profile.avatar = 'blur';
	        behaviors.profile.banner = 'blur';
	        // target=content, blurs=media
	        behaviors.content.contentMedia = 'blur';
	    }
	    else if (def.blurs === 'none') {
	        // target=account, blurs=none
	        behaviors.account.profileList = alertOrInform;
	        behaviors.account.profileView = alertOrInform;
	        behaviors.account.contentList = alertOrInform;
	        behaviors.account.contentView = alertOrInform;
	        // target=profile, blurs=none
	        behaviors.profile.profileList = alertOrInform;
	        behaviors.profile.profileView = alertOrInform;
	        // target=content, blurs=none
	        behaviors.content.contentList = alertOrInform;
	        behaviors.content.contentView = alertOrInform;
	    }
	    let defaultSetting = 'warn';
	    if (def.defaultSetting === 'hide' || def.defaultSetting === 'ignore') {
	        defaultSetting = def.defaultSetting;
	    }
	    const flags = ['no-self'];
	    if (def.adultOnly) {
	        flags.push('adult');
	    }
	    return {
	        ...def,
	        definedBy,
	        configurable: true,
	        defaultSetting,
	        flags,
	        behaviors,
	    };
	}
	function interpretLabelValueDefinitions(labelerView) {
	    return (labelerView.policies?.labelValueDefinitions || [])
	        .filter((0, util_1.asPredicate)(client_1.ComAtprotoLabelDefs.validateLabelValueDefinition))
	        .map((labelValDef) => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
	}
	
	return util;
}

var hasRequiredModeration;

function requireModeration () {
	if (hasRequiredModeration) return moderation;
	hasRequiredModeration = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
		exports.moderateProfile = moderateProfile;
		exports.moderatePost = moderatePost;
		exports.moderateNotification = moderateNotification;
		exports.moderateFeedGenerator = moderateFeedGenerator;
		exports.moderateUserList = moderateUserList;
		const decision_1 = requireDecision();
		const account_1 = requireAccount();
		const feed_generator_1 = requireFeedGenerator();
		const notification_1 = requireNotification();
		const post_1 = requirePost();
		const profile_1 = requireProfile();
		const user_list_1 = requireUserList();
		var ui_1 = requireUi();
		Object.defineProperty(exports, "ModerationUI", { enumerable: true, get: function () { return ui_1.ModerationUI; } });
		var decision_2 = requireDecision();
		Object.defineProperty(exports, "ModerationDecision", { enumerable: true, get: function () { return decision_2.ModerationDecision; } });
		var mutewords_1 = requireMutewords();
		Object.defineProperty(exports, "hasMutedWord", { enumerable: true, get: function () { return mutewords_1.hasMutedWord; } });
		var util_1 = requireUtil();
		Object.defineProperty(exports, "interpretLabelValueDefinition", { enumerable: true, get: function () { return util_1.interpretLabelValueDefinition; } });
		Object.defineProperty(exports, "interpretLabelValueDefinitions", { enumerable: true, get: function () { return util_1.interpretLabelValueDefinitions; } });
		function moderateProfile(subject, opts) {
		    return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
		}
		function moderatePost(subject, opts) {
		    return (0, post_1.decidePost)(subject, opts);
		}
		function moderateNotification(subject, opts) {
		    return (0, notification_1.decideNotification)(subject, opts);
		}
		function moderateFeedGenerator(subject, opts) {
		    return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
		}
		function moderateUserList(subject, opts) {
		    return (0, user_list_1.decideUserList)(subject, opts);
		}
		
	} (moderation));
	return moderation;
}

var mocker = {};

var hasRequiredMocker;

function requireMocker () {
	if (hasRequiredMocker) return mocker;
	hasRequiredMocker = 1;
	Object.defineProperty(mocker, "__esModule", { value: true });
	mocker.mock = void 0;
	const FAKE_CID = 'bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq';
	mocker.mock = {
	    post({ text, facets, reply, embed, }) {
	        return {
	            $type: 'app.bsky.feed.post',
	            text,
	            facets,
	            reply,
	            embed,
	            langs: ['en'],
	            createdAt: new Date().toISOString(),
	        };
	    },
	    postView({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels, }) {
	        return {
	            $type: 'app.bsky.feed.defs#postView',
	            uri: `at://${author.did}/app.bsky.feed.post/fake`,
	            cid: FAKE_CID,
	            author,
	            record,
	            embed,
	            replyCount,
	            repostCount,
	            likeCount,
	            indexedAt: new Date().toISOString(),
	            viewer,
	            labels,
	        };
	    },
	    embedRecordView({ record, author, labels, }) {
	        return {
	            $type: 'app.bsky.embed.record#view',
	            record: {
	                $type: 'app.bsky.embed.record#viewRecord',
	                uri: `at://${author.did}/app.bsky.feed.post/fake`,
	                cid: FAKE_CID,
	                author,
	                value: record,
	                labels,
	                indexedAt: new Date().toISOString(),
	            },
	        };
	    },
	    profileViewBasic({ handle, displayName, description, viewer, labels, }) {
	        return {
	            did: `did:web:${handle}`,
	            handle,
	            displayName,
	            // @ts-expect-error technically not in ProfileViewBasic but useful in some cases
	            description,
	            viewer,
	            labels,
	        };
	    },
	    actorViewerState({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy, }) {
	        return {
	            muted,
	            mutedByList,
	            blockedBy,
	            blocking,
	            blockingByList,
	            following,
	            followedBy,
	        };
	    },
	    listViewBasic({ name }) {
	        return {
	            uri: 'at://did:plc:fake/app.bsky.graph.list/fake',
	            cid: FAKE_CID,
	            name,
	            purpose: 'app.bsky.graph.defs#modlist',
	            indexedAt: new Date().toISOString(),
	        };
	    },
	    replyNotification({ author, record, labels, }) {
	        return {
	            uri: `at://${author.did}/app.bsky.feed.post/fake`,
	            cid: FAKE_CID,
	            author,
	            reason: 'reply',
	            reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
	            record,
	            isRead: false,
	            indexedAt: new Date().toISOString(),
	            labels,
	        };
	    },
	    followNotification({ author, subjectDid, labels, }) {
	        return {
	            uri: `at://${author.did}/app.bsky.graph.follow/fake`,
	            cid: FAKE_CID,
	            author,
	            reason: 'follow',
	            record: {
	                $type: 'app.bsky.graph.follow',
	                createdAt: new Date().toISOString(),
	                subject: subjectDid,
	            },
	            isRead: false,
	            indexedAt: new Date().toISOString(),
	            labels,
	        };
	    },
	    label({ val, uri, src, }) {
	        return {
	            src: src || 'did:plc:fake-labeler',
	            uri,
	            val,
	            cts: new Date().toISOString(),
	        };
	    },
	};
	
	return mocker;
}

var agent = {};

var AwaitLock = {};

var hasRequiredAwaitLock;

function requireAwaitLock () {
	if (hasRequiredAwaitLock) return AwaitLock;
	hasRequiredAwaitLock = 1;
	var __classPrivateFieldGet = (AwaitLock && AwaitLock.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var __classPrivateFieldSet = (AwaitLock && AwaitLock.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var _AwaitLock_acquired, _AwaitLock_waitingResolvers;
	Object.defineProperty(AwaitLock, "__esModule", { value: true });
	/**
	 * A mutex lock for coordination across async functions
	 */
	let AwaitLock$1 = class AwaitLock {
	    constructor() {
	        _AwaitLock_acquired.set(this, false);
	        _AwaitLock_waitingResolvers.set(this, new Set());
	    }
	    /**
	     * Whether the lock is currently acquired or not. Accessing this property does not affect the
	     * status of the lock.
	     */
	    get acquired() {
	        return __classPrivateFieldGet(this, _AwaitLock_acquired, "f");
	    }
	    /**
	     * Acquires the lock, waiting if necessary for it to become free if it is already locked. The
	     * returned promise is fulfilled once the lock is acquired.
	     *
	     * A timeout (in milliseconds) may be optionally provided. If the lock cannot be acquired before
	     * the timeout elapses, the returned promise is rejected with an error. The behavior of invalid
	     * timeout values depends on how `setTimeout` handles those values.
	     *
	     * After acquiring the lock, you **must** call `release` when you are done with it.
	     */
	    acquireAsync({ timeout } = {}) {
	        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
	            __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
	            return Promise.resolve();
	        }
	        if (timeout == null) {
	            return new Promise((resolve) => {
	                __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolve);
	            });
	        }
	        let resolver;
	        let timer;
	        return Promise.race([
	            new Promise((resolve) => {
	                resolver = () => {
	                    clearTimeout(timer);
	                    resolve();
	                };
	                __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolver);
	            }),
	            new Promise((_, reject) => {
	                timer = setTimeout(() => {
	                    __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolver);
	                    reject(new Error(`Timed out waiting for lock`));
	                }, timeout);
	            }),
	        ]);
	    }
	    /**
	     * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns
	     * `true` if the lock was free and is now acquired, and `false` otherwise.
	     *
	     * This method differs from calling `acquireAsync` with a zero-millisecond timeout in that it runs
	     * synchronously without waiting for the JavaScript task queue.
	     */
	    tryAcquire() {
	        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
	            __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
	            return true;
	        }
	        return false;
	    }
	    /**
	     * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer
	     * must release the lock exactly once.
	     */
	    release() {
	        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
	            throw new Error(`Cannot release an unacquired lock`);
	        }
	        if (__classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").size > 0) {
	            // Sets preserve insertion order like a queue
	            const [resolve] = __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f");
	            __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolve);
	            resolve();
	        }
	        else {
	            __classPrivateFieldSet(this, _AwaitLock_acquired, false, "f");
	        }
	    }
	};
	AwaitLock.default = AwaitLock$1;
	_AwaitLock_acquired = new WeakMap(), _AwaitLock_waitingResolvers = new WeakMap();
	
	return AwaitLock;
}

var predicate = {};

var hasRequiredPredicate;

function requirePredicate () {
	if (hasRequiredPredicate) return predicate;
	hasRequiredPredicate = 1;
	Object.defineProperty(predicate, "__esModule", { value: true });
	predicate.isValidVerificationPrefs = predicate.isValidThreadViewPref = predicate.isValidSavedFeedsPrefV2 = predicate.isValidSavedFeedsPref = predicate.isValidPostInteractionSettingsPref = predicate.isValidPersonalDetailsPref = predicate.isValidMutedWordsPref = predicate.isValidLabelersPref = predicate.isValidInterestsPref = predicate.isValidHiddenPostsPref = predicate.isValidFeedViewPref = predicate.isValidContentLabelPref = predicate.isValidBskyAppStatePref = predicate.isValidAdultContentPref = predicate.isValidProfile = void 0;
	const index_1 = requireClient();
	const util_1 = requireUtil$4();
	predicate.isValidProfile = (0, util_1.asPredicate)(index_1.AppBskyActorProfile.validateRecord);
	predicate.isValidAdultContentPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateAdultContentPref);
	predicate.isValidBskyAppStatePref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateBskyAppStatePref);
	predicate.isValidContentLabelPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateContentLabelPref);
	predicate.isValidFeedViewPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateFeedViewPref);
	predicate.isValidHiddenPostsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateHiddenPostsPref);
	predicate.isValidInterestsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateInterestsPref);
	predicate.isValidLabelersPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateLabelersPref);
	predicate.isValidMutedWordsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateMutedWordsPref);
	predicate.isValidPersonalDetailsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validatePersonalDetailsPref);
	predicate.isValidPostInteractionSettingsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validatePostInteractionSettingsPref);
	predicate.isValidSavedFeedsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateSavedFeedsPref);
	predicate.isValidSavedFeedsPrefV2 = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateSavedFeedsPrefV2);
	predicate.isValidThreadViewPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateThreadViewPref);
	predicate.isValidVerificationPrefs = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateVerificationPrefs);
	
	return predicate;
}

var hasRequiredAgent;

function requireAgent () {
	if (hasRequiredAgent) return agent;
	hasRequiredAgent = 1;
	var __createBinding = (agent && agent.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (agent && agent.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (agent && agent.__importStar) || (function () {
	    var ownKeys = function(o) {
	        ownKeys = Object.getOwnPropertyNames || function (o) {
	            var ar = [];
	            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
	            return ar;
	        };
	        return ownKeys(o);
	    };
	    return function (mod) {
	        if (mod && mod.__esModule) return mod;
	        var result = {};
	        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
	        __setModuleDefault(result, mod);
	        return result;
	    };
	})();
	var __classPrivateFieldGet = (agent && agent.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var __importDefault = (agent && agent.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var _Agent_prefsLock;
	Object.defineProperty(agent, "__esModule", { value: true });
	agent.Agent = void 0;
	const await_lock_1 = __importDefault(requireAwaitLock());
	const common_web_1 = requireDist$4();
	const syntax_1 = requireDist$5();
	const xrpc_1 = requireDist$1();
	const index_1 = requireClient();
	const lexicons_1 = requireLexicons();
	const const_1 = require_const();
	const moderation_1 = requireModeration();
	const labels_1 = requireLabels();
	const predicate = __importStar(requirePredicate());
	const util_1 = requireUtil$3();
	const FEED_VIEW_PREF_DEFAULTS = {
	    hideReplies: false,
	    hideRepliesByUnfollowed: true,
	    hideRepliesByLikeCount: 0,
	    hideReposts: false,
	    hideQuotePosts: false,
	};
	const THREAD_VIEW_PREF_DEFAULTS = {
	    sort: 'hotness',
	    prioritizeFollowedUsers: true,
	};
	/**
	 * An {@link Agent} is an {@link AtpBaseClient} with the following
	 * additional features:
	 * - AT Protocol labelers configuration utilities
	 * - AT Protocol proxy configuration utilities
	 * - Cloning utilities
	 * - `app.bsky` syntactic sugar
	 * - `com.atproto` syntactic sugar
	 */
	class Agent extends xrpc_1.XrpcClient {
	    /**
	     * Configures the Agent (or its sub classes) globally.
	     */
	    static configure(opts) {
	        if (opts.appLabelers) {
	            this.appLabelers = opts.appLabelers.map(util_1.asDid); // Validate & copy
	        }
	    }
	    /** @deprecated use `this` instead */
	    get xrpc() {
	        return this;
	    }
	    constructor(options) {
	        const sessionManager = typeof options === 'object' && 'fetchHandler' in options
	            ? options
	            : {
	                did: undefined,
	                fetchHandler: (0, xrpc_1.buildFetchHandler)(options),
	            };
	        super((url, init) => {
	            const headers = new Headers(init?.headers);
	            if (this.proxy && !headers.has('atproto-proxy')) {
	                headers.set('atproto-proxy', this.proxy);
	            }
	            // Merge the labelers header of this particular request with the app &
	            // instance labelers.
	            headers.set('atproto-accept-labelers', [
	                ...this.appLabelers.map((l) => `${l};redact`),
	                ...this.labelers,
	                headers.get('atproto-accept-labelers')?.trim(),
	            ]
	                .filter(Boolean)
	                .join(', '));
	            return this.sessionManager.fetchHandler(url, { ...init, headers });
	        }, lexicons_1.schemas);
	        //#endregion
	        Object.defineProperty(this, "com", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new index_1.ComNS(this)
	        });
	        Object.defineProperty(this, "app", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new index_1.AppNS(this)
	        });
	        Object.defineProperty(this, "chat", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new index_1.ChatNS(this)
	        });
	        Object.defineProperty(this, "tools", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new index_1.ToolsNS(this)
	        });
	        Object.defineProperty(this, "sessionManager", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "labelers", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: []
	        });
	        //#endregion
	        //#region ATPROTO proxy configuration utilities
	        Object.defineProperty(this, "proxy", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        //#region "com.atproto" lexicon short hand methods
	        /**
	         * Upload a binary blob to the server
	         */
	        Object.defineProperty(this, "uploadBlob", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (data, opts) => this.com.atproto.repo.uploadBlob(data, opts)
	        });
	        /**
	         * Resolve a handle to a DID
	         */
	        Object.defineProperty(this, "resolveHandle", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.com.atproto.identity.resolveHandle(params, opts)
	        });
	        /**
	         * Change the user's handle
	         */
	        Object.defineProperty(this, "updateHandle", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (data, opts) => this.com.atproto.identity.updateHandle(data, opts)
	        });
	        /**
	         * Create a moderation report
	         */
	        Object.defineProperty(this, "createModerationReport", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (data, opts) => this.com.atproto.moderation.createReport(data, opts)
	        });
	        //#endregion
	        //#region "app.bsky" lexicon short hand methods
	        Object.defineProperty(this, "getTimeline", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getTimeline(params, opts)
	        });
	        Object.defineProperty(this, "getAuthorFeed", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getAuthorFeed(params, opts)
	        });
	        Object.defineProperty(this, "getActorLikes", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getActorLikes(params, opts)
	        });
	        Object.defineProperty(this, "getPostThread", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getPostThread(params, opts)
	        });
	        Object.defineProperty(this, "getPost", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params) => this.app.bsky.feed.post.get(params)
	        });
	        Object.defineProperty(this, "getPosts", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getPosts(params, opts)
	        });
	        Object.defineProperty(this, "getLikes", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getLikes(params, opts)
	        });
	        Object.defineProperty(this, "getRepostedBy", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.feed.getRepostedBy(params, opts)
	        });
	        Object.defineProperty(this, "getFollows", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.graph.getFollows(params, opts)
	        });
	        Object.defineProperty(this, "getFollowers", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.graph.getFollowers(params, opts)
	        });
	        Object.defineProperty(this, "getProfile", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.actor.getProfile(params, opts)
	        });
	        Object.defineProperty(this, "getProfiles", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.actor.getProfiles(params, opts)
	        });
	        Object.defineProperty(this, "getSuggestions", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.actor.getSuggestions(params, opts)
	        });
	        Object.defineProperty(this, "searchActors", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.actor.searchActors(params, opts)
	        });
	        Object.defineProperty(this, "searchActorsTypeahead", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.actor.searchActorsTypeahead(params, opts)
	        });
	        Object.defineProperty(this, "listNotifications", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.notification.listNotifications(params, opts)
	        });
	        Object.defineProperty(this, "countUnreadNotifications", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.notification.getUnreadCount(params, opts)
	        });
	        Object.defineProperty(this, "getLabelers", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: (params, opts) => this.app.bsky.labeler.getServices(params, opts)
	        });
	        //- Private methods
	        _Agent_prefsLock.set(this, new await_lock_1.default()
	        /**
	         * This function updates the preferences of a user and allows for a callback function to be executed
	         * before the update.
	         * @param cb - cb is a callback function that takes in a single parameter of type
	         * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
	         * update the preferences of the user. The function is called with the current preferences as an
	         * argument and if the callback returns false, the preferences are not updated.
	         */
	        );
	        this.sessionManager = sessionManager;
	    }
	    //#region Cloning utilities
	    clone() {
	        return this.copyInto(new Agent(this.sessionManager));
	    }
	    copyInto(inst) {
	        inst.configureLabelers(this.labelers);
	        inst.configureProxy(this.proxy ?? null);
	        inst.clearHeaders();
	        for (const [key, value] of this.headers)
	            inst.setHeader(key, value);
	        return inst;
	    }
	    withProxy(serviceType, did) {
	        const inst = this.clone();
	        inst.configureProxy(`${(0, util_1.asDid)(did)}#${serviceType}`);
	        return inst;
	    }
	    //#endregion
	    //#region ATPROTO labelers configuration utilities
	    /**
	     * The labelers statically configured on the class of the current instance.
	     */
	    get appLabelers() {
	        return this.constructor.appLabelers;
	    }
	    configureLabelers(labelerDids) {
	        this.labelers = labelerDids.map(util_1.asDid); // Validate & copy
	    }
	    /** @deprecated use {@link configureLabelers} instead */
	    configureLabelersHeader(labelerDids) {
	        // Filtering non-did values for backwards compatibility
	        this.configureLabelers(labelerDids.filter(util_1.isDid));
	    }
	    configureProxy(value) {
	        if (value === null)
	            this.proxy = undefined;
	        else if ((0, util_1.isDid)(value))
	            this.proxy = value;
	        else
	            throw new TypeError('Invalid proxy DID');
	    }
	    /** @deprecated use {@link configureProxy} instead */
	    configureProxyHeader(serviceType, did) {
	        // Ignoring non-did values for backwards compatibility
	        if ((0, util_1.isDid)(did))
	            this.configureProxy(`${did}#${serviceType}`);
	    }
	    //#endregion
	    //#region Session management
	    /**
	     * Get the authenticated user's DID, if any.
	     */
	    get did() {
	        return this.sessionManager.did;
	    }
	    /** @deprecated Use {@link Agent.assertDid} instead */
	    get accountDid() {
	        return this.assertDid;
	    }
	    /**
	     * Get the authenticated user's DID, or throw an error if not authenticated.
	     */
	    get assertDid() {
	        this.assertAuthenticated();
	        return this.did;
	    }
	    /**
	     * Assert that the user is authenticated.
	     */
	    assertAuthenticated() {
	        if (!this.did)
	            throw new Error('Not logged in');
	    }
	    //#endregion
	    /** @deprecated use "this" instead */
	    get api() {
	        return this;
	    }
	    async getLabelDefinitions(prefs) {
	        // collect the labeler dids
	        const dids = [...this.appLabelers];
	        if (isBskyPrefs(prefs)) {
	            dids.push(...prefs.moderationPrefs.labelers.map((l) => l.did));
	        }
	        else if (isModPrefs(prefs)) {
	            dids.push(...prefs.labelers.map((l) => l.did));
	        }
	        else {
	            dids.push(...prefs);
	        }
	        // fetch their definitions
	        const labelers = await this.getLabelers({
	            dids,
	            detailed: true,
	        });
	        // assemble a map of labeler dids to the interpreted label value definitions
	        const labelDefs = {};
	        if (labelers.data) {
	            for (const labeler of labelers.data
	                .views) {
	                labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
	            }
	        }
	        return labelDefs;
	    }
	    async post(record) {
	        record.createdAt || (record.createdAt = new Date().toISOString());
	        return this.app.bsky.feed.post.create({ repo: this.accountDid }, record);
	    }
	    async deletePost(postUri) {
	        this.assertAuthenticated();
	        const postUrip = new syntax_1.AtUri(postUri);
	        return this.app.bsky.feed.post.delete({
	            repo: postUrip.hostname,
	            rkey: postUrip.rkey,
	        });
	    }
	    async like(uri, cid) {
	        return this.app.bsky.feed.like.create({ repo: this.accountDid }, {
	            subject: { uri, cid },
	            createdAt: new Date().toISOString(),
	        });
	    }
	    async deleteLike(likeUri) {
	        this.assertAuthenticated();
	        const likeUrip = new syntax_1.AtUri(likeUri);
	        return this.app.bsky.feed.like.delete({
	            repo: likeUrip.hostname,
	            rkey: likeUrip.rkey,
	        });
	    }
	    async repost(uri, cid) {
	        return this.app.bsky.feed.repost.create({ repo: this.accountDid }, {
	            subject: { uri, cid },
	            createdAt: new Date().toISOString(),
	        });
	    }
	    async deleteRepost(repostUri) {
	        this.assertAuthenticated();
	        const repostUrip = new syntax_1.AtUri(repostUri);
	        return this.app.bsky.feed.repost.delete({
	            repo: repostUrip.hostname,
	            rkey: repostUrip.rkey,
	        });
	    }
	    async follow(subjectDid) {
	        return this.app.bsky.graph.follow.create({ repo: this.accountDid }, {
	            subject: subjectDid,
	            createdAt: new Date().toISOString(),
	        });
	    }
	    async deleteFollow(followUri) {
	        this.assertAuthenticated();
	        const followUrip = new syntax_1.AtUri(followUri);
	        return this.app.bsky.graph.follow.delete({
	            repo: followUrip.hostname,
	            rkey: followUrip.rkey,
	        });
	    }
	    /**
	     * @note: Using this method will reset the whole profile record if it
	     * previously contained invalid values (wrt to the profile lexicon).
	     */
	    async upsertProfile(updateFn) {
	        const upsert = async () => {
	            const repo = this.assertDid;
	            const collection = 'app.bsky.actor.profile';
	            const existing = await this.com.atproto.repo
	                .getRecord({ repo, collection, rkey: 'self' })
	                .catch((_) => undefined);
	            const existingRecord = existing && predicate.isValidProfile(existing.data.value)
	                ? existing.data.value
	                : undefined;
	            // run the update
	            const updated = await updateFn(existingRecord);
	            // validate the value returned by the update function
	            const validation = index_1.AppBskyActorProfile.validateRecord({
	                $type: collection,
	                ...updated,
	            });
	            if (!validation.success) {
	                throw validation.error;
	            }
	            await this.com.atproto.repo.putRecord({
	                repo,
	                collection,
	                rkey: 'self',
	                record: validation.value,
	                swapRecord: existing?.data.cid || null,
	            });
	        };
	        return (0, common_web_1.retry)(upsert, {
	            maxRetries: 5,
	            retryable: (e) => e instanceof index_1.ComAtprotoRepoPutRecord.InvalidSwapError,
	        });
	    }
	    async mute(actor) {
	        return this.app.bsky.graph.muteActor({ actor });
	    }
	    async unmute(actor) {
	        return this.app.bsky.graph.unmuteActor({ actor });
	    }
	    async muteModList(uri) {
	        return this.app.bsky.graph.muteActorList({ list: uri });
	    }
	    async unmuteModList(uri) {
	        return this.app.bsky.graph.unmuteActorList({ list: uri });
	    }
	    async blockModList(uri) {
	        return this.app.bsky.graph.listblock.create({ repo: this.accountDid }, {
	            subject: uri,
	            createdAt: new Date().toISOString(),
	        });
	    }
	    async unblockModList(uri) {
	        const repo = this.accountDid;
	        const listInfo = await this.app.bsky.graph.getList({
	            list: uri,
	            limit: 1,
	        });
	        const blocked = listInfo.data.list.viewer?.blocked;
	        if (blocked) {
	            const { rkey } = new syntax_1.AtUri(blocked);
	            return this.app.bsky.graph.listblock.delete({
	                repo,
	                rkey,
	            });
	        }
	    }
	    async updateSeenNotifications(seenAt = new Date().toISOString()) {
	        return this.app.bsky.notification.updateSeen({ seenAt });
	    }
	    async getPreferences() {
	        const prefs = {
	            feeds: {
	                saved: undefined,
	                pinned: undefined,
	            },
	            // @ts-ignore populating below
	            savedFeeds: undefined,
	            feedViewPrefs: {
	                home: {
	                    ...FEED_VIEW_PREF_DEFAULTS,
	                },
	            },
	            threadViewPrefs: { ...THREAD_VIEW_PREF_DEFAULTS },
	            moderationPrefs: {
	                adultContentEnabled: false,
	                labels: { ...labels_1.DEFAULT_LABEL_SETTINGS },
	                labelers: this.appLabelers.map((did) => ({
	                    did,
	                    labels: {},
	                })),
	                mutedWords: [],
	                hiddenPosts: [],
	            },
	            birthDate: undefined,
	            interests: {
	                tags: [],
	            },
	            bskyAppState: {
	                queuedNudges: [],
	                activeProgressGuide: undefined,
	                nuxs: [],
	            },
	            postInteractionSettings: {
	                threadgateAllowRules: undefined,
	                postgateEmbeddingRules: undefined,
	            },
	            verificationPrefs: {
	                hideBadges: false,
	            },
	        };
	        const res = await this.app.bsky.actor.getPreferences({});
	        const labelPrefs = [];
	        for (const pref of res.data.preferences) {
	            if (predicate.isValidAdultContentPref(pref)) {
	                // adult content preferences
	                prefs.moderationPrefs.adultContentEnabled = pref.enabled;
	            }
	            else if (predicate.isValidContentLabelPref(pref)) {
	                // content label preference
	                const adjustedPref = adjustLegacyContentLabelPref(pref);
	                labelPrefs.push(adjustedPref);
	            }
	            else if (predicate.isValidLabelersPref(pref)) {
	                // labelers preferences
	                prefs.moderationPrefs.labelers = this.appLabelers
	                    .map((did) => ({ did, labels: {} }))
	                    .concat(pref.labelers.map((labeler) => ({
	                    ...labeler,
	                    labels: {},
	                })));
	            }
	            else if (predicate.isValidSavedFeedsPrefV2(pref)) {
	                prefs.savedFeeds = pref.items;
	            }
	            else if (predicate.isValidSavedFeedsPref(pref)) {
	                // saved and pinned feeds
	                prefs.feeds.saved = pref.saved;
	                prefs.feeds.pinned = pref.pinned;
	            }
	            else if (predicate.isValidPersonalDetailsPref(pref)) {
	                // birth date (irl)
	                if (pref.birthDate) {
	                    prefs.birthDate = new Date(pref.birthDate);
	                }
	            }
	            else if (predicate.isValidFeedViewPref(pref)) {
	                // feed view preferences
	                const { $type: _, feed, ...v } = pref;
	                prefs.feedViewPrefs[feed] = { ...FEED_VIEW_PREF_DEFAULTS, ...v };
	            }
	            else if (predicate.isValidThreadViewPref(pref)) {
	                // thread view preferences
	                const { $type: _, ...v } = pref;
	                prefs.threadViewPrefs = { ...prefs.threadViewPrefs, ...v };
	            }
	            else if (predicate.isValidInterestsPref(pref)) {
	                const { $type: _, ...v } = pref;
	                prefs.interests = { ...prefs.interests, ...v };
	            }
	            else if (predicate.isValidMutedWordsPref(pref)) {
	                prefs.moderationPrefs.mutedWords = pref.items;
	                if (prefs.moderationPrefs.mutedWords.length) {
	                    prefs.moderationPrefs.mutedWords =
	                        prefs.moderationPrefs.mutedWords.map((word) => {
	                            word.actorTarget = word.actorTarget || 'all';
	                            return word;
	                        });
	                }
	            }
	            else if (predicate.isValidHiddenPostsPref(pref)) {
	                prefs.moderationPrefs.hiddenPosts = pref.items;
	            }
	            else if (predicate.isValidBskyAppStatePref(pref)) {
	                prefs.bskyAppState.queuedNudges = pref.queuedNudges || [];
	                prefs.bskyAppState.activeProgressGuide = pref.activeProgressGuide;
	                prefs.bskyAppState.nuxs = pref.nuxs || [];
	            }
	            else if (predicate.isValidPostInteractionSettingsPref(pref)) {
	                prefs.postInteractionSettings.threadgateAllowRules =
	                    pref.threadgateAllowRules;
	                prefs.postInteractionSettings.postgateEmbeddingRules =
	                    pref.postgateEmbeddingRules;
	            }
	            else if (predicate.isValidVerificationPrefs(pref)) {
	                prefs.verificationPrefs = {
	                    hideBadges: pref.hideBadges,
	                };
	            }
	        }
	        /*
	         * If `prefs.savedFeeds` is undefined, no `savedFeedsPrefV2` exists, which
	         * means we want to try to migrate if needed.
	         *
	         * If v1 prefs exist, they will be migrated to v2.
	         *
	         * If no v1 prefs exist, the user is either new, or could be old and has
	         * never edited their feeds.
	         */
	        if (prefs.savedFeeds == null) {
	            const { saved, pinned } = prefs.feeds;
	            if (saved && pinned) {
	                const uniqueMigratedSavedFeeds = new Map();
	                // insert Following feed first
	                uniqueMigratedSavedFeeds.set('timeline', {
	                    id: common_web_1.TID.nextStr(),
	                    type: 'timeline',
	                    value: 'following',
	                    pinned: true,
	                });
	                // use pinned as source of truth for feed order
	                for (const uri of pinned) {
	                    const type = (0, util_1.getSavedFeedType)(uri);
	                    // only want supported types
	                    if (type === 'unknown')
	                        continue;
	                    uniqueMigratedSavedFeeds.set(uri, {
	                        id: common_web_1.TID.nextStr(),
	                        type,
	                        value: uri,
	                        pinned: true,
	                    });
	                }
	                for (const uri of saved) {
	                    if (!uniqueMigratedSavedFeeds.has(uri)) {
	                        const type = (0, util_1.getSavedFeedType)(uri);
	                        // only want supported types
	                        if (type === 'unknown')
	                            continue;
	                        uniqueMigratedSavedFeeds.set(uri, {
	                            id: common_web_1.TID.nextStr(),
	                            type,
	                            value: uri,
	                            pinned: false,
	                        });
	                    }
	                }
	                prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
	            }
	            else {
	                prefs.savedFeeds = [
	                    {
	                        id: common_web_1.TID.nextStr(),
	                        type: 'timeline',
	                        value: 'following',
	                        pinned: true,
	                    },
	                ];
	            }
	            // save to user preferences so this migration doesn't re-occur
	            await this.overwriteSavedFeeds(prefs.savedFeeds);
	        }
	        // apply the label prefs
	        for (const pref of labelPrefs) {
	            if (pref.labelerDid) {
	                const labeler = prefs.moderationPrefs.labelers.find((labeler) => labeler.did === pref.labelerDid);
	                if (!labeler)
	                    continue;
	                labeler.labels[pref.label] = pref.visibility;
	            }
	            else {
	                prefs.moderationPrefs.labels[pref.label] =
	                    pref.visibility;
	            }
	        }
	        prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
	        // automatically configure the client
	        this.configureLabelers(prefsArrayToLabelerDids(res.data.preferences));
	        return prefs;
	    }
	    async overwriteSavedFeeds(savedFeeds) {
	        savedFeeds.forEach(util_1.validateSavedFeed);
	        const uniqueSavedFeeds = new Map();
	        savedFeeds.forEach((feed) => {
	            // remove and re-insert to preserve order
	            if (uniqueSavedFeeds.has(feed.id)) {
	                uniqueSavedFeeds.delete(feed.id);
	            }
	            uniqueSavedFeeds.set(feed.id, feed);
	        });
	        return this.updateSavedFeedsV2Preferences(() => Array.from(uniqueSavedFeeds.values()));
	    }
	    async updateSavedFeeds(savedFeedsToUpdate) {
	        savedFeedsToUpdate.map(util_1.validateSavedFeed);
	        return this.updateSavedFeedsV2Preferences((savedFeeds) => {
	            return savedFeeds.map((savedFeed) => {
	                const updatedVersion = savedFeedsToUpdate.find((updated) => savedFeed.id === updated.id);
	                if (updatedVersion) {
	                    return {
	                        ...savedFeed,
	                        // only update pinned
	                        pinned: updatedVersion.pinned,
	                    };
	                }
	                return savedFeed;
	            });
	        });
	    }
	    async addSavedFeeds(savedFeeds) {
	        const toSave = savedFeeds.map((f) => ({
	            ...f,
	            id: common_web_1.TID.nextStr(),
	        }));
	        toSave.forEach(util_1.validateSavedFeed);
	        return this.updateSavedFeedsV2Preferences((savedFeeds) => [
	            ...savedFeeds,
	            ...toSave,
	        ]);
	    }
	    async removeSavedFeeds(ids) {
	        return this.updateSavedFeedsV2Preferences((savedFeeds) => [
	            ...savedFeeds.filter((feed) => !ids.find((id) => feed.id === id)),
	        ]);
	    }
	    /**
	     * @deprecated use `overwriteSavedFeeds`
	     */
	    async setSavedFeeds(saved, pinned) {
	        return this.updateFeedPreferences(() => ({
	            saved,
	            pinned,
	        }));
	    }
	    /**
	     * @deprecated use `addSavedFeeds`
	     */
	    async addSavedFeed(v) {
	        return this.updateFeedPreferences((saved, pinned) => ({
	            saved: [...saved.filter((uri) => uri !== v), v],
	            pinned,
	        }));
	    }
	    /**
	     * @deprecated use `removeSavedFeeds`
	     */
	    async removeSavedFeed(v) {
	        return this.updateFeedPreferences((saved, pinned) => ({
	            saved: saved.filter((uri) => uri !== v),
	            pinned: pinned.filter((uri) => uri !== v),
	        }));
	    }
	    /**
	     * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
	     */
	    async addPinnedFeed(v) {
	        return this.updateFeedPreferences((saved, pinned) => ({
	            saved: [...saved.filter((uri) => uri !== v), v],
	            pinned: [...pinned.filter((uri) => uri !== v), v],
	        }));
	    }
	    /**
	     * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
	     */
	    async removePinnedFeed(v) {
	        return this.updateFeedPreferences((saved, pinned) => ({
	            saved,
	            pinned: pinned.filter((uri) => uri !== v),
	        }));
	    }
	    async setAdultContentEnabled(v) {
	        await this.updatePreferences((prefs) => {
	            const adultContentPref = prefs.findLast(predicate.isValidAdultContentPref) || {
	                $type: 'app.bsky.actor.defs#adultContentPref',
	                enabled: v,
	            };
	            adultContentPref.enabled = v;
	            return prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isAdultContentPref(pref))
	                .concat(adultContentPref);
	        });
	    }
	    async setContentLabelPref(key, value, labelerDid) {
	        if (labelerDid) {
	            (0, syntax_1.ensureValidDid)(labelerDid);
	        }
	        await this.updatePreferences((prefs) => {
	            const labelPref = prefs
	                .filter(predicate.isValidContentLabelPref)
	                .findLast((pref) => pref.label === key && pref.labelerDid === labelerDid) || {
	                $type: 'app.bsky.actor.defs#contentLabelPref',
	                label: key,
	                labelerDid,
	                visibility: value,
	            };
	            labelPref.visibility = value;
	            let legacyLabelPref;
	            if (index_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
	                // is global
	                if (!labelPref.labelerDid) {
	                    const legacyLabelValue = {
	                        'graphic-media': 'gore',
	                        porn: 'nsfw',
	                        sexual: 'suggestive',
	                        // Protect against using toString, hasOwnProperty, etc. as a label:
	                        __proto__: null,
	                    }[labelPref.label];
	                    // if it's a legacy label, double-write the legacy label
	                    if (legacyLabelValue) {
	                        legacyLabelPref = prefs
	                            .filter(predicate.isValidContentLabelPref)
	                            .findLast((pref) => pref.label === legacyLabelValue &&
	                            pref.labelerDid === undefined) || {
	                            $type: 'app.bsky.actor.defs#contentLabelPref',
	                            label: legacyLabelValue,
	                            labelerDid: undefined,
	                            visibility: value,
	                        };
	                        legacyLabelPref.visibility = value;
	                    }
	                }
	            }
	            return prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isContentLabelPref(pref) ||
	                !(pref.label === key && pref.labelerDid === labelerDid))
	                .concat(labelPref)
	                .filter((pref) => {
	                if (!legacyLabelPref)
	                    return true;
	                return (!index_1.AppBskyActorDefs.isContentLabelPref(pref) ||
	                    !(pref.label === legacyLabelPref.label &&
	                        pref.labelerDid === undefined));
	            })
	                .concat(legacyLabelPref ? [legacyLabelPref] : []);
	        });
	    }
	    async addLabeler(did) {
	        const prefs = await this.updatePreferences((prefs) => {
	            const labelersPref = prefs.findLast(predicate.isValidLabelersPref) || {
	                $type: 'app.bsky.actor.defs#labelersPref',
	                labelers: [],
	            };
	            if (!labelersPref.labelers.some((labeler) => labeler.did === did)) {
	                labelersPref.labelers.push({ did });
	            }
	            return prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isLabelersPref(pref))
	                .concat(labelersPref);
	        });
	        // automatically configure the client
	        this.configureLabelers(prefsArrayToLabelerDids(prefs));
	    }
	    async removeLabeler(did) {
	        const prefs = await this.updatePreferences((prefs) => {
	            const labelersPref = prefs.findLast(predicate.isValidLabelersPref) || {
	                $type: 'app.bsky.actor.defs#labelersPref',
	                labelers: [],
	            };
	            labelersPref.labelers = labelersPref.labelers.filter((l) => l.did !== did);
	            return prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isLabelersPref(pref))
	                .concat(labelersPref);
	        });
	        // automatically configure the client
	        this.configureLabelers(prefsArrayToLabelerDids(prefs));
	    }
	    async setPersonalDetails({ birthDate, }) {
	        await this.updatePreferences((prefs) => {
	            const personalDetailsPref = prefs.findLast(predicate.isValidPersonalDetailsPref) || {
	                $type: 'app.bsky.actor.defs#personalDetailsPref',
	            };
	            personalDetailsPref.birthDate =
	                birthDate instanceof Date ? birthDate.toISOString() : birthDate;
	            return prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isPersonalDetailsPref(pref))
	                .concat(personalDetailsPref);
	        });
	    }
	    async setFeedViewPrefs(feed, pref) {
	        await this.updatePreferences((prefs) => {
	            const existing = prefs
	                .filter(predicate.isValidFeedViewPref)
	                .findLast((pref) => pref.feed === feed);
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isFeedViewPref(p) || p.feed !== feed)
	                .concat({
	                ...existing,
	                ...pref,
	                $type: 'app.bsky.actor.defs#feedViewPref',
	                feed,
	            });
	        });
	    }
	    async setThreadViewPrefs(pref) {
	        await this.updatePreferences((prefs) => {
	            const existing = prefs.findLast(predicate.isValidThreadViewPref);
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isThreadViewPref(p))
	                .concat({
	                ...existing,
	                ...pref,
	                $type: 'app.bsky.actor.defs#threadViewPref',
	            });
	        });
	    }
	    async setInterestsPref(pref) {
	        await this.updatePreferences((prefs) => {
	            const existing = prefs.findLast(predicate.isValidInterestsPref);
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isInterestsPref(p))
	                .concat({
	                ...existing,
	                ...pref,
	                $type: 'app.bsky.actor.defs#interestsPref',
	            });
	        });
	    }
	    /**
	     * Add a muted word to user preferences.
	     */
	    async addMutedWord(mutedWord) {
	        const sanitizedValue = (0, util_1.sanitizeMutedWordValue)(mutedWord.value);
	        if (!sanitizedValue)
	            return;
	        await this.updatePreferences((prefs) => {
	            let mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
	            const newMutedWord = {
	                id: common_web_1.TID.nextStr(),
	                value: sanitizedValue,
	                targets: mutedWord.targets || [],
	                actorTarget: mutedWord.actorTarget || 'all',
	                expiresAt: mutedWord.expiresAt || undefined,
	            };
	            if (mutedWordsPref) {
	                mutedWordsPref.items.push(newMutedWord);
	                /**
	                 * Migrate any old muted words that don't have an id
	                 */
	                mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
	            }
	            else {
	                // if the pref doesn't exist, create it
	                mutedWordsPref = {
	                    $type: 'app.bsky.actor.defs#mutedWordsPref',
	                    items: [newMutedWord],
	                };
	            }
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isMutedWordsPref(p))
	                .concat(mutedWordsPref);
	        });
	    }
	    /**
	     * Convenience method to add muted words to user preferences
	     */
	    async addMutedWords(newMutedWords) {
	        await Promise.all(newMutedWords.map((word) => this.addMutedWord(word)));
	    }
	    /**
	     * @deprecated use `addMutedWords` or `addMutedWord` instead
	     */
	    async upsertMutedWords(mutedWords) {
	        await this.addMutedWords(mutedWords);
	    }
	    /**
	     * Update a muted word in user preferences.
	     */
	    async updateMutedWord(mutedWord) {
	        await this.updatePreferences((prefs) => {
	            const mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
	            if (mutedWordsPref) {
	                mutedWordsPref.items = mutedWordsPref.items.map((existingItem) => {
	                    const match = matchMutedWord(existingItem, mutedWord);
	                    if (match) {
	                        const updated = {
	                            ...existingItem,
	                            ...mutedWord,
	                        };
	                        return {
	                            id: existingItem.id || common_web_1.TID.nextStr(),
	                            value: (0, util_1.sanitizeMutedWordValue)(updated.value) || existingItem.value,
	                            targets: updated.targets || [],
	                            actorTarget: updated.actorTarget || 'all',
	                            expiresAt: updated.expiresAt || undefined,
	                        };
	                    }
	                    else {
	                        return existingItem;
	                    }
	                });
	                /**
	                 * Migrate any old muted words that don't have an id
	                 */
	                mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
	                return prefs
	                    .filter((p) => !index_1.AppBskyActorDefs.isMutedWordsPref(p))
	                    .concat(mutedWordsPref);
	            }
	            return prefs;
	        });
	    }
	    /**
	     * Remove a muted word from user preferences.
	     */
	    async removeMutedWord(mutedWord) {
	        await this.updatePreferences((prefs) => {
	            const mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
	            if (mutedWordsPref) {
	                for (let i = 0; i < mutedWordsPref.items.length; i++) {
	                    const match = matchMutedWord(mutedWordsPref.items[i], mutedWord);
	                    if (match) {
	                        mutedWordsPref.items.splice(i, 1);
	                        break;
	                    }
	                }
	                /**
	                 * Migrate any old muted words that don't have an id
	                 */
	                mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
	                return prefs
	                    .filter((p) => !index_1.AppBskyActorDefs.isMutedWordsPref(p))
	                    .concat(mutedWordsPref);
	            }
	            return prefs;
	        });
	    }
	    /**
	     * Convenience method to remove muted words from user preferences
	     */
	    async removeMutedWords(mutedWords) {
	        await Promise.all(mutedWords.map((word) => this.removeMutedWord(word)));
	    }
	    async hidePost(postUri) {
	        await this.updateHiddenPost(postUri, 'hide');
	    }
	    async unhidePost(postUri) {
	        await this.updateHiddenPost(postUri, 'unhide');
	    }
	    async bskyAppQueueNudges(nudges) {
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
	                $type: 'app.bsky.actor.defs#bskyAppStatePref',
	            };
	            pref.queuedNudges = (pref.queuedNudges || []).concat(nudges);
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p))
	                .concat(pref);
	        });
	    }
	    async bskyAppDismissNudges(nudges) {
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
	                $type: 'app.bsky.actor.defs#bskyAppStatePref',
	            };
	            nudges = Array.isArray(nudges) ? nudges : [nudges];
	            pref.queuedNudges = (pref.queuedNudges || []).filter((nudge) => !nudges.includes(nudge));
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p))
	                .concat(pref);
	        });
	    }
	    async bskyAppSetActiveProgressGuide(guide) {
	        if (guide) {
	            const result = index_1.AppBskyActorDefs.validateBskyAppProgressGuide(guide);
	            if (!result.success)
	                throw result.error;
	        }
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
	                $type: 'app.bsky.actor.defs#bskyAppStatePref',
	            };
	            pref.activeProgressGuide = guide;
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p))
	                .concat(pref);
	        });
	    }
	    /**
	     * Insert or update a NUX in user prefs
	     */
	    async bskyAppUpsertNux(nux) {
	        (0, util_1.validateNux)(nux);
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
	                $type: 'app.bsky.actor.defs#bskyAppStatePref',
	            };
	            pref.nuxs = pref.nuxs || [];
	            const existing = pref.nuxs?.find((n) => {
	                return n.id === nux.id;
	            });
	            let next;
	            if (existing) {
	                next = {
	                    id: existing.id,
	                    completed: nux.completed,
	                    data: nux.data,
	                    expiresAt: nux.expiresAt,
	                };
	            }
	            else {
	                next = nux;
	            }
	            // remove duplicates and append
	            pref.nuxs = pref.nuxs.filter((n) => n.id !== nux.id).concat(next);
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p))
	                .concat(pref);
	        });
	    }
	    /**
	     * Removes NUXs from user preferences.
	     */
	    async bskyAppRemoveNuxs(ids) {
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
	                $type: 'app.bsky.actor.defs#bskyAppStatePref',
	            };
	            pref.nuxs = (pref.nuxs || []).filter((nux) => !ids.includes(nux.id));
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p))
	                .concat(pref);
	        });
	    }
	    async setPostInteractionSettings(settings) {
	        const result = index_1.AppBskyActorDefs.validatePostInteractionSettingsPref(settings);
	        // Fool-proofing (should not be needed because of type safety)
	        if (!result.success)
	            throw result.error;
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidPostInteractionSettingsPref) || {
	                $type: 'app.bsky.actor.defs#postInteractionSettingsPref',
	            };
	            /**
	             * Matches handling of `threadgate.allow` where `undefined` means "everyone"
	             */
	            pref.threadgateAllowRules = settings.threadgateAllowRules;
	            pref.postgateEmbeddingRules = settings.postgateEmbeddingRules;
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isPostInteractionSettingsPref(p))
	                .concat(pref);
	        });
	    }
	    async setVerificationPrefs(settings) {
	        const result = index_1.AppBskyActorDefs.validateVerificationPrefs(settings);
	        // Fool-proofing (should not be needed because of type safety)
	        if (!result.success)
	            throw result.error;
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidVerificationPrefs) || {
	                $type: 'app.bsky.actor.defs#verificationPrefs',
	                hideBadges: false,
	            };
	            pref.hideBadges = settings.hideBadges;
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isVerificationPrefs(p))
	                .concat(pref);
	        });
	    }
	    /**
	     * This function updates the preferences of a user and allows for a callback function to be executed
	     * before the update.
	     * @param cb - cb is a callback function that takes in a single parameter of type
	     * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
	     * update the preferences of the user. The function is called with the current preferences as an
	     * argument and if the callback returns false, the preferences are not updated.
	     */
	    async updatePreferences(cb) {
	        try {
	            await __classPrivateFieldGet(this, _Agent_prefsLock, "f").acquireAsync();
	            const res = await this.app.bsky.actor.getPreferences({});
	            const newPrefs = cb(res.data.preferences);
	            if (newPrefs === false) {
	                return res.data.preferences;
	            }
	            await this.app.bsky.actor.putPreferences({
	                preferences: newPrefs,
	            });
	            return newPrefs;
	        }
	        finally {
	            __classPrivateFieldGet(this, _Agent_prefsLock, "f").release();
	        }
	    }
	    async updateHiddenPost(postUri, action) {
	        await this.updatePreferences((prefs) => {
	            const pref = prefs.findLast(predicate.isValidHiddenPostsPref) || {
	                $type: 'app.bsky.actor.defs#hiddenPostsPref',
	                items: [],
	            };
	            const hiddenItems = new Set(pref.items);
	            if (action === 'hide')
	                hiddenItems.add(postUri);
	            else
	                hiddenItems.delete(postUri);
	            pref.items = [...hiddenItems];
	            return prefs
	                .filter((p) => !index_1.AppBskyActorDefs.isHiddenPostsPref(p))
	                .concat(pref);
	        });
	    }
	    /**
	     * A helper specifically for updating feed preferences
	     */
	    async updateFeedPreferences(cb) {
	        let res;
	        await this.updatePreferences((prefs) => {
	            const feedsPref = prefs.findLast(predicate.isValidSavedFeedsPref) || {
	                $type: 'app.bsky.actor.defs#savedFeedsPref',
	                saved: [],
	                pinned: [],
	            };
	            res = cb(feedsPref.saved, feedsPref.pinned);
	            feedsPref.saved = res.saved;
	            feedsPref.pinned = res.pinned;
	            return prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref))
	                .concat(feedsPref);
	        });
	        return res;
	    }
	    async updateSavedFeedsV2Preferences(cb) {
	        let maybeMutatedSavedFeeds = [];
	        await this.updatePreferences((prefs) => {
	            const existingV2Pref = prefs.findLast(predicate.isValidSavedFeedsPrefV2) || {
	                $type: 'app.bsky.actor.defs#savedFeedsPrefV2',
	                items: [],
	            };
	            const newSavedFeeds = cb(existingV2Pref.items);
	            // enforce ordering: pinned first, then saved
	            existingV2Pref.items = [...newSavedFeeds].sort((a, b) => 
	            // @NOTE: preserve order of items with the same pinned status
	            a.pinned === b.pinned ? 0 : a.pinned ? -1 : 1);
	            // Store the return value
	            maybeMutatedSavedFeeds = newSavedFeeds;
	            let updatedPrefs = prefs
	                .filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref))
	                .concat(existingV2Pref);
	            /*
	             * If there's a v2 pref present, it means this account was migrated from v1
	             * to v2. During the transition period, we double write v2 prefs back to
	             * v1, but NOT the other way around.
	             */
	            let existingV1Pref = prefs.findLast(predicate.isValidSavedFeedsPref);
	            if (existingV1Pref) {
	                const { saved, pinned } = existingV1Pref;
	                const v2Compat = (0, util_1.savedFeedsToUriArrays)(
	                // v1 only supports feeds and lists
	                existingV2Pref.items.filter((i) => ['feed', 'list'].includes(i.type)));
	                existingV1Pref = {
	                    ...existingV1Pref,
	                    saved: Array.from(new Set([...saved, ...v2Compat.saved])),
	                    pinned: Array.from(new Set([...pinned, ...v2Compat.pinned])),
	                };
	                updatedPrefs = updatedPrefs
	                    .filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref))
	                    .concat(existingV1Pref);
	            }
	            return updatedPrefs;
	        });
	        return maybeMutatedSavedFeeds;
	    }
	}
	agent.Agent = Agent;
	_Agent_prefsLock = new WeakMap();
	//#region Static configuration
	/**
	 * The labelers to be used across all requests with the takedown capability
	 */
	Object.defineProperty(Agent, "appLabelers", {
	    enumerable: true,
	    configurable: true,
	    writable: true,
	    value: [const_1.BSKY_LABELER_DID]
	});
	/**
	 * Helper to transform the legacy content preferences.
	 */
	function adjustLegacyContentLabelPref(pref) {
	    let visibility = pref.visibility;
	    // adjust legacy values
	    if (visibility === 'show') {
	        visibility = 'ignore';
	    }
	    return { ...pref, visibility };
	}
	/**
	 * Re-maps legacy labels to new labels on READ. Does not save these changes to
	 * the user's preferences.
	 */
	function remapLegacyLabels(labels) {
	    const _labels = { ...labels };
	    const legacyToNewMap = {
	        gore: 'graphic-media',
	        nsfw: 'porn',
	        suggestive: 'sexual',
	    };
	    for (const labelName in _labels) {
	        const newLabelName = legacyToNewMap[labelName];
	        if (newLabelName) {
	            _labels[newLabelName] = _labels[labelName];
	        }
	    }
	    return _labels;
	}
	/**
	 * A helper to get the currently enabled labelers from the full preferences array
	 */
	function prefsArrayToLabelerDids(prefs) {
	    const labelersPref = prefs.findLast(predicate.isValidLabelersPref);
	    let dids = [];
	    if (labelersPref) {
	        dids = labelersPref.labelers.map((labeler) => labeler.did);
	    }
	    return dids;
	}
	function isBskyPrefs(v) {
	    return (v &&
	        typeof v === 'object' &&
	        'moderationPrefs' in v &&
	        isModPrefs(v.moderationPrefs));
	}
	function isModPrefs(v) {
	    return v && typeof v === 'object' && 'labelers' in v;
	}
	function migrateLegacyMutedWordsItems(items) {
	    return items.map((item) => ({
	        ...item,
	        id: item.id || common_web_1.TID.nextStr(),
	    }));
	}
	function matchMutedWord(existingWord, newWord) {
	    // id is undefined in legacy implementation
	    const existingId = existingWord.id;
	    // prefer matching based on id
	    const matchById = existingId && existingId === newWord.id;
	    // handle legacy case where id is not set
	    const legacyMatchByValue = !existingId && existingWord.value === newWord.value;
	    return matchById || legacyMatchByValue;
	}
	
	return agent;
}

var atpAgent = {};

var hasRequiredAtpAgent;

function requireAtpAgent () {
	if (hasRequiredAtpAgent) return atpAgent;
	hasRequiredAtpAgent = 1;
	Object.defineProperty(atpAgent, "__esModule", { value: true });
	atpAgent.CredentialSession = atpAgent.AtpAgent = void 0;
	const common_web_1 = requireDist$4();
	const xrpc_1 = requireDist$1();
	const agent_1 = requireAgent();
	const client_1 = requireClient();
	const lexicons_1 = requireLexicons();
	const ReadableStream = globalThis.ReadableStream;
	/**
	 * A wrapper around the {@link Agent} class that uses credential based session
	 * management. This class also exposes most of the session management methods
	 * directly.
	 *
	 * This class will be deprecated in the near future. Use {@link Agent} directly
	 * with a {@link CredentialSession} instead:
	 *
	 *  ```ts
	 *  const session = new CredentialSession({
	 *    service: new URL('https://example.com'),
	 *  })
	 *
	 *  const agent = new Agent(session)
	 *  ```
	 */
	class AtpAgent extends agent_1.Agent {
	    constructor(options) {
	        const sessionManager = options instanceof CredentialSession
	            ? options
	            : new CredentialSession(new URL(options.service), options.fetch, options.persistSession);
	        super(sessionManager);
	        Object.defineProperty(this, "sessionManager", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        // This assignment is already being done in the super constructor, but we
	        // need to do it here to make TypeScript happy.
	        this.sessionManager = sessionManager;
	        if (!(options instanceof CredentialSession) && options.headers) {
	            for (const [key, value] of options.headers) {
	                this.setHeader(key, value);
	            }
	        }
	    }
	    clone() {
	        return this.copyInto(new AtpAgent(this.sessionManager));
	    }
	    get session() {
	        return this.sessionManager.session;
	    }
	    get hasSession() {
	        return this.sessionManager.hasSession;
	    }
	    get did() {
	        return this.sessionManager.did;
	    }
	    get serviceUrl() {
	        return this.sessionManager.serviceUrl;
	    }
	    get pdsUrl() {
	        return this.sessionManager.pdsUrl;
	    }
	    get dispatchUrl() {
	        return this.sessionManager.dispatchUrl;
	    }
	    /** @deprecated use {@link serviceUrl} instead */
	    get service() {
	        return this.serviceUrl;
	    }
	    get persistSession() {
	        throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
	    }
	    set persistSession(v) {
	        throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
	    }
	    /** @deprecated use {@link AtpAgent.serviceUrl} instead */
	    getServiceUrl() {
	        return this.serviceUrl;
	    }
	    async resumeSession(session) {
	        return this.sessionManager.resumeSession(session);
	    }
	    async createAccount(data, opts) {
	        return this.sessionManager.createAccount(data, opts);
	    }
	    async login(opts) {
	        return this.sessionManager.login(opts);
	    }
	    async logout() {
	        return this.sessionManager.logout();
	    }
	}
	atpAgent.AtpAgent = AtpAgent;
	/**
	 * Credentials (username / password) based session manager. Instances of this
	 * class will typically be used as the session manager for an {@link AtpAgent}.
	 * They can also be used with an {@link XrpcClient}, if you want to use you
	 * own Lexicons.
	 */
	class CredentialSession {
	    constructor(serviceUrl, fetch = globalThis.fetch, persistSession) {
	        Object.defineProperty(this, "serviceUrl", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: serviceUrl
	        });
	        Object.defineProperty(this, "fetch", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: fetch
	        });
	        Object.defineProperty(this, "persistSession", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: persistSession
	        });
	        Object.defineProperty(this, "pdsUrl", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        }); // The PDS URL, driven by the did doc
	        Object.defineProperty(this, "session", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "refreshSessionPromise", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        /**
	         * Private {@link ComAtprotoServerNS} used to perform session management API
	         * calls on the service endpoint. Calls performed by this agent will not be
	         * authenticated using the user's session to allow proper manual configuration
	         * of the headers when performing session management operations.
	         */
	        Object.defineProperty(this, "server", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new client_1.ComAtprotoServerNS(
	            // Note that the use of the codegen "schemas" (to instantiate `this.api`),
	            // as well as the use of `ComAtprotoServerNS` will cause this class to
	            // reference (way) more code than it actually needs. It is not possible,
	            // with the current state of the codegen, to generate a client that only
	            // includes the methods that are actually used by this class. This is a
	            // known limitation that should be addressed in a future version of the
	            // codegen.
	            new xrpc_1.XrpcClient((url, init) => {
	                return (0, this.fetch)(new URL(url, this.serviceUrl), init);
	            }, lexicons_1.schemas))
	        });
	    }
	    get did() {
	        return this.session?.did;
	    }
	    get dispatchUrl() {
	        return this.pdsUrl || this.serviceUrl;
	    }
	    get hasSession() {
	        return !!this.session;
	    }
	    /**
	     * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
	     */
	    setFetch(fetch = globalThis.fetch) {
	        this.fetch = fetch;
	    }
	    async fetchHandler(url, init) {
	        // wait for any active session-refreshes to finish
	        await this.refreshSessionPromise;
	        const initialUri = new URL(url, this.dispatchUrl);
	        const initialReq = new Request(initialUri, init);
	        const initialToken = this.session?.accessJwt;
	        if (!initialToken || initialReq.headers.has('authorization')) {
	            return (0, this.fetch)(initialReq);
	        }
	        initialReq.headers.set('authorization', `Bearer ${initialToken}`);
	        const initialRes = await (0, this.fetch)(initialReq);
	        if (!this.session?.refreshJwt) {
	            return initialRes;
	        }
	        const isExpiredToken = await isErrorResponse(initialRes, [400], ['ExpiredToken']);
	        if (!isExpiredToken) {
	            return initialRes;
	        }
	        try {
	            await this.refreshSession();
	        }
	        catch {
	            return initialRes;
	        }
	        if (init?.signal?.aborted) {
	            return initialRes;
	        }
	        // The stream was already consumed. We cannot retry the request. A solution
	        // would be to tee() the input stream but that would bufferize the entire
	        // stream in memory which can lead to memory starvation. Instead, we will
	        // return the original response and let the calling code handle retries.
	        if (ReadableStream && init?.body instanceof ReadableStream) {
	            return initialRes;
	        }
	        // Return initial "ExpiredToken" response if the session was not refreshed.
	        const updatedToken = this.session?.accessJwt;
	        if (!updatedToken || updatedToken === initialToken) {
	            return initialRes;
	        }
	        // Make sure the initial request is cancelled to avoid leaking resources
	        // (NodeJS 👀): https://undici.nodejs.org/#/?id=garbage-collection
	        await initialRes.body?.cancel();
	        // We need to re-compute the URI in case the PDS endpoint has changed
	        const updatedUri = new URL(url, this.dispatchUrl);
	        const updatedReq = new Request(updatedUri, init);
	        updatedReq.headers.set('authorization', `Bearer ${updatedToken}`);
	        return await (0, this.fetch)(updatedReq);
	    }
	    /**
	     * Create a new account and hydrate its session in this agent.
	     */
	    async createAccount(data, opts) {
	        try {
	            const res = await this.server.createAccount(data, opts);
	            this.session = {
	                accessJwt: res.data.accessJwt,
	                refreshJwt: res.data.refreshJwt,
	                handle: res.data.handle,
	                did: res.data.did,
	                email: data.email,
	                emailConfirmed: false,
	                emailAuthFactor: false,
	                active: true,
	            };
	            this.persistSession?.('create', this.session);
	            this._updateApiEndpoint(res.data.didDoc);
	            return res;
	        }
	        catch (e) {
	            this.session = undefined;
	            this.persistSession?.('create-failed', undefined);
	            throw e;
	        }
	    }
	    /**
	     * Start a new session with this agent.
	     */
	    async login(opts) {
	        try {
	            const res = await this.server.createSession({
	                identifier: opts.identifier,
	                password: opts.password,
	                authFactorToken: opts.authFactorToken,
	                allowTakendown: opts.allowTakendown,
	            });
	            this.session = {
	                accessJwt: res.data.accessJwt,
	                refreshJwt: res.data.refreshJwt,
	                handle: res.data.handle,
	                did: res.data.did,
	                email: res.data.email,
	                emailConfirmed: res.data.emailConfirmed,
	                emailAuthFactor: res.data.emailAuthFactor,
	                active: res.data.active ?? true,
	                status: res.data.status,
	            };
	            this._updateApiEndpoint(res.data.didDoc);
	            this.persistSession?.('create', this.session);
	            return res;
	        }
	        catch (e) {
	            this.session = undefined;
	            this.persistSession?.('create-failed', undefined);
	            throw e;
	        }
	    }
	    async logout() {
	        if (this.session) {
	            try {
	                await this.server.deleteSession(undefined, {
	                    headers: {
	                        authorization: `Bearer ${this.session.refreshJwt}`,
	                    },
	                });
	            }
	            catch {
	                // Ignore errors
	            }
	            finally {
	                this.session = undefined;
	                this.persistSession?.('expired', undefined);
	            }
	        }
	    }
	    /**
	     * Resume a pre-existing session with this agent.
	     */
	    async resumeSession(session) {
	        this.session = session;
	        try {
	            const res = await this.server
	                .getSession(undefined, {
	                headers: { authorization: `Bearer ${session.accessJwt}` },
	            })
	                .catch(async (err) => {
	                if (err instanceof xrpc_1.XRPCError &&
	                    ['ExpiredToken', 'InvalidToken'].includes(err.error) &&
	                    session.refreshJwt) {
	                    try {
	                        const res = await this.server.refreshSession(undefined, {
	                            headers: { authorization: `Bearer ${session.refreshJwt}` },
	                        });
	                        session.accessJwt = res.data.accessJwt;
	                        session.refreshJwt = res.data.refreshJwt;
	                        return this.server.getSession(undefined, {
	                            headers: { authorization: `Bearer ${session.accessJwt}` },
	                        });
	                    }
	                    catch {
	                        // Noop, we'll throw the original error
	                    }
	                }
	                throw err;
	            });
	            if (res.data.did !== session.did) {
	                throw new xrpc_1.XRPCError(xrpc_1.ResponseType.InvalidRequest, 'Invalid session', 'InvalidDID');
	            }
	            session.email = res.data.email;
	            session.handle = res.data.handle;
	            session.emailConfirmed = res.data.emailConfirmed;
	            session.emailAuthFactor = res.data.emailAuthFactor;
	            session.active = res.data.active ?? true;
	            session.status = res.data.status;
	            // protect against concurrent session updates
	            if (this.session === session) {
	                this._updateApiEndpoint(res.data.didDoc);
	                this.persistSession?.('update', session);
	            }
	            return res;
	        }
	        catch (err) {
	            // protect against concurrent session updates
	            if (this.session === session) {
	                this.session = undefined;
	                this.persistSession?.(err instanceof xrpc_1.XRPCError &&
	                    ['ExpiredToken', 'InvalidToken'].includes(err.error)
	                    ? 'expired'
	                    : 'network-error', undefined);
	            }
	            throw err;
	        }
	    }
	    /**
	     * Internal helper to refresh sessions
	     * - Wraps the actual implementation in a promise-guard to ensure only
	     *   one refresh is attempted at a time.
	     */
	    async refreshSession() {
	        return (this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(() => {
	            this.refreshSessionPromise = undefined;
	        })));
	    }
	    /**
	     * Internal helper to refresh sessions (actual behavior)
	     */
	    async _refreshSessionInner() {
	        if (!this.session?.refreshJwt) {
	            return;
	        }
	        try {
	            const res = await this.server.refreshSession(undefined, {
	                headers: { authorization: `Bearer ${this.session.refreshJwt}` },
	            });
	            // succeeded, update the session
	            this.session = {
	                ...this.session,
	                accessJwt: res.data.accessJwt,
	                refreshJwt: res.data.refreshJwt,
	                handle: res.data.handle,
	                did: res.data.did,
	            };
	            this._updateApiEndpoint(res.data.didDoc);
	            this.persistSession?.('update', this.session);
	        }
	        catch (err) {
	            if (err instanceof xrpc_1.XRPCError &&
	                err.error &&
	                ['ExpiredToken', 'InvalidToken'].includes(err.error)) {
	                // failed due to a bad refresh token
	                this.session = undefined;
	                this.persistSession?.('expired', undefined);
	            }
	            // else: other failures should be ignored - the issue will
	            // propagate in the _dispatch() second attempt to run
	            // the request
	        }
	    }
	    /**
	     * Helper to update the pds endpoint dynamically.
	     *
	     * The session methods (create, resume, refresh) may respond with the user's
	     * did document which contains the user's canonical PDS endpoint. That endpoint
	     * may differ from the endpoint used to contact the server. We capture that
	     * PDS endpoint and update the client to use that given endpoint for future
	     * requests. (This helps ensure smooth migrations between PDSes, especially
	     * when the PDSes are operated by a single org.)
	     */
	    _updateApiEndpoint(didDoc) {
	        if ((0, common_web_1.isValidDidDoc)(didDoc)) {
	            const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
	            this.pdsUrl = endpoint ? new URL(endpoint) : undefined;
	        }
	        else {
	            // If the did doc is invalid, we clear the pdsUrl (should never happen)
	            this.pdsUrl = undefined;
	        }
	    }
	}
	atpAgent.CredentialSession = CredentialSession;
	function isErrorObject(v) {
	    return xrpc_1.errorResponseBody.safeParse(v).success;
	}
	async function isErrorResponse(response, status, errorNames) {
	    if (!status.includes(response.status))
	        return false;
	    // Some engines (react-native 👀) don't expose a response.body property...
	    // if (!response.body) return false
	    try {
	        const json = await peekJson(response, 10 * 1024);
	        return isErrorObject(json) && errorNames.includes(json.error);
	    }
	    catch (err) {
	        return false;
	    }
	}
	async function peekJson(response, maxSize = Infinity) {
	    if (extractType(response) !== 'application/json')
	        throw new Error('Not JSON');
	    if (extractLength(response) > maxSize)
	        throw new Error('Response too large');
	    return response.clone().json();
	}
	function extractLength({ headers }) {
	    return headers.get('Content-Length')
	        ? Number(headers.get('Content-Length'))
	        : NaN;
	}
	function extractType({ headers }) {
	    return headers.get('Content-Type')?.split(';')[0]?.trim();
	}
	
	return atpAgent;
}

var bskyAgent = {};

var hasRequiredBskyAgent;

function requireBskyAgent () {
	if (hasRequiredBskyAgent) return bskyAgent;
	hasRequiredBskyAgent = 1;
	Object.defineProperty(bskyAgent, "__esModule", { value: true });
	bskyAgent.BskyAgent = void 0;
	const atp_agent_1 = requireAtpAgent();
	/** @deprecated use {@link AtpAgent} instead */
	class BskyAgent extends atp_agent_1.AtpAgent {
	    clone() {
	        if (this.constructor === BskyAgent) {
	            const agent = new BskyAgent(this.sessionManager);
	            return this.copyInto(agent);
	        }
	        // sub-classes should override this method
	        throw new TypeError('Cannot clone a subclass of BskyAgent');
	    }
	}
	bskyAgent.BskyAgent = BskyAgent;
	
	return bskyAgent;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist$5;
	hasRequiredDist = 1;
	(function (exports) {
		var __createBinding = (dist$5 && dist$5.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (dist$5 && dist$5.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.lexicons = exports.default = exports.BskyAgent = exports.CredentialSession = exports.AtpAgent = exports.Agent = exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = exports.asPredicate = exports.schemas = exports.parseLanguage = exports.stringifyLex = exports.lexToJson = exports.jsonToLex = exports.jsonStringToLex = exports.BlobRef = exports.AtUri = void 0;
		const lexicon_1 = requireDist$2();
		const lexicons_1 = requireLexicons();
		var syntax_1 = requireDist$5();
		Object.defineProperty(exports, "AtUri", { enumerable: true, get: function () { return syntax_1.AtUri; } });
		var lexicon_2 = requireDist$2();
		Object.defineProperty(exports, "BlobRef", { enumerable: true, get: function () { return lexicon_2.BlobRef; } });
		Object.defineProperty(exports, "jsonStringToLex", { enumerable: true, get: function () { return lexicon_2.jsonStringToLex; } });
		Object.defineProperty(exports, "jsonToLex", { enumerable: true, get: function () { return lexicon_2.jsonToLex; } });
		Object.defineProperty(exports, "lexToJson", { enumerable: true, get: function () { return lexicon_2.lexToJson; } });
		Object.defineProperty(exports, "stringifyLex", { enumerable: true, get: function () { return lexicon_2.stringifyLex; } });
		var common_web_1 = requireDist$4();
		Object.defineProperty(exports, "parseLanguage", { enumerable: true, get: function () { return common_web_1.parseLanguage; } });
		__exportStar(requireTypes$2(), exports);
		__exportStar(require_const(), exports);
		__exportStar(requireUtil$3(), exports);
		__exportStar(requireClient(), exports);
		var lexicons_2 = requireLexicons();
		Object.defineProperty(exports, "schemas", { enumerable: true, get: function () { return lexicons_2.schemas; } });
		var util_1 = requireUtil$4();
		Object.defineProperty(exports, "asPredicate", { enumerable: true, get: function () { return util_1.asPredicate; } });
		__exportStar(requireRichText(), exports);
		__exportStar(requireSanitization(), exports);
		__exportStar(requireUnicode(), exports);
		__exportStar(requireUtil$1(), exports);
		__exportStar(requireModeration(), exports);
		__exportStar(requireTypes(), exports);
		__exportStar(requireMocker(), exports);
		var labels_1 = requireLabels();
		Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", { enumerable: true, get: function () { return labels_1.DEFAULT_LABEL_SETTINGS; } });
		Object.defineProperty(exports, "LABELS", { enumerable: true, get: function () { return labels_1.LABELS; } });
		var agent_1 = requireAgent();
		Object.defineProperty(exports, "Agent", { enumerable: true, get: function () { return agent_1.Agent; } });
		var atp_agent_1 = requireAtpAgent();
		Object.defineProperty(exports, "AtpAgent", { enumerable: true, get: function () { return atp_agent_1.AtpAgent; } });
		var atp_agent_2 = requireAtpAgent();
		Object.defineProperty(exports, "CredentialSession", { enumerable: true, get: function () { return atp_agent_2.CredentialSession; } });
		var bsky_agent_1 = requireBskyAgent();
		Object.defineProperty(exports, "BskyAgent", { enumerable: true, get: function () { return bsky_agent_1.BskyAgent; } });
		var atp_agent_3 = requireAtpAgent();
		/** @deprecated */
		Object.defineProperty(exports, "default", { enumerable: true, get: function () { return atp_agent_3.AtpAgent; } });
		// Expose a copy to prevent alteration of the internal Lexicon instance used by
		// the AtpBaseClient class.
		exports.lexicons = new lexicon_1.Lexicons(lexicons_1.lexicons);
		
	} (dist$5));
	return dist$5;
}

requireDist();

const backup = Deno.env.get("CL_SYS_BACKUP");
const toot = Deno.env.get("CL_TOOT");
Deno.readTextFileSync(Deno.env.get("CL_BID")).trim();
Deno.readTextFileSync(Deno.env.get("CL_BPASS")).trim();
const nsechex = Deno.readTextFileSync(Deno.env.get("CL_NSECHEX")).trim();
const relays = [
  "wss://nostr.mom",
  "wss://relay.damus.io",
  "wss://nos.lol"
];
const state = {};
const post = Deno.readTextFileSync('post.txt').trim();
const tags = [];
post.matchAll(/#\w+/gsm).forEach(j => {
  tags.push(j[0].slice(1));
});

let cmd, rep;
if (tags.length > 0) {
  cmd = new Deno.Command("nostril", {
    args: ['--envelope', '--sec', nsechex, '--tagn', tags.length, ...tags, '--content', `${post}`]
  });
}
else {
  cmd = new Deno.Command("nostril", {
    args: ['--envelope', '--sec', nsechex, '--content', `${post}`]
  });
}
rep = cmd.outputSync();
if (post.length < 4) {
  Deno.exit();
}
const relays_none=[];
for (let i in relays_none) {
  state[i] = state[i] || {};
  state[i].envelope = new TextDecoder().decode(rep.stdout);
  state[i].websocket = new WebSocket(relays[i]);
  state[i].websocket.addEventListener("open", () => {
    state[i].websocket.send(state[i].envelope);
  });
  state[i].websocket.addEventListener("message", (e) => {
    state[i].data = e.data;
    state[i].websocket.close();
  });
}
if (post.length < 501 && 6==9) ;
if (post.length < 301 && 6==9) ;
if (post.length < 501) {
  cmd = new Deno.Command(toot, {
    args: ['post', `${post}`]
  });
  rep = cmd.outputSync();
}
const past = JSON.parse(Deno.readTextFileSync('past.json'));
const dt = new Date();
dt.toISOString().replaceAll(":", "").replaceAll("-", "").replaceAll(".", "");
//past.unshift({ "ts": tss, "post": post, "nostr": state[0].envelope })
Deno.writeTextFileSync('past.json', JSON.stringify(past, null, 2));
Deno.remove('/home/divine/websites/site/sys/post.txt');
const site = {};
site.page = Deno.readTextFileSync("assets/page.html");
site.css = Deno.readTextFileSync("assets/style.css");
site.posts = JSON.parse(Deno.readTextFileSync("past.json"));
await create(site, backup);
